
STM32VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057cc  080057cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057d4  080057d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080057dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000480  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f8  200004f8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ef7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bb7  00000000  00000000  00033f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00036b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d98  00000000  00000000  00037a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022122  00000000  00000000  000387d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001345c  00000000  00000000  0005a8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae9d  00000000  00000000  0006dd4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138beb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b38  00000000  00000000  00138c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005738 	.word	0x08005738

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08005738 	.word	0x08005738

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <resetAllButton>:
int eventButtonDrop[3]= {0, 0, 0};

int modeStatus = INITMODES;

void resetAllButton()
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
    for (int i= 0; i < 3; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e011      	b.n	80004f0 <resetAllButton+0x30>
    {
    	eventButtonPressed[i]= 0;
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <resetAllButton+0x44>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	eventButtonDrop[i]= 0;
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <resetAllButton+0x48>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2100      	movs	r1, #0
 80004dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	timerNormalState[i]= 0;
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <resetAllButton+0x4c>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2100      	movs	r1, #0
 80004e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i= 0; i < 3; i++)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	ddea      	ble.n	80004cc <resetAllButton+0xc>
    }
}
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	200000a0 	.word	0x200000a0
 8000508:	200000ac 	.word	0x200000ac
 800050c:	20000094 	.word	0x20000094

08000510 <implementButton>:

void implementButton(int indexButton)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	switch (indexButton)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b02      	cmp	r3, #2
 800051c:	f000 80dd 	beq.w	80006da <implementButton+0x1ca>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	f300 8110 	bgt.w	8000748 <implementButton+0x238>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d003      	beq.n	8000536 <implementButton+0x26>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d072      	beq.n	800061a <implementButton+0x10a>
			default:
				break;
			}
			break;
		default:
			break;
 8000534:	e108      	b.n	8000748 <implementButton+0x238>
			switch (eventButtonPressed[indexButton])
 8000536:	4a88      	ldr	r2, [pc, #544]	; (8000758 <implementButton+0x248>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d863      	bhi.n	800060a <implementButton+0xfa>
 8000542:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <implementButton+0x38>)
 8000544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000548:	08000559 	.word	0x08000559
 800054c:	08000583 	.word	0x08000583
 8000550:	080005c3 	.word	0x080005c3
 8000554:	080005e7 	.word	0x080005e7
				if (eventButtonDrop[indexButton]== 0)
 8000558:	4a80      	ldr	r2, [pc, #512]	; (800075c <implementButton+0x24c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d10c      	bne.n	800057e <implementButton+0x6e>
					switch (modeStatus)
 8000564:	4b7e      	ldr	r3, [pc, #504]	; (8000760 <implementButton+0x250>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b04      	cmp	r3, #4
 800056a:	d002      	beq.n	8000572 <implementButton+0x62>
 800056c:	2b05      	cmp	r3, #5
 800056e:	d003      	beq.n	8000578 <implementButton+0x68>
							break;
 8000570:	e006      	b.n	8000580 <implementButton+0x70>
							runManualModeFunction();
 8000572:	f000 fcef 	bl	8000f54 <runManualModeFunction>
							break;
 8000576:	e003      	b.n	8000580 <implementButton+0x70>
							runTuningMode();
 8000578:	f001 fdd2 	bl	8002120 <runTuningMode>
							break;
 800057c:	e000      	b.n	8000580 <implementButton+0x70>
				}
 800057e:	bf00      	nop
				break;
 8000580:	e04a      	b.n	8000618 <implementButton+0x108>
				if (eventButtonDrop[indexButton]== 0)
 8000582:	4a76      	ldr	r2, [pc, #472]	; (800075c <implementButton+0x24c>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10c      	bne.n	80005a8 <implementButton+0x98>
					switch (modeStatus)
 800058e:	4b74      	ldr	r3, [pc, #464]	; (8000760 <implementButton+0x250>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d002      	beq.n	800059c <implementButton+0x8c>
 8000596:	2b05      	cmp	r3, #5
 8000598:	d003      	beq.n	80005a2 <implementButton+0x92>
							break;
 800059a:	e011      	b.n	80005c0 <implementButton+0xb0>
							runManualModeFunction();
 800059c:	f000 fcda 	bl	8000f54 <runManualModeFunction>
							break;
 80005a0:	e00e      	b.n	80005c0 <implementButton+0xb0>
							runTuningMode();
 80005a2:	f001 fdbd 	bl	8002120 <runTuningMode>
							break;
 80005a6:	e00b      	b.n	80005c0 <implementButton+0xb0>
					if (eventButtonDrop[indexButton]== 1)
 80005a8:	4a6c      	ldr	r2, [pc, #432]	; (800075c <implementButton+0x24c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d12c      	bne.n	800060e <implementButton+0xfe>
						modeStatus= NORMALMODE;
 80005b4:	4b6a      	ldr	r3, [pc, #424]	; (8000760 <implementButton+0x250>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	601a      	str	r2, [r3, #0]
						beginNormalMode();
 80005ba:	f000 ff9b 	bl	80014f4 <beginNormalMode>
				break;
 80005be:	e026      	b.n	800060e <implementButton+0xfe>
 80005c0:	e025      	b.n	800060e <implementButton+0xfe>
				if (eventButtonDrop[indexButton]== 1 || eventButtonDrop[indexButton]== 2)
 80005c2:	4a66      	ldr	r2, [pc, #408]	; (800075c <implementButton+0x24c>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d005      	beq.n	80005da <implementButton+0xca>
 80005ce:	4a63      	ldr	r2, [pc, #396]	; (800075c <implementButton+0x24c>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d11b      	bne.n	8000612 <implementButton+0x102>
					modeStatus= MANUALMODE;
 80005da:	4b61      	ldr	r3, [pc, #388]	; (8000760 <implementButton+0x250>)
 80005dc:	2204      	movs	r2, #4
 80005de:	601a      	str	r2, [r3, #0]
					beginManualMode();
 80005e0:	f000 fda0 	bl	8001124 <beginManualMode>
				break;
 80005e4:	e015      	b.n	8000612 <implementButton+0x102>
				if (eventButtonDrop[indexButton]== 2 || eventButtonDrop[indexButton]== 3)
 80005e6:	4a5d      	ldr	r2, [pc, #372]	; (800075c <implementButton+0x24c>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d005      	beq.n	80005fe <implementButton+0xee>
 80005f2:	4a5a      	ldr	r2, [pc, #360]	; (800075c <implementButton+0x24c>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d10b      	bne.n	8000616 <implementButton+0x106>
					modeStatus= TUNINGMODE;
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <implementButton+0x250>)
 8000600:	2205      	movs	r2, #5
 8000602:	601a      	str	r2, [r3, #0]
					beginTuningMode();
 8000604:	f001 fe1a 	bl	800223c <beginTuningMode>
				break;
 8000608:	e005      	b.n	8000616 <implementButton+0x106>
				break;
 800060a:	bf00      	nop
 800060c:	e09d      	b.n	800074a <implementButton+0x23a>
				break;
 800060e:	bf00      	nop
 8000610:	e09b      	b.n	800074a <implementButton+0x23a>
				break;
 8000612:	bf00      	nop
 8000614:	e099      	b.n	800074a <implementButton+0x23a>
				break;
 8000616:	bf00      	nop
			break;
 8000618:	e097      	b.n	800074a <implementButton+0x23a>
			switch (eventButtonPressed[indexButton])
 800061a:	4a4f      	ldr	r2, [pc, #316]	; (8000758 <implementButton+0x248>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d03e      	beq.n	80006a4 <implementButton+0x194>
 8000626:	2b02      	cmp	r3, #2
 8000628:	dc4f      	bgt.n	80006ca <implementButton+0x1ba>
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <implementButton+0x124>
 800062e:	2b01      	cmp	r3, #1
 8000630:	d00d      	beq.n	800064e <implementButton+0x13e>
				break;
 8000632:	e04a      	b.n	80006ca <implementButton+0x1ba>
				if (eventButtonDrop[indexButton]== 0)
 8000634:	4a49      	ldr	r2, [pc, #292]	; (800075c <implementButton+0x24c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d146      	bne.n	80006ce <implementButton+0x1be>
					if (modeStatus== TUNINGMODE)
 8000640:	4b47      	ldr	r3, [pc, #284]	; (8000760 <implementButton+0x250>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b05      	cmp	r3, #5
 8000646:	d142      	bne.n	80006ce <implementButton+0x1be>
						modifyTuningMode();
 8000648:	f001 fe0e 	bl	8002268 <modifyTuningMode>
				break;
 800064c:	e03f      	b.n	80006ce <implementButton+0x1be>
				if (eventButtonDrop[indexButton]== 0)
 800064e:	4a43      	ldr	r2, [pc, #268]	; (800075c <implementButton+0x24c>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d106      	bne.n	8000668 <implementButton+0x158>
					if (modeStatus== TUNINGMODE)
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <implementButton+0x250>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b05      	cmp	r3, #5
 8000660:	d137      	bne.n	80006d2 <implementButton+0x1c2>
						modifyTuningMode();
 8000662:	f001 fe01 	bl	8002268 <modifyTuningMode>
				break;
 8000666:	e034      	b.n	80006d2 <implementButton+0x1c2>
					if (eventButtonDrop[indexButton]== 1)
 8000668:	4a3c      	ldr	r2, [pc, #240]	; (800075c <implementButton+0x24c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d113      	bne.n	800069c <implementButton+0x18c>
						switch (modeStatus)
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <implementButton+0x250>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b05      	cmp	r3, #5
 800067a:	d00c      	beq.n	8000696 <implementButton+0x186>
 800067c:	2b05      	cmp	r3, #5
 800067e:	dc0f      	bgt.n	80006a0 <implementButton+0x190>
 8000680:	2b03      	cmp	r3, #3
 8000682:	d002      	beq.n	800068a <implementButton+0x17a>
 8000684:	2b04      	cmp	r3, #4
 8000686:	d003      	beq.n	8000690 <implementButton+0x180>
								break;
 8000688:	e00a      	b.n	80006a0 <implementButton+0x190>
								beginNormalMode();
 800068a:	f000 ff33 	bl	80014f4 <beginNormalMode>
								break;
 800068e:	e008      	b.n	80006a2 <implementButton+0x192>
								runManualModeFunction();
 8000690:	f000 fc60 	bl	8000f54 <runManualModeFunction>
								break;
 8000694:	e005      	b.n	80006a2 <implementButton+0x192>
								modifyTuningMode();
 8000696:	f001 fde7 	bl	8002268 <modifyTuningMode>
								break;
 800069a:	e002      	b.n	80006a2 <implementButton+0x192>
					}
 800069c:	bf00      	nop
 800069e:	e018      	b.n	80006d2 <implementButton+0x1c2>
								break;
 80006a0:	bf00      	nop
				break;
 80006a2:	e016      	b.n	80006d2 <implementButton+0x1c2>
				if (eventButtonDrop[indexButton]== 1 || eventButtonDrop[indexButton]== 2)
 80006a4:	4a2d      	ldr	r2, [pc, #180]	; (800075c <implementButton+0x24c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d005      	beq.n	80006bc <implementButton+0x1ac>
 80006b0:	4a2a      	ldr	r2, [pc, #168]	; (800075c <implementButton+0x24c>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d10c      	bne.n	80006d6 <implementButton+0x1c6>
					if (modeStatus== TUNINGMODE)
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <implementButton+0x250>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d108      	bne.n	80006d6 <implementButton+0x1c6>
						saveTuningMode();
 80006c4:	f001 fe32 	bl	800232c <saveTuningMode>
				break;
 80006c8:	e005      	b.n	80006d6 <implementButton+0x1c6>
				break;
 80006ca:	bf00      	nop
 80006cc:	e03d      	b.n	800074a <implementButton+0x23a>
				break;
 80006ce:	bf00      	nop
 80006d0:	e03b      	b.n	800074a <implementButton+0x23a>
				break;
 80006d2:	bf00      	nop
 80006d4:	e039      	b.n	800074a <implementButton+0x23a>
				break;
 80006d6:	bf00      	nop
			break;
 80006d8:	e037      	b.n	800074a <implementButton+0x23a>
			switch (eventButtonPressed[indexButton])
 80006da:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <implementButton+0x248>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d002      	beq.n	80006ec <implementButton+0x1dc>
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d019      	beq.n	800071e <implementButton+0x20e>
				break;
 80006ea:	e02c      	b.n	8000746 <implementButton+0x236>
				if (eventButtonDrop[indexButton]== 1)
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <implementButton+0x24c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d110      	bne.n	800071a <implementButton+0x20a>
					switch (modeStatus)
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <implementButton+0x250>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d002      	beq.n	8000706 <implementButton+0x1f6>
 8000700:	2b04      	cmp	r3, #4
 8000702:	d005      	beq.n	8000710 <implementButton+0x200>
							break;
 8000704:	e00a      	b.n	800071c <implementButton+0x20c>
							beginWalkNormalMode();
 8000706:	f000 ff0b 	bl	8001520 <beginWalkNormalMode>
							ledWalkOperationNormalMode();
 800070a:	f000 f9db 	bl	8000ac4 <ledWalkOperationNormalMode>
							break;
 800070e:	e005      	b.n	800071c <implementButton+0x20c>
							beginWalkManualMode();
 8000710:	f000 fd1c 	bl	800114c <beginWalkManualMode>
							ledWalkOperationManualMode();
 8000714:	f000 fa18 	bl	8000b48 <ledWalkOperationManualMode>
							break;
 8000718:	e000      	b.n	800071c <implementButton+0x20c>
				}
 800071a:	bf00      	nop
				break;
 800071c:	e013      	b.n	8000746 <implementButton+0x236>
				if (eventButtonDrop[indexButton]== 1 || eventButtonDrop[indexButton]== 2)
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <implementButton+0x24c>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d005      	beq.n	8000736 <implementButton+0x226>
 800072a:	4a0c      	ldr	r2, [pc, #48]	; (800075c <implementButton+0x24c>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d106      	bne.n	8000744 <implementButton+0x234>
					modeStatus= INITMODES;
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <implementButton+0x250>)
 8000738:	2202      	movs	r2, #2
 800073a:	601a      	str	r2, [r3, #0]
					offAllSingLEDs();
 800073c:	f000 f964 	bl	8000a08 <offAllSingLEDs>
					offSingleRedGreenWalk();
 8000740:	f000 f9aa 	bl	8000a98 <offSingleRedGreenWalk>
				break;
 8000744:	bf00      	nop
			break;
 8000746:	e000      	b.n	800074a <implementButton+0x23a>
			break;
 8000748:	bf00      	nop
	}
	resetAllButton();
 800074a:	f7ff feb9 	bl	80004c0 <resetAllButton>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000a0 	.word	0x200000a0
 800075c:	200000ac 	.word	0x200000ac
 8000760:	20000050 	.word	0x20000050

08000764 <getInputButton>:

void getInputButton()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	e0be      	b.n	80008ee <getInputButton+0x18a>
	{
		state1Button[i]= state2Button[i];
 8000770:	4a63      	ldr	r2, [pc, #396]	; (8000900 <getInputButton+0x19c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000778:	4962      	ldr	r1, [pc, #392]	; (8000904 <getInputButton+0x1a0>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 8000780:	4a61      	ldr	r2, [pc, #388]	; (8000908 <getInputButton+0x1a4>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000788:	495d      	ldr	r1, [pc, #372]	; (8000900 <getInputButton+0x19c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000790:	4a5e      	ldr	r2, [pc, #376]	; (800090c <getInputButton+0x1a8>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000798:	495d      	ldr	r1, [pc, #372]	; (8000910 <getInputButton+0x1ac>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4610      	mov	r0, r2
 80007a4:	f002 fb08 	bl	8002db8 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4619      	mov	r1, r3
 80007ac:	4a56      	ldr	r2, [pc, #344]	; (8000908 <getInputButton+0x1a4>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 80007b4:	4a53      	ldr	r2, [pc, #332]	; (8000904 <getInputButton+0x1a0>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007bc:	4950      	ldr	r1, [pc, #320]	; (8000900 <getInputButton+0x19c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	f040 808f 	bne.w	80008e8 <getInputButton+0x184>
 80007ca:	4a4d      	ldr	r2, [pc, #308]	; (8000900 <getInputButton+0x19c>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d2:	494d      	ldr	r1, [pc, #308]	; (8000908 <getInputButton+0x1a4>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007da:	429a      	cmp	r2, r3
 80007dc:	f040 8084 	bne.w	80008e8 <getInputButton+0x184>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 80007e0:	4a4c      	ldr	r2, [pc, #304]	; (8000914 <getInputButton+0x1b0>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e8:	4946      	ldr	r1, [pc, #280]	; (8000904 <getInputButton+0x1a0>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d031      	beq.n	8000858 <getInputButton+0xf4>
			{
				switch (state0Button[i])
 80007f4:	4a47      	ldr	r2, [pc, #284]	; (8000914 <getInputButton+0x1b0>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <getInputButton+0xa2>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d014      	beq.n	800082e <getInputButton+0xca>
						state0Button[i]= PRESS_STATE;
						eventButtonPressed[i]+= 1;
						timerLongPress[i]= 300;
						break;
					default:
						break;
 8000804:	e070      	b.n	80008e8 <getInputButton+0x184>
						state0Button[i]= NORMAL_STATE;
 8000806:	4a43      	ldr	r2, [pc, #268]	; (8000914 <getInputButton+0x1b0>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2101      	movs	r1, #1
 800080c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonDrop[i]+= 1;
 8000810:	4a41      	ldr	r2, [pc, #260]	; (8000918 <getInputButton+0x1b4>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	493f      	ldr	r1, [pc, #252]	; (8000918 <getInputButton+0x1b4>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerNormalState[i]= 15;
 8000822:	4a3e      	ldr	r2, [pc, #248]	; (800091c <getInputButton+0x1b8>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	210f      	movs	r1, #15
 8000828:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800082c:	e05c      	b.n	80008e8 <getInputButton+0x184>
						state0Button[i]= PRESS_STATE;
 800082e:	4a39      	ldr	r2, [pc, #228]	; (8000914 <getInputButton+0x1b0>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2100      	movs	r1, #0
 8000834:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonPressed[i]+= 1;
 8000838:	4a39      	ldr	r2, [pc, #228]	; (8000920 <getInputButton+0x1bc>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	4937      	ldr	r1, [pc, #220]	; (8000920 <getInputButton+0x1bc>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerLongPress[i]= 300;
 800084a:	4a36      	ldr	r2, [pc, #216]	; (8000924 <getInputButton+0x1c0>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8000856:	e047      	b.n	80008e8 <getInputButton+0x184>
				}
			}
			else
			{
				if (state0Button[i]== NORMAL_STATE)
 8000858:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <getInputButton+0x1b0>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d118      	bne.n	8000896 <getInputButton+0x132>
				{
					if (timerNormalState[i] > 0)
 8000864:	4a2d      	ldr	r2, [pc, #180]	; (800091c <getInputButton+0x1b8>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dd3b      	ble.n	80008e8 <getInputButton+0x184>
					{
						timerNormalState[i]--;
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <getInputButton+0x1b8>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	4928      	ldr	r1, [pc, #160]	; (800091c <getInputButton+0x1b8>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerNormalState[i] <= 0)
 8000882:	4a26      	ldr	r2, [pc, #152]	; (800091c <getInputButton+0x1b8>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088a:	2b00      	cmp	r3, #0
 800088c:	dc2c      	bgt.n	80008e8 <getInputButton+0x184>
						{
							implementButton(i);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fe3e 	bl	8000510 <implementButton>
 8000894:	e028      	b.n	80008e8 <getInputButton+0x184>
						}
					}
				}
				else   // state0Button[i]== PRESS_SATE;
				{
					if (timerLongPress[i] > 0)
 8000896:	4a23      	ldr	r2, [pc, #140]	; (8000924 <getInputButton+0x1c0>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd22      	ble.n	80008e8 <getInputButton+0x184>
					{
						timerLongPress[i]--;
 80008a2:	4a20      	ldr	r2, [pc, #128]	; (8000924 <getInputButton+0x1c0>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	491d      	ldr	r1, [pc, #116]	; (8000924 <getInputButton+0x1c0>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerLongPress[i] <= 0)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <getInputButton+0x1c0>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	dc13      	bgt.n	80008e8 <getInputButton+0x184>
						{
							if (i== 0)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d105      	bne.n	80008d2 <getInputButton+0x16e>
								timerLongPress[i]= 300;
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <getInputButton+0x1c0>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80008ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							if (i== 1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d104      	bne.n	80008e2 <getInputButton+0x17e>
								timerLongPress[i]= 20;
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <getInputButton+0x1c0>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2114      	movs	r1, #20
 80008de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							implementButton(i);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff fe14 	bl	8000510 <implementButton>
	for (int i= 0; i < 3; i++)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	f77f af3d 	ble.w	8000770 <getInputButton+0xc>
					}
				}
			}
		}
	}
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000002c 	.word	0x2000002c
 8000904:	20000020 	.word	0x20000020
 8000908:	20000038 	.word	0x20000038
 800090c:	20000000 	.word	0x20000000
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000014 	.word	0x20000014
 8000918:	200000ac 	.word	0x200000ac
 800091c:	20000094 	.word	0x20000094
 8000920:	200000a0 	.word	0x200000a0
 8000924:	20000044 	.word	0x20000044

08000928 <update7SEGBuffer>:
int durationLedGreen = 3;
int durationLedYellow = 2;

int led_buffer[3]= {0, 0, 0};
void update7SEGBuffer(int time, int signalUpdate)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	switch (signalUpdate)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d011      	beq.n	800095c <update7SEGBuffer+0x34>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2b02      	cmp	r3, #2
 800093c:	dc12      	bgt.n	8000964 <update7SEGBuffer+0x3c>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d003      	beq.n	800094c <update7SEGBuffer+0x24>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d004      	beq.n	8000954 <update7SEGBuffer+0x2c>
		break;
	case UPDATEMODE:
		led_buffer[2] = time;
		break;
	default:
		break;
 800094a:	e00b      	b.n	8000964 <update7SEGBuffer+0x3c>
		led_buffer[0] = time;
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <update7SEGBuffer+0x4c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
		break;
 8000952:	e008      	b.n	8000966 <update7SEGBuffer+0x3e>
		led_buffer[1] = time;
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <update7SEGBuffer+0x4c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6053      	str	r3, [r2, #4]
		break;
 800095a:	e004      	b.n	8000966 <update7SEGBuffer+0x3e>
		led_buffer[2] = time;
 800095c:	4a05      	ldr	r2, [pc, #20]	; (8000974 <update7SEGBuffer+0x4c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6093      	str	r3, [r2, #8]
		break;
 8000962:	e000      	b.n	8000966 <update7SEGBuffer+0x3e>
		break;
 8000964:	bf00      	nop
	}
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	200000b8 	.word	0x200000b8

08000978 <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC1);
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffd0 	bl	8000928 <update7SEGBuffer>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC2);
 8000998:	2101      	movs	r1, #1
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffc4 	bl	8000928 <update7SEGBuffer>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATEMODE);
 80009b0:	2102      	movs	r1, #2
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffb8 	bl	8000928 <update7SEGBuffer>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWTUNING);
 80009c4:	2105      	movs	r1, #5
 80009c6:	2008      	movs	r0, #8
 80009c8:	f000 fdbe 	bl	8001548 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, YELLOWTUNING);
 80009cc:	2105      	movs	r1, #5
 80009ce:	2009      	movs	r0, #9
 80009d0:	f000 fdba 	bl	8001548 <controlSingleLedTraffic>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <blinkingRED>:

void blinkingRED()
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDTUNING);
 80009dc:	2103      	movs	r1, #3
 80009de:	2008      	movs	r0, #8
 80009e0:	f000 fdb2 	bl	8001548 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, REDTUNING);
 80009e4:	2103      	movs	r1, #3
 80009e6:	2009      	movs	r0, #9
 80009e8:	f000 fdae 	bl	8001548 <controlSingleLedTraffic>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <blinkingGREEN>:

void blinkingGREEN()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENTUNING);
 80009f4:	2104      	movs	r1, #4
 80009f6:	2008      	movs	r0, #8
 80009f8:	f000 fda6 	bl	8001548 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, GREENTUNING);
 80009fc:	2104      	movs	r1, #4
 80009fe:	2009      	movs	r0, #9
 8000a00:	f000 fda2 	bl	8001548 <controlSingleLedTraffic>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <offAllSingLEDs>:

void offAllSingLEDs()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, OFF);
 8000a0c:	2106      	movs	r1, #6
 8000a0e:	2008      	movs	r0, #8
 8000a10:	f000 fd9a 	bl	8001548 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, OFF);
 8000a14:	2106      	movs	r1, #6
 8000a16:	2009      	movs	r0, #9
 8000a18:	f000 fd96 	bl	8001548 <controlSingleLedTraffic>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <onAllSingLEDs>:

void onAllSingLEDs()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, ON);
 8000a24:	2107      	movs	r1, #7
 8000a26:	2008      	movs	r0, #8
 8000a28:	f000 fd8e 	bl	8001548 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, ON);
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	2009      	movs	r0, #9
 8000a30:	f000 fd8a 	bl	8001548 <controlSingleLedTraffic>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <onSingleRedTraffic1>:

void onSingleRedTraffic1()
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDNORMAL);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2008      	movs	r0, #8
 8000a40:	f000 fd82 	bl	8001548 <controlSingleLedTraffic>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <onSingleYellowTraffic1>:

void onSingleYellowTraffic1()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWNORMAL);
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	2008      	movs	r0, #8
 8000a50:	f000 fd7a 	bl	8001548 <controlSingleLedTraffic>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENNORMAL);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2008      	movs	r0, #8
 8000a60:	f000 fd72 	bl	8001548 <controlSingleLedTraffic>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, REDNORMAL);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2009      	movs	r0, #9
 8000a70:	f000 fd6a 	bl	8001548 <controlSingleLedTraffic>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <onSingleYellowTraffic2>:

void onSingleYellowTraffic2()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, YELLOWNORMAL);
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	2009      	movs	r0, #9
 8000a80:	f000 fd62 	bl	8001548 <controlSingleLedTraffic>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, GREENNORMAL);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2009      	movs	r0, #9
 8000a90:	f000 fd5a 	bl	8001548 <controlSingleLedTraffic>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <offSingleRedGreenWalk>:

void offSingleRedGreenWalk()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	controlSingleLedWalk(OFFLEDWALK);
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f000 fe55 	bl	800174c <controlSingleLedWalk>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <onGreenOffRedWalk>:
void onGreenOffRedWalk()
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONGREENOFFREDWALK);
 8000aaa:	200b      	movs	r0, #11
 8000aac:	f000 fe4e 	bl	800174c <controlSingleLedWalk>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <onRedOffGreenWalk>:
void onRedOffGreenWalk()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONREDOFFGREENWALK);
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f000 fe47 	bl	800174c <controlSingleLedWalk>
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <ledWalkOperationNormalMode>:

int numberFreq;
int statusLedWalkButton3Press;

void ledWalkOperationNormalMode()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    switch (statusTraffic1)
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <ledWalkOperationNormalMode+0x78>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d026      	beq.n	8000b1e <ledWalkOperationNormalMode+0x5a>
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dc2e      	bgt.n	8000b32 <ledWalkOperationNormalMode+0x6e>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d002      	beq.n	8000ade <ledWalkOperationNormalMode+0x1a>
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d012      	beq.n	8000b02 <ledWalkOperationNormalMode+0x3e>
			offSingleRedGreenWalk();
		else	
			onRedOffGreenWalk();
        break;
    default:
        break;
 8000adc:	e029      	b.n	8000b32 <ledWalkOperationNormalMode+0x6e>
		if (numberFreq <= 0)
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <ledWalkOperationNormalMode+0x7c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	dc04      	bgt.n	8000af0 <ledWalkOperationNormalMode+0x2c>
			buzzerOff();
 8000ae6:	f000 ff3f 	bl	8001968 <buzzerOff>
			offSingleRedGreenWalk();
 8000aea:	f7ff ffd5 	bl	8000a98 <offSingleRedGreenWalk>
        break;
 8000aee:	e022      	b.n	8000b36 <ledWalkOperationNormalMode+0x72>
			onGreenOffRedWalk();
 8000af0:	f7ff ffd9 	bl	8000aa6 <onGreenOffRedWalk>
			if (counterLedRed1 <= 3)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <ledWalkOperationNormalMode+0x80>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	dc1c      	bgt.n	8000b36 <ledWalkOperationNormalMode+0x72>
				buzzerBegin();
 8000afc:	f000 ff22 	bl	8001944 <buzzerBegin>
        break;
 8000b00:	e019      	b.n	8000b36 <ledWalkOperationNormalMode+0x72>
		if (numberFreq <= 0)
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <ledWalkOperationNormalMode+0x7c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	dc04      	bgt.n	8000b14 <ledWalkOperationNormalMode+0x50>
			offSingleRedGreenWalk();
 8000b0a:	f7ff ffc5 	bl	8000a98 <offSingleRedGreenWalk>
			buzzerOff();
 8000b0e:	f000 ff2b 	bl	8001968 <buzzerOff>
        break;
 8000b12:	e011      	b.n	8000b38 <ledWalkOperationNormalMode+0x74>
			onRedOffGreenWalk();
 8000b14:	f7ff ffce 	bl	8000ab4 <onRedOffGreenWalk>
			buzzerOff();
 8000b18:	f000 ff26 	bl	8001968 <buzzerOff>
        break;
 8000b1c:	e00c      	b.n	8000b38 <ledWalkOperationNormalMode+0x74>
		if (numberFreq <= 0)
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <ledWalkOperationNormalMode+0x7c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	dc02      	bgt.n	8000b2c <ledWalkOperationNormalMode+0x68>
			offSingleRedGreenWalk();
 8000b26:	f7ff ffb7 	bl	8000a98 <offSingleRedGreenWalk>
        break;
 8000b2a:	e005      	b.n	8000b38 <ledWalkOperationNormalMode+0x74>
			onRedOffGreenWalk();
 8000b2c:	f7ff ffc2 	bl	8000ab4 <onRedOffGreenWalk>
        break;
 8000b30:	e002      	b.n	8000b38 <ledWalkOperationNormalMode+0x74>
        break;
 8000b32:	bf00      	nop
 8000b34:	e000      	b.n	8000b38 <ledWalkOperationNormalMode+0x74>
        break;
 8000b36:	bf00      	nop
    }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000c8 	.word	0x200000c8
 8000b40:	200000e0 	.word	0x200000e0
 8000b44:	20000144 	.word	0x20000144

08000b48 <ledWalkOperationManualMode>:

void ledWalkOperationManualMode()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	switch (statusManualMode)
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <ledWalkOperationManualMode+0x7c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d832      	bhi.n	8000bbc <ledWalkOperationManualMode+0x74>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <ledWalkOperationManualMode+0x14>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000ba9 	.word	0x08000ba9
 8000b64:	08000b95 	.word	0x08000b95
 8000b68:	08000b81 	.word	0x08000b81
	{
	case REDGREENMANUAL:
		if (numberFreq <= 0)
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <ledWalkOperationManualMode+0x80>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dc02      	bgt.n	8000b7a <ledWalkOperationManualMode+0x32>
			offSingleRedGreenWalk();
 8000b74:	f7ff ff90 	bl	8000a98 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 8000b78:	e021      	b.n	8000bbe <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000b7a:	f7ff ff94 	bl	8000aa6 <onGreenOffRedWalk>
		break;
 8000b7e:	e01e      	b.n	8000bbe <ledWalkOperationManualMode+0x76>
	case YELLOWREDMANUAL:
		if (numberFreq <= 0)
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <ledWalkOperationManualMode+0x80>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dc02      	bgt.n	8000b8e <ledWalkOperationManualMode+0x46>
			offSingleRedGreenWalk();
 8000b88:	f7ff ff86 	bl	8000a98 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 8000b8c:	e017      	b.n	8000bbe <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000b8e:	f7ff ff8a 	bl	8000aa6 <onGreenOffRedWalk>
		break;
 8000b92:	e014      	b.n	8000bbe <ledWalkOperationManualMode+0x76>
	case GREENREDMANUAL:
		if (numberFreq <= 0)
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <ledWalkOperationManualMode+0x80>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dc02      	bgt.n	8000ba2 <ledWalkOperationManualMode+0x5a>
			offSingleRedGreenWalk();
 8000b9c:	f7ff ff7c 	bl	8000a98 <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 8000ba0:	e00d      	b.n	8000bbe <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 8000ba2:	f7ff ff87 	bl	8000ab4 <onRedOffGreenWalk>
		break;
 8000ba6:	e00a      	b.n	8000bbe <ledWalkOperationManualMode+0x76>
	case REDYELLOWMANUAL:
		if (numberFreq <= 0)
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <ledWalkOperationManualMode+0x80>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	dc02      	bgt.n	8000bb6 <ledWalkOperationManualMode+0x6e>
			offSingleRedGreenWalk();
 8000bb0:	f7ff ff72 	bl	8000a98 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();

		break;
 8000bb4:	e003      	b.n	8000bbe <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000bb6:	f7ff ff76 	bl	8000aa6 <onGreenOffRedWalk>
		break;
 8000bba:	e000      	b.n	8000bbe <ledWalkOperationManualMode+0x76>
	default:
		break;
 8000bbc:	bf00      	nop
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000c4 	.word	0x200000c4
 8000bc8:	200000e0 	.word	0x200000e0

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f001 fd40 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f83c 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f000 f8e4 	bl	8000da4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bdc:	f000 f896 	bl	8000d0c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000be0:	f001 fc3c 	bl	800245c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000be4:	f000 fdf0 	bl	80017c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000be8:	4813      	ldr	r0, [pc, #76]	; (8000c38 <main+0x6c>)
 8000bea:	f002 fdc9 	bl	8003780 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000bee:	f001 f8ed 	bl	8001dcc <SCH_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <main+0x70>)
 8000bf6:	f002 fe8d 	bl	8003914 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(task1, 1000, 1000, 1);
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	480e      	ldr	r0, [pc, #56]	; (8000c40 <main+0x74>)
 8000c06:	f000 fedf 	bl	80019c8 <SCH_Add_Task>
  SCH_Add_Task(task2, 500, 500, 2);
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <main+0x78>)
 8000c16:	f000 fed7 	bl	80019c8 <SCH_Add_Task>
  SCH_Add_Task(task3, 10, 10, 3);
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	210a      	movs	r1, #10
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <main+0x7c>)
 8000c22:	f000 fed1 	bl	80019c8 <SCH_Add_Task>
  SCH_Add_Task(task4, 200, 200, 4);
 8000c26:	2304      	movs	r3, #4
 8000c28:	22c8      	movs	r2, #200	; 0xc8
 8000c2a:	21c8      	movs	r1, #200	; 0xc8
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <main+0x80>)
 8000c2e:	f000 fecb 	bl	80019c8 <SCH_Add_Task>

	while (1)
	{
    SCH_Dispatch_Tasks();
 8000c32:	f001 f8a1 	bl	8001d78 <SCH_Dispatch_Tasks>
 8000c36:	e7fc      	b.n	8000c32 <main+0x66>
 8000c38:	200000e8 	.word	0x200000e8
 8000c3c:	20000148 	.word	0x20000148
 8000c40:	08001e59 	.word	0x08001e59
 8000c44:	08001e75 	.word	0x08001e75
 8000c48:	08001e8d 	.word	0x08001e8d
 8000c4c:	08001e99 	.word	0x08001e99

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 fd20 	bl	80056a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <SystemClock_Config+0xb4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <SystemClock_Config+0xb4>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <SystemClock_Config+0xb4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <SystemClock_Config+0xb8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <SystemClock_Config+0xb8>)
 8000c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <SystemClock_Config+0xb8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 f8c5 	bl	8002e50 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ccc:	f000 f930 	bl	8000f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fb28 	bl	8003340 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cf6:	f000 f91b 	bl	8000f30 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3750      	adds	r7, #80	; 0x50
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40007000 	.word	0x40007000

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d32:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d40:	2209      	movs	r2, #9
 8000d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d52:	f002 fcc5 	bl	80036e0 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d5c:	f000 f8e8 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d6e:	f003 f863 	bl	8003e38 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d78:	f000 f8da 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d8a:	f003 fc55 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 f8cc 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200000e8 	.word	0x200000e8

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b4f      	ldr	r3, [pc, #316]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a4a      	ldr	r2, [pc, #296]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a43      	ldr	r2, [pc, #268]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a3c      	ldr	r2, [pc, #240]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <MX_GPIO_Init+0x164>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segA_Pin|segB_Pin|segC_Pin|segD_Pin
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	217f      	movs	r1, #127	; 0x7f
 8000e2e:	4837      	ldr	r0, [pc, #220]	; (8000f0c <MX_GPIO_Init+0x168>)
 8000e30:	f001 ffda 	bl	8002de8 <HAL_GPIO_WritePin>
                          |segE_Pin|segF_Pin|segG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000e34:	2201      	movs	r2, #1
 8000e36:	213f      	movs	r1, #63	; 0x3f
 8000e38:	4835      	ldr	r0, [pc, #212]	; (8000f10 <MX_GPIO_Init+0x16c>)
 8000e3a:	f001 ffd5 	bl	8002de8 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, en2_Pin|en3_Pin|en4_Pin|en0_Pin
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000e44:	4832      	ldr	r0, [pc, #200]	; (8000f10 <MX_GPIO_Init+0x16c>)
 8000e46:	f001 ffcf 	bl	8002de8 <HAL_GPIO_WritePin>
                          |en1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WALKGREEN_Pin|WALKRED_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000e50:	4830      	ldr	r0, [pc, #192]	; (8000f14 <MX_GPIO_Init+0x170>)
 8000e52:	f001 ffc9 	bl	8002de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
                           segE_Pin segF_Pin segG_Pin */
  GPIO_InitStruct.Pin = segA_Pin|segB_Pin|segC_Pin|segD_Pin
 8000e56:	237f      	movs	r3, #127	; 0x7f
 8000e58:	617b      	str	r3, [r7, #20]
                          |segE_Pin|segF_Pin|segG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4827      	ldr	r0, [pc, #156]	; (8000f0c <MX_GPIO_Init+0x168>)
 8000e6e:	f001 fe07 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000e72:	233f      	movs	r3, #63	; 0x3f
 8000e74:	617b      	str	r3, [r7, #20]
                          |GREEN2_Pin|YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4821      	ldr	r0, [pc, #132]	; (8000f10 <MX_GPIO_Init+0x16c>)
 8000e8a:	f001 fdf9 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : en2_Pin en3_Pin en4_Pin en0_Pin
                           en1_Pin */
  GPIO_InitStruct.Pin = en2_Pin|en3_Pin|en4_Pin|en0_Pin
 8000e8e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e92:	617b      	str	r3, [r7, #20]
                          |en1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481a      	ldr	r0, [pc, #104]	; (8000f10 <MX_GPIO_Init+0x16c>)
 8000ea8:	f001 fdea 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : WALKGREEN_Pin WALKRED_Pin */
  GPIO_InitStruct.Pin = WALKGREEN_Pin|WALKRED_Pin;
 8000eac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <MX_GPIO_Init+0x170>)
 8000ec6:	f001 fddb 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : button2_Pin */
  GPIO_InitStruct.Pin = button2_Pin;
 8000eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button2_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	480e      	ldr	r0, [pc, #56]	; (8000f18 <MX_GPIO_Init+0x174>)
 8000ee0:	f001 fdce 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button3_Pin;
 8000ee4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_GPIO_Init+0x168>)
 8000efa:	f001 fdc1 	bl	8002a80 <HAL_GPIO_Init>

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	; 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40020800 	.word	0x40020800

08000f1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
//	 runTimer();
  SCH_Update();
 8000f24:	f000 fd32 	bl	800198c <SCH_Update>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <initStatusManualMode>:
#include "uart.h"

int statusManualMode= INITMANUAL;

void initStatusManualMode()
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	statusManualMode= INITMANUAL;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <initStatusManualMode+0x14>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	200000c4 	.word	0x200000c4

08000f54 <runManualModeFunction>:
void runManualModeFunction()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	switch (statusManualMode) 
 8000f58:	4b6c      	ldr	r3, [pc, #432]	; (800110c <runManualModeFunction+0x1b8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	f200 80cd 	bhi.w	80010fc <runManualModeFunction+0x1a8>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <runManualModeFunction+0x14>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f7d 	.word	0x08000f7d
 8000f6c:	08000fab 	.word	0x08000fab
 8000f70:	08000ffb 	.word	0x08000ffb
 8000f74:	08001051 	.word	0x08001051
 8000f78:	080010a7 	.word	0x080010a7
	{
		case INITMANUAL:
			statusManualMode= REDGREENMANUAL;
 8000f7c:	4b63      	ldr	r3, [pc, #396]	; (800110c <runManualModeFunction+0x1b8>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8000f82:	2002      	movs	r0, #2
 8000f84:	f7ff fd10 	bl	80009a8 <update7SEGBufferMode>
			offAllSingLEDs();
 8000f88:	f7ff fd3e 	bl	8000a08 <offAllSingLEDs>
			onSingleRedTraffic1();
 8000f8c:	f7ff fd54 	bl	8000a38 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8000f90:	f7ff fd7a 	bl	8000a88 <onSingleGreenTraffic2>
			update7SEGBufferTraffic1(durationLedRed);
 8000f94:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <runManualModeFunction+0x1bc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fced 	bl	8000978 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedGreen);
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <runManualModeFunction+0x1c0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fcf4 	bl	8000990 <update7SEGBufferTraffic2>
			break;
 8000fa8:	e0a9      	b.n	80010fe <runManualModeFunction+0x1aa>
		case REDGREENMANUAL:
			statusManualMode= REDYELLOWMANUAL;
 8000faa:	4b58      	ldr	r3, [pc, #352]	; (800110c <runManualModeFunction+0x1b8>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000fb0:	4b56      	ldr	r3, [pc, #344]	; (800110c <runManualModeFunction+0x1b8>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b58      	ldr	r3, [pc, #352]	; (8001118 <runManualModeFunction+0x1c4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d10b      	bne.n	8000fd4 <runManualModeFunction+0x80>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000fbc:	4b57      	ldr	r3, [pc, #348]	; (800111c <runManualModeFunction+0x1c8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dd03      	ble.n	8000fcc <runManualModeFunction+0x78>
 8000fc4:	4b55      	ldr	r3, [pc, #340]	; (800111c <runManualModeFunction+0x1c8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e001      	b.n	8000fd0 <runManualModeFunction+0x7c>
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <runManualModeFunction+0x1c8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <runManualModeFunction+0x1c8>)
 8000fd2:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000fd4:	f7ff fdb8 	bl	8000b48 <ledWalkOperationManualMode>
			offAllSingLEDs();
 8000fd8:	f7ff fd16 	bl	8000a08 <offAllSingLEDs>
			onSingleRedTraffic1();
 8000fdc:	f7ff fd2c 	bl	8000a38 <onSingleRedTraffic1>
			onSingleYellowTraffic2();
 8000fe0:	f7ff fd4a 	bl	8000a78 <onSingleYellowTraffic2>
			update7SEGBufferTraffic1(durationLedRed);
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <runManualModeFunction+0x1bc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fcc5 	bl	8000978 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedYellow);
 8000fee:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <runManualModeFunction+0x1cc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fccc 	bl	8000990 <update7SEGBufferTraffic2>
			break;
 8000ff8:	e081      	b.n	80010fe <runManualModeFunction+0x1aa>
		case REDYELLOWMANUAL:
			statusManualMode= GREENREDMANUAL;
 8000ffa:	4b44      	ldr	r3, [pc, #272]	; (800110c <runManualModeFunction+0x1b8>)
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8001000:	4b42      	ldr	r3, [pc, #264]	; (800110c <runManualModeFunction+0x1b8>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b44      	ldr	r3, [pc, #272]	; (8001118 <runManualModeFunction+0x1c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d10b      	bne.n	8001024 <runManualModeFunction+0xd0>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 800100c:	4b43      	ldr	r3, [pc, #268]	; (800111c <runManualModeFunction+0x1c8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dd03      	ble.n	800101c <runManualModeFunction+0xc8>
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <runManualModeFunction+0x1c8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	e001      	b.n	8001020 <runManualModeFunction+0xcc>
 800101c:	4b3f      	ldr	r3, [pc, #252]	; (800111c <runManualModeFunction+0x1c8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a3e      	ldr	r2, [pc, #248]	; (800111c <runManualModeFunction+0x1c8>)
 8001022:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8001024:	f7ff fd90 	bl	8000b48 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8001028:	2002      	movs	r0, #2
 800102a:	f7ff fcbd 	bl	80009a8 <update7SEGBufferMode>
			offAllSingLEDs();
 800102e:	f7ff fceb 	bl	8000a08 <offAllSingLEDs>
			onSingleGreenTraffic1();
 8001032:	f7ff fd11 	bl	8000a58 <onSingleGreenTraffic1>
			onSingleRedTraffic2();
 8001036:	f7ff fd17 	bl	8000a68 <onSingleRedTraffic2>
			update7SEGBufferTraffic1(durationLedGreen);
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <runManualModeFunction+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc9a 	bl	8000978 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedRed);
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <runManualModeFunction+0x1bc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fca1 	bl	8000990 <update7SEGBufferTraffic2>
			break;
 800104e:	e056      	b.n	80010fe <runManualModeFunction+0x1aa>
		case GREENREDMANUAL:
			statusManualMode= YELLOWREDMANUAL;
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <runManualModeFunction+0x1b8>)
 8001052:	2204      	movs	r2, #4
 8001054:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <runManualModeFunction+0x1b8>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <runManualModeFunction+0x1c4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d10b      	bne.n	800107a <runManualModeFunction+0x126>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <runManualModeFunction+0x1c8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	dd03      	ble.n	8001072 <runManualModeFunction+0x11e>
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <runManualModeFunction+0x1c8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	e001      	b.n	8001076 <runManualModeFunction+0x122>
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <runManualModeFunction+0x1c8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a29      	ldr	r2, [pc, #164]	; (800111c <runManualModeFunction+0x1c8>)
 8001078:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 800107a:	f7ff fd65 	bl	8000b48 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 800107e:	2002      	movs	r0, #2
 8001080:	f7ff fc92 	bl	80009a8 <update7SEGBufferMode>
			offAllSingLEDs();
 8001084:	f7ff fcc0 	bl	8000a08 <offAllSingLEDs>
			onSingleYellowTraffic1();
 8001088:	f7ff fcde 	bl	8000a48 <onSingleYellowTraffic1>
			onSingleRedTraffic2();
 800108c:	f7ff fcec 	bl	8000a68 <onSingleRedTraffic2>
			update7SEGBufferTraffic1(durationLedYellow);
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <runManualModeFunction+0x1cc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fc6f 	bl	8000978 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedRed);
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <runManualModeFunction+0x1bc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fc76 	bl	8000990 <update7SEGBufferTraffic2>
			break;
 80010a4:	e02b      	b.n	80010fe <runManualModeFunction+0x1aa>
		case YELLOWREDMANUAL:
			statusManualMode= REDGREENMANUAL;
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <runManualModeFunction+0x1b8>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <runManualModeFunction+0x1b8>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <runManualModeFunction+0x1c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d10b      	bne.n	80010d0 <runManualModeFunction+0x17c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <runManualModeFunction+0x1c8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dd03      	ble.n	80010c8 <runManualModeFunction+0x174>
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <runManualModeFunction+0x1c8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	e001      	b.n	80010cc <runManualModeFunction+0x178>
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <runManualModeFunction+0x1c8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <runManualModeFunction+0x1c8>)
 80010ce:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 80010d0:	f7ff fd3a 	bl	8000b48 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff fc67 	bl	80009a8 <update7SEGBufferMode>
			offAllSingLEDs();
 80010da:	f7ff fc95 	bl	8000a08 <offAllSingLEDs>
			onSingleRedTraffic1();
 80010de:	f7ff fcab 	bl	8000a38 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 80010e2:	f7ff fcd1 	bl	8000a88 <onSingleGreenTraffic2>
			update7SEGBufferTraffic1(durationLedRed);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <runManualModeFunction+0x1bc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fc44 	bl	8000978 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedGreen);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <runManualModeFunction+0x1c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fc4b 	bl	8000990 <update7SEGBufferTraffic2>
			break;
 80010fa:	e000      	b.n	80010fe <runManualModeFunction+0x1aa>
		default:
			break;
 80010fc:	bf00      	nop
	}
	printTerminalInfoModeTraffic1();
 80010fe:	f001 fa11 	bl	8002524 <printTerminalInfoModeTraffic1>
	printTerminalInfoTraffic2();
 8001102:	f001 f9d5 	bl	80024b0 <printTerminalInfoTraffic2>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000c4 	.word	0x200000c4
 8001110:	20000060 	.word	0x20000060
 8001114:	20000064 	.word	0x20000064
 8001118:	200000e4 	.word	0x200000e4
 800111c:	200000e0 	.word	0x200000e0
 8001120:	20000068 	.word	0x20000068

08001124 <beginManualMode>:

void beginManualMode()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <beginManualMode+0x24>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
	buzzerOff();
 800112e:	f000 fc1b 	bl	8001968 <buzzerOff>
	offSingleRedGreenWalk();
 8001132:	f7ff fcb1 	bl	8000a98 <offSingleRedGreenWalk>
	update7SEGBufferMode(2);
 8001136:	2002      	movs	r0, #2
 8001138:	f7ff fc36 	bl	80009a8 <update7SEGBufferMode>
	initStatusManualMode();
 800113c:	f7ff fefe 	bl	8000f3c <initStatusManualMode>
	runManualModeFunction();
 8001140:	f7ff ff08 	bl	8000f54 <runManualModeFunction>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000e0 	.word	0x200000e0

0800114c <beginWalkManualMode>:

void beginWalkManualMode()
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	numberFreq= 2;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <beginWalkManualMode+0x1c>)
 8001152:	2202      	movs	r2, #2
 8001154:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusManualMode;
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <beginWalkManualMode+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <beginWalkManualMode+0x24>)
 800115c:	6013      	str	r3, [r2, #0]
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	200000e0 	.word	0x200000e0
 800116c:	200000c4 	.word	0x200000c4
 8001170:	200000e4 	.word	0x200000e4

08001174 <initStatusNormalMode>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void initStatusNormalMode()
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	statusTraffic1 = INITNORMAL;
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <initStatusNormalMode+0x1c>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
	statusTraffic2 = INITNORMAL;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <initStatusNormalMode+0x20>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200000c8 	.word	0x200000c8
 8001194:	200000cc 	.word	0x200000cc

08001198 <runNormalMode>:
void runNormalMode()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 800119c:	4b96      	ldr	r3, [pc, #600]	; (80013f8 <runNormalMode+0x260>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	f200 80d7 	bhi.w	8001354 <runNormalMode+0x1bc>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <runNormalMode+0x14>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011bd 	.word	0x080011bd
 80011b0:	080011df 	.word	0x080011df
 80011b4:	08001265 	.word	0x08001265
 80011b8:	080012dd 	.word	0x080012dd
	{
	case INITNORMAL:
		counterLedRed1 = durationLedRed;
 80011bc:	4b8f      	ldr	r3, [pc, #572]	; (80013fc <runNormalMode+0x264>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a8f      	ldr	r2, [pc, #572]	; (8001400 <runNormalMode+0x268>)
 80011c2:	6013      	str	r3, [r2, #0]
		statusTraffic1 = REDNORMAL;
 80011c4:	4b8c      	ldr	r3, [pc, #560]	; (80013f8 <runNormalMode+0x260>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 80011ca:	f7ff fc35 	bl	8000a38 <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 80011ce:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <runNormalMode+0x268>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fbd0 	bl	8000978 <update7SEGBufferTraffic1>
		printTerminalInfoModeTraffic1();
 80011d8:	f001 f9a4 	bl	8002524 <printTerminalInfoModeTraffic1>
		break;
 80011dc:	e0c1      	b.n	8001362 <runNormalMode+0x1ca>
	case REDNORMAL:
		if (counterLedRed1 > 0)
 80011de:	4b88      	ldr	r3, [pc, #544]	; (8001400 <runNormalMode+0x268>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f340 80b8 	ble.w	8001358 <runNormalMode+0x1c0>
		{
			counterLedRed1--;
 80011e8:	4b85      	ldr	r3, [pc, #532]	; (8001400 <runNormalMode+0x268>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	4a84      	ldr	r2, [pc, #528]	; (8001400 <runNormalMode+0x268>)
 80011f0:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 80011f2:	4b83      	ldr	r3, [pc, #524]	; (8001400 <runNormalMode+0x268>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	dc24      	bgt.n	8001244 <runNormalMode+0xac>
			{
				counterLedGreen1 = durationLedGreen;
 80011fa:	4b82      	ldr	r3, [pc, #520]	; (8001404 <runNormalMode+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a82      	ldr	r2, [pc, #520]	; (8001408 <runNormalMode+0x270>)
 8001200:	6013      	str	r3, [r2, #0]
				statusTraffic1 = GREENNORMAL;
 8001202:	4b7d      	ldr	r3, [pc, #500]	; (80013f8 <runNormalMode+0x260>)
 8001204:	2202      	movs	r2, #2
 8001206:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8001208:	4b80      	ldr	r3, [pc, #512]	; (800140c <runNormalMode+0x274>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b7a      	ldr	r3, [pc, #488]	; (80013f8 <runNormalMode+0x260>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d10b      	bne.n	800122c <runNormalMode+0x94>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001214:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <runNormalMode+0x278>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dd03      	ble.n	8001224 <runNormalMode+0x8c>
 800121c:	4b7c      	ldr	r3, [pc, #496]	; (8001410 <runNormalMode+0x278>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	e001      	b.n	8001228 <runNormalMode+0x90>
 8001224:	4b7a      	ldr	r3, [pc, #488]	; (8001410 <runNormalMode+0x278>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a79      	ldr	r2, [pc, #484]	; (8001410 <runNormalMode+0x278>)
 800122a:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 800122c:	f7ff fc4a 	bl	8000ac4 <ledWalkOperationNormalMode>
				onSingleGreenTraffic1();
 8001230:	f7ff fc12 	bl	8000a58 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8001234:	4b74      	ldr	r3, [pc, #464]	; (8001408 <runNormalMode+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fb9d 	bl	8000978 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800123e:	f001 f971 	bl	8002524 <printTerminalInfoModeTraffic1>
				onSingleRedTraffic1();
				update7SEGBufferTraffic1(counterLedRed1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 8001242:	e089      	b.n	8001358 <runNormalMode+0x1c0>
				if (counterLedRed1== 3)
 8001244:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <runNormalMode+0x268>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d101      	bne.n	8001250 <runNormalMode+0xb8>
					buzzerSetup();
 800124c:	f000 fb34 	bl	80018b8 <buzzerSetup>
				onSingleRedTraffic1();
 8001250:	f7ff fbf2 	bl	8000a38 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001254:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <runNormalMode+0x268>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fb8d 	bl	8000978 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800125e:	f001 f961 	bl	8002524 <printTerminalInfoModeTraffic1>
		break;
 8001262:	e079      	b.n	8001358 <runNormalMode+0x1c0>
	case GREENNORMAL:
		if (counterLedGreen1 > 0)
 8001264:	4b68      	ldr	r3, [pc, #416]	; (8001408 <runNormalMode+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	dd77      	ble.n	800135c <runNormalMode+0x1c4>
		{
			counterLedGreen1--;
 800126c:	4b66      	ldr	r3, [pc, #408]	; (8001408 <runNormalMode+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3b01      	subs	r3, #1
 8001272:	4a65      	ldr	r2, [pc, #404]	; (8001408 <runNormalMode+0x270>)
 8001274:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <runNormalMode+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	dc24      	bgt.n	80012c8 <runNormalMode+0x130>
			{
				counterLedYellow1 = durationLedYellow;
 800127e:	4b65      	ldr	r3, [pc, #404]	; (8001414 <runNormalMode+0x27c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a65      	ldr	r2, [pc, #404]	; (8001418 <runNormalMode+0x280>)
 8001284:	6013      	str	r3, [r2, #0]
				statusTraffic1 = YELLOWNORMAL;
 8001286:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <runNormalMode+0x260>)
 8001288:	2203      	movs	r2, #3
 800128a:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 800128c:	4b5f      	ldr	r3, [pc, #380]	; (800140c <runNormalMode+0x274>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <runNormalMode+0x260>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d10b      	bne.n	80012b0 <runNormalMode+0x118>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001298:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <runNormalMode+0x278>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd03      	ble.n	80012a8 <runNormalMode+0x110>
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <runNormalMode+0x278>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	e001      	b.n	80012ac <runNormalMode+0x114>
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <runNormalMode+0x278>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <runNormalMode+0x278>)
 80012ae:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 80012b0:	f7ff fc08 	bl	8000ac4 <ledWalkOperationNormalMode>
				onSingleYellowTraffic1();
 80012b4:	f7ff fbc8 	bl	8000a48 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 80012b8:	4b57      	ldr	r3, [pc, #348]	; (8001418 <runNormalMode+0x280>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fb5b 	bl	8000978 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 80012c2:	f001 f92f 	bl	8002524 <printTerminalInfoModeTraffic1>
				onSingleGreenTraffic1();
				update7SEGBufferTraffic1(counterLedGreen1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 80012c6:	e049      	b.n	800135c <runNormalMode+0x1c4>
				onSingleGreenTraffic1();
 80012c8:	f7ff fbc6 	bl	8000a58 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 80012cc:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <runNormalMode+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fb51 	bl	8000978 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 80012d6:	f001 f925 	bl	8002524 <printTerminalInfoModeTraffic1>
		break;
 80012da:	e03f      	b.n	800135c <runNormalMode+0x1c4>
	case YELLOWNORMAL:
		if (counterLedYellow1 > 0)
 80012dc:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <runNormalMode+0x280>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dd3d      	ble.n	8001360 <runNormalMode+0x1c8>
		{
			counterLedYellow1--;
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <runNormalMode+0x280>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a4b      	ldr	r2, [pc, #300]	; (8001418 <runNormalMode+0x280>)
 80012ec:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <runNormalMode+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dc24      	bgt.n	8001340 <runNormalMode+0x1a8>
			{
				counterLedRed1 = durationLedRed;
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <runNormalMode+0x264>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a41      	ldr	r2, [pc, #260]	; (8001400 <runNormalMode+0x268>)
 80012fc:	6013      	str	r3, [r2, #0]
				statusTraffic1 = REDNORMAL;
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <runNormalMode+0x260>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8001304:	4b41      	ldr	r3, [pc, #260]	; (800140c <runNormalMode+0x274>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b3b      	ldr	r3, [pc, #236]	; (80013f8 <runNormalMode+0x260>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d10b      	bne.n	8001328 <runNormalMode+0x190>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <runNormalMode+0x278>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd03      	ble.n	8001320 <runNormalMode+0x188>
 8001318:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <runNormalMode+0x278>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	e001      	b.n	8001324 <runNormalMode+0x18c>
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <runNormalMode+0x278>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a3a      	ldr	r2, [pc, #232]	; (8001410 <runNormalMode+0x278>)
 8001326:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8001328:	f7ff fbcc 	bl	8000ac4 <ledWalkOperationNormalMode>
				onSingleRedTraffic1();
 800132c:	f7ff fb84 	bl	8000a38 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001330:	4b33      	ldr	r3, [pc, #204]	; (8001400 <runNormalMode+0x268>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fb1f 	bl	8000978 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800133a:	f001 f8f3 	bl	8002524 <printTerminalInfoModeTraffic1>
				onSingleYellowTraffic1();
				update7SEGBufferTraffic1(counterLedYellow1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 800133e:	e00f      	b.n	8001360 <runNormalMode+0x1c8>
				onSingleYellowTraffic1();
 8001340:	f7ff fb82 	bl	8000a48 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <runNormalMode+0x280>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fb15 	bl	8000978 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800134e:	f001 f8e9 	bl	8002524 <printTerminalInfoModeTraffic1>
		break;
 8001352:	e005      	b.n	8001360 <runNormalMode+0x1c8>
	default:
		break;
 8001354:	bf00      	nop
 8001356:	e004      	b.n	8001362 <runNormalMode+0x1ca>
		break;
 8001358:	bf00      	nop
 800135a:	e002      	b.n	8001362 <runNormalMode+0x1ca>
		break;
 800135c:	bf00      	nop
 800135e:	e000      	b.n	8001362 <runNormalMode+0x1ca>
		break;
 8001360:	bf00      	nop
	}
	switch (statusTraffic2)
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <runNormalMode+0x284>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b03      	cmp	r3, #3
 8001368:	f200 80ae 	bhi.w	80014c8 <runNormalMode+0x330>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <runNormalMode+0x1dc>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001385 	.word	0x08001385
 8001378:	08001479 	.word	0x08001479
 800137c:	080013a7 	.word	0x080013a7
 8001380:	08001429 	.word	0x08001429
	{
	case INITNORMAL:
		statusTraffic2 = GREENNORMAL;
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <runNormalMode+0x284>)
 8001386:	2202      	movs	r2, #2
 8001388:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <runNormalMode+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a24      	ldr	r2, [pc, #144]	; (8001420 <runNormalMode+0x288>)
 8001390:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 8001392:	f7ff fb79 	bl	8000a88 <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <runNormalMode+0x288>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff faf8 	bl	8000990 <update7SEGBufferTraffic2>
		printTerminalInfoTraffic2();
 80013a0:	f001 f886 	bl	80024b0 <printTerminalInfoTraffic2>
		break;
 80013a4:	e097      	b.n	80014d6 <runNormalMode+0x33e>
	case GREENNORMAL:
		if (counterLedGreen2 > 0)
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <runNormalMode+0x288>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f340 808e 	ble.w	80014cc <runNormalMode+0x334>
		{
			counterLedGreen2--;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <runNormalMode+0x288>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <runNormalMode+0x288>)
 80013b8:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <runNormalMode+0x288>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dc10      	bgt.n	80013e4 <runNormalMode+0x24c>
			{
				counterLedYellow2 = durationLedYellow;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <runNormalMode+0x27c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <runNormalMode+0x28c>)
 80013c8:	6013      	str	r3, [r2, #0]
				statusTraffic2 = YELLOWNORMAL;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <runNormalMode+0x284>)
 80013cc:	2203      	movs	r2, #3
 80013ce:	601a      	str	r2, [r3, #0]
				onSingleYellowTraffic2();
 80013d0:	f7ff fb52 	bl	8000a78 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <runNormalMode+0x28c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fad9 	bl	8000990 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80013de:	f001 f867 	bl	80024b0 <printTerminalInfoTraffic2>
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 80013e2:	e073      	b.n	80014cc <runNormalMode+0x334>
				onSingleGreenTraffic2();
 80013e4:	f7ff fb50 	bl	8000a88 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <runNormalMode+0x288>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff facf 	bl	8000990 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80013f2:	f001 f85d 	bl	80024b0 <printTerminalInfoTraffic2>
		break;
 80013f6:	e069      	b.n	80014cc <runNormalMode+0x334>
 80013f8:	200000c8 	.word	0x200000c8
 80013fc:	20000060 	.word	0x20000060
 8001400:	20000144 	.word	0x20000144
 8001404:	20000064 	.word	0x20000064
 8001408:	20000134 	.word	0x20000134
 800140c:	200000e4 	.word	0x200000e4
 8001410:	200000e0 	.word	0x200000e0
 8001414:	20000068 	.word	0x20000068
 8001418:	20000138 	.word	0x20000138
 800141c:	200000cc 	.word	0x200000cc
 8001420:	20000140 	.word	0x20000140
 8001424:	2000013c 	.word	0x2000013c
	case YELLOWNORMAL:
		if (counterLedYellow2 > 0)
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <runNormalMode+0x344>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd4f      	ble.n	80014d0 <runNormalMode+0x338>
		{
			counterLedYellow2--;
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <runNormalMode+0x344>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	4a29      	ldr	r2, [pc, #164]	; (80014dc <runNormalMode+0x344>)
 8001438:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <runNormalMode+0x344>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	dc10      	bgt.n	8001464 <runNormalMode+0x2cc>
			{
				counterLedRed2 = durationLedRed;
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <runNormalMode+0x348>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <runNormalMode+0x34c>)
 8001448:	6013      	str	r3, [r2, #0]
				statusTraffic2 = REDNORMAL;
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <runNormalMode+0x350>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 8001450:	f7ff fb0a 	bl	8000a68 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <runNormalMode+0x34c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fa99 	bl	8000990 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 800145e:	f001 f827 	bl	80024b0 <printTerminalInfoTraffic2>
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 8001462:	e035      	b.n	80014d0 <runNormalMode+0x338>
				onSingleYellowTraffic2();
 8001464:	f7ff fb08 	bl	8000a78 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <runNormalMode+0x344>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fa8f 	bl	8000990 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001472:	f001 f81d 	bl	80024b0 <printTerminalInfoTraffic2>
		break;
 8001476:	e02b      	b.n	80014d0 <runNormalMode+0x338>
	case REDNORMAL:
		if (counterLedRed2 > 0)
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <runNormalMode+0x34c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd29      	ble.n	80014d4 <runNormalMode+0x33c>
		{
			counterLedRed2--;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <runNormalMode+0x34c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3b01      	subs	r3, #1
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <runNormalMode+0x34c>)
 8001488:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <runNormalMode+0x34c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	dc10      	bgt.n	80014b4 <runNormalMode+0x31c>
			{
				counterLedGreen2 = durationLedGreen;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <runNormalMode+0x354>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <runNormalMode+0x358>)
 8001498:	6013      	str	r3, [r2, #0]
				statusTraffic2 = GREENNORMAL;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <runNormalMode+0x350>)
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 80014a0:	f7ff faf2 	bl	8000a88 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <runNormalMode+0x358>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fa71 	bl	8000990 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80014ae:	f000 ffff 	bl	80024b0 <printTerminalInfoTraffic2>
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 80014b2:	e00f      	b.n	80014d4 <runNormalMode+0x33c>
				onSingleRedTraffic2();
 80014b4:	f7ff fad8 	bl	8000a68 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <runNormalMode+0x34c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fa67 	bl	8000990 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80014c2:	f000 fff5 	bl	80024b0 <printTerminalInfoTraffic2>
		break;
 80014c6:	e005      	b.n	80014d4 <runNormalMode+0x33c>
	default:
		break;
 80014c8:	bf00      	nop
 80014ca:	e004      	b.n	80014d6 <runNormalMode+0x33e>
		break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <runNormalMode+0x33e>
		break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <runNormalMode+0x33e>
		break;
 80014d4:	bf00      	nop
	}
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000013c 	.word	0x2000013c
 80014e0:	20000060 	.word	0x20000060
 80014e4:	20000130 	.word	0x20000130
 80014e8:	200000cc 	.word	0x200000cc
 80014ec:	20000064 	.word	0x20000064
 80014f0:	20000140 	.word	0x20000140

080014f4 <beginNormalMode>:

void beginNormalMode()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	numberFreq= 0;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <beginNormalMode+0x28>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
	buzzerOff();
 80014fe:	f000 fa33 	bl	8001968 <buzzerOff>
	offSingleRedGreenWalk();
 8001502:	f7ff fac9 	bl	8000a98 <offSingleRedGreenWalk>
	offAllSingLEDs();
 8001506:	f7ff fa7f 	bl	8000a08 <offAllSingLEDs>
	update7SEGBufferMode(1);
 800150a:	2001      	movs	r0, #1
 800150c:	f7ff fa4c 	bl	80009a8 <update7SEGBufferMode>
	initStatusNormalMode();
 8001510:	f7ff fe30 	bl	8001174 <initStatusNormalMode>
	runNormalMode();
 8001514:	f7ff fe40 	bl	8001198 <runNormalMode>
////	setTimer2(100);
//	SCH_Delete_ID(1);
//	SCH_Add_Task(task1, 1000, 1000, 1);
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200000e0 	.word	0x200000e0

08001520 <beginWalkNormalMode>:

void beginWalkNormalMode()
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	numberFreq= 2;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <beginWalkNormalMode+0x1c>)
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusTraffic1;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <beginWalkNormalMode+0x20>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <beginWalkNormalMode+0x24>)
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	200000e0 	.word	0x200000e0
 8001540:	200000c8 	.word	0x200000c8
 8001544:	200000e4 	.word	0x200000e4

08001548 <controlSingleLedTraffic>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLedTraffic(int orderTraffic, int statusLed)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d003      	beq.n	8001560 <controlSingleLedTraffic+0x18>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b09      	cmp	r3, #9
 800155c:	d077      	beq.n	800164e <controlSingleLedTraffic+0x106>
		default:
			break;
		}
		break;
	default:
		break;
 800155e:	e0ee      	b.n	800173e <controlSingleLedTraffic+0x1f6>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2b07      	cmp	r3, #7
 8001564:	d871      	bhi.n	800164a <controlSingleLedTraffic+0x102>
 8001566:	a201      	add	r2, pc, #4	; (adr r2, 800156c <controlSingleLedTraffic+0x24>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	0800158d 	.word	0x0800158d
 8001570:	080015ad 	.word	0x080015ad
 8001574:	080015cd 	.word	0x080015cd
 8001578:	080015ed 	.word	0x080015ed
 800157c:	08001601 	.word	0x08001601
 8001580:	080015f7 	.word	0x080015f7
 8001584:	0800160b 	.word	0x0800160b
 8001588:	0800162b 	.word	0x0800162b
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2101      	movs	r1, #1
 8001590:	486d      	ldr	r0, [pc, #436]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001592:	f001 fc29 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2104      	movs	r1, #4
 800159a:	486b      	ldr	r0, [pc, #428]	; (8001748 <controlSingleLedTraffic+0x200>)
 800159c:	f001 fc24 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2102      	movs	r1, #2
 80015a4:	4868      	ldr	r0, [pc, #416]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015a6:	f001 fc1f 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 80015aa:	e04f      	b.n	800164c <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2101      	movs	r1, #1
 80015b0:	4865      	ldr	r0, [pc, #404]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015b2:	f001 fc19 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2104      	movs	r1, #4
 80015ba:	4863      	ldr	r0, [pc, #396]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015bc:	f001 fc14 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2102      	movs	r1, #2
 80015c4:	4860      	ldr	r0, [pc, #384]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015c6:	f001 fc0f 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 80015ca:	e03f      	b.n	800164c <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	485d      	ldr	r0, [pc, #372]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015d2:	f001 fc09 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2104      	movs	r1, #4
 80015da:	485b      	ldr	r0, [pc, #364]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015dc:	f001 fc04 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2102      	movs	r1, #2
 80015e4:	4858      	ldr	r0, [pc, #352]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015e6:	f001 fbff 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 80015ea:	e02f      	b.n	800164c <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80015ec:	2101      	movs	r1, #1
 80015ee:	4856      	ldr	r0, [pc, #344]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015f0:	f001 fc13 	bl	8002e1a <HAL_GPIO_TogglePin>
			break;
 80015f4:	e02a      	b.n	800164c <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80015f6:	2104      	movs	r1, #4
 80015f8:	4853      	ldr	r0, [pc, #332]	; (8001748 <controlSingleLedTraffic+0x200>)
 80015fa:	f001 fc0e 	bl	8002e1a <HAL_GPIO_TogglePin>
			break;
 80015fe:	e025      	b.n	800164c <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8001600:	2102      	movs	r1, #2
 8001602:	4851      	ldr	r0, [pc, #324]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001604:	f001 fc09 	bl	8002e1a <HAL_GPIO_TogglePin>
			break;
 8001608:	e020      	b.n	800164c <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2101      	movs	r1, #1
 800160e:	484e      	ldr	r0, [pc, #312]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001610:	f001 fbea 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2104      	movs	r1, #4
 8001618:	484b      	ldr	r0, [pc, #300]	; (8001748 <controlSingleLedTraffic+0x200>)
 800161a:	f001 fbe5 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2102      	movs	r1, #2
 8001622:	4849      	ldr	r0, [pc, #292]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001624:	f001 fbe0 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 8001628:	e010      	b.n	800164c <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2101      	movs	r1, #1
 800162e:	4846      	ldr	r0, [pc, #280]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001630:	f001 fbda 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2104      	movs	r1, #4
 8001638:	4843      	ldr	r0, [pc, #268]	; (8001748 <controlSingleLedTraffic+0x200>)
 800163a:	f001 fbd5 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2102      	movs	r1, #2
 8001642:	4841      	ldr	r0, [pc, #260]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001644:	f001 fbd0 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 8001648:	e000      	b.n	800164c <controlSingleLedTraffic+0x104>
			break;
 800164a:	bf00      	nop
		break;
 800164c:	e077      	b.n	800173e <controlSingleLedTraffic+0x1f6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b07      	cmp	r3, #7
 8001652:	d872      	bhi.n	800173a <controlSingleLedTraffic+0x1f2>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <controlSingleLedTraffic+0x114>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	0800167d 	.word	0x0800167d
 8001660:	0800169d 	.word	0x0800169d
 8001664:	080016bd 	.word	0x080016bd
 8001668:	080016dd 	.word	0x080016dd
 800166c:	080016f1 	.word	0x080016f1
 8001670:	080016e7 	.word	0x080016e7
 8001674:	080016fb 	.word	0x080016fb
 8001678:	0800171b 	.word	0x0800171b
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2108      	movs	r1, #8
 8001680:	4831      	ldr	r0, [pc, #196]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001682:	f001 fbb1 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2120      	movs	r1, #32
 800168a:	482f      	ldr	r0, [pc, #188]	; (8001748 <controlSingleLedTraffic+0x200>)
 800168c:	f001 fbac 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2110      	movs	r1, #16
 8001694:	482c      	ldr	r0, [pc, #176]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001696:	f001 fba7 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 800169a:	e04f      	b.n	800173c <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2108      	movs	r1, #8
 80016a0:	4829      	ldr	r0, [pc, #164]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016a2:	f001 fba1 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2120      	movs	r1, #32
 80016aa:	4827      	ldr	r0, [pc, #156]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016ac:	f001 fb9c 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2110      	movs	r1, #16
 80016b4:	4824      	ldr	r0, [pc, #144]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016b6:	f001 fb97 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 80016ba:	e03f      	b.n	800173c <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2108      	movs	r1, #8
 80016c0:	4821      	ldr	r0, [pc, #132]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016c2:	f001 fb91 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2120      	movs	r1, #32
 80016ca:	481f      	ldr	r0, [pc, #124]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016cc:	f001 fb8c 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2110      	movs	r1, #16
 80016d4:	481c      	ldr	r0, [pc, #112]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016d6:	f001 fb87 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 80016da:	e02f      	b.n	800173c <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80016dc:	2108      	movs	r1, #8
 80016de:	481a      	ldr	r0, [pc, #104]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016e0:	f001 fb9b 	bl	8002e1a <HAL_GPIO_TogglePin>
			break;
 80016e4:	e02a      	b.n	800173c <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80016e6:	2120      	movs	r1, #32
 80016e8:	4817      	ldr	r0, [pc, #92]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016ea:	f001 fb96 	bl	8002e1a <HAL_GPIO_TogglePin>
			break;
 80016ee:	e025      	b.n	800173c <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80016f0:	2110      	movs	r1, #16
 80016f2:	4815      	ldr	r0, [pc, #84]	; (8001748 <controlSingleLedTraffic+0x200>)
 80016f4:	f001 fb91 	bl	8002e1a <HAL_GPIO_TogglePin>
			break;
 80016f8:	e020      	b.n	800173c <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2108      	movs	r1, #8
 80016fe:	4812      	ldr	r0, [pc, #72]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001700:	f001 fb72 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2120      	movs	r1, #32
 8001708:	480f      	ldr	r0, [pc, #60]	; (8001748 <controlSingleLedTraffic+0x200>)
 800170a:	f001 fb6d 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2110      	movs	r1, #16
 8001712:	480d      	ldr	r0, [pc, #52]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001714:	f001 fb68 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 8001718:	e010      	b.n	800173c <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800171a:	2201      	movs	r2, #1
 800171c:	2108      	movs	r1, #8
 800171e:	480a      	ldr	r0, [pc, #40]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001720:	f001 fb62 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001724:	2201      	movs	r2, #1
 8001726:	2120      	movs	r1, #32
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <controlSingleLedTraffic+0x200>)
 800172a:	f001 fb5d 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2110      	movs	r1, #16
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <controlSingleLedTraffic+0x200>)
 8001734:	f001 fb58 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 8001738:	e000      	b.n	800173c <controlSingleLedTraffic+0x1f4>
			break;
 800173a:	bf00      	nop
		break;
 800173c:	bf00      	nop
	}
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40020400 	.word	0x40020400

0800174c <controlSingleLedWalk>:

void controlSingleLedWalk(int statusLed)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	switch (statusLed)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d022      	beq.n	80017a0 <controlSingleLedWalk+0x54>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	dc2c      	bgt.n	80017ba <controlSingleLedWalk+0x6e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b0a      	cmp	r3, #10
 8001764:	d00f      	beq.n	8001786 <controlSingleLedWalk+0x3a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0b      	cmp	r3, #11
 800176a:	d126      	bne.n	80017ba <controlSingleLedWalk+0x6e>
	{
		case ONGREENOFFREDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, SET);
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <controlSingleLedWalk+0x78>)
 8001774:	f001 fb38 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800177e:	4811      	ldr	r0, [pc, #68]	; (80017c4 <controlSingleLedWalk+0x78>)
 8001780:	f001 fb32 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 8001784:	e01a      	b.n	80017bc <controlSingleLedWalk+0x70>
		case OFFLEDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <controlSingleLedWalk+0x78>)
 800178e:	f001 fb2b 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001798:	480a      	ldr	r0, [pc, #40]	; (80017c4 <controlSingleLedWalk+0x78>)
 800179a:	f001 fb25 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 800179e:	e00d      	b.n	80017bc <controlSingleLedWalk+0x70>
		case ONREDOFFGREENWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <controlSingleLedWalk+0x78>)
 80017a8:	f001 fb1e 	bl	8002de8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b2:	4804      	ldr	r0, [pc, #16]	; (80017c4 <controlSingleLedWalk+0x78>)
 80017b4:	f001 fb18 	bl	8002de8 <HAL_GPIO_WritePin>
			break;
 80017b8:	e000      	b.n	80017bc <controlSingleLedWalk+0x70>
		default:
			break;
 80017ba:	bf00      	nop
	}
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40020c00 	.word	0x40020c00

080017c8 <MX_TIM3_Init>:
int flagBuzzer = 0;
int pre = 0;
int com = 0;

void MX_TIM3_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08e      	sub	sp, #56	; 0x38
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <MX_TIM3_Init+0xe8>)
 80017fa:	4a2e      	ldr	r2, [pc, #184]	; (80018b4 <MX_TIM3_Init+0xec>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 80017fe:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <MX_TIM3_Init+0xe8>)
 8001800:	f240 128f 	movw	r2, #399	; 0x18f
 8001804:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <MX_TIM3_Init+0xe8>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <MX_TIM3_Init+0xe8>)
 800180e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001812:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <MX_TIM3_Init+0xe8>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <MX_TIM3_Init+0xe8>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001820:	4823      	ldr	r0, [pc, #140]	; (80018b0 <MX_TIM3_Init+0xe8>)
 8001822:	f001 ff5d 	bl	80036e0 <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800182c:	f7ff fb80 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183a:	4619      	mov	r1, r3
 800183c:	481c      	ldr	r0, [pc, #112]	; (80018b0 <MX_TIM3_Init+0xe8>)
 800183e:	f002 fafb 	bl	8003e38 <HAL_TIM_ConfigClockSource>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001848:	f7ff fb72 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800184c:	4818      	ldr	r0, [pc, #96]	; (80018b0 <MX_TIM3_Init+0xe8>)
 800184e:	f002 f807 	bl	8003860 <HAL_TIM_PWM_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001858:	f7ff fb6a 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001864:	f107 0320 	add.w	r3, r7, #32
 8001868:	4619      	mov	r1, r3
 800186a:	4811      	ldr	r0, [pc, #68]	; (80018b0 <MX_TIM3_Init+0xe8>)
 800186c:	f002 fee4 	bl	8004638 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001876:	f7ff fb5b 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187a:	2360      	movs	r3, #96	; 0x60
 800187c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 800187e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2204      	movs	r2, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <MX_TIM3_Init+0xe8>)
 8001894:	f002 fa0e 	bl	8003cb4 <HAL_TIM_PWM_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800189e:	f7ff fb47 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <MX_TIM3_Init+0xe8>)
 80018a4:	f000 fb62 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 80018a8:	bf00      	nop
 80018aa:	3738      	adds	r7, #56	; 0x38
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000148 	.word	0x20000148
 80018b4:	40000400 	.word	0x40000400

080018b8 <buzzerSetup>:

void buzzerSetup()
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	pre = 399;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <buzzerSetup+0x20>)
 80018be:	f240 128f 	movw	r2, #399	; 0x18f
 80018c2:	601a      	str	r2, [r3, #0]
	com = 400;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <buzzerSetup+0x24>)
 80018c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200000d4 	.word	0x200000d4
 80018dc:	200000d8 	.word	0x200000d8

080018e0 <buzzerRun>:

void buzzerRun()
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	if(flagBuzzer == 1)
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <buzzerRun+0x54>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d109      	bne.n	8001900 <buzzerRun+0x20>
	{
		__HAL_TIM_SET_PRESCALER(&htim3, pre);
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <buzzerRun+0x58>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <buzzerRun+0x5c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, com);
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <buzzerRun+0x60>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <buzzerRun+0x5c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(com < 9000)
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <buzzerRun+0x60>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f242 3227 	movw	r2, #8999	; 0x2327
 8001908:	4293      	cmp	r3, r2
 800190a:	dc05      	bgt.n	8001918 <buzzerRun+0x38>
		com = com + 400;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <buzzerRun+0x60>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <buzzerRun+0x60>)
 8001916:	6013      	str	r3, [r2, #0]
	if(pre > 0)
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <buzzerRun+0x58>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	dd04      	ble.n	800192a <buzzerRun+0x4a>
		pre-= 25;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <buzzerRun+0x58>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3b19      	subs	r3, #25
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <buzzerRun+0x58>)
 8001928:	6013      	str	r3, [r2, #0]
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	200000d0 	.word	0x200000d0
 8001938:	200000d4 	.word	0x200000d4
 800193c:	20000148 	.word	0x20000148
 8001940:	200000d8 	.word	0x200000d8

08001944 <buzzerBegin>:

void buzzerBegin()
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	if(flagBuzzer==1)
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <buzzerBegin+0x20>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d003      	beq.n	8001958 <buzzerBegin+0x14>
		return;
	flagBuzzer = 1;
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <buzzerBegin+0x20>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e000      	b.n	800195a <buzzerBegin+0x16>
		return;
 8001958:	bf00      	nop
}
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200000d0 	.word	0x200000d0

08001968 <buzzerOff>:


void buzzerOff()
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	flagBuzzer=0;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <buzzerOff+0x1c>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <buzzerOff+0x20>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	200000d0 	.word	0x200000d0
 8001988:	20000148 	.word	0x20000148

0800198c <SCH_Update>:
uint8_t nTask = 0;
sTask SCH_tasks_G[SCH_MAX_TASKS];

// Ham giam dan thoi gian delay va set RunMe len de execute
void SCH_Update()
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  if (SCH_tasks_G[0].pTask)
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <SCH_Update+0x38>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00f      	beq.n	80019b8 <SCH_Update+0x2c>
  {
    if (SCH_tasks_G[0].Delay == 0)
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <SCH_Update+0x38>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d106      	bne.n	80019ae <SCH_Update+0x22>
    {
      SCH_tasks_G[0].RunMe += 1;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <SCH_Update+0x38>)
 80019a2:	7b1b      	ldrb	r3, [r3, #12]
 80019a4:	3301      	adds	r3, #1
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <SCH_Update+0x38>)
 80019aa:	731a      	strb	r2, [r3, #12]
    else
    {
      SCH_tasks_G[0].Delay--;
    }
  }
}
 80019ac:	e004      	b.n	80019b8 <SCH_Update+0x2c>
      SCH_tasks_G[0].Delay--;
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SCH_Update+0x38>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <SCH_Update+0x38>)
 80019b6:	6053      	str	r3, [r2, #4]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000190 	.word	0x20000190

080019c8 <SCH_Add_Task>:

// Ham them task vao mang
void SCH_Add_Task(void(*pFunction), const uint32_t Delay, const uint32_t Period, uint8_t taskID)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	70fb      	strb	r3, [r7, #3]
  int index = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  int total_delay = Delay / 10;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	4a80      	ldr	r2, [pc, #512]	; (8001be0 <SCH_Add_Task+0x218>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	08db      	lsrs	r3, r3, #3
 80019e4:	61bb      	str	r3, [r7, #24]

  for (int i = 0; i < SCH_MAX_TASKS; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e02b      	b.n	8001a44 <SCH_Add_Task+0x7c>
  {
    if (SCH_tasks_G[i].pTask)
 80019ec:	497d      	ldr	r1, [pc, #500]	; (8001be4 <SCH_Add_Task+0x21c>)
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d01b      	beq.n	8001a38 <SCH_Add_Task+0x70>
    {
      if (SCH_tasks_G[i].Delay <= total_delay)
 8001a00:	4978      	ldr	r1, [pc, #480]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3304      	adds	r3, #4
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d80c      	bhi.n	8001a32 <SCH_Add_Task+0x6a>
      {
        total_delay = total_delay - SCH_tasks_G[i].Delay;
 8001a18:	69b9      	ldr	r1, [r7, #24]
 8001a1a:	4872      	ldr	r0, [pc, #456]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4403      	add	r3, r0
 8001a28:	3304      	adds	r3, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	1acb      	subs	r3, r1, r3
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	e005      	b.n	8001a3e <SCH_Add_Task+0x76>
      }
      else
      {
        index = i;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	61fb      	str	r3, [r7, #28]
        break;
 8001a36:	e008      	b.n	8001a4a <SCH_Add_Task+0x82>
      }
    }
    else
    {
      index = i;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	61fb      	str	r3, [r7, #28]
      break;
 8001a3c:	e005      	b.n	8001a4a <SCH_Add_Task+0x82>
  for (int i = 0; i < SCH_MAX_TASKS; i++)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b27      	cmp	r3, #39	; 0x27
 8001a48:	ddd0      	ble.n	80019ec <SCH_Add_Task+0x24>
    }
  }
  for (int i = SCH_MAX_TASKS; i > index; i--)
 8001a4a:	2328      	movs	r3, #40	; 0x28
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	e06b      	b.n	8001b28 <SCH_Add_Task+0x160>
  {
    if (SCH_tasks_G[i - 1].pTask)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1e5a      	subs	r2, r3, #1
 8001a54:	4963      	ldr	r1, [pc, #396]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d05d      	beq.n	8001b22 <SCH_Add_Task+0x15a>
    {
      SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	495e      	ldr	r1, [pc, #376]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	6819      	ldr	r1, [r3, #0]
 8001a78:	485a      	ldr	r0, [pc, #360]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4403      	add	r3, r0
 8001a86:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1e5a      	subs	r2, r3, #1
 8001a8c:	4955      	ldr	r1, [pc, #340]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	3304      	adds	r3, #4
 8001a9a:	6819      	ldr	r1, [r3, #0]
 8001a9c:	4851      	ldr	r0, [pc, #324]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4403      	add	r3, r0
 8001aaa:	3304      	adds	r3, #4
 8001aac:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	494c      	ldr	r1, [pc, #304]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	3308      	adds	r3, #8
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	4848      	ldr	r0, [pc, #288]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4403      	add	r3, r0
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1e5a      	subs	r2, r3, #1
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	7818      	ldrb	r0, [r3, #0]
 8001ae8:	493e      	ldr	r1, [pc, #248]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	330c      	adds	r3, #12
 8001af8:	4602      	mov	r2, r0
 8001afa:	701a      	strb	r2, [r3, #0]
      SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	4938      	ldr	r1, [pc, #224]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3310      	adds	r3, #16
 8001b0e:	6819      	ldr	r1, [r3, #0]
 8001b10:	4834      	ldr	r0, [pc, #208]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4403      	add	r3, r0
 8001b1e:	3310      	adds	r3, #16
 8001b20:	6019      	str	r1, [r3, #0]
  for (int i = SCH_MAX_TASKS; i > index; i--)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dc8f      	bgt.n	8001a50 <SCH_Add_Task+0x88>
    }
  }
  SCH_tasks_G[index].pTask = pFunction;
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	482c      	ldr	r0, [pc, #176]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4403      	add	r3, r0
 8001b40:	6019      	str	r1, [r3, #0]
  SCH_tasks_G[index].Delay = total_delay;
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	4827      	ldr	r0, [pc, #156]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4403      	add	r3, r0
 8001b52:	3304      	adds	r3, #4
 8001b54:	6019      	str	r1, [r3, #0]
  SCH_tasks_G[index].Period = Period;
 8001b56:	4923      	ldr	r1, [pc, #140]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	3308      	adds	r3, #8
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].RunMe = 0;
 8001b6a:	491e      	ldr	r1, [pc, #120]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	330c      	adds	r3, #12
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
  SCH_tasks_G[index].TaskID = taskID;
 8001b7e:	78f9      	ldrb	r1, [r7, #3]
 8001b80:	4818      	ldr	r0, [pc, #96]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4403      	add	r3, r0
 8001b8e:	3310      	adds	r3, #16
 8001b90:	6019      	str	r1, [r3, #0]
  if (SCH_tasks_G[index + 1].pTask)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	4913      	ldr	r1, [pc, #76]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <SCH_Add_Task+0x20c>
  {
    SCH_tasks_G[index + 1].Delay = SCH_tasks_G[index + 1].Delay - total_delay;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	490d      	ldr	r1, [pc, #52]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3304      	adds	r3, #4
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	3201      	adds	r2, #1
 8001bc2:	1ac9      	subs	r1, r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <SCH_Add_Task+0x21c>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4403      	add	r3, r0
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	6019      	str	r1, [r3, #0]
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3724      	adds	r7, #36	; 0x24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	cccccccd 	.word	0xcccccccd
 8001be4:	20000190 	.word	0x20000190

08001be8 <SCH_Delete>:

void SCH_Delete(uint8_t index)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  SCH_tasks_G[index].Delay = 0;
 8001bf2:	79fa      	ldrb	r2, [r7, #7]
 8001bf4:	491a      	ldr	r1, [pc, #104]	; (8001c60 <SCH_Delete+0x78>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3304      	adds	r3, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].Period = 0;
 8001c06:	79fa      	ldrb	r2, [r7, #7]
 8001c08:	4915      	ldr	r1, [pc, #84]	; (8001c60 <SCH_Delete+0x78>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	3308      	adds	r3, #8
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].RunMe = 0;
 8001c1a:	79fa      	ldrb	r2, [r7, #7]
 8001c1c:	4910      	ldr	r1, [pc, #64]	; (8001c60 <SCH_Delete+0x78>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	330c      	adds	r3, #12
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
  SCH_tasks_G[index].pTask = 0x0000;
 8001c2e:	79fa      	ldrb	r2, [r7, #7]
 8001c30:	490b      	ldr	r1, [pc, #44]	; (8001c60 <SCH_Delete+0x78>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].TaskID = 0;
 8001c40:	79fa      	ldrb	r2, [r7, #7]
 8001c42:	4907      	ldr	r1, [pc, #28]	; (8001c60 <SCH_Delete+0x78>)
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3310      	adds	r3, #16
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	20000190 	.word	0x20000190

08001c64 <SCH_Delete_Task>:
	SCH_Delete(final);
}

// Xoa task dau tien
void SCH_Delete_Task(uint8_t index)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  int final = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  SCH_Delete(index);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ffb7 	bl	8001be8 <SCH_Delete>
  for (int i = index; i < SCH_MAX_TASKS; i++)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	e06d      	b.n	8001d5c <SCH_Delete_Task+0xf8>
  {
    SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	493b      	ldr	r1, [pc, #236]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	4838      	ldr	r0, [pc, #224]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4403      	add	r3, r0
 8001ca0:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	4933      	ldr	r1, [pc, #204]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	6819      	ldr	r1, [r3, #0]
 8001cb6:	482f      	ldr	r0, [pc, #188]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4403      	add	r3, r0
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	4929      	ldr	r1, [pc, #164]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3308      	adds	r3, #8
 8001cda:	6819      	ldr	r1, [r3, #0]
 8001cdc:	4825      	ldr	r0, [pc, #148]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4403      	add	r3, r0
 8001cea:	3308      	adds	r3, #8
 8001cec:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	4920      	ldr	r1, [pc, #128]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	330c      	adds	r3, #12
 8001d00:	7818      	ldrb	r0, [r3, #0]
 8001d02:	491c      	ldr	r1, [pc, #112]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	330c      	adds	r3, #12
 8001d12:	4602      	mov	r2, r0
 8001d14:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[i].TaskID = SCH_tasks_G[i + 1].TaskID;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	4916      	ldr	r1, [pc, #88]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3310      	adds	r3, #16
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	4812      	ldr	r0, [pc, #72]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4403      	add	r3, r0
 8001d38:	3310      	adds	r3, #16
 8001d3a:	6019      	str	r1, [r3, #0]
    if (SCH_tasks_G[i].pTask == 0x0000)
 8001d3c:	490d      	ldr	r1, [pc, #52]	; (8001d74 <SCH_Delete_Task+0x110>)
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <SCH_Delete_Task+0xf2>
    {
      final = i;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60fb      	str	r3, [r7, #12]
      break;
 8001d54:	e005      	b.n	8001d62 <SCH_Delete_Task+0xfe>
  for (int i = index; i < SCH_MAX_TASKS; i++)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b27      	cmp	r3, #39	; 0x27
 8001d60:	dd8e      	ble.n	8001c80 <SCH_Delete_Task+0x1c>
    }
  }
  SCH_Delete(final);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff3e 	bl	8001be8 <SCH_Delete>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000190 	.word	0x20000190

08001d78 <SCH_Dispatch_Tasks>:

// Ham check xem task0 da can execute chua
void SCH_Dispatch_Tasks(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  if (SCH_tasks_G[0].pTask)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01e      	beq.n	8001dc2 <SCH_Dispatch_Tasks+0x4a>
  {
    if (SCH_tasks_G[0].RunMe > 0)
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001d86:	7b1b      	ldrb	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01a      	beq.n	8001dc2 <SCH_Dispatch_Tasks+0x4a>
    {
      (*SCH_tasks_G[0].pTask)();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4798      	blx	r3
      SCH_tasks_G[0].RunMe--;
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001d94:	7b1b      	ldrb	r3, [r3, #12]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001d9c:	731a      	strb	r2, [r3, #12]

      if (SCH_tasks_G[0].Period)
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <SCH_Dispatch_Tasks+0x44>
      {
        SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].Period,
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001dac:	6899      	ldr	r1, [r3, #8]
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001db0:	689a      	ldr	r2, [r3, #8]
        		SCH_tasks_G[0].Period, SCH_tasks_G[0].TaskID);
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <SCH_Dispatch_Tasks+0x50>)
 8001db4:	691b      	ldr	r3, [r3, #16]
        SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].Period,
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	f7ff fe06 	bl	80019c8 <SCH_Add_Task>
      }
      SCH_Delete_Task(0);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff ff51 	bl	8001c64 <SCH_Delete_Task>
    }
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000190 	.word	0x20000190

08001dcc <SCH_Init>:
// Ham xoa tat ca cac task trong array, khien array nhu vua duoc khoi tao
void SCH_Init(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
  uint8_t i;
  for (i = 0; i < SCH_MAX_TASKS; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	e033      	b.n	8001e40 <SCH_Init+0x74>
  {
    SCH_tasks_G[i].Delay = 0;
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	491e      	ldr	r1, [pc, #120]	; (8001e54 <SCH_Init+0x88>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3304      	adds	r3, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].Period = 0;
 8001dec:	79fa      	ldrb	r2, [r7, #7]
 8001dee:	4919      	ldr	r1, [pc, #100]	; (8001e54 <SCH_Init+0x88>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].RunMe = 0;
 8001e00:	79fa      	ldrb	r2, [r7, #7]
 8001e02:	4914      	ldr	r1, [pc, #80]	; (8001e54 <SCH_Init+0x88>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	330c      	adds	r3, #12
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[i].pTask = 0x0000;
 8001e14:	79fa      	ldrb	r2, [r7, #7]
 8001e16:	490f      	ldr	r1, [pc, #60]	; (8001e54 <SCH_Init+0x88>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].TaskID = 0;
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	490a      	ldr	r1, [pc, #40]	; (8001e54 <SCH_Init+0x88>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	3310      	adds	r3, #16
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
  for (i = 0; i < SCH_MAX_TASKS; i++)
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b27      	cmp	r3, #39	; 0x27
 8001e44:	d9c8      	bls.n	8001dd8 <SCH_Init+0xc>
  }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	20000190 	.word	0x20000190

08001e58 <task1>:

//function for run normal mode every 1s
void task1()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  if (modeStatus == NORMALMODE)
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <task1+0x18>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d103      	bne.n	8001e6c <task1+0x14>
  {
    runNormalMode();
 8001e64:	f7ff f998 	bl	8001198 <runNormalMode>
    ledWalkOperationNormalMode();
 8001e68:	f7fe fe2c 	bl	8000ac4 <ledWalkOperationNormalMode>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000050 	.word	0x20000050

08001e74 <task2>:

//function for run tuning mode every 0.5s
void task2()
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  if (modeStatus == TUNINGMODE)
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <task2+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d101      	bne.n	8001e84 <task2+0x10>
  {
    animationTuningMode();
 8001e80:	f000 facc 	bl	800241c <animationTuningMode>
  }
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000050 	.word	0x20000050

08001e8c <task3>:

//function for get button every 10ms
void task3()
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	getInputButton();
 8001e90:	f7fe fc68 	bl	8000764 <getInputButton>
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <task4>:

void task4()
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	buzzerRun();
 8001e9c:	f7ff fd20 	bl	80018e0 <buzzerRun>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d116      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_TIM_Base_MspInit+0x70>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_TIM_Base_MspInit+0x70>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_TIM_Base_MspInit+0x70>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	201c      	movs	r0, #28
 8001f28:	f000 fce1 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f2c:	201c      	movs	r0, #28
 8001f2e:	f000 fcfa 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f32:	e012      	b.n	8001f5a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <HAL_TIM_Base_MspInit+0x74>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_TIM_Base_MspInit+0x70>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_TIM_Base_MspInit+0x70>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_TIM_Base_MspInit+0x70>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40000400 	.word	0x40000400

08001f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <HAL_TIM_MspPostInit+0x68>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d11d      	bne.n	8001fca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_TIM_MspPostInit+0x6c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_TIM_MspPostInit+0x6c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_TIM_MspPostInit+0x6c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <HAL_TIM_MspPostInit+0x70>)
 8001fc6:	f000 fd5b 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000

08001fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <HAL_UART_MspInit+0x94>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d133      	bne.n	800206a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_UART_MspInit+0x98>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a14      	ldr	r2, [pc, #80]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800204a:	2307      	movs	r3, #7
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <HAL_UART_MspInit+0x9c>)
 8002056:	f000 fd13 	bl	8002a80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	2025      	movs	r0, #37	; 0x25
 8002060:	f000 fc45 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002064:	2025      	movs	r0, #37	; 0x25
 8002066:	f000 fc5e 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40011000 	.word	0x40011000
 8002078:	40023800 	.word	0x40023800
 800207c:	40020400 	.word	0x40020400

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <NMI_Handler+0x4>

08002086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler+0x4>

08002092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler+0x4>

0800209e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020cc:	f000 fb14 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <TIM2_IRQHandler+0x10>)
 80020da:	f001 fce3 	bl	8003aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200000e8 	.word	0x200000e8

080020e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <USART1_IRQHandler+0x10>)
 80020ee:	f002 fc13 	bl	8004918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200004b0 	.word	0x200004b0

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <SystemInit+0x20>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <SystemInit+0x20>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <runTuningMode>:
#define GREENTUNING 3

int statusTuningMode= INITMODE;

void runTuningMode()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <runTuningMode+0xb4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d84b      	bhi.n	80021c4 <runTuningMode+0xa4>
 800212c:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <runTuningMode+0x14>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002145 	.word	0x08002145
 8002138:	08002165 	.word	0x08002165
 800213c:	08002185 	.word	0x08002185
 8002140:	080021a5 	.word	0x080021a5
    {
        case INITMODE:
            statusTuningMode= REDTUNING;
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <runTuningMode+0xb4>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 800214a:	f7fe fc5d 	bl	8000a08 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <runTuningMode+0xb8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fc10 	bl	8000978 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <runTuningMode+0xb8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fc17 	bl	8000990 <update7SEGBufferTraffic2>
            break;
 8002162:	e030      	b.n	80021c6 <runTuningMode+0xa6>
        case REDTUNING:
            statusTuningMode= YELLOWTUNING;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <runTuningMode+0xb4>)
 8002166:	2202      	movs	r2, #2
 8002168:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 800216a:	f7fe fc4d 	bl	8000a08 <offAllSingLEDs>
            // blinkingYELLOW();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedYellow);
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <runTuningMode+0xbc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fc00 	bl	8000978 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedYellow);
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <runTuningMode+0xbc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fc07 	bl	8000990 <update7SEGBufferTraffic2>
            break;
 8002182:	e020      	b.n	80021c6 <runTuningMode+0xa6>
        case YELLOWTUNING:
            statusTuningMode= GREENTUNING;
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <runTuningMode+0xb4>)
 8002186:	2203      	movs	r2, #3
 8002188:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 800218a:	f7fe fc3d 	bl	8000a08 <offAllSingLEDs>
            // blinkingGREEN();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedGreen);
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <runTuningMode+0xc0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fbf0 	bl	8000978 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedGreen);
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <runTuningMode+0xc0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fbf7 	bl	8000990 <update7SEGBufferTraffic2>
            break;
 80021a2:	e010      	b.n	80021c6 <runTuningMode+0xa6>
        case GREENTUNING:
            statusTuningMode= REDTUNING;
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <runTuningMode+0xb4>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 80021aa:	f7fe fc2d 	bl	8000a08 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <runTuningMode+0xb8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fbe0 	bl	8000978 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <runTuningMode+0xb8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fbe7 	bl	8000990 <update7SEGBufferTraffic2>
            break;
 80021c2:	e000      	b.n	80021c6 <runTuningMode+0xa6>
        default:
            break;
 80021c4:	bf00      	nop
    }
    printTerminalInfoModeTraffic1();
 80021c6:	f000 f9ad 	bl	8002524 <printTerminalInfoModeTraffic1>
    printTerminalInfoTraffic2();
 80021ca:	f000 f971 	bl	80024b0 <printTerminalInfoTraffic2>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200000dc 	.word	0x200000dc
 80021d8:	20000060 	.word	0x20000060
 80021dc:	20000068 	.word	0x20000068
 80021e0:	20000064 	.word	0x20000064

080021e4 <initStatusTuningMode>:

void initStatusTuningMode()
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
    statusTuningMode= INITMODE;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <initStatusTuningMode+0x14>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	200000dc 	.word	0x200000dc

080021fc <setValueAllOfTraffic>:

void setValueAllOfTraffic()
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	tempDurationLedGreen = durationLedGreen;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <setValueAllOfTraffic+0x28>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a08      	ldr	r2, [pc, #32]	; (8002228 <setValueAllOfTraffic+0x2c>)
 8002206:	6013      	str	r3, [r2, #0]
	tempDurationLedRed = durationLedRed;
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <setValueAllOfTraffic+0x30>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a08      	ldr	r2, [pc, #32]	; (8002230 <setValueAllOfTraffic+0x34>)
 800220e:	6013      	str	r3, [r2, #0]
	tempDurationLedYellow = durationLedYellow;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <setValueAllOfTraffic+0x38>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a08      	ldr	r2, [pc, #32]	; (8002238 <setValueAllOfTraffic+0x3c>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000064 	.word	0x20000064
 8002228:	20000058 	.word	0x20000058
 800222c:	20000060 	.word	0x20000060
 8002230:	20000054 	.word	0x20000054
 8002234:	20000068 	.word	0x20000068
 8002238:	2000005c 	.word	0x2000005c

0800223c <beginTuningMode>:

void beginTuningMode()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <beginTuningMode+0x28>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
	buzzerOff();
 8002246:	f7ff fb8f 	bl	8001968 <buzzerOff>
	setValueAllOfTraffic();
 800224a:	f7ff ffd7 	bl	80021fc <setValueAllOfTraffic>
    offSingleRedGreenWalk();
 800224e:	f7fe fc23 	bl	8000a98 <offSingleRedGreenWalk>
    initStatusTuningMode();
 8002252:	f7ff ffc7 	bl	80021e4 <initStatusTuningMode>
    update7SEGBufferMode(3);
 8002256:	2003      	movs	r0, #3
 8002258:	f7fe fba6 	bl	80009a8 <update7SEGBufferMode>
    runTuningMode();
 800225c:	f7ff ff60 	bl	8002120 <runTuningMode>
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200000e0 	.word	0x200000e0

08002268 <modifyTuningMode>:

void modifyTuningMode()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <modifyTuningMode+0xb4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d034      	beq.n	80022de <modifyTuningMode+0x76>
 8002274:	2b03      	cmp	r3, #3
 8002276:	dc49      	bgt.n	800230c <modifyTuningMode+0xa4>
 8002278:	2b01      	cmp	r3, #1
 800227a:	d002      	beq.n	8002282 <modifyTuningMode+0x1a>
 800227c:	2b02      	cmp	r3, #2
 800227e:	d017      	beq.n	80022b0 <modifyTuningMode+0x48>
            }
            update7SEGBufferTraffic1(tempDurationLedGreen);
            update7SEGBufferTraffic2(tempDurationLedGreen);
            break;
        default:
            break;
 8002280:	e044      	b.n	800230c <modifyTuningMode+0xa4>
            tempDurationLedRed++;
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <modifyTuningMode+0xb8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <modifyTuningMode+0xb8>)
 800228a:	6013      	str	r3, [r2, #0]
            if (tempDurationLedRed > 99)
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <modifyTuningMode+0xb8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b63      	cmp	r3, #99	; 0x63
 8002292:	dd02      	ble.n	800229a <modifyTuningMode+0x32>
                tempDurationLedRed = 0;
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <modifyTuningMode+0xb8>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedRed);
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <modifyTuningMode+0xb8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fb6a 	bl	8000978 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedRed);
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <modifyTuningMode+0xb8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fb71 	bl	8000990 <update7SEGBufferTraffic2>
            break;
 80022ae:	e02e      	b.n	800230e <modifyTuningMode+0xa6>
            tempDurationLedYellow++;
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <modifyTuningMode+0xbc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <modifyTuningMode+0xbc>)
 80022b8:	6013      	str	r3, [r2, #0]
            if (tempDurationLedYellow > 99)
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <modifyTuningMode+0xbc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b63      	cmp	r3, #99	; 0x63
 80022c0:	dd02      	ble.n	80022c8 <modifyTuningMode+0x60>
                tempDurationLedYellow = 0;
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <modifyTuningMode+0xbc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedYellow);
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <modifyTuningMode+0xbc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fb53 	bl	8000978 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedYellow);
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <modifyTuningMode+0xbc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fb5a 	bl	8000990 <update7SEGBufferTraffic2>
            break;
 80022dc:	e017      	b.n	800230e <modifyTuningMode+0xa6>
            tempDurationLedGreen++;
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <modifyTuningMode+0xc0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a10      	ldr	r2, [pc, #64]	; (8002328 <modifyTuningMode+0xc0>)
 80022e6:	6013      	str	r3, [r2, #0]
            if (tempDurationLedGreen > 99)
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <modifyTuningMode+0xc0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b63      	cmp	r3, #99	; 0x63
 80022ee:	dd02      	ble.n	80022f6 <modifyTuningMode+0x8e>
                tempDurationLedGreen = 0;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <modifyTuningMode+0xc0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedGreen);
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <modifyTuningMode+0xc0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fb3c 	bl	8000978 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedGreen);
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <modifyTuningMode+0xc0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fb43 	bl	8000990 <update7SEGBufferTraffic2>
            break;
 800230a:	e000      	b.n	800230e <modifyTuningMode+0xa6>
            break;
 800230c:	bf00      	nop
    }
    printTerminalInfoModeTraffic1();
 800230e:	f000 f909 	bl	8002524 <printTerminalInfoModeTraffic1>
	printTerminalInfoTraffic2();
 8002312:	f000 f8cd 	bl	80024b0 <printTerminalInfoTraffic2>
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200000dc 	.word	0x200000dc
 8002320:	20000054 	.word	0x20000054
 8002324:	2000005c 	.word	0x2000005c
 8002328:	20000058 	.word	0x20000058

0800232c <saveTuningMode>:

void saveTuningMode()
{
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
    if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <saveTuningMode+0xc8>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <saveTuningMode+0xcc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	441a      	add	r2, r3
 800233c:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <saveTuningMode+0xd0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d039      	beq.n	80023b8 <saveTuningMode+0x8c>
    {
        switch (statusTuningMode)
 8002344:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <saveTuningMode+0xd4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d117      	bne.n	800237c <saveTuningMode+0x50>
        {
            case GREENTUNING:
                update7SEGBufferTraffic1(88);
 800234c:	2058      	movs	r0, #88	; 0x58
 800234e:	f7fe fb13 	bl	8000978 <update7SEGBufferTraffic1>
                update7SEGBufferTraffic2(88);
 8002352:	2058      	movs	r0, #88	; 0x58
 8002354:	f7fe fb1c 	bl	8000990 <update7SEGBufferTraffic2>
                update7SEGBufferMode(8);
 8002358:	2008      	movs	r0, #8
 800235a:	f7fe fb25 	bl	80009a8 <update7SEGBufferMode>
                onAllSingLEDs();
 800235e:	f7fe fb5f 	bl	8000a20 <onAllSingLEDs>
                tempDurationLedGreen = durationLedGreen;
 8002362:	4b28      	ldr	r3, [pc, #160]	; (8002404 <saveTuningMode+0xd8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <saveTuningMode+0xcc>)
 8002368:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <saveTuningMode+0xdc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a23      	ldr	r2, [pc, #140]	; (80023fc <saveTuningMode+0xd0>)
 8002370:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <saveTuningMode+0xe0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <saveTuningMode+0xc8>)
 8002378:	6013      	str	r3, [r2, #0]
                break;
 800237a:	e00c      	b.n	8002396 <saveTuningMode+0x6a>
            default:
                tempDurationLedGreen = durationLedGreen;
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <saveTuningMode+0xd8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <saveTuningMode+0xcc>)
 8002382:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <saveTuningMode+0xdc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <saveTuningMode+0xd0>)
 800238a:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <saveTuningMode+0xe0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <saveTuningMode+0xc8>)
 8002392:	6013      	str	r3, [r2, #0]
                break;
 8002394:	bf00      	nop
        }
        uint8_t str[]="!SAVE_VALUE_FAIL#\n\n";
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <saveTuningMode+0xe4>)
 8002398:	f107 0414 	add.w	r4, r7, #20
 800239c:	461d      	mov	r5, r3
 800239e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a2:	682b      	ldr	r3, [r5, #0]
 80023a4:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
 80023a6:	f107 0114 	add.w	r1, r7, #20
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	2214      	movs	r2, #20
 80023b0:	4818      	ldr	r0, [pc, #96]	; (8002414 <saveTuningMode+0xe8>)
 80023b2:	f002 fa1e 	bl	80047f2 <HAL_UART_Transmit>
        durationLedRed = tempDurationLedRed;
        durationLedYellow = tempDurationLedYellow;
        uint8_t str[]="!SAVE_VALUE_PASS#\n\n";
        HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
    }
}
 80023b6:	e019      	b.n	80023ec <saveTuningMode+0xc0>
        durationLedGreen = tempDurationLedGreen;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <saveTuningMode+0xcc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <saveTuningMode+0xd8>)
 80023be:	6013      	str	r3, [r2, #0]
        durationLedRed = tempDurationLedRed;
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <saveTuningMode+0xd0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a10      	ldr	r2, [pc, #64]	; (8002408 <saveTuningMode+0xdc>)
 80023c6:	6013      	str	r3, [r2, #0]
        durationLedYellow = tempDurationLedYellow;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <saveTuningMode+0xc8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <saveTuningMode+0xe0>)
 80023ce:	6013      	str	r3, [r2, #0]
        uint8_t str[]="!SAVE_VALUE_PASS#\n\n";
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <saveTuningMode+0xec>)
 80023d2:	463c      	mov	r4, r7
 80023d4:	461d      	mov	r5, r3
 80023d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023da:	682b      	ldr	r3, [r5, #0]
 80023dc:	6023      	str	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
 80023de:	4639      	mov	r1, r7
 80023e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e4:	2214      	movs	r2, #20
 80023e6:	480b      	ldr	r0, [pc, #44]	; (8002414 <saveTuningMode+0xe8>)
 80023e8:	f002 fa03 	bl	80047f2 <HAL_UART_Transmit>
}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	2000005c 	.word	0x2000005c
 80023f8:	20000058 	.word	0x20000058
 80023fc:	20000054 	.word	0x20000054
 8002400:	200000dc 	.word	0x200000dc
 8002404:	20000064 	.word	0x20000064
 8002408:	20000060 	.word	0x20000060
 800240c:	20000068 	.word	0x20000068
 8002410:	08005750 	.word	0x08005750
 8002414:	200004b0 	.word	0x200004b0
 8002418:	08005764 	.word	0x08005764

0800241c <animationTuningMode>:

void animationTuningMode()
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <animationTuningMode+0x3c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d814      	bhi.n	8002452 <animationTuningMode+0x36>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <animationTuningMode+0x14>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	08002453 	.word	0x08002453
 8002434:	08002441 	.word	0x08002441
 8002438:	08002447 	.word	0x08002447
 800243c:	0800244d 	.word	0x0800244d
    {
    case INITMODE:
        break;
    case REDTUNING:
        blinkingRED();
 8002440:	f7fe faca 	bl	80009d8 <blinkingRED>
        break;
 8002444:	e006      	b.n	8002454 <animationTuningMode+0x38>
    case YELLOWTUNING:
        blinkingYELLOW();
 8002446:	f7fe fabb 	bl	80009c0 <blinkingYELLOW>
        break;
 800244a:	e003      	b.n	8002454 <animationTuningMode+0x38>
    case GREENTUNING:
        blinkingGREEN();
 800244c:	f7fe fad0 	bl	80009f0 <blinkingGREEN>
        break;
 8002450:	e000      	b.n	8002454 <animationTuningMode+0x38>
    default:
        break;
 8002452:	bf00      	nop
    }
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200000dc 	.word	0x200000dc

0800245c <MX_USART1_UART_Init>:
#include "deviceDriver7Segment.h"
#include <stdlib.h>
UART_HandleTypeDef huart1;

void MX_USART1_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_USART1_UART_Init+0x50>)
 8002464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART1_UART_Init+0x4c>)
 8002494:	f002 f960 	bl	8004758 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800249e:	f7fe fd47 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200004b0 	.word	0x200004b0
 80024ac:	40011000 	.word	0x40011000

080024b0 <printTerminalInfoTraffic2>:


void printTerminalInfoTraffic2()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 80024b6:	4a17      	ldr	r2, [pc, #92]	; (8002514 <printTerminalInfoTraffic2+0x64>)
 80024b8:	f107 0318 	add.w	r3, r7, #24
 80024bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c0:	6018      	str	r0, [r3, #0]
 80024c2:	3304      	adds	r3, #4
 80024c4:	8019      	strh	r1, [r3, #0]
 80024c6:	3302      	adds	r3, #2
 80024c8:	0c0a      	lsrs	r2, r1, #16
 80024ca:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\n\n";
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <printTerminalInfoTraffic2+0x68>)
 80024ce:	617b      	str	r3, [r7, #20]

	char valueTraffic2[20];
	itoa(led_buffer[1], valueTraffic2, 10);
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <printTerminalInfoTraffic2+0x6c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4639      	mov	r1, r7
 80024d6:	220a      	movs	r2, #10
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 f8e1 	bl	80056a0 <itoa>

	HAL_UART_Transmit(&huart1, str01, sizeof(str01), 1000);
 80024de:	f107 0118 	add.w	r1, r7, #24
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	2207      	movs	r2, #7
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <printTerminalInfoTraffic2+0x70>)
 80024ea:	f002 f982 	bl	80047f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueTraffic2, 2, 1000);
 80024ee:	4639      	mov	r1, r7
 80024f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f4:	2202      	movs	r2, #2
 80024f6:	480a      	ldr	r0, [pc, #40]	; (8002520 <printTerminalInfoTraffic2+0x70>)
 80024f8:	f002 f97b 	bl	80047f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 80024fc:	f107 0114 	add.w	r1, r7, #20
 8002500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002504:	2204      	movs	r2, #4
 8002506:	4806      	ldr	r0, [pc, #24]	; (8002520 <printTerminalInfoTraffic2+0x70>)
 8002508:	f002 f973 	bl	80047f2 <HAL_UART_Transmit>
}
 800250c:	bf00      	nop
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	08005778 	.word	0x08005778
 8002518:	000a0a23 	.word	0x000a0a23
 800251c:	200000b8 	.word	0x200000b8
 8002520:	200004b0 	.word	0x200004b0

08002524 <printTerminalInfoModeTraffic1>:
void printTerminalInfoModeTraffic1()
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b090      	sub	sp, #64	; 0x40
 8002528:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 800252a:	4a30      	ldr	r2, [pc, #192]	; (80025ec <printTerminalInfoModeTraffic1+0xc8>)
 800252c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002534:	6018      	str	r0, [r3, #0]
 8002536:	3304      	adds	r3, #4
 8002538:	8019      	strh	r1, [r3, #0]
 800253a:	3302      	adds	r3, #2
 800253c:	0c0a      	lsrs	r2, r1, #16
 800253e:	701a      	strb	r2, [r3, #0]
	uint8_t str2[]= "!MODE:";
 8002540:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <printTerminalInfoModeTraffic1+0xcc>)
 8002542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800254a:	6018      	str	r0, [r3, #0]
 800254c:	3304      	adds	r3, #4
 800254e:	8019      	strh	r1, [r3, #0]
 8002550:	3302      	adds	r3, #2
 8002552:	0c0a      	lsrs	r2, r1, #16
 8002554:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\n";
 8002556:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <printTerminalInfoModeTraffic1+0xd0>)
 8002558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4611      	mov	r1, r2
 8002560:	8019      	strh	r1, [r3, #0]
 8002562:	3302      	adds	r3, #2
 8002564:	0c12      	lsrs	r2, r2, #16
 8002566:	701a      	strb	r2, [r3, #0]

	char valueTraffic1[20];
	itoa(led_buffer[0], valueTraffic1, 10);
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <printTerminalInfoModeTraffic1+0xd4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f107 0118 	add.w	r1, r7, #24
 8002570:	220a      	movs	r2, #10
 8002572:	4618      	mov	r0, r3
 8002574:	f003 f894 	bl	80056a0 <itoa>

	char valueMode[20];
	itoa(led_buffer[2], valueMode, 10);
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <printTerminalInfoModeTraffic1+0xd4>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	1d39      	adds	r1, r7, #4
 800257e:	220a      	movs	r2, #10
 8002580:	4618      	mov	r0, r3
 8002582:	f003 f88d 	bl	80056a0 <itoa>

	HAL_UART_Transmit(&huart1, str2, sizeof(str2), 1000);
 8002586:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800258a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258e:	2207      	movs	r2, #7
 8002590:	481a      	ldr	r0, [pc, #104]	; (80025fc <printTerminalInfoModeTraffic1+0xd8>)
 8002592:	f002 f92e 	bl	80047f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueMode, 2, 1000);
 8002596:	1d39      	adds	r1, r7, #4
 8002598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259c:	2202      	movs	r2, #2
 800259e:	4817      	ldr	r0, [pc, #92]	; (80025fc <printTerminalInfoModeTraffic1+0xd8>)
 80025a0:	f002 f927 	bl	80047f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 80025a4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80025a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ac:	2203      	movs	r2, #3
 80025ae:	4813      	ldr	r0, [pc, #76]	; (80025fc <printTerminalInfoModeTraffic1+0xd8>)
 80025b0:	f002 f91f 	bl	80047f2 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, str01, sizeof(str01), 1000);
 80025b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025bc:	2207      	movs	r2, #7
 80025be:	480f      	ldr	r0, [pc, #60]	; (80025fc <printTerminalInfoModeTraffic1+0xd8>)
 80025c0:	f002 f917 	bl	80047f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueTraffic1, 2, 1000);
 80025c4:	f107 0118 	add.w	r1, r7, #24
 80025c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025cc:	2202      	movs	r2, #2
 80025ce:	480b      	ldr	r0, [pc, #44]	; (80025fc <printTerminalInfoModeTraffic1+0xd8>)
 80025d0:	f002 f90f 	bl	80047f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 80025d4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80025d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025dc:	2203      	movs	r2, #3
 80025de:	4807      	ldr	r0, [pc, #28]	; (80025fc <printTerminalInfoModeTraffic1+0xd8>)
 80025e0:	f002 f907 	bl	80047f2 <HAL_UART_Transmit>
}
 80025e4:	bf00      	nop
 80025e6:	3740      	adds	r7, #64	; 0x40
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	08005778 	.word	0x08005778
 80025f0:	08005780 	.word	0x08005780
 80025f4:	08005788 	.word	0x08005788
 80025f8:	200000b8 	.word	0x200000b8
 80025fc:	200004b0 	.word	0x200004b0

08002600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002606:	490e      	ldr	r1, [pc, #56]	; (8002640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800261c:	4c0b      	ldr	r4, [pc, #44]	; (800264c <LoopFillZerobss+0x26>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800262a:	f7ff fd67 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262e:	f002 fffb 	bl	8005628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002632:	f7fe facb 	bl	8000bcc <main>
  bx  lr    
 8002636:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002644:	080057dc 	.word	0x080057dc
  ldr r2, =_sbss
 8002648:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800264c:	200004f8 	.word	0x200004f8

08002650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_Init+0x40>)
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_Init+0x40>)
 800266a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_Init+0x40>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f92b 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	200f      	movs	r0, #15
 8002684:	f000 f808 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002688:	f7ff fc0c 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f943 	bl	8002942 <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f000 f90b 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000006c 	.word	0x2000006c
 80026f0:	20000074 	.word	0x20000074
 80026f4:	20000070 	.word	0x20000070

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000074 	.word	0x20000074
 800271c:	200004f4 	.word	0x200004f4

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200004f4 	.word	0x200004f4

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4907      	ldr	r1, [pc, #28]	; (80027d4 <__NVIC_EnableIRQ+0x38>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff29 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff3e 	bl	8002780 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff31 	bl	800279c <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff feda 	bl	8002720 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d008      	beq.n	800298c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e052      	b.n	8002a32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0216 	bic.w	r2, r2, #22
 800299a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <HAL_DMA_Abort+0x62>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0208 	bic.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029dc:	e013      	b.n	8002a06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029de:	f7ff fe9f 	bl	8002720 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d90c      	bls.n	8002a06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2203      	movs	r2, #3
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e015      	b.n	8002a32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e4      	bne.n	80029de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	223f      	movs	r2, #63	; 0x3f
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d004      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e00c      	b.n	8002a72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e16b      	b.n	8002d74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	f040 815a 	bne.w	8002d6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d005      	beq.n	8002ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d130      	bne.n	8002b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 0201 	and.w	r2, r3, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d017      	beq.n	8002b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d123      	bne.n	8002bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80b4 	beq.w	8002d6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b60      	ldr	r3, [pc, #384]	; (8002d8c <HAL_GPIO_Init+0x30c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a5f      	ldr	r2, [pc, #380]	; (8002d8c <HAL_GPIO_Init+0x30c>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <HAL_GPIO_Init+0x30c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c22:	4a5b      	ldr	r2, [pc, #364]	; (8002d90 <HAL_GPIO_Init+0x310>)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a52      	ldr	r2, [pc, #328]	; (8002d94 <HAL_GPIO_Init+0x314>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d02b      	beq.n	8002ca6 <HAL_GPIO_Init+0x226>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a51      	ldr	r2, [pc, #324]	; (8002d98 <HAL_GPIO_Init+0x318>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d025      	beq.n	8002ca2 <HAL_GPIO_Init+0x222>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a50      	ldr	r2, [pc, #320]	; (8002d9c <HAL_GPIO_Init+0x31c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01f      	beq.n	8002c9e <HAL_GPIO_Init+0x21e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	; (8002da0 <HAL_GPIO_Init+0x320>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d019      	beq.n	8002c9a <HAL_GPIO_Init+0x21a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4e      	ldr	r2, [pc, #312]	; (8002da4 <HAL_GPIO_Init+0x324>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0x216>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4d      	ldr	r2, [pc, #308]	; (8002da8 <HAL_GPIO_Init+0x328>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00d      	beq.n	8002c92 <HAL_GPIO_Init+0x212>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4c      	ldr	r2, [pc, #304]	; (8002dac <HAL_GPIO_Init+0x32c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x20e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4b      	ldr	r2, [pc, #300]	; (8002db0 <HAL_GPIO_Init+0x330>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_GPIO_Init+0x20a>
 8002c86:	2307      	movs	r3, #7
 8002c88:	e00e      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	e00c      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c8e:	2306      	movs	r3, #6
 8002c90:	e00a      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c92:	2305      	movs	r3, #5
 8002c94:	e008      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c96:	2304      	movs	r3, #4
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e004      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e002      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	f002 0203 	and.w	r2, r2, #3
 8002cae:	0092      	lsls	r2, r2, #2
 8002cb0:	4093      	lsls	r3, r2
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb8:	4935      	ldr	r1, [pc, #212]	; (8002d90 <HAL_GPIO_Init+0x310>)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cea:	4a32      	ldr	r2, [pc, #200]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d14:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_GPIO_Init+0x334>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	f67f ae90 	bls.w	8002a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3724      	adds	r7, #36	; 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40013800 	.word	0x40013800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020c00 	.word	0x40020c00
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40021400 	.word	0x40021400
 8002dac:	40021800 	.word	0x40021800
 8002db0:	40021c00 	.word	0x40021c00
 8002db4:	40013c00 	.word	0x40013c00

08002db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e001      	b.n	8002dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e04:	e003      	b.n	8002e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	041a      	lsls	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e2c:	887a      	ldrh	r2, [r7, #2]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	041a      	lsls	r2, r3, #16
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e264      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d075      	beq.n	8002f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	4ba3      	ldr	r3, [pc, #652]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d00c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4ba0      	ldr	r3, [pc, #640]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d112      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b9d      	ldr	r3, [pc, #628]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	4b99      	ldr	r3, [pc, #612]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x108>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e23f      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x74>
 8002eb6:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a90      	ldr	r2, [pc, #576]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a8a      	ldr	r2, [pc, #552]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a87      	ldr	r2, [pc, #540]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	4b84      	ldr	r3, [pc, #528]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a83      	ldr	r2, [pc, #524]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a80      	ldr	r2, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7ff fc0a 	bl	8002720 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7ff fc06 	bl	8002720 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e204      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xc0>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7ff fbf6 	bl	8002720 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f38:	f7ff fbf2 	bl	8002720 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1f0      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0xe8>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d063      	beq.n	800302e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1c4      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa2:	4b56      	ldr	r3, [pc, #344]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4952      	ldr	r1, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	e03a      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7ff fbab 	bl	8002720 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fce:	f7ff fba7 	bl	8002720 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1a5      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	4b46      	ldr	r3, [pc, #280]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4940      	ldr	r1, [pc, #256]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7ff fb8a 	bl	8002720 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7ff fb86 	bl	8002720 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e184      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d030      	beq.n	800309c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x2b4>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7ff fb6a 	bl	8002720 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003050:	f7ff fb66 	bl	8002720 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e164      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x200>
 800306e:	e015      	b.n	800309c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x2b4>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7ff fb53 	bl	8002720 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307e:	f7ff fb4f 	bl	8002720 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e14d      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a0 	beq.w	80031ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d121      	bne.n	800312a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7ff fb15 	bl	8002720 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e011      	b.n	800311e <HAL_RCC_OscConfig+0x2ce>
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470000 	.word	0x42470000
 8003104:	42470e80 	.word	0x42470e80
 8003108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7ff fb08 	bl	8002720 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e106      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x4e4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x2f0>
 8003132:	4b81      	ldr	r3, [pc, #516]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	e01c      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x312>
 8003148:	4b7b      	ldr	r3, [pc, #492]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	4b78      	ldr	r3, [pc, #480]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a77      	ldr	r2, [pc, #476]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
 8003162:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a74      	ldr	r2, [pc, #464]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	4b72      	ldr	r3, [pc, #456]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a71      	ldr	r2, [pc, #452]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d015      	beq.n	80031ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7ff facd 	bl	8002720 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7ff fac9 	bl	8002720 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0c5      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b65      	ldr	r3, [pc, #404]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCC_OscConfig+0x33a>
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7ff fab7 	bl	8002720 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7ff fab3 	bl	8002720 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0af      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	4b5a      	ldr	r3, [pc, #360]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ee      	bne.n	80031b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b56      	ldr	r3, [pc, #344]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a55      	ldr	r2, [pc, #340]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 809b 	beq.w	800332a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d05c      	beq.n	80032ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d141      	bne.n	800328c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7ff fa87 	bl	8002720 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7ff fa83 	bl	8002720 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e081      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	019b      	lsls	r3, r3, #6
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	4937      	ldr	r1, [pc, #220]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7ff fa5c 	bl	8002720 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7ff fa58 	bl	8002720 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e056      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x41c>
 800328a:	e04e      	b.n	800332a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7ff fa45 	bl	8002720 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7ff fa41 	bl	8002720 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e03f      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x44a>
 80032b8:	e037      	b.n	800332a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e032      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d028      	beq.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d11a      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f6:	4013      	ands	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40007000 	.word	0x40007000
 8003338:	40023800 	.word	0x40023800
 800333c:	42470060 	.word	0x42470060

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0cc      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d90c      	bls.n	800337c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	494d      	ldr	r1, [pc, #308]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d044      	beq.n	8003460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d119      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e067      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4934      	ldr	r1, [pc, #208]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003430:	f7ff f976 	bl	8002720 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7ff f972 	bl	8002720 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e04f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d20c      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e032      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c6:	f000 f821 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	490a      	ldr	r1, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff f8d6 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023c00 	.word	0x40023c00
 80034fc:	40023800 	.word	0x40023800
 8003500:	0800578c 	.word	0x0800578c
 8003504:	2000006c 	.word	0x2000006c
 8003508:	20000070 	.word	0x20000070

0800350c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	b5b0      	push	{r4, r5, r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003512:	2100      	movs	r1, #0
 8003514:	6079      	str	r1, [r7, #4]
 8003516:	2100      	movs	r1, #0
 8003518:	60f9      	str	r1, [r7, #12]
 800351a:	2100      	movs	r1, #0
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800351e:	2100      	movs	r1, #0
 8003520:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003522:	4952      	ldr	r1, [pc, #328]	; (800366c <HAL_RCC_GetSysClockFreq+0x160>)
 8003524:	6889      	ldr	r1, [r1, #8]
 8003526:	f001 010c 	and.w	r1, r1, #12
 800352a:	2908      	cmp	r1, #8
 800352c:	d00d      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x3e>
 800352e:	2908      	cmp	r1, #8
 8003530:	f200 8094 	bhi.w	800365c <HAL_RCC_GetSysClockFreq+0x150>
 8003534:	2900      	cmp	r1, #0
 8003536:	d002      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0x32>
 8003538:	2904      	cmp	r1, #4
 800353a:	d003      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x38>
 800353c:	e08e      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800353e:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <HAL_RCC_GetSysClockFreq+0x164>)
 8003540:	60bb      	str	r3, [r7, #8]
       break;
 8003542:	e08e      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_GetSysClockFreq+0x168>)
 8003546:	60bb      	str	r3, [r7, #8]
      break;
 8003548:	e08b      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800354a:	4948      	ldr	r1, [pc, #288]	; (800366c <HAL_RCC_GetSysClockFreq+0x160>)
 800354c:	6849      	ldr	r1, [r1, #4]
 800354e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003552:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003554:	4945      	ldr	r1, [pc, #276]	; (800366c <HAL_RCC_GetSysClockFreq+0x160>)
 8003556:	6849      	ldr	r1, [r1, #4]
 8003558:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800355c:	2900      	cmp	r1, #0
 800355e:	d024      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003560:	4942      	ldr	r1, [pc, #264]	; (800366c <HAL_RCC_GetSysClockFreq+0x160>)
 8003562:	6849      	ldr	r1, [r1, #4]
 8003564:	0989      	lsrs	r1, r1, #6
 8003566:	4608      	mov	r0, r1
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003570:	f04f 0500 	mov.w	r5, #0
 8003574:	ea00 0204 	and.w	r2, r0, r4
 8003578:	ea01 0305 	and.w	r3, r1, r5
 800357c:	493d      	ldr	r1, [pc, #244]	; (8003674 <HAL_RCC_GetSysClockFreq+0x168>)
 800357e:	fb01 f003 	mul.w	r0, r1, r3
 8003582:	2100      	movs	r1, #0
 8003584:	fb01 f102 	mul.w	r1, r1, r2
 8003588:	1844      	adds	r4, r0, r1
 800358a:	493a      	ldr	r1, [pc, #232]	; (8003674 <HAL_RCC_GetSysClockFreq+0x168>)
 800358c:	fba2 0101 	umull	r0, r1, r2, r1
 8003590:	1863      	adds	r3, r4, r1
 8003592:	4619      	mov	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	461a      	mov	r2, r3
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	f7fc fe14 	bl	80001c8 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4613      	mov	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e04a      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035aa:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCC_GetSysClockFreq+0x160>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	461a      	mov	r2, r3
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	ea02 0400 	and.w	r4, r2, r0
 80035c2:	ea03 0501 	and.w	r5, r3, r1
 80035c6:	4620      	mov	r0, r4
 80035c8:	4629      	mov	r1, r5
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	014b      	lsls	r3, r1, #5
 80035d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035d8:	0142      	lsls	r2, r0, #5
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	1b00      	subs	r0, r0, r4
 80035e0:	eb61 0105 	sbc.w	r1, r1, r5
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	018b      	lsls	r3, r1, #6
 80035ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035f2:	0182      	lsls	r2, r0, #6
 80035f4:	1a12      	subs	r2, r2, r0
 80035f6:	eb63 0301 	sbc.w	r3, r3, r1
 80035fa:	f04f 0000 	mov.w	r0, #0
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	00d9      	lsls	r1, r3, #3
 8003604:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003608:	00d0      	lsls	r0, r2, #3
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	1912      	adds	r2, r2, r4
 8003610:	eb45 0303 	adc.w	r3, r5, r3
 8003614:	f04f 0000 	mov.w	r0, #0
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	0299      	lsls	r1, r3, #10
 800361e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003622:	0290      	lsls	r0, r2, #10
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	461a      	mov	r2, r3
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	f7fc fdc8 	bl	80001c8 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4613      	mov	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_RCC_GetSysClockFreq+0x160>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	60bb      	str	r3, [r7, #8]
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCC_GetSysClockFreq+0x164>)
 800365e:	60bb      	str	r3, [r7, #8]
      break;
 8003660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003662:	68bb      	ldr	r3, [r7, #8]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bdb0      	pop	{r4, r5, r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	017d7840 	.word	0x017d7840

08003678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	2000006c 	.word	0x2000006c

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	0800579c 	.word	0x0800579c

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036bc:	f7ff ffdc 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0b5b      	lsrs	r3, r3, #13
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	0800579c 	.word	0x0800579c

080036e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e041      	b.n	8003776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fe fbf4 	bl	8001ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 fc7a 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d001      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04e      	b.n	8003836 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <HAL_TIM_Base_Start_IT+0xc4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d022      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d01d      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_TIM_Base_Start_IT+0xc8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d018      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1e      	ldr	r2, [pc, #120]	; (800384c <HAL_TIM_Base_Start_IT+0xcc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_TIM_Base_Start_IT+0xd0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_TIM_Base_Start_IT+0xd4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_TIM_Base_Start_IT+0xd8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_TIM_Base_Start_IT+0xdc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40001800 	.word	0x40001800

08003860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e041      	b.n	80038f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f839 	bl	80038fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f000 fbba 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_TIM_PWM_Start+0x24>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e022      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d109      	bne.n	8003952 <HAL_TIM_PWM_Start+0x3e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	bf14      	ite	ne
 800394a:	2301      	movne	r3, #1
 800394c:	2300      	moveq	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	e015      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d109      	bne.n	800396c <HAL_TIM_PWM_Start+0x58>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e008      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07c      	b.n	8003a80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0x82>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003994:	e013      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x92>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a4:	e00b      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_PWM_Start+0xa2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b4:	e003      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2201      	movs	r2, #1
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fe10 	bl	80045ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <HAL_TIM_PWM_Start+0x174>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_PWM_Start+0xcc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <HAL_TIM_PWM_Start+0x178>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_PWM_Start+0xd0>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_TIM_PWM_Start+0xd2>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_TIM_PWM_Start+0x174>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d022      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0c:	d01d      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_TIM_PWM_Start+0x17c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_TIM_PWM_Start+0x180>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_TIM_PWM_Start+0x184>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_TIM_PWM_Start+0x178>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_TIM_PWM_Start+0x188>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_TIM_PWM_Start+0x18c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d010      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6c:	e007      	b.n	8003a7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40001800 	.word	0x40001800

08003aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d122      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d11b      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0202 	mvn.w	r2, #2
 8003ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa77 	bl	8003fda <HAL_TIM_IC_CaptureCallback>
 8003aec:	e005      	b.n	8003afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa69 	bl	8003fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fa7a 	bl	8003fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d122      	bne.n	8003b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d11b      	bne.n	8003b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0204 	mvn.w	r2, #4
 8003b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fa4d 	bl	8003fda <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa3f 	bl	8003fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fa50 	bl	8003fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d122      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0208 	mvn.w	r2, #8
 8003b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fa23 	bl	8003fda <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa15 	bl	8003fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fa26 	bl	8003fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d122      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9f9 	bl	8003fda <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9eb 	bl	8003fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f9fc 	bl	8003fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10e      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d107      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0201 	mvn.w	r2, #1
 8003c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd f97a 	bl	8000f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b80      	cmp	r3, #128	; 0x80
 8003c34:	d10e      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d107      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fd78 	bl	8004744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d10e      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d107      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9c1 	bl	8004002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d107      	bne.n	8003cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0220 	mvn.w	r2, #32
 8003ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fd42 	bl	8004730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0ae      	b.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	f200 809f 	bhi.w	8003e20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d1d 	.word	0x08003d1d
 8003cec:	08003e21 	.word	0x08003e21
 8003cf0:	08003e21 	.word	0x08003e21
 8003cf4:	08003e21 	.word	0x08003e21
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003e21 	.word	0x08003e21
 8003d00:	08003e21 	.word	0x08003e21
 8003d04:	08003e21 	.word	0x08003e21
 8003d08:	08003d9f 	.word	0x08003d9f
 8003d0c:	08003e21 	.word	0x08003e21
 8003d10:	08003e21 	.word	0x08003e21
 8003d14:	08003e21 	.word	0x08003e21
 8003d18:	08003ddf 	.word	0x08003ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fa18 	bl	8004158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0208 	orr.w	r2, r2, #8
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	619a      	str	r2, [r3, #24]
      break;
 8003d5a:	e064      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fa68 	bl	8004238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6999      	ldr	r1, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	619a      	str	r2, [r3, #24]
      break;
 8003d9c:	e043      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fabd 	bl	8004324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0208 	orr.w	r2, r2, #8
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0204 	bic.w	r2, r2, #4
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
      break;
 8003ddc:	e023      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fb11 	bl	800440c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	61da      	str	r2, [r3, #28]
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
      break;
 8003e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIM_ConfigClockSource+0x1c>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e0b4      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x186>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8c:	d03e      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0xd4>
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e92:	f200 8087 	bhi.w	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9a:	f000 8086 	beq.w	8003faa <HAL_TIM_ConfigClockSource+0x172>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	d87f      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b70      	cmp	r3, #112	; 0x70
 8003ea6:	d01a      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xa6>
 8003ea8:	2b70      	cmp	r3, #112	; 0x70
 8003eaa:	d87b      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b60      	cmp	r3, #96	; 0x60
 8003eae:	d050      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x11a>
 8003eb0:	2b60      	cmp	r3, #96	; 0x60
 8003eb2:	d877      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b50      	cmp	r3, #80	; 0x50
 8003eb6:	d03c      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0xfa>
 8003eb8:	2b50      	cmp	r3, #80	; 0x50
 8003eba:	d873      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d058      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x13a>
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d86f      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b30      	cmp	r3, #48	; 0x30
 8003ec6:	d064      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec8:	2b30      	cmp	r3, #48	; 0x30
 8003eca:	d86b      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d060      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d867      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d05a      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	e062      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f000 fb5d 	bl	80045ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	609a      	str	r2, [r3, #8]
      break;
 8003f0a:	e04f      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6899      	ldr	r1, [r3, #8]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f000 fb46 	bl	80045ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f2e:	609a      	str	r2, [r3, #8]
      break;
 8003f30:	e03c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 faba 	bl	80044b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2150      	movs	r1, #80	; 0x50
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fb13 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8003f50:	e02c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f000 fad9 	bl	8004516 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2160      	movs	r1, #96	; 0x60
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fb03 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8003f70:	e01c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 fa9a 	bl	80044b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2140      	movs	r1, #64	; 0x40
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 faf3 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f000 faea 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e003      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa8:	e000      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a40      	ldr	r2, [pc, #256]	; (800412c <TIM_Base_SetConfig+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d00f      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3d      	ldr	r2, [pc, #244]	; (8004130 <TIM_Base_SetConfig+0x118>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00b      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3b      	ldr	r2, [pc, #236]	; (8004138 <TIM_Base_SetConfig+0x120>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3a      	ldr	r2, [pc, #232]	; (800413c <TIM_Base_SetConfig+0x124>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2f      	ldr	r2, [pc, #188]	; (800412c <TIM_Base_SetConfig+0x114>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d027      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <TIM_Base_SetConfig+0x118>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d023      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01f      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2a      	ldr	r2, [pc, #168]	; (8004138 <TIM_Base_SetConfig+0x120>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a29      	ldr	r2, [pc, #164]	; (800413c <TIM_Base_SetConfig+0x124>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d017      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a28      	ldr	r2, [pc, #160]	; (8004140 <TIM_Base_SetConfig+0x128>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a27      	ldr	r2, [pc, #156]	; (8004144 <TIM_Base_SetConfig+0x12c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00f      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <TIM_Base_SetConfig+0x130>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a25      	ldr	r2, [pc, #148]	; (800414c <TIM_Base_SetConfig+0x134>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a24      	ldr	r2, [pc, #144]	; (8004150 <TIM_Base_SetConfig+0x138>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a23      	ldr	r2, [pc, #140]	; (8004154 <TIM_Base_SetConfig+0x13c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <TIM_Base_SetConfig+0x114>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_Base_SetConfig+0xf8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0c      	ldr	r2, [pc, #48]	; (800413c <TIM_Base_SetConfig+0x124>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d103      	bne.n	8004118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	615a      	str	r2, [r3, #20]
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40010400 	.word	0x40010400
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400
 8004148:	40014800 	.word	0x40014800
 800414c:	40001800 	.word	0x40001800
 8004150:	40001c00 	.word	0x40001c00
 8004154:	40002000 	.word	0x40002000

08004158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0201 	bic.w	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 0302 	bic.w	r3, r3, #2
 80041a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a20      	ldr	r2, [pc, #128]	; (8004230 <TIM_OC1_SetConfig+0xd8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_OC1_SetConfig+0x64>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <TIM_OC1_SetConfig+0xdc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10c      	bne.n	80041d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0308 	bic.w	r3, r3, #8
 80041c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <TIM_OC1_SetConfig+0xd8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC1_SetConfig+0x8e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <TIM_OC1_SetConfig+0xdc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d111      	bne.n	800420a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40010000 	.word	0x40010000
 8004234:	40010400 	.word	0x40010400

08004238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f023 0210 	bic.w	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0320 	bic.w	r3, r3, #32
 8004282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a22      	ldr	r2, [pc, #136]	; (800431c <TIM_OC2_SetConfig+0xe4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC2_SetConfig+0x68>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a21      	ldr	r2, [pc, #132]	; (8004320 <TIM_OC2_SetConfig+0xe8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10d      	bne.n	80042bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a17      	ldr	r2, [pc, #92]	; (800431c <TIM_OC2_SetConfig+0xe4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC2_SetConfig+0x94>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <TIM_OC2_SetConfig+0xe8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d113      	bne.n	80042f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40010400 	.word	0x40010400

08004324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800436c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a21      	ldr	r2, [pc, #132]	; (8004404 <TIM_OC3_SetConfig+0xe0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_OC3_SetConfig+0x66>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <TIM_OC3_SetConfig+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10d      	bne.n	80043a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a16      	ldr	r2, [pc, #88]	; (8004404 <TIM_OC3_SetConfig+0xe0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC3_SetConfig+0x92>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <TIM_OC3_SetConfig+0xe4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d113      	bne.n	80043de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40010000 	.word	0x40010000
 8004408:	40010400 	.word	0x40010400

0800440c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	031b      	lsls	r3, r3, #12
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <TIM_OC4_SetConfig+0xa4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC4_SetConfig+0x68>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a11      	ldr	r2, [pc, #68]	; (80044b4 <TIM_OC4_SetConfig+0xa8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d109      	bne.n	8004488 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	019b      	lsls	r3, r3, #6
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40010400 	.word	0x40010400

080044b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f023 0201 	bic.w	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f023 030a 	bic.w	r3, r3, #10
 80044f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0210 	bic.w	r2, r3, #16
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	031b      	lsls	r3, r3, #12
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	f043 0307 	orr.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	021a      	lsls	r2, r3, #8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	609a      	str	r2, [r3, #8]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2201      	movs	r2, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800464c:	2302      	movs	r3, #2
 800464e:	e05a      	b.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a21      	ldr	r2, [pc, #132]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d01d      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1b      	ldr	r2, [pc, #108]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a17      	ldr	r2, [pc, #92]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d10c      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40010400 	.word	0x40010400
 8004728:	40014000 	.word	0x40014000
 800472c:	40001800 	.word	0x40001800

08004730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e03f      	b.n	80047ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fd fc2e 	bl	8001fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2224      	movs	r2, #36	; 0x24
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800479a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fd7b 	bl	8005298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b08a      	sub	sp, #40	; 0x28
 80047f6:	af02      	add	r7, sp, #8
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b20      	cmp	r3, #32
 8004810:	d17c      	bne.n	800490c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_UART_Transmit+0x2c>
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e075      	b.n	800490e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_UART_Transmit+0x3e>
 800482c:	2302      	movs	r3, #2
 800482e:	e06e      	b.n	800490e <HAL_UART_Transmit+0x11c>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2221      	movs	r2, #33	; 0x21
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004846:	f7fd ff6b 	bl	8002720 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	88fa      	ldrh	r2, [r7, #6]
 8004856:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004860:	d108      	bne.n	8004874 <HAL_UART_Transmit+0x82>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e003      	b.n	800487c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004884:	e02a      	b.n	80048dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2200      	movs	r2, #0
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 faf9 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e036      	b.n	800490e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	3302      	adds	r3, #2
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e007      	b.n	80048ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1cf      	bne.n	8004886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2200      	movs	r2, #0
 80048ee:	2140      	movs	r1, #64	; 0x40
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fac9 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e006      	b.n	800490e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b0ba      	sub	sp, #232	; 0xe8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004944:	2300      	movs	r3, #0
 8004946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10f      	bne.n	800497e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_UART_IRQHandler+0x66>
 800496a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fbd3 	bl	8005122 <UART_Receive_IT>
      return;
 800497c:	e256      	b.n	8004e2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800497e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80de 	beq.w	8004b44 <HAL_UART_IRQHandler+0x22c>
 8004988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004998:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80d1 	beq.w	8004b44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_UART_IRQHandler+0xae>
 80049ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_UART_IRQHandler+0xd2>
 80049d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f043 0202 	orr.w	r2, r3, #2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_UART_IRQHandler+0xf6>
 80049f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f043 0204 	orr.w	r2, r3, #4
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d011      	beq.n	8004a3e <HAL_UART_IRQHandler+0x126>
 8004a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f043 0208 	orr.w	r2, r3, #8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 81ed 	beq.w	8004e22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_UART_IRQHandler+0x14e>
 8004a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fb5e 	bl	8005122 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	bf0c      	ite	eq
 8004a74:	2301      	moveq	r3, #1
 8004a76:	2300      	movne	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <HAL_UART_IRQHandler+0x17a>
 8004a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d04f      	beq.n	8004b32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa66 	bl	8004f64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d141      	bne.n	8004b2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3314      	adds	r3, #20
 8004ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1d9      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d013      	beq.n	8004b22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	4a7d      	ldr	r2, [pc, #500]	; (8004cf4 <HAL_UART_IRQHandler+0x3dc>)
 8004b00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fd ff97 	bl	8002a3a <HAL_DMA_Abort_IT>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	e00e      	b.n	8004b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f99a 	bl	8004e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b28:	e00a      	b.n	8004b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f996 	bl	8004e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	e006      	b.n	8004b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f992 	bl	8004e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b3e:	e170      	b.n	8004e22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	bf00      	nop
    return;
 8004b42:	e16e      	b.n	8004e22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	f040 814a 	bne.w	8004de2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8143 	beq.w	8004de2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 813c 	beq.w	8004de2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	f040 80b4 	bne.w	8004cf8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8140 	beq.w	8004e26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	f080 8139 	bcs.w	8004e26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	f000 8088 	beq.w	8004cda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1d9      	bne.n	8004bca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3314      	adds	r3, #20
 8004c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e1      	bne.n	8004c16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e3      	bne.n	8004c52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004caa:	f023 0310 	bic.w	r3, r3, #16
 8004cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e3      	bne.n	8004c98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fd fe40 	bl	800295a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4619      	mov	r1, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8c0 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cf0:	e099      	b.n	8004e26 <HAL_UART_IRQHandler+0x50e>
 8004cf2:	bf00      	nop
 8004cf4:	0800502b 	.word	0x0800502b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 808b 	beq.w	8004e2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8086 	beq.w	8004e2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d42:	647a      	str	r2, [r7, #68]	; 0x44
 8004d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e3      	bne.n	8004d1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	623b      	str	r3, [r7, #32]
   return(result);
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3314      	adds	r3, #20
 8004d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e3      	bne.n	8004d56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0310 	bic.w	r3, r3, #16
 8004db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004dc0:	61fa      	str	r2, [r7, #28]
 8004dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	69b9      	ldr	r1, [r7, #24]
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e3      	bne.n	8004d9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f848 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004de0:	e023      	b.n	8004e2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <HAL_UART_IRQHandler+0x4ea>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f929 	bl	8005052 <UART_Transmit_IT>
    return;
 8004e00:	e014      	b.n	8004e2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00e      	beq.n	8004e2c <HAL_UART_IRQHandler+0x514>
 8004e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f969 	bl	80050f2 <UART_EndTransmit_IT>
    return;
 8004e20:	e004      	b.n	8004e2c <HAL_UART_IRQHandler+0x514>
    return;
 8004e22:	bf00      	nop
 8004e24:	e002      	b.n	8004e2c <HAL_UART_IRQHandler+0x514>
      return;
 8004e26:	bf00      	nop
 8004e28:	e000      	b.n	8004e2c <HAL_UART_IRQHandler+0x514>
      return;
 8004e2a:	bf00      	nop
  }
}
 8004e2c:	37e8      	adds	r7, #232	; 0xe8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop

08004e34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b090      	sub	sp, #64	; 0x40
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e98:	e050      	b.n	8004f3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d04c      	beq.n	8004f3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea8:	f7fd fc3a 	bl	8002720 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d241      	bcs.n	8004f3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ed8:	637a      	str	r2, [r7, #52]	; 0x34
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e5      	bne.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3314      	adds	r3, #20
 8004ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	613b      	str	r3, [r7, #16]
   return(result);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f0c:	623a      	str	r2, [r7, #32]
 8004f0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	69f9      	ldr	r1, [r7, #28]
 8004f12:	6a3a      	ldr	r2, [r7, #32]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e00f      	b.n	8004f5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4013      	ands	r3, r2
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2301      	moveq	r3, #1
 8004f4e:	2300      	movne	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d09f      	beq.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3740      	adds	r7, #64	; 0x40
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b095      	sub	sp, #84	; 0x54
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f8c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d119      	bne.n	8005010 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ffc:	61ba      	str	r2, [r7, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	613b      	str	r3, [r7, #16]
   return(result);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800501e:	bf00      	nop
 8005020:	3754      	adds	r7, #84	; 0x54
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff ff09 	bl	8004e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b21      	cmp	r3, #33	; 0x21
 8005064:	d13e      	bne.n	80050e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	d114      	bne.n	800509a <UART_Transmit_IT+0x48>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	1c9a      	adds	r2, r3, #2
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	621a      	str	r2, [r3, #32]
 8005098:	e008      	b.n	80050ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	1c59      	adds	r1, r3, #1
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6211      	str	r1, [r2, #32]
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4619      	mov	r1, r3
 80050ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10f      	bne.n	80050e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e000      	b.n	80050e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050e4:	2302      	movs	r3, #2
  }
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005108:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fe8e 	bl	8004e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b08c      	sub	sp, #48	; 0x30
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b22      	cmp	r3, #34	; 0x22
 8005134:	f040 80ab 	bne.w	800528e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005140:	d117      	bne.n	8005172 <UART_Receive_IT+0x50>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d113      	bne.n	8005172 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	b29b      	uxth	r3, r3
 800515c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005160:	b29a      	uxth	r2, r3
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28
 8005170:	e026      	b.n	80051c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005184:	d007      	beq.n	8005196 <UART_Receive_IT+0x74>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <UART_Receive_IT+0x82>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e008      	b.n	80051b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	4619      	mov	r1, r3
 80051ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d15a      	bne.n	800528a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0220 	bic.w	r2, r2, #32
 80051e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	2b01      	cmp	r3, #1
 8005212:	d135      	bne.n	8005280 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	613b      	str	r3, [r7, #16]
   return(result);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f023 0310 	bic.w	r3, r3, #16
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	623a      	str	r2, [r7, #32]
 800523c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	69f9      	ldr	r1, [r7, #28]
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	61bb      	str	r3, [r7, #24]
   return(result);
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e5      	bne.n	800521a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d10a      	bne.n	8005272 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fdf9 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
 800527e:	e002      	b.n	8005286 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fde1 	bl	8004e48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e002      	b.n	8005290 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
  }
}
 8005290:	4618      	mov	r0, r3
 8005292:	3730      	adds	r7, #48	; 0x30
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	b09f      	sub	sp, #124	; 0x7c
 800529e:	af00      	add	r7, sp, #0
 80052a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	68d9      	ldr	r1, [r3, #12]
 80052b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	ea40 0301 	orr.w	r3, r0, r1
 80052b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052dc:	f021 010c 	bic.w	r1, r1, #12
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052e6:	430b      	orrs	r3, r1
 80052e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f6:	6999      	ldr	r1, [r3, #24]
 80052f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	ea40 0301 	orr.w	r3, r0, r1
 8005300:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	4bc5      	ldr	r3, [pc, #788]	; (800561c <UART_SetConfig+0x384>)
 8005308:	429a      	cmp	r2, r3
 800530a:	d004      	beq.n	8005316 <UART_SetConfig+0x7e>
 800530c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4bc3      	ldr	r3, [pc, #780]	; (8005620 <UART_SetConfig+0x388>)
 8005312:	429a      	cmp	r2, r3
 8005314:	d103      	bne.n	800531e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005316:	f7fe f9cf 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 800531a:	6778      	str	r0, [r7, #116]	; 0x74
 800531c:	e002      	b.n	8005324 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800531e:	f7fe f9b7 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8005322:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532c:	f040 80b6 	bne.w	800549c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005332:	461c      	mov	r4, r3
 8005334:	f04f 0500 	mov.w	r5, #0
 8005338:	4622      	mov	r2, r4
 800533a:	462b      	mov	r3, r5
 800533c:	1891      	adds	r1, r2, r2
 800533e:	6439      	str	r1, [r7, #64]	; 0x40
 8005340:	415b      	adcs	r3, r3
 8005342:	647b      	str	r3, [r7, #68]	; 0x44
 8005344:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005348:	1912      	adds	r2, r2, r4
 800534a:	eb45 0303 	adc.w	r3, r5, r3
 800534e:	f04f 0000 	mov.w	r0, #0
 8005352:	f04f 0100 	mov.w	r1, #0
 8005356:	00d9      	lsls	r1, r3, #3
 8005358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800535c:	00d0      	lsls	r0, r2, #3
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	1911      	adds	r1, r2, r4
 8005364:	6639      	str	r1, [r7, #96]	; 0x60
 8005366:	416b      	adcs	r3, r5
 8005368:	667b      	str	r3, [r7, #100]	; 0x64
 800536a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	461a      	mov	r2, r3
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	1891      	adds	r1, r2, r2
 8005376:	63b9      	str	r1, [r7, #56]	; 0x38
 8005378:	415b      	adcs	r3, r3
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005380:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005384:	f7fa ff20 	bl	80001c8 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4ba5      	ldr	r3, [pc, #660]	; (8005624 <UART_SetConfig+0x38c>)
 800538e:	fba3 2302 	umull	r2, r3, r3, r2
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	011e      	lsls	r6, r3, #4
 8005396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005398:	461c      	mov	r4, r3
 800539a:	f04f 0500 	mov.w	r5, #0
 800539e:	4622      	mov	r2, r4
 80053a0:	462b      	mov	r3, r5
 80053a2:	1891      	adds	r1, r2, r2
 80053a4:	6339      	str	r1, [r7, #48]	; 0x30
 80053a6:	415b      	adcs	r3, r3
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
 80053aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053ae:	1912      	adds	r2, r2, r4
 80053b0:	eb45 0303 	adc.w	r3, r5, r3
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	00d9      	lsls	r1, r3, #3
 80053be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053c2:	00d0      	lsls	r0, r2, #3
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	1911      	adds	r1, r2, r4
 80053ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80053cc:	416b      	adcs	r3, r5
 80053ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	1891      	adds	r1, r2, r2
 80053dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80053de:	415b      	adcs	r3, r3
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053ea:	f7fa feed 	bl	80001c8 <__aeabi_uldivmod>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4b8c      	ldr	r3, [pc, #560]	; (8005624 <UART_SetConfig+0x38c>)
 80053f4:	fba3 1302 	umull	r1, r3, r3, r2
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	2164      	movs	r1, #100	; 0x64
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	3332      	adds	r3, #50	; 0x32
 8005406:	4a87      	ldr	r2, [pc, #540]	; (8005624 <UART_SetConfig+0x38c>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005414:	441e      	add	r6, r3
 8005416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005418:	4618      	mov	r0, r3
 800541a:	f04f 0100 	mov.w	r1, #0
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	1894      	adds	r4, r2, r2
 8005424:	623c      	str	r4, [r7, #32]
 8005426:	415b      	adcs	r3, r3
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800542e:	1812      	adds	r2, r2, r0
 8005430:	eb41 0303 	adc.w	r3, r1, r3
 8005434:	f04f 0400 	mov.w	r4, #0
 8005438:	f04f 0500 	mov.w	r5, #0
 800543c:	00dd      	lsls	r5, r3, #3
 800543e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005442:	00d4      	lsls	r4, r2, #3
 8005444:	4622      	mov	r2, r4
 8005446:	462b      	mov	r3, r5
 8005448:	1814      	adds	r4, r2, r0
 800544a:	653c      	str	r4, [r7, #80]	; 0x50
 800544c:	414b      	adcs	r3, r1
 800544e:	657b      	str	r3, [r7, #84]	; 0x54
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	461a      	mov	r2, r3
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	1891      	adds	r1, r2, r2
 800545c:	61b9      	str	r1, [r7, #24]
 800545e:	415b      	adcs	r3, r3
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005466:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800546a:	f7fa fead 	bl	80001c8 <__aeabi_uldivmod>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4b6c      	ldr	r3, [pc, #432]	; (8005624 <UART_SetConfig+0x38c>)
 8005474:	fba3 1302 	umull	r1, r3, r3, r2
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	2164      	movs	r1, #100	; 0x64
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	3332      	adds	r3, #50	; 0x32
 8005486:	4a67      	ldr	r2, [pc, #412]	; (8005624 <UART_SetConfig+0x38c>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 0207 	and.w	r2, r3, #7
 8005492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4432      	add	r2, r6
 8005498:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800549a:	e0b9      	b.n	8005610 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800549c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549e:	461c      	mov	r4, r3
 80054a0:	f04f 0500 	mov.w	r5, #0
 80054a4:	4622      	mov	r2, r4
 80054a6:	462b      	mov	r3, r5
 80054a8:	1891      	adds	r1, r2, r2
 80054aa:	6139      	str	r1, [r7, #16]
 80054ac:	415b      	adcs	r3, r3
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80054b4:	1912      	adds	r2, r2, r4
 80054b6:	eb45 0303 	adc.w	r3, r5, r3
 80054ba:	f04f 0000 	mov.w	r0, #0
 80054be:	f04f 0100 	mov.w	r1, #0
 80054c2:	00d9      	lsls	r1, r3, #3
 80054c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054c8:	00d0      	lsls	r0, r2, #3
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	eb12 0804 	adds.w	r8, r2, r4
 80054d2:	eb43 0905 	adc.w	r9, r3, r5
 80054d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4618      	mov	r0, r3
 80054dc:	f04f 0100 	mov.w	r1, #0
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	008b      	lsls	r3, r1, #2
 80054ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054ee:	0082      	lsls	r2, r0, #2
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fa fe68 	bl	80001c8 <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4b49      	ldr	r3, [pc, #292]	; (8005624 <UART_SetConfig+0x38c>)
 80054fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	011e      	lsls	r6, r3, #4
 8005506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005508:	4618      	mov	r0, r3
 800550a:	f04f 0100 	mov.w	r1, #0
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	1894      	adds	r4, r2, r2
 8005514:	60bc      	str	r4, [r7, #8]
 8005516:	415b      	adcs	r3, r3
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800551e:	1812      	adds	r2, r2, r0
 8005520:	eb41 0303 	adc.w	r3, r1, r3
 8005524:	f04f 0400 	mov.w	r4, #0
 8005528:	f04f 0500 	mov.w	r5, #0
 800552c:	00dd      	lsls	r5, r3, #3
 800552e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005532:	00d4      	lsls	r4, r2, #3
 8005534:	4622      	mov	r2, r4
 8005536:	462b      	mov	r3, r5
 8005538:	1814      	adds	r4, r2, r0
 800553a:	64bc      	str	r4, [r7, #72]	; 0x48
 800553c:	414b      	adcs	r3, r1
 800553e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	f04f 0100 	mov.w	r1, #0
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	008b      	lsls	r3, r1, #2
 8005554:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005558:	0082      	lsls	r2, r0, #2
 800555a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800555e:	f7fa fe33 	bl	80001c8 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4b2f      	ldr	r3, [pc, #188]	; (8005624 <UART_SetConfig+0x38c>)
 8005568:	fba3 1302 	umull	r1, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	2164      	movs	r1, #100	; 0x64
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	3332      	adds	r3, #50	; 0x32
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <UART_SetConfig+0x38c>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005586:	441e      	add	r6, r3
 8005588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800558a:	4618      	mov	r0, r3
 800558c:	f04f 0100 	mov.w	r1, #0
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	1894      	adds	r4, r2, r2
 8005596:	603c      	str	r4, [r7, #0]
 8005598:	415b      	adcs	r3, r3
 800559a:	607b      	str	r3, [r7, #4]
 800559c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a0:	1812      	adds	r2, r2, r0
 80055a2:	eb41 0303 	adc.w	r3, r1, r3
 80055a6:	f04f 0400 	mov.w	r4, #0
 80055aa:	f04f 0500 	mov.w	r5, #0
 80055ae:	00dd      	lsls	r5, r3, #3
 80055b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055b4:	00d4      	lsls	r4, r2, #3
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	eb12 0a00 	adds.w	sl, r2, r0
 80055be:	eb43 0b01 	adc.w	fp, r3, r1
 80055c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f04f 0100 	mov.w	r1, #0
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	008b      	lsls	r3, r1, #2
 80055d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055da:	0082      	lsls	r2, r0, #2
 80055dc:	4650      	mov	r0, sl
 80055de:	4659      	mov	r1, fp
 80055e0:	f7fa fdf2 	bl	80001c8 <__aeabi_uldivmod>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <UART_SetConfig+0x38c>)
 80055ea:	fba3 1302 	umull	r1, r3, r3, r2
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	2164      	movs	r1, #100	; 0x64
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	3332      	adds	r3, #50	; 0x32
 80055fc:	4a09      	ldr	r2, [pc, #36]	; (8005624 <UART_SetConfig+0x38c>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	f003 020f 	and.w	r2, r3, #15
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4432      	add	r2, r6
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	377c      	adds	r7, #124	; 0x7c
 8005614:	46bd      	mov	sp, r7
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561a:	bf00      	nop
 800561c:	40011000 	.word	0x40011000
 8005620:	40011400 	.word	0x40011400
 8005624:	51eb851f 	.word	0x51eb851f

08005628 <__libc_init_array>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4d0d      	ldr	r5, [pc, #52]	; (8005660 <__libc_init_array+0x38>)
 800562c:	4c0d      	ldr	r4, [pc, #52]	; (8005664 <__libc_init_array+0x3c>)
 800562e:	1b64      	subs	r4, r4, r5
 8005630:	10a4      	asrs	r4, r4, #2
 8005632:	2600      	movs	r6, #0
 8005634:	42a6      	cmp	r6, r4
 8005636:	d109      	bne.n	800564c <__libc_init_array+0x24>
 8005638:	4d0b      	ldr	r5, [pc, #44]	; (8005668 <__libc_init_array+0x40>)
 800563a:	4c0c      	ldr	r4, [pc, #48]	; (800566c <__libc_init_array+0x44>)
 800563c:	f000 f87c 	bl	8005738 <_init>
 8005640:	1b64      	subs	r4, r4, r5
 8005642:	10a4      	asrs	r4, r4, #2
 8005644:	2600      	movs	r6, #0
 8005646:	42a6      	cmp	r6, r4
 8005648:	d105      	bne.n	8005656 <__libc_init_array+0x2e>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005650:	4798      	blx	r3
 8005652:	3601      	adds	r6, #1
 8005654:	e7ee      	b.n	8005634 <__libc_init_array+0xc>
 8005656:	f855 3b04 	ldr.w	r3, [r5], #4
 800565a:	4798      	blx	r3
 800565c:	3601      	adds	r6, #1
 800565e:	e7f2      	b.n	8005646 <__libc_init_array+0x1e>
 8005660:	080057d4 	.word	0x080057d4
 8005664:	080057d4 	.word	0x080057d4
 8005668:	080057d4 	.word	0x080057d4
 800566c:	080057d8 	.word	0x080057d8

08005670 <__itoa>:
 8005670:	1e93      	subs	r3, r2, #2
 8005672:	2b22      	cmp	r3, #34	; 0x22
 8005674:	b510      	push	{r4, lr}
 8005676:	460c      	mov	r4, r1
 8005678:	d904      	bls.n	8005684 <__itoa+0x14>
 800567a:	2300      	movs	r3, #0
 800567c:	700b      	strb	r3, [r1, #0]
 800567e:	461c      	mov	r4, r3
 8005680:	4620      	mov	r0, r4
 8005682:	bd10      	pop	{r4, pc}
 8005684:	2a0a      	cmp	r2, #10
 8005686:	d109      	bne.n	800569c <__itoa+0x2c>
 8005688:	2800      	cmp	r0, #0
 800568a:	da07      	bge.n	800569c <__itoa+0x2c>
 800568c:	232d      	movs	r3, #45	; 0x2d
 800568e:	700b      	strb	r3, [r1, #0]
 8005690:	4240      	negs	r0, r0
 8005692:	2101      	movs	r1, #1
 8005694:	4421      	add	r1, r4
 8005696:	f000 f80d 	bl	80056b4 <__utoa>
 800569a:	e7f1      	b.n	8005680 <__itoa+0x10>
 800569c:	2100      	movs	r1, #0
 800569e:	e7f9      	b.n	8005694 <__itoa+0x24>

080056a0 <itoa>:
 80056a0:	f7ff bfe6 	b.w	8005670 <__itoa>

080056a4 <memset>:
 80056a4:	4402      	add	r2, r0
 80056a6:	4603      	mov	r3, r0
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d100      	bne.n	80056ae <memset+0xa>
 80056ac:	4770      	bx	lr
 80056ae:	f803 1b01 	strb.w	r1, [r3], #1
 80056b2:	e7f9      	b.n	80056a8 <memset+0x4>

080056b4 <__utoa>:
 80056b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b6:	4c1f      	ldr	r4, [pc, #124]	; (8005734 <__utoa+0x80>)
 80056b8:	b08b      	sub	sp, #44	; 0x2c
 80056ba:	4605      	mov	r5, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	466e      	mov	r6, sp
 80056c0:	f104 0c20 	add.w	ip, r4, #32
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	6861      	ldr	r1, [r4, #4]
 80056c8:	4637      	mov	r7, r6
 80056ca:	c703      	stmia	r7!, {r0, r1}
 80056cc:	3408      	adds	r4, #8
 80056ce:	4564      	cmp	r4, ip
 80056d0:	463e      	mov	r6, r7
 80056d2:	d1f7      	bne.n	80056c4 <__utoa+0x10>
 80056d4:	7921      	ldrb	r1, [r4, #4]
 80056d6:	7139      	strb	r1, [r7, #4]
 80056d8:	1e91      	subs	r1, r2, #2
 80056da:	6820      	ldr	r0, [r4, #0]
 80056dc:	6038      	str	r0, [r7, #0]
 80056de:	2922      	cmp	r1, #34	; 0x22
 80056e0:	f04f 0100 	mov.w	r1, #0
 80056e4:	d904      	bls.n	80056f0 <__utoa+0x3c>
 80056e6:	7019      	strb	r1, [r3, #0]
 80056e8:	460b      	mov	r3, r1
 80056ea:	4618      	mov	r0, r3
 80056ec:	b00b      	add	sp, #44	; 0x2c
 80056ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f0:	1e58      	subs	r0, r3, #1
 80056f2:	4684      	mov	ip, r0
 80056f4:	fbb5 f7f2 	udiv	r7, r5, r2
 80056f8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80056fc:	fb02 5617 	mls	r6, r2, r7, r5
 8005700:	4476      	add	r6, lr
 8005702:	460c      	mov	r4, r1
 8005704:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005708:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800570c:	462e      	mov	r6, r5
 800570e:	42b2      	cmp	r2, r6
 8005710:	f101 0101 	add.w	r1, r1, #1
 8005714:	463d      	mov	r5, r7
 8005716:	d9ed      	bls.n	80056f4 <__utoa+0x40>
 8005718:	2200      	movs	r2, #0
 800571a:	545a      	strb	r2, [r3, r1]
 800571c:	1919      	adds	r1, r3, r4
 800571e:	1aa5      	subs	r5, r4, r2
 8005720:	42aa      	cmp	r2, r5
 8005722:	dae2      	bge.n	80056ea <__utoa+0x36>
 8005724:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005728:	780e      	ldrb	r6, [r1, #0]
 800572a:	7006      	strb	r6, [r0, #0]
 800572c:	3201      	adds	r2, #1
 800572e:	f801 5901 	strb.w	r5, [r1], #-1
 8005732:	e7f4      	b.n	800571e <__utoa+0x6a>
 8005734:	080057a4 	.word	0x080057a4

08005738 <_init>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	bf00      	nop
 800573c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	469e      	mov	lr, r3
 8005742:	4770      	bx	lr

08005744 <_fini>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	bf00      	nop
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr
