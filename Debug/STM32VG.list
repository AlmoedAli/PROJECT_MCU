
STM32VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df8  08004df8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e00  08004e00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000178  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f60e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e7  00000000  00000000  0002f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  000326f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002146f  00000000  00000000  00033418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001061c  00000000  00000000  00054887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad06  00000000  00000000  00064ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012fba9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003910  00000000  00000000  0012fbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004dc8 	.word	0x08004dc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08004dc8 	.word	0x08004dc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <resetAllButton>:
int timerNormalState[3]= {0, 0, 0};
int eventButtonPressed[3]= {0, 0, 0};
int eventButtonDrop[3]= {0, 0, 0};

void resetAllButton()
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
	for (int i=0 ; i < 3; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e011      	b.n	80004f0 <resetAllButton+0x30>
	{
		eventButtonDrop[i]= 0;
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <resetAllButton+0x44>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		eventButtonPressed[i]= 0;
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <resetAllButton+0x48>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2100      	movs	r1, #0
 80004dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timerNormalState[i]= 0;
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <resetAllButton+0x4c>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2100      	movs	r1, #0
 80004e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0 ; i < 3; i++)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	ddea      	ble.n	80004cc <resetAllButton+0xc>
	}
}
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	200000a8 	.word	0x200000a8
 8000508:	2000009c 	.word	0x2000009c
 800050c:	20000090 	.word	0x20000090

08000510 <checkEventButton>:

int checkEventButton(int indexButton)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	switch (indexButton)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b02      	cmp	r3, #2
 800051c:	f000 80ab 	beq.w	8000676 <checkEventButton+0x166>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	f300 80ec 	bgt.w	8000700 <checkEventButton+0x1f0>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d003      	beq.n	8000536 <checkEventButton+0x26>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d05b      	beq.n	80005ec <checkEventButton+0xdc>
 8000534:	e0e4      	b.n	8000700 <checkEventButton+0x1f0>
	{
		case 0:
			switch (eventButtonPressed[indexButton])
 8000536:	4a76      	ldr	r2, [pc, #472]	; (8000710 <checkEventButton+0x200>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d852      	bhi.n	80005e8 <checkEventButton+0xd8>
 8000542:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <checkEventButton+0x38>)
 8000544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000548:	08000559 	.word	0x08000559
 800054c:	0800057d 	.word	0x0800057d
 8000550:	080005a1 	.word	0x080005a1
 8000554:	080005c5 	.word	0x080005c5
			{
			case 0:
				switch (eventButtonDrop[indexButton])
 8000558:	4a6e      	ldr	r2, [pc, #440]	; (8000714 <checkEventButton+0x204>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <checkEventButton+0x5a>
 8000564:	2b01      	cmp	r3, #1
 8000566:	d004      	beq.n	8000572 <checkEventButton+0x62>
				case 1:
					resetAllButton();
					return NOBUTTON;
					break;
				default:
					break;
 8000568:	e007      	b.n	800057a <checkEventButton+0x6a>
					resetAllButton();
 800056a:	f7ff ffa9 	bl	80004c0 <resetAllButton>
					return BUTTON1LongPress;
 800056e:	2305      	movs	r3, #5
 8000570:	e0ca      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000572:	f7ff ffa5 	bl	80004c0 <resetAllButton>
					return NOBUTTON;
 8000576:	230c      	movs	r3, #12
 8000578:	e0c6      	b.n	8000708 <checkEventButton+0x1f8>
				}
				break;
 800057a:	e036      	b.n	80005ea <checkEventButton+0xda>
			case 1:
				switch (eventButtonDrop[indexButton])
 800057c:	4a65      	ldr	r2, [pc, #404]	; (8000714 <checkEventButton+0x204>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <checkEventButton+0x7e>
 8000588:	2b01      	cmp	r3, #1
 800058a:	d004      	beq.n	8000596 <checkEventButton+0x86>
				case 1:
					resetAllButton();
					return BUTTON1SinglePress;
					break;
				default:
					break;
 800058c:	e007      	b.n	800059e <checkEventButton+0x8e>
					resetAllButton();
 800058e:	f7ff ff97 	bl	80004c0 <resetAllButton>
					return BUTTON1LongPress;
 8000592:	2305      	movs	r3, #5
 8000594:	e0b8      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000596:	f7ff ff93 	bl	80004c0 <resetAllButton>
					return BUTTON1SinglePress;
 800059a:	2302      	movs	r3, #2
 800059c:	e0b4      	b.n	8000708 <checkEventButton+0x1f8>
				}
				break;
 800059e:	e024      	b.n	80005ea <checkEventButton+0xda>
			case 2:
				switch (eventButtonDrop[indexButton])
 80005a0:	4a5c      	ldr	r2, [pc, #368]	; (8000714 <checkEventButton+0x204>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d002      	beq.n	80005b2 <checkEventButton+0xa2>
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d004      	beq.n	80005ba <checkEventButton+0xaa>
				case 2:
					resetAllButton();
					return BUTTON1DoublePress;
					break;
				default:
					break;
 80005b0:	e007      	b.n	80005c2 <checkEventButton+0xb2>
					resetAllButton();
 80005b2:	f7ff ff85 	bl	80004c0 <resetAllButton>
					return BUTTON1DoublePress;
 80005b6:	2303      	movs	r3, #3
 80005b8:	e0a6      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80005ba:	f7ff ff81 	bl	80004c0 <resetAllButton>
					return BUTTON1DoublePress;
 80005be:	2303      	movs	r3, #3
 80005c0:	e0a2      	b.n	8000708 <checkEventButton+0x1f8>
				}
				break;
 80005c2:	e012      	b.n	80005ea <checkEventButton+0xda>
			case 3:
				switch (eventButtonDrop[indexButton])
 80005c4:	4a53      	ldr	r2, [pc, #332]	; (8000714 <checkEventButton+0x204>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d002      	beq.n	80005d6 <checkEventButton+0xc6>
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d004      	beq.n	80005de <checkEventButton+0xce>
				case 3:
					resetAllButton();
					return BUTTON1TriplePress;
					break;
				default:
					break;
 80005d4:	e007      	b.n	80005e6 <checkEventButton+0xd6>
					resetAllButton();
 80005d6:	f7ff ff73 	bl	80004c0 <resetAllButton>
					return BUTTON1TriplePress;
 80005da:	2304      	movs	r3, #4
 80005dc:	e094      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80005de:	f7ff ff6f 	bl	80004c0 <resetAllButton>
					return BUTTON1TriplePress;
 80005e2:	2304      	movs	r3, #4
 80005e4:	e090      	b.n	8000708 <checkEventButton+0x1f8>
				}
				break;
 80005e6:	e000      	b.n	80005ea <checkEventButton+0xda>
			default:
				break;
 80005e8:	bf00      	nop
			}
			break;
 80005ea:	e08d      	b.n	8000708 <checkEventButton+0x1f8>
		case 1:
			switch (eventButtonPressed[indexButton])
 80005ec:	4a48      	ldr	r2, [pc, #288]	; (8000710 <checkEventButton+0x200>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d02a      	beq.n	800064e <checkEventButton+0x13e>
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	dc3a      	bgt.n	8000672 <checkEventButton+0x162>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <checkEventButton+0xf6>
 8000600:	2b01      	cmp	r3, #1
 8000602:	d012      	beq.n	800062a <checkEventButton+0x11a>
				default:
					break;
				}
				break;
			default:
				break;
 8000604:	e035      	b.n	8000672 <checkEventButton+0x162>
				switch (eventButtonDrop[indexButton])
 8000606:	4a43      	ldr	r2, [pc, #268]	; (8000714 <checkEventButton+0x204>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <checkEventButton+0x108>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d004      	beq.n	8000620 <checkEventButton+0x110>
					break;
 8000616:	e007      	b.n	8000628 <checkEventButton+0x118>
					resetAllButton();
 8000618:	f7ff ff52 	bl	80004c0 <resetAllButton>
					return BUTTON2LongPress;
 800061c:	2308      	movs	r3, #8
 800061e:	e073      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000620:	f7ff ff4e 	bl	80004c0 <resetAllButton>
					return NOBUTTON;
 8000624:	230c      	movs	r3, #12
 8000626:	e06f      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 8000628:	e024      	b.n	8000674 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 800062a:	4a3a      	ldr	r2, [pc, #232]	; (8000714 <checkEventButton+0x204>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <checkEventButton+0x12c>
 8000636:	2b01      	cmp	r3, #1
 8000638:	d004      	beq.n	8000644 <checkEventButton+0x134>
					break;
 800063a:	e007      	b.n	800064c <checkEventButton+0x13c>
					resetAllButton();
 800063c:	f7ff ff40 	bl	80004c0 <resetAllButton>
					return BUTTON2LongPress;
 8000640:	2308      	movs	r3, #8
 8000642:	e061      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000644:	f7ff ff3c 	bl	80004c0 <resetAllButton>
					return BUTTON2SinglePress;
 8000648:	2306      	movs	r3, #6
 800064a:	e05d      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 800064c:	e012      	b.n	8000674 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 800064e:	4a31      	ldr	r2, [pc, #196]	; (8000714 <checkEventButton+0x204>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d002      	beq.n	8000660 <checkEventButton+0x150>
 800065a:	2b02      	cmp	r3, #2
 800065c:	d004      	beq.n	8000668 <checkEventButton+0x158>
					break;
 800065e:	e007      	b.n	8000670 <checkEventButton+0x160>
					resetAllButton();
 8000660:	f7ff ff2e 	bl	80004c0 <resetAllButton>
					return BUTTON2DoublePress;
 8000664:	2307      	movs	r3, #7
 8000666:	e04f      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000668:	f7ff ff2a 	bl	80004c0 <resetAllButton>
					return BUTTON2DoublePress;
 800066c:	2307      	movs	r3, #7
 800066e:	e04b      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 8000670:	e000      	b.n	8000674 <checkEventButton+0x164>
				break;
 8000672:	bf00      	nop
			}
			break;
 8000674:	e048      	b.n	8000708 <checkEventButton+0x1f8>
		case 2:
			switch (eventButtonPressed[indexButton])
 8000676:	4a26      	ldr	r2, [pc, #152]	; (8000710 <checkEventButton+0x200>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d02a      	beq.n	80006d8 <checkEventButton+0x1c8>
 8000682:	2b02      	cmp	r3, #2
 8000684:	dc3a      	bgt.n	80006fc <checkEventButton+0x1ec>
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <checkEventButton+0x180>
 800068a:	2b01      	cmp	r3, #1
 800068c:	d012      	beq.n	80006b4 <checkEventButton+0x1a4>
				default:
					break;
				}
				break;
			default:
				break;
 800068e:	e035      	b.n	80006fc <checkEventButton+0x1ec>
				switch (eventButtonDrop[indexButton])
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <checkEventButton+0x204>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <checkEventButton+0x192>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d004      	beq.n	80006aa <checkEventButton+0x19a>
					break;
 80006a0:	e007      	b.n	80006b2 <checkEventButton+0x1a2>
					resetAllButton();
 80006a2:	f7ff ff0d 	bl	80004c0 <resetAllButton>
					return BUTTON3LongPress;
 80006a6:	230b      	movs	r3, #11
 80006a8:	e02e      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80006aa:	f7ff ff09 	bl	80004c0 <resetAllButton>
					return NOBUTTON;
 80006ae:	230c      	movs	r3, #12
 80006b0:	e02a      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 80006b2:	e024      	b.n	80006fe <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <checkEventButton+0x204>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <checkEventButton+0x1b6>
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d004      	beq.n	80006ce <checkEventButton+0x1be>
					break;
 80006c4:	e007      	b.n	80006d6 <checkEventButton+0x1c6>
					resetAllButton();
 80006c6:	f7ff fefb 	bl	80004c0 <resetAllButton>
					return BUTTON3LongPress;
 80006ca:	230b      	movs	r3, #11
 80006cc:	e01c      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80006ce:	f7ff fef7 	bl	80004c0 <resetAllButton>
					return BUTTON3SinglePress;
 80006d2:	2309      	movs	r3, #9
 80006d4:	e018      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 80006d6:	e012      	b.n	80006fe <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <checkEventButton+0x204>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d002      	beq.n	80006ea <checkEventButton+0x1da>
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d004      	beq.n	80006f2 <checkEventButton+0x1e2>
					break;
 80006e8:	e007      	b.n	80006fa <checkEventButton+0x1ea>
					resetAllButton();
 80006ea:	f7ff fee9 	bl	80004c0 <resetAllButton>
					return BUTTON3DoublePress;
 80006ee:	230a      	movs	r3, #10
 80006f0:	e00a      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80006f2:	f7ff fee5 	bl	80004c0 <resetAllButton>
					return BUTTON3DoublePress;
 80006f6:	230a      	movs	r3, #10
 80006f8:	e006      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 80006fa:	e000      	b.n	80006fe <checkEventButton+0x1ee>
				break;
 80006fc:	bf00      	nop
			}
			break;
 80006fe:	e003      	b.n	8000708 <checkEventButton+0x1f8>
		default:
			resetAllButton();
 8000700:	f7ff fede 	bl	80004c0 <resetAllButton>
			return NOBUTTON;
 8000704:	230c      	movs	r3, #12
 8000706:	e7ff      	b.n	8000708 <checkEventButton+0x1f8>
			break;
	}
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000009c 	.word	0x2000009c
 8000714:	200000a8 	.word	0x200000a8

08000718 <getInputButton>:

int getInputButton()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	e0c1      	b.n	80008a8 <getInputButton+0x190>
	{
		state1Button[i]= state2Button[i];
 8000724:	4a65      	ldr	r2, [pc, #404]	; (80008bc <getInputButton+0x1a4>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072c:	4964      	ldr	r1, [pc, #400]	; (80008c0 <getInputButton+0x1a8>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 8000734:	4a63      	ldr	r2, [pc, #396]	; (80008c4 <getInputButton+0x1ac>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073c:	495f      	ldr	r1, [pc, #380]	; (80008bc <getInputButton+0x1a4>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000744:	4a60      	ldr	r2, [pc, #384]	; (80008c8 <getInputButton+0x1b0>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074c:	495f      	ldr	r1, [pc, #380]	; (80008cc <getInputButton+0x1b4>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f001 ffd2 	bl	8002700 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	4619      	mov	r1, r3
 8000760:	4a58      	ldr	r2, [pc, #352]	; (80008c4 <getInputButton+0x1ac>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 8000768:	4a55      	ldr	r2, [pc, #340]	; (80008c0 <getInputButton+0x1a8>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000770:	4952      	ldr	r1, [pc, #328]	; (80008bc <getInputButton+0x1a4>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000778:	429a      	cmp	r2, r3
 800077a:	f040 8092 	bne.w	80008a2 <getInputButton+0x18a>
 800077e:	4a4f      	ldr	r2, [pc, #316]	; (80008bc <getInputButton+0x1a4>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000786:	494f      	ldr	r1, [pc, #316]	; (80008c4 <getInputButton+0x1ac>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800078e:	429a      	cmp	r2, r3
 8000790:	f040 8087 	bne.w	80008a2 <getInputButton+0x18a>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 8000794:	4a4e      	ldr	r2, [pc, #312]	; (80008d0 <getInputButton+0x1b8>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079c:	4948      	ldr	r1, [pc, #288]	; (80008c0 <getInputButton+0x1a8>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d031      	beq.n	800080c <getInputButton+0xf4>
			{
				switch (state0Button[i])
 80007a8:	4a49      	ldr	r2, [pc, #292]	; (80008d0 <getInputButton+0x1b8>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <getInputButton+0xa2>
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d014      	beq.n	80007e2 <getInputButton+0xca>
						state0Button[i]= PRESS_STATE;
						eventButtonPressed[i]+= 1;
						timerLongPress[i]= 300;
						break;
					default:
						break;
 80007b8:	e073      	b.n	80008a2 <getInputButton+0x18a>
						state0Button[i]= NORMAL_STATE;
 80007ba:	4a45      	ldr	r2, [pc, #276]	; (80008d0 <getInputButton+0x1b8>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2101      	movs	r1, #1
 80007c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonDrop[i]+= 1;
 80007c4:	4a43      	ldr	r2, [pc, #268]	; (80008d4 <getInputButton+0x1bc>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	4941      	ldr	r1, [pc, #260]	; (80008d4 <getInputButton+0x1bc>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerNormalState[i]= 20;
 80007d6:	4a40      	ldr	r2, [pc, #256]	; (80008d8 <getInputButton+0x1c0>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2114      	movs	r1, #20
 80007dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 80007e0:	e05f      	b.n	80008a2 <getInputButton+0x18a>
						state0Button[i]= PRESS_STATE;
 80007e2:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <getInputButton+0x1b8>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2100      	movs	r1, #0
 80007e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonPressed[i]+= 1;
 80007ec:	4a3b      	ldr	r2, [pc, #236]	; (80008dc <getInputButton+0x1c4>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	4939      	ldr	r1, [pc, #228]	; (80008dc <getInputButton+0x1c4>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerLongPress[i]= 300;
 80007fe:	4a38      	ldr	r2, [pc, #224]	; (80008e0 <getInputButton+0x1c8>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800080a:	e04a      	b.n	80008a2 <getInputButton+0x18a>

				}
			}
			else
			{
				if (state0Button[i]== NORMAL_STATE)
 800080c:	4a30      	ldr	r2, [pc, #192]	; (80008d0 <getInputButton+0x1b8>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d119      	bne.n	800084c <getInputButton+0x134>
				{
					if (timerNormalState[i] > 0)
 8000818:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <getInputButton+0x1c0>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dd3e      	ble.n	80008a2 <getInputButton+0x18a>
					{
						timerNormalState[i]--;
 8000824:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <getInputButton+0x1c0>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	492a      	ldr	r1, [pc, #168]	; (80008d8 <getInputButton+0x1c0>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerNormalState[i] <= 0)
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <getInputButton+0x1c0>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	2b00      	cmp	r3, #0
 8000840:	dc2f      	bgt.n	80008a2 <getInputButton+0x18a>
						{
							return checkEventButton(i);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fe64 	bl	8000510 <checkEventButton>
 8000848:	4603      	mov	r3, r0
 800084a:	e032      	b.n	80008b2 <getInputButton+0x19a>
						}
					}
				}
				else   // state0Button[i]== PRESS_SATE;
				{
					if (timerLongPress[i] > 0)
 800084c:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <getInputButton+0x1c8>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dd24      	ble.n	80008a2 <getInputButton+0x18a>
					{
						timerLongPress[i]--;
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <getInputButton+0x1c8>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	491f      	ldr	r1, [pc, #124]	; (80008e0 <getInputButton+0x1c8>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerLongPress[i] <= 0)
 800086a:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <getInputButton+0x1c8>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	2b00      	cmp	r3, #0
 8000874:	dc15      	bgt.n	80008a2 <getInputButton+0x18a>
						{
							if (i== 0)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d105      	bne.n	8000888 <getInputButton+0x170>
								timerLongPress[i]= 300;
 800087c:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <getInputButton+0x1c8>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000884:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							if (i== 1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d104      	bne.n	8000898 <getInputButton+0x180>
								timerLongPress[i]= 20;
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <getInputButton+0x1c8>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2114      	movs	r1, #20
 8000894:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							return checkEventButton(i);		
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fe39 	bl	8000510 <checkEventButton>
 800089e:	4603      	mov	r3, r0
 80008a0:	e007      	b.n	80008b2 <getInputButton+0x19a>
	for (int i= 0; i < 3; i++)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	f77f af3a 	ble.w	8000724 <getInputButton+0xc>
					}
				}
			}
		}
	}
	return NOBUTTON;
 80008b0:	230c      	movs	r3, #12
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000002c 	.word	0x2000002c
 80008c0:	20000020 	.word	0x20000020
 80008c4:	20000038 	.word	0x20000038
 80008c8:	20000000 	.word	0x20000000
 80008cc:	2000000c 	.word	0x2000000c
 80008d0:	20000014 	.word	0x20000014
 80008d4:	200000a8 	.word	0x200000a8
 80008d8:	20000090 	.word	0x20000090
 80008dc:	2000009c 	.word	0x2000009c
 80008e0:	20000044 	.word	0x20000044

080008e4 <update7SEGBuffer>:
int durationLedGreen = 3;
int durationLedYellow = 2;

int led_buffer[3]= {0, 0, 0};
void update7SEGBuffer(int time, int signalUpdate)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	switch (signalUpdate)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d011      	beq.n	8000918 <update7SEGBuffer+0x34>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dc12      	bgt.n	8000920 <update7SEGBuffer+0x3c>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d003      	beq.n	8000908 <update7SEGBuffer+0x24>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d004      	beq.n	8000910 <update7SEGBuffer+0x2c>
		break;
	case UPDATEMODE:
		led_buffer[2] = time;
		break;
	default:
		break;
 8000906:	e00b      	b.n	8000920 <update7SEGBuffer+0x3c>
		led_buffer[0] = time;
 8000908:	4a09      	ldr	r2, [pc, #36]	; (8000930 <update7SEGBuffer+0x4c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
		break;
 800090e:	e008      	b.n	8000922 <update7SEGBuffer+0x3e>
		led_buffer[1] = time;
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <update7SEGBuffer+0x4c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6053      	str	r3, [r2, #4]
		break;
 8000916:	e004      	b.n	8000922 <update7SEGBuffer+0x3e>
		led_buffer[2] = time;
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <update7SEGBuffer+0x4c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6093      	str	r3, [r2, #8]
		break;
 800091e:	e000      	b.n	8000922 <update7SEGBuffer+0x3e>
		break;
 8000920:	bf00      	nop
	}
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200000b4 	.word	0x200000b4

08000934 <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC1);
 800093c:	2100      	movs	r1, #0
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffd0 	bl	80008e4 <update7SEGBuffer>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC2);
 8000954:	2101      	movs	r1, #1
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffc4 	bl	80008e4 <update7SEGBuffer>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATEMODE);
 800096c:	2102      	movs	r1, #2
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffb8 	bl	80008e4 <update7SEGBuffer>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWTUNING);
 8000980:	2105      	movs	r1, #5
 8000982:	2008      	movs	r0, #8
 8000984:	f000 fe66 	bl	8001654 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, YELLOWTUNING);
 8000988:	2105      	movs	r1, #5
 800098a:	2009      	movs	r0, #9
 800098c:	f000 fe62 	bl	8001654 <controlSingleLedTraffic>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <blinkingRED>:

void blinkingRED()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDTUNING);
 8000998:	2103      	movs	r1, #3
 800099a:	2008      	movs	r0, #8
 800099c:	f000 fe5a 	bl	8001654 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, REDTUNING);
 80009a0:	2103      	movs	r1, #3
 80009a2:	2009      	movs	r0, #9
 80009a4:	f000 fe56 	bl	8001654 <controlSingleLedTraffic>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <blinkingGREEN>:

void blinkingGREEN()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENTUNING);
 80009b0:	2104      	movs	r1, #4
 80009b2:	2008      	movs	r0, #8
 80009b4:	f000 fe4e 	bl	8001654 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, GREENTUNING);
 80009b8:	2104      	movs	r1, #4
 80009ba:	2009      	movs	r0, #9
 80009bc:	f000 fe4a 	bl	8001654 <controlSingleLedTraffic>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <offAllSingLEDs>:

void offAllSingLEDs()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, OFF);
 80009c8:	2106      	movs	r1, #6
 80009ca:	2008      	movs	r0, #8
 80009cc:	f000 fe42 	bl	8001654 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, OFF);
 80009d0:	2106      	movs	r1, #6
 80009d2:	2009      	movs	r0, #9
 80009d4:	f000 fe3e 	bl	8001654 <controlSingleLedTraffic>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <onAllSingLEDs>:

void onAllSingLEDs()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, ON);
 80009e0:	2107      	movs	r1, #7
 80009e2:	2008      	movs	r0, #8
 80009e4:	f000 fe36 	bl	8001654 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, ON);
 80009e8:	2107      	movs	r1, #7
 80009ea:	2009      	movs	r0, #9
 80009ec:	f000 fe32 	bl	8001654 <controlSingleLedTraffic>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <onSingleRedTraffic1>:

void onSingleRedTraffic1()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDNORMAL);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2008      	movs	r0, #8
 80009fc:	f000 fe2a 	bl	8001654 <controlSingleLedTraffic>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <onSingleYellowTraffic1>:

void onSingleYellowTraffic1()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWNORMAL);
 8000a08:	2102      	movs	r1, #2
 8000a0a:	2008      	movs	r0, #8
 8000a0c:	f000 fe22 	bl	8001654 <controlSingleLedTraffic>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENNORMAL);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2008      	movs	r0, #8
 8000a1c:	f000 fe1a 	bl	8001654 <controlSingleLedTraffic>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, REDNORMAL);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2009      	movs	r0, #9
 8000a2c:	f000 fe12 	bl	8001654 <controlSingleLedTraffic>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <onSingleYellowTraffic2>:

void onSingleYellowTraffic2()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, YELLOWNORMAL);
 8000a38:	2102      	movs	r1, #2
 8000a3a:	2009      	movs	r0, #9
 8000a3c:	f000 fe0a 	bl	8001654 <controlSingleLedTraffic>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, GREENNORMAL);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2009      	movs	r0, #9
 8000a4c:	f000 fe02 	bl	8001654 <controlSingleLedTraffic>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <offSingleRedGreenWalk>:

void offSingleRedGreenWalk()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	controlSingleLedWalk(OFFLEDWALK);
 8000a58:	200a      	movs	r0, #10
 8000a5a:	f000 fefd 	bl	8001858 <controlSingleLedWalk>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <onGreenOffRedWalk>:
void onGreenOffRedWalk()
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONGREENOFFREDWALK);
 8000a66:	200b      	movs	r0, #11
 8000a68:	f000 fef6 	bl	8001858 <controlSingleLedWalk>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <onRedOffGreenWalk>:
void onRedOffGreenWalk()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONREDOFFGREENWALK);
 8000a74:	200c      	movs	r0, #12
 8000a76:	f000 feef 	bl	8001858 <controlSingleLedWalk>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <ledWalkOperationNormalMode>:

int numberFreq;
int statusLedWalkButton3Press;

void ledWalkOperationNormalMode()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    switch (statusTraffic1)
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <ledWalkOperationNormalMode+0x5c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d01a      	beq.n	8000ac2 <ledWalkOperationNormalMode+0x42>
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	dc22      	bgt.n	8000ad6 <ledWalkOperationNormalMode+0x56>
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d002      	beq.n	8000a9a <ledWalkOperationNormalMode+0x1a>
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d00a      	beq.n	8000aae <ledWalkOperationNormalMode+0x2e>
			offSingleRedGreenWalk();
		else	
			onRedOffGreenWalk();
        break;
    default:
        break;
 8000a98:	e01d      	b.n	8000ad6 <ledWalkOperationNormalMode+0x56>
		if (numberFreq <= 0)
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <ledWalkOperationNormalMode+0x60>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	dc02      	bgt.n	8000aa8 <ledWalkOperationNormalMode+0x28>
			offSingleRedGreenWalk();
 8000aa2:	f7ff ffd7 	bl	8000a54 <offSingleRedGreenWalk>
        break;
 8000aa6:	e017      	b.n	8000ad8 <ledWalkOperationNormalMode+0x58>
			onGreenOffRedWalk();
 8000aa8:	f7ff ffdb 	bl	8000a62 <onGreenOffRedWalk>
        break;
 8000aac:	e014      	b.n	8000ad8 <ledWalkOperationNormalMode+0x58>
		if (numberFreq <= 0)
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <ledWalkOperationNormalMode+0x60>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	dc02      	bgt.n	8000abc <ledWalkOperationNormalMode+0x3c>
			offSingleRedGreenWalk();
 8000ab6:	f7ff ffcd 	bl	8000a54 <offSingleRedGreenWalk>
        break;
 8000aba:	e00d      	b.n	8000ad8 <ledWalkOperationNormalMode+0x58>
			onRedOffGreenWalk();
 8000abc:	f7ff ffd8 	bl	8000a70 <onRedOffGreenWalk>
        break;
 8000ac0:	e00a      	b.n	8000ad8 <ledWalkOperationNormalMode+0x58>
		if (numberFreq <= 0)
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <ledWalkOperationNormalMode+0x60>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	dc02      	bgt.n	8000ad0 <ledWalkOperationNormalMode+0x50>
			offSingleRedGreenWalk();
 8000aca:	f7ff ffc3 	bl	8000a54 <offSingleRedGreenWalk>
        break;
 8000ace:	e003      	b.n	8000ad8 <ledWalkOperationNormalMode+0x58>
			onRedOffGreenWalk();
 8000ad0:	f7ff ffce 	bl	8000a70 <onRedOffGreenWalk>
        break;
 8000ad4:	e000      	b.n	8000ad8 <ledWalkOperationNormalMode+0x58>
        break;
 8000ad6:	bf00      	nop
    }
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200000c8 	.word	0x200000c8
 8000ae0:	200000d4 	.word	0x200000d4

08000ae4 <ledWalkOperationManualMode>:

void ledWalkOperationManualMode()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	switch (statusManualMode)
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <ledWalkOperationManualMode+0x7c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d832      	bhi.n	8000b58 <ledWalkOperationManualMode+0x74>
 8000af2:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <ledWalkOperationManualMode+0x14>)
 8000af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af8:	08000b09 	.word	0x08000b09
 8000afc:	08000b45 	.word	0x08000b45
 8000b00:	08000b31 	.word	0x08000b31
 8000b04:	08000b1d 	.word	0x08000b1d
	{
	case REDGREENMANUAL:
		if (numberFreq <= 0)
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <ledWalkOperationManualMode+0x80>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dc02      	bgt.n	8000b16 <ledWalkOperationManualMode+0x32>
			offSingleRedGreenWalk();
 8000b10:	f7ff ffa0 	bl	8000a54 <offSingleRedGreenWalk>
		else	
			onGreenOffRedWalk();
		break;
 8000b14:	e021      	b.n	8000b5a <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000b16:	f7ff ffa4 	bl	8000a62 <onGreenOffRedWalk>
		break;
 8000b1a:	e01e      	b.n	8000b5a <ledWalkOperationManualMode+0x76>
	case YELLOWREDMANUAL:
		if (numberFreq <= 0)
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <ledWalkOperationManualMode+0x80>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dc02      	bgt.n	8000b2a <ledWalkOperationManualMode+0x46>
			offSingleRedGreenWalk();
 8000b24:	f7ff ff96 	bl	8000a54 <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 8000b28:	e017      	b.n	8000b5a <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 8000b2a:	f7ff ffa1 	bl	8000a70 <onRedOffGreenWalk>
		break;
 8000b2e:	e014      	b.n	8000b5a <ledWalkOperationManualMode+0x76>
	case GREENREDMANUAL:
		if (numberFreq <= 0)
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <ledWalkOperationManualMode+0x80>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dc02      	bgt.n	8000b3e <ledWalkOperationManualMode+0x5a>
			offSingleRedGreenWalk();
 8000b38:	f7ff ff8c 	bl	8000a54 <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 8000b3c:	e00d      	b.n	8000b5a <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 8000b3e:	f7ff ff97 	bl	8000a70 <onRedOffGreenWalk>
		break;
 8000b42:	e00a      	b.n	8000b5a <ledWalkOperationManualMode+0x76>
	case REDYELLOWMANUAL:
		if (numberFreq <= 0)
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <ledWalkOperationManualMode+0x80>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dc02      	bgt.n	8000b52 <ledWalkOperationManualMode+0x6e>
			offSingleRedGreenWalk();
 8000b4c:	f7ff ff82 	bl	8000a54 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 8000b50:	e003      	b.n	8000b5a <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000b52:	f7ff ff86 	bl	8000a62 <onGreenOffRedWalk>
		break;
 8000b56:	e000      	b.n	8000b5a <ledWalkOperationManualMode+0x76>
	default:
		break;
 8000b58:	bf00      	nop
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000c4 	.word	0x200000c4
 8000b64:	200000d4 	.word	0x200000d4

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f001 fa16 	bl	8001f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f8d4 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f000 fa1c 	bl	8000fb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b78:	f000 f92e 	bl	8000dd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b7c:	f000 f978 	bl	8000e70 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b80:	f000 f9ec 	bl	8000f5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b84:	485f      	ldr	r0, [pc, #380]	; (8000d04 <main+0x19c>)
 8000b86:	f002 fa9f 	bl	80030c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	485e      	ldr	r0, [pc, #376]	; (8000d08 <main+0x1a0>)
 8000b8e:	f002 fb65 	bl	800325c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer1(1);
//  setTimer2(100);
//  setTimer3(50);
  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2, 20);
 8000b92:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <main+0x1a0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2214      	movs	r2, #20
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38
//		 for(int i=0;i<100;i=i+5)
//		  {
//		    __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,i);
//		    HAL_Delay(100);
//		   }
		if (flag1== 1) // flag for getInputButton
 8000b9a:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <main+0x1a4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	f040 808e 	bne.w	8000cc0 <main+0x158>
		{
			setTimer1(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f000 feed 	bl	8001984 <setTimer1>
			switch (getInputButton())
 8000baa:	f7ff fdb5 	bl	8000718 <getInputButton>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	3b02      	subs	r3, #2
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	f200 8086 	bhi.w	8000cc4 <main+0x15c>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <main+0x58>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000be5 	.word	0x08000be5
 8000bc4:	08000bf1 	.word	0x08000bf1
 8000bc8:	08000bfd 	.word	0x08000bfd
 8000bcc:	08000c09 	.word	0x08000c09
 8000bd0:	08000c33 	.word	0x08000c33
 8000bd4:	08000c5f 	.word	0x08000c5f
 8000bd8:	08000c7b 	.word	0x08000c7b
 8000bdc:	08000c97 	.word	0x08000c97
 8000be0:	08000cbb 	.word	0x08000cbb
			{
				case BUTTON1SinglePress:
					modeStatus= NORMALMODE;
 8000be4:	4b4a      	ldr	r3, [pc, #296]	; (8000d10 <main+0x1a8>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
					beginNormalMode();
 8000bea:	f000 fd07 	bl	80015fc <beginNormalMode>
					break;
 8000bee:	e06a      	b.n	8000cc6 <main+0x15e>
				case BUTTON1DoublePress:
					modeStatus= MANUALMODE;
 8000bf0:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <main+0x1a8>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	601a      	str	r2, [r3, #0]
					beginManualMode();
 8000bf6:	f000 fb41 	bl	800127c <beginManualMode>
					break;
 8000bfa:	e064      	b.n	8000cc6 <main+0x15e>
				case BUTTON1TriplePress:
					modeStatus= TUNINGMODE;
 8000bfc:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <main+0x1a8>)
 8000bfe:	2203      	movs	r2, #3
 8000c00:	601a      	str	r2, [r3, #0]
					beginTuningMode();
 8000c02:	f001 f8c1 	bl	8001d88 <beginTuningMode>
					break;
 8000c06:	e05e      	b.n	8000cc6 <main+0x15e>
				case BUTTON1LongPress:
					switch (modeStatus)
 8000c08:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <main+0x1a8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d008      	beq.n	8000c22 <main+0xba>
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	dc0c      	bgt.n	8000c2e <main+0xc6>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d007      	beq.n	8000c28 <main+0xc0>
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d108      	bne.n	8000c2e <main+0xc6>
					{
						case MANUALMODE:
							runManualModeFunction();
 8000c1c:	f000 fa82 	bl	8001124 <runManualModeFunction>
							break;
 8000c20:	e006      	b.n	8000c30 <main+0xc8>
						case TUNINGMODE:
							runTuningMode();
 8000c22:	f001 f83b 	bl	8001c9c <runTuningMode>
							break;
 8000c26:	e003      	b.n	8000c30 <main+0xc8>
						case INITMODES:
							offAllSingLEDs();
 8000c28:	f7ff fecc 	bl	80009c4 <offAllSingLEDs>
							break;
 8000c2c:	e000      	b.n	8000c30 <main+0xc8>
						default:
							break;
 8000c2e:	bf00      	nop
					}
					break;
 8000c30:	e049      	b.n	8000cc6 <main+0x15e>
				case BUTTON2SinglePress:
					switch (modeStatus)
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <main+0x1a8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d00c      	beq.n	8000c54 <main+0xec>
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	dc0d      	bgt.n	8000c5a <main+0xf2>
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d002      	beq.n	8000c48 <main+0xe0>
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d003      	beq.n	8000c4e <main+0xe6>
							break;
						case TUNINGMODE:
							modifyTuningMode();
							break;
						default:
							break;
 8000c46:	e008      	b.n	8000c5a <main+0xf2>
							beginNormalMode();
 8000c48:	f000 fcd8 	bl	80015fc <beginNormalMode>
							break;
 8000c4c:	e006      	b.n	8000c5c <main+0xf4>
							runManualModeFunction();
 8000c4e:	f000 fa69 	bl	8001124 <runManualModeFunction>
							break;
 8000c52:	e003      	b.n	8000c5c <main+0xf4>
							modifyTuningMode();
 8000c54:	f001 f8a8 	bl	8001da8 <modifyTuningMode>
							break;
 8000c58:	e000      	b.n	8000c5c <main+0xf4>
							break;
 8000c5a:	bf00      	nop
					}
					break;
 8000c5c:	e033      	b.n	8000cc6 <main+0x15e>
				case BUTTON2DoublePress:
					switch (modeStatus)
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <main+0x1a8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <main+0x108>
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d105      	bne.n	8000c76 <main+0x10e>
					{
						case TUNINGMODE:
							saveTuningMode();
 8000c6a:	f001 f8fb 	bl	8001e64 <saveTuningMode>
							break;
 8000c6e:	e003      	b.n	8000c78 <main+0x110>
						case INITMODES:
							offAllSingLEDs();
 8000c70:	f7ff fea8 	bl	80009c4 <offAllSingLEDs>
							break;
 8000c74:	e000      	b.n	8000c78 <main+0x110>
						default:
							break;
 8000c76:	bf00      	nop
					}
					break;
 8000c78:	e025      	b.n	8000cc6 <main+0x15e>
				case BUTTON2LongPress:
					switch (modeStatus)
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <main+0x1a8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <main+0x124>
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d105      	bne.n	8000c92 <main+0x12a>
					{
						case TUNINGMODE:
							modifyTuningMode();
 8000c86:	f001 f88f 	bl	8001da8 <modifyTuningMode>
							break;
 8000c8a:	e003      	b.n	8000c94 <main+0x12c>
						case INITMODES:
							offAllSingLEDs();
 8000c8c:	f7ff fe9a 	bl	80009c4 <offAllSingLEDs>
							break;
 8000c90:	e000      	b.n	8000c94 <main+0x12c>
						default:
							break;
 8000c92:	bf00      	nop
					}
					break;
 8000c94:	e017      	b.n	8000cc6 <main+0x15e>
				case BUTTON3SinglePress:
					switch (modeStatus)
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <main+0x1a8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d002      	beq.n	8000ca4 <main+0x13c>
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d005      	beq.n	8000cae <main+0x146>
						case MANUALMODE:
							beginWalkManualMode();
							ledWalkOperationManualMode();
							break;
						default:
							break;
 8000ca2:	e009      	b.n	8000cb8 <main+0x150>
							beginWalkNormalMode();
 8000ca4:	f000 fcc2 	bl	800162c <beginWalkNormalMode>
							ledWalkOperationNormalMode();
 8000ca8:	f7ff feea 	bl	8000a80 <ledWalkOperationNormalMode>
							break;
 8000cac:	e004      	b.n	8000cb8 <main+0x150>
							beginWalkManualMode();
 8000cae:	f000 faf5 	bl	800129c <beginWalkManualMode>
							ledWalkOperationManualMode();
 8000cb2:	f7ff ff17 	bl	8000ae4 <ledWalkOperationManualMode>
							break;
 8000cb6:	bf00      	nop
					}
					break;
 8000cb8:	e005      	b.n	8000cc6 <main+0x15e>
				case BUTTON3DoublePress:
					offAllSingLEDs();
 8000cba:	f7ff fe83 	bl	80009c4 <offAllSingLEDs>
					break;
 8000cbe:	e002      	b.n	8000cc6 <main+0x15e>
				default:
					break;
			}
		}
 8000cc0:	bf00      	nop
 8000cc2:	e000      	b.n	8000cc6 <main+0x15e>
					break;
 8000cc4:	bf00      	nop
		if (flag2 == 1) // flag for normalMode
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <main+0x1ac>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10a      	bne.n	8000ce4 <main+0x17c>
		{
			setTimer2(100);
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f000 fe6c 	bl	80019ac <setTimer2>
			if (modeStatus == NORMALMODE)
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <main+0x1a8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d103      	bne.n	8000ce4 <main+0x17c>
			{
				runNormalMode();
 8000cdc:	f000 fb04 	bl	80012e8 <runNormalMode>
				ledWalkOperationNormalMode();
 8000ce0:	f7ff fece 	bl	8000a80 <ledWalkOperationNormalMode>
			}
		}
		if (flag3 == 1) // flag for animationTuningMode
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <main+0x1b0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	f47f af56 	bne.w	8000b9a <main+0x32>
		{
			setTimer3(50);
 8000cee:	2032      	movs	r0, #50	; 0x32
 8000cf0:	f000 fe70 	bl	80019d4 <setTimer3>
			if (modeStatus== TUNINGMODE)
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <main+0x1a8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	f47f af4e 	bne.w	8000b9a <main+0x32>
			{
				animationTuningMode();
 8000cfe:	f001 f903 	bl	8001f08 <animationTuningMode>
		if (flag1== 1) // flag for getInputButton
 8000d02:	e74a      	b.n	8000b9a <main+0x32>
 8000d04:	20000168 	.word	0x20000168
 8000d08:	200000dc 	.word	0x200000dc
 8000d0c:	200001d8 	.word	0x200001d8
 8000d10:	200000c0 	.word	0x200000c0
 8000d14:	200001d0 	.word	0x200001d0
 8000d18:	200001e0 	.word	0x200001e0

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b094      	sub	sp, #80	; 0x50
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	2230      	movs	r2, #48	; 0x30
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 f844 	bl	8004db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <SystemClock_Config+0xb4>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <SystemClock_Config+0xb4>)
 8000d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <SystemClock_Config+0xb4>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <SystemClock_Config+0xb8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <SystemClock_Config+0xb8>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <SystemClock_Config+0xb8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fd03 	bl	8002798 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d98:	f000 f9b2 	bl	8001100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 ff66 	bl	8002c88 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000dc2:	f000 f99d 	bl	8001100 <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	; 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000dfe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e0c:	2209      	movs	r2, #9
 8000e0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e1e:	f002 f903 	bl	8003028 <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e28:	f000 f96a 	bl	8001100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e3a:	f002 fca1 	bl	8003780 <HAL_TIM_ConfigClockSource>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e44:	f000 f95c 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e56:	f003 f893 	bl	8003f80 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e60:	f000 f94e 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000168 	.word	0x20000168

08000e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000ea2:	4a2d      	ldr	r2, [pc, #180]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 299;
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000eb4:	f240 122b 	movw	r2, #299	; 0x12b
 8000eb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec6:	4823      	ldr	r0, [pc, #140]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000ec8:	f002 f8ae 	bl	8003028 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ed2:	f000 f915 	bl	8001100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000ee4:	f002 fc4c 	bl	8003780 <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000eee:	f000 f907 	bl	8001100 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000ef4:	f002 f958 	bl	80031a8 <HAL_TIM_PWM_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000efe:	f000 f8ff 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4810      	ldr	r0, [pc, #64]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000f12:	f003 f835 	bl	8003f80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f1c:	f000 f8f0 	bl	8001100 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 8000f24:	23c8      	movs	r3, #200	; 0xc8
 8000f26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2204      	movs	r2, #4
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000f38:	f002 fb60 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f42:	f000 f8dd 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <MX_TIM3_Init+0xe4>)
 8000f48:	f000 fdc4 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	; 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000dc 	.word	0x200000dc
 8000f58:	40000400 	.word	0x40000400

08000f5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 96000;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f68:	4a10      	ldr	r2, [pc, #64]	; (8000fac <MX_USART1_UART_Init+0x50>)
 8000f6a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f80:	220c      	movs	r2, #12
 8000f82:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_USART1_UART_Init+0x48>)
 8000f92:	f003 f885 	bl	80040a0 <HAL_UART_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000f9c:	f000 f8b0 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000124 	.word	0x20000124
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	00017700 	.word	0x00017700

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <MX_GPIO_Init+0x12c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a43      	ldr	r2, [pc, #268]	; (80010dc <MX_GPIO_Init+0x12c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <MX_GPIO_Init+0x12c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <MX_GPIO_Init+0x12c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a3c      	ldr	r2, [pc, #240]	; (80010dc <MX_GPIO_Init+0x12c>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <MX_GPIO_Init+0x12c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <MX_GPIO_Init+0x12c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a35      	ldr	r2, [pc, #212]	; (80010dc <MX_GPIO_Init+0x12c>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <MX_GPIO_Init+0x12c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segA_Pin|segB_Pin|segC_Pin|segD_Pin
 800101a:	2200      	movs	r2, #0
 800101c:	217f      	movs	r1, #127	; 0x7f
 800101e:	4830      	ldr	r0, [pc, #192]	; (80010e0 <MX_GPIO_Init+0x130>)
 8001020:	f001 fb86 	bl	8002730 <HAL_GPIO_WritePin>
                          |segE_Pin|segF_Pin|segG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8001024:	2201      	movs	r2, #1
 8001026:	213f      	movs	r1, #63	; 0x3f
 8001028:	482e      	ldr	r0, [pc, #184]	; (80010e4 <MX_GPIO_Init+0x134>)
 800102a:	f001 fb81 	bl	8002730 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, en2_Pin|en3_Pin|en4_Pin|en0_Pin
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001034:	482b      	ldr	r0, [pc, #172]	; (80010e4 <MX_GPIO_Init+0x134>)
 8001036:	f001 fb7b 	bl	8002730 <HAL_GPIO_WritePin>
                          |en1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WALKGREEN_Pin|WALKRED_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001040:	4829      	ldr	r0, [pc, #164]	; (80010e8 <MX_GPIO_Init+0x138>)
 8001042:	f001 fb75 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
                           segE_Pin segF_Pin segG_Pin */
  GPIO_InitStruct.Pin = segA_Pin|segB_Pin|segC_Pin|segD_Pin
 8001046:	237f      	movs	r3, #127	; 0x7f
 8001048:	60fb      	str	r3, [r7, #12]
                          |segE_Pin|segF_Pin|segG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <MX_GPIO_Init+0x130>)
 800105e:	f001 f9b3 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8001062:	233f      	movs	r3, #63	; 0x3f
 8001064:	60fb      	str	r3, [r7, #12]
                          |GREEN2_Pin|YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <MX_GPIO_Init+0x134>)
 800107a:	f001 f9a5 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : en2_Pin en3_Pin en4_Pin en0_Pin
                           en1_Pin */
  GPIO_InitStruct.Pin = en2_Pin|en3_Pin|en4_Pin|en0_Pin
 800107e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001082:	60fb      	str	r3, [r7, #12]
                          |en1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4619      	mov	r1, r3
 8001096:	4813      	ldr	r0, [pc, #76]	; (80010e4 <MX_GPIO_Init+0x134>)
 8001098:	f001 f996 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WALKGREEN_Pin WALKRED_Pin */
  GPIO_InitStruct.Pin = WALKGREEN_Pin|WALKRED_Pin;
 800109c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_GPIO_Init+0x138>)
 80010b6:	f001 f987 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 80010ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_GPIO_Init+0x130>)
 80010d0:	f001 f97a 	bl	80023c8 <HAL_GPIO_Init>

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020c00 	.word	0x40020c00

080010ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	runTimer();
 80010f4:	f000 fbee 	bl	80018d4 <runTimer>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>
	...

0800110c <initStatusManualMode>:
#include "ledWalk.h"

int statusManualMode= INITMANUAL;

void initStatusManualMode()
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
	statusManualMode= INITMANUAL;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <initStatusManualMode+0x14>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	200000c4 	.word	0x200000c4

08001124 <runManualModeFunction>:
void runManualModeFunction()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	switch (statusManualMode) 
 8001128:	4b51      	ldr	r3, [pc, #324]	; (8001270 <runManualModeFunction+0x14c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b04      	cmp	r3, #4
 800112e:	f200 809b 	bhi.w	8001268 <runManualModeFunction+0x144>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <runManualModeFunction+0x14>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	0800114d 	.word	0x0800114d
 800113c:	08001167 	.word	0x08001167
 8001140:	080011a3 	.word	0x080011a3
 8001144:	080011e5 	.word	0x080011e5
 8001148:	08001227 	.word	0x08001227
	{
		case INITMANUAL:
			statusManualMode= REDGREENMANUAL;
 800114c:	4b48      	ldr	r3, [pc, #288]	; (8001270 <runManualModeFunction+0x14c>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8001152:	2002      	movs	r0, #2
 8001154:	f7ff fc06 	bl	8000964 <update7SEGBufferMode>
			offAllSingLEDs();
 8001158:	f7ff fc34 	bl	80009c4 <offAllSingLEDs>
			onSingleRedTraffic1();
 800115c:	f7ff fc4a 	bl	80009f4 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8001160:	f7ff fc70 	bl	8000a44 <onSingleGreenTraffic2>
			break;
 8001164:	e081      	b.n	800126a <runManualModeFunction+0x146>
		case REDGREENMANUAL:
			statusManualMode= REDYELLOWMANUAL;
 8001166:	4b42      	ldr	r3, [pc, #264]	; (8001270 <runManualModeFunction+0x14c>)
 8001168:	2202      	movs	r2, #2
 800116a:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 800116c:	4b40      	ldr	r3, [pc, #256]	; (8001270 <runManualModeFunction+0x14c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b40      	ldr	r3, [pc, #256]	; (8001274 <runManualModeFunction+0x150>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d10b      	bne.n	8001190 <runManualModeFunction+0x6c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <runManualModeFunction+0x154>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	dd03      	ble.n	8001188 <runManualModeFunction+0x64>
 8001180:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <runManualModeFunction+0x154>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3b01      	subs	r3, #1
 8001186:	e001      	b.n	800118c <runManualModeFunction+0x68>
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <runManualModeFunction+0x154>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a3a      	ldr	r2, [pc, #232]	; (8001278 <runManualModeFunction+0x154>)
 800118e:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8001190:	f7ff fca8 	bl	8000ae4 <ledWalkOperationManualMode>
			offAllSingLEDs();
 8001194:	f7ff fc16 	bl	80009c4 <offAllSingLEDs>
			onSingleRedTraffic1();
 8001198:	f7ff fc2c 	bl	80009f4 <onSingleRedTraffic1>
			onSingleYellowTraffic2();
 800119c:	f7ff fc4a 	bl	8000a34 <onSingleYellowTraffic2>
			break;
 80011a0:	e063      	b.n	800126a <runManualModeFunction+0x146>
		case REDYELLOWMANUAL:
			statusManualMode= GREENREDMANUAL;
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <runManualModeFunction+0x14c>)
 80011a4:	2203      	movs	r2, #3
 80011a6:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <runManualModeFunction+0x14c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <runManualModeFunction+0x150>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d10b      	bne.n	80011cc <runManualModeFunction+0xa8>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <runManualModeFunction+0x154>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd03      	ble.n	80011c4 <runManualModeFunction+0xa0>
 80011bc:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <runManualModeFunction+0x154>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	e001      	b.n	80011c8 <runManualModeFunction+0xa4>
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <runManualModeFunction+0x154>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a2b      	ldr	r2, [pc, #172]	; (8001278 <runManualModeFunction+0x154>)
 80011ca:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 80011cc:	f7ff fc8a 	bl	8000ae4 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f7ff fbc7 	bl	8000964 <update7SEGBufferMode>
			offAllSingLEDs();
 80011d6:	f7ff fbf5 	bl	80009c4 <offAllSingLEDs>
			onSingleGreenTraffic1();
 80011da:	f7ff fc1b 	bl	8000a14 <onSingleGreenTraffic1>
			onSingleRedTraffic2();
 80011de:	f7ff fc21 	bl	8000a24 <onSingleRedTraffic2>
			break;
 80011e2:	e042      	b.n	800126a <runManualModeFunction+0x146>
		case GREENREDMANUAL:
			statusManualMode= YELLOWREDMANUAL;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <runManualModeFunction+0x14c>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <runManualModeFunction+0x14c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <runManualModeFunction+0x150>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d10b      	bne.n	800120e <runManualModeFunction+0xea>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <runManualModeFunction+0x154>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd03      	ble.n	8001206 <runManualModeFunction+0xe2>
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <runManualModeFunction+0x154>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	e001      	b.n	800120a <runManualModeFunction+0xe6>
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <runManualModeFunction+0x154>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <runManualModeFunction+0x154>)
 800120c:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 800120e:	f7ff fc69 	bl	8000ae4 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8001212:	2002      	movs	r0, #2
 8001214:	f7ff fba6 	bl	8000964 <update7SEGBufferMode>
			offAllSingLEDs();
 8001218:	f7ff fbd4 	bl	80009c4 <offAllSingLEDs>
			onSingleYellowTraffic1();
 800121c:	f7ff fbf2 	bl	8000a04 <onSingleYellowTraffic1>
			onSingleRedTraffic2();
 8001220:	f7ff fc00 	bl	8000a24 <onSingleRedTraffic2>
			break;
 8001224:	e021      	b.n	800126a <runManualModeFunction+0x146>
		case YELLOWREDMANUAL:
			statusManualMode= REDGREENMANUAL;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <runManualModeFunction+0x14c>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <runManualModeFunction+0x14c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <runManualModeFunction+0x150>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d10b      	bne.n	8001250 <runManualModeFunction+0x12c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <runManualModeFunction+0x154>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd03      	ble.n	8001248 <runManualModeFunction+0x124>
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <runManualModeFunction+0x154>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3b01      	subs	r3, #1
 8001246:	e001      	b.n	800124c <runManualModeFunction+0x128>
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <runManualModeFunction+0x154>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <runManualModeFunction+0x154>)
 800124e:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8001250:	f7ff fc48 	bl	8000ae4 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8001254:	2002      	movs	r0, #2
 8001256:	f7ff fb85 	bl	8000964 <update7SEGBufferMode>
			offAllSingLEDs();
 800125a:	f7ff fbb3 	bl	80009c4 <offAllSingLEDs>
			onSingleRedTraffic1();
 800125e:	f7ff fbc9 	bl	80009f4 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8001262:	f7ff fbef 	bl	8000a44 <onSingleGreenTraffic2>
			break;
 8001266:	e000      	b.n	800126a <runManualModeFunction+0x146>
		default:
			break;
 8001268:	bf00      	nop
	}
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000c4 	.word	0x200000c4
 8001274:	200000d8 	.word	0x200000d8
 8001278:	200000d4 	.word	0x200000d4

0800127c <beginManualMode>:

void beginManualMode()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <beginManualMode+0x1c>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
	offSingleRedGreenWalk();
 8001286:	f7ff fbe5 	bl	8000a54 <offSingleRedGreenWalk>
	initStatusManualMode();
 800128a:	f7ff ff3f 	bl	800110c <initStatusManualMode>
	runManualModeFunction();
 800128e:	f7ff ff49 	bl	8001124 <runManualModeFunction>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000d4 	.word	0x200000d4

0800129c <beginWalkManualMode>:

void beginWalkManualMode()
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	numberFreq= 3;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <beginWalkManualMode+0x1c>)
 80012a2:	2203      	movs	r2, #3
 80012a4:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusManualMode;
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <beginWalkManualMode+0x20>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <beginWalkManualMode+0x24>)
 80012ac:	6013      	str	r3, [r2, #0]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	200000d4 	.word	0x200000d4
 80012bc:	200000c4 	.word	0x200000c4
 80012c0:	200000d8 	.word	0x200000d8

080012c4 <initStatusNormalMode>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void initStatusNormalMode()
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	statusTraffic1 = INITNORMAL;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <initStatusNormalMode+0x1c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
	statusTraffic2 = INITNORMAL;
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <initStatusNormalMode+0x20>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	200000c8 	.word	0x200000c8
 80012e4:	200000cc 	.word	0x200000cc

080012e8 <runNormalMode>:
void runNormalMode()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 80012ec:	4b9b      	ldr	r3, [pc, #620]	; (800155c <runNormalMode+0x274>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	f200 80c3 	bhi.w	800147c <runNormalMode+0x194>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <runNormalMode+0x14>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	0800132b 	.word	0x0800132b
 8001304:	0800139d 	.word	0x0800139d
 8001308:	0800140d 	.word	0x0800140d
	{
	case INITNORMAL:
		counterLedRed1 = durationLedRed;
 800130c:	4b94      	ldr	r3, [pc, #592]	; (8001560 <runNormalMode+0x278>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a94      	ldr	r2, [pc, #592]	; (8001564 <runNormalMode+0x27c>)
 8001312:	6013      	str	r3, [r2, #0]
		statusTraffic1 = REDNORMAL;
 8001314:	4b91      	ldr	r3, [pc, #580]	; (800155c <runNormalMode+0x274>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 800131a:	f7ff fb6b 	bl	80009f4 <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 800131e:	4b91      	ldr	r3, [pc, #580]	; (8001564 <runNormalMode+0x27c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fb06 	bl	8000934 <update7SEGBufferTraffic1>
		break;
 8001328:	e0af      	b.n	800148a <runNormalMode+0x1a2>
	case REDNORMAL:
		if (counterLedRed1 > 0)
 800132a:	4b8e      	ldr	r3, [pc, #568]	; (8001564 <runNormalMode+0x27c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f340 80a6 	ble.w	8001480 <runNormalMode+0x198>
		{
			counterLedRed1--;
 8001334:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <runNormalMode+0x27c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a8a      	ldr	r2, [pc, #552]	; (8001564 <runNormalMode+0x27c>)
 800133c:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 800133e:	4b89      	ldr	r3, [pc, #548]	; (8001564 <runNormalMode+0x27c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dc22      	bgt.n	800138c <runNormalMode+0xa4>
			{
				counterLedGreen1 = durationLedGreen;
 8001346:	4b88      	ldr	r3, [pc, #544]	; (8001568 <runNormalMode+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a88      	ldr	r2, [pc, #544]	; (800156c <runNormalMode+0x284>)
 800134c:	6013      	str	r3, [r2, #0]
				statusTraffic1 = GREENNORMAL;
 800134e:	4b83      	ldr	r3, [pc, #524]	; (800155c <runNormalMode+0x274>)
 8001350:	2202      	movs	r2, #2
 8001352:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8001354:	4b86      	ldr	r3, [pc, #536]	; (8001570 <runNormalMode+0x288>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b80      	ldr	r3, [pc, #512]	; (800155c <runNormalMode+0x274>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d10b      	bne.n	8001378 <runNormalMode+0x90>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001360:	4b84      	ldr	r3, [pc, #528]	; (8001574 <runNormalMode+0x28c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd03      	ble.n	8001370 <runNormalMode+0x88>
 8001368:	4b82      	ldr	r3, [pc, #520]	; (8001574 <runNormalMode+0x28c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	e001      	b.n	8001374 <runNormalMode+0x8c>
 8001370:	4b80      	ldr	r3, [pc, #512]	; (8001574 <runNormalMode+0x28c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a7f      	ldr	r2, [pc, #508]	; (8001574 <runNormalMode+0x28c>)
 8001376:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8001378:	f7ff fb82 	bl	8000a80 <ledWalkOperationNormalMode>
				onSingleGreenTraffic1();
 800137c:	f7ff fb4a 	bl	8000a14 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8001380:	4b7a      	ldr	r3, [pc, #488]	; (800156c <runNormalMode+0x284>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fad5 	bl	8000934 <update7SEGBufferTraffic1>
			{
				onSingleRedTraffic1();
				update7SEGBufferTraffic1(counterLedRed1);
			}
		}
		break;
 800138a:	e079      	b.n	8001480 <runNormalMode+0x198>
				onSingleRedTraffic1();
 800138c:	f7ff fb32 	bl	80009f4 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001390:	4b74      	ldr	r3, [pc, #464]	; (8001564 <runNormalMode+0x27c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff facd 	bl	8000934 <update7SEGBufferTraffic1>
		break;
 800139a:	e071      	b.n	8001480 <runNormalMode+0x198>
	case GREENNORMAL:
		if (counterLedGreen1 > 0)
 800139c:	4b73      	ldr	r3, [pc, #460]	; (800156c <runNormalMode+0x284>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd6f      	ble.n	8001484 <runNormalMode+0x19c>
		{
			counterLedGreen1--;
 80013a4:	4b71      	ldr	r3, [pc, #452]	; (800156c <runNormalMode+0x284>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4a70      	ldr	r2, [pc, #448]	; (800156c <runNormalMode+0x284>)
 80013ac:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 80013ae:	4b6f      	ldr	r3, [pc, #444]	; (800156c <runNormalMode+0x284>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dc22      	bgt.n	80013fc <runNormalMode+0x114>
			{
				counterLedYellow1 = durationLedYellow;
 80013b6:	4b70      	ldr	r3, [pc, #448]	; (8001578 <runNormalMode+0x290>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a70      	ldr	r2, [pc, #448]	; (800157c <runNormalMode+0x294>)
 80013bc:	6013      	str	r3, [r2, #0]
				statusTraffic1 = YELLOWNORMAL;
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <runNormalMode+0x274>)
 80013c0:	2203      	movs	r2, #3
 80013c2:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 80013c4:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <runNormalMode+0x288>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b64      	ldr	r3, [pc, #400]	; (800155c <runNormalMode+0x274>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d10b      	bne.n	80013e8 <runNormalMode+0x100>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 80013d0:	4b68      	ldr	r3, [pc, #416]	; (8001574 <runNormalMode+0x28c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dd03      	ble.n	80013e0 <runNormalMode+0xf8>
 80013d8:	4b66      	ldr	r3, [pc, #408]	; (8001574 <runNormalMode+0x28c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	e001      	b.n	80013e4 <runNormalMode+0xfc>
 80013e0:	4b64      	ldr	r3, [pc, #400]	; (8001574 <runNormalMode+0x28c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a63      	ldr	r2, [pc, #396]	; (8001574 <runNormalMode+0x28c>)
 80013e6:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 80013e8:	f7ff fb4a 	bl	8000a80 <ledWalkOperationNormalMode>
				onSingleYellowTraffic1();
 80013ec:	f7ff fb0a 	bl	8000a04 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 80013f0:	4b62      	ldr	r3, [pc, #392]	; (800157c <runNormalMode+0x294>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fa9d 	bl	8000934 <update7SEGBufferTraffic1>
			{
				onSingleGreenTraffic1();
				update7SEGBufferTraffic1(counterLedGreen1);
			}
		}
		break;
 80013fa:	e043      	b.n	8001484 <runNormalMode+0x19c>
				onSingleGreenTraffic1();
 80013fc:	f7ff fb0a 	bl	8000a14 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8001400:	4b5a      	ldr	r3, [pc, #360]	; (800156c <runNormalMode+0x284>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fa95 	bl	8000934 <update7SEGBufferTraffic1>
		break;
 800140a:	e03b      	b.n	8001484 <runNormalMode+0x19c>
	case YELLOWNORMAL:
		if (counterLedYellow1 > 0)
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <runNormalMode+0x294>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	dd39      	ble.n	8001488 <runNormalMode+0x1a0>
		{
			counterLedYellow1--;
 8001414:	4b59      	ldr	r3, [pc, #356]	; (800157c <runNormalMode+0x294>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3b01      	subs	r3, #1
 800141a:	4a58      	ldr	r2, [pc, #352]	; (800157c <runNormalMode+0x294>)
 800141c:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 800141e:	4b57      	ldr	r3, [pc, #348]	; (800157c <runNormalMode+0x294>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	dc22      	bgt.n	800146c <runNormalMode+0x184>
			{
				counterLedRed1 = durationLedRed;
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <runNormalMode+0x278>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <runNormalMode+0x27c>)
 800142c:	6013      	str	r3, [r2, #0]
				statusTraffic1 = REDNORMAL;
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <runNormalMode+0x274>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8001434:	4b4e      	ldr	r3, [pc, #312]	; (8001570 <runNormalMode+0x288>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b48      	ldr	r3, [pc, #288]	; (800155c <runNormalMode+0x274>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d10b      	bne.n	8001458 <runNormalMode+0x170>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001440:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <runNormalMode+0x28c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd03      	ble.n	8001450 <runNormalMode+0x168>
 8001448:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <runNormalMode+0x28c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	e001      	b.n	8001454 <runNormalMode+0x16c>
 8001450:	4b48      	ldr	r3, [pc, #288]	; (8001574 <runNormalMode+0x28c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a47      	ldr	r2, [pc, #284]	; (8001574 <runNormalMode+0x28c>)
 8001456:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8001458:	f7ff fb12 	bl	8000a80 <ledWalkOperationNormalMode>
				onSingleRedTraffic1();
 800145c:	f7ff faca 	bl	80009f4 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001460:	4b40      	ldr	r3, [pc, #256]	; (8001564 <runNormalMode+0x27c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fa65 	bl	8000934 <update7SEGBufferTraffic1>
			{
				onSingleYellowTraffic1();
				update7SEGBufferTraffic1(counterLedYellow1);
			}
		}
		break;
 800146a:	e00d      	b.n	8001488 <runNormalMode+0x1a0>
				onSingleYellowTraffic1();
 800146c:	f7ff faca 	bl	8000a04 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <runNormalMode+0x294>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fa5d 	bl	8000934 <update7SEGBufferTraffic1>
		break;
 800147a:	e005      	b.n	8001488 <runNormalMode+0x1a0>
	default:
		break;
 800147c:	bf00      	nop
 800147e:	e004      	b.n	800148a <runNormalMode+0x1a2>
		break;
 8001480:	bf00      	nop
 8001482:	e002      	b.n	800148a <runNormalMode+0x1a2>
		break;
 8001484:	bf00      	nop
 8001486:	e000      	b.n	800148a <runNormalMode+0x1a2>
		break;
 8001488:	bf00      	nop
	}
	switch (statusTraffic2)
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <runNormalMode+0x298>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b03      	cmp	r3, #3
 8001490:	f200 80a2 	bhi.w	80015d8 <runNormalMode+0x2f0>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <runNormalMode+0x1b4>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	080014ad 	.word	0x080014ad
 80014a0:	08001591 	.word	0x08001591
 80014a4:	080014cb 	.word	0x080014cb
 80014a8:	08001515 	.word	0x08001515
	{
	case INITNORMAL:
		statusTraffic2 = GREENNORMAL;
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <runNormalMode+0x298>)
 80014ae:	2202      	movs	r2, #2
 80014b0:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <runNormalMode+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <runNormalMode+0x29c>)
 80014b8:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 80014ba:	f7ff fac3 	bl	8000a44 <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <runNormalMode+0x29c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fa42 	bl	800094c <update7SEGBufferTraffic2>
		break;
 80014c8:	e08d      	b.n	80015e6 <runNormalMode+0x2fe>
	case GREENNORMAL:
		if (counterLedGreen2 > 0)
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <runNormalMode+0x29c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f340 8084 	ble.w	80015dc <runNormalMode+0x2f4>
		{
			counterLedGreen2--;
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <runNormalMode+0x29c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <runNormalMode+0x29c>)
 80014dc:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <runNormalMode+0x29c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	dc0e      	bgt.n	8001504 <runNormalMode+0x21c>
			{
				counterLedYellow2 = durationLedYellow;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <runNormalMode+0x290>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a27      	ldr	r2, [pc, #156]	; (8001588 <runNormalMode+0x2a0>)
 80014ec:	6013      	str	r3, [r2, #0]
				statusTraffic2 = YELLOWNORMAL;
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <runNormalMode+0x298>)
 80014f0:	2203      	movs	r2, #3
 80014f2:	601a      	str	r2, [r3, #0]
				onSingleYellowTraffic2();
 80014f4:	f7ff fa9e 	bl	8000a34 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <runNormalMode+0x2a0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fa25 	bl	800094c <update7SEGBufferTraffic2>
			{
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
			}
		}
		break;
 8001502:	e06b      	b.n	80015dc <runNormalMode+0x2f4>
				onSingleGreenTraffic2();
 8001504:	f7ff fa9e 	bl	8000a44 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <runNormalMode+0x29c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fa1d 	bl	800094c <update7SEGBufferTraffic2>
		break;
 8001512:	e063      	b.n	80015dc <runNormalMode+0x2f4>
	case YELLOWNORMAL:
		if (counterLedYellow2 > 0)
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <runNormalMode+0x2a0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	dd61      	ble.n	80015e0 <runNormalMode+0x2f8>
		{
			counterLedYellow2--;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <runNormalMode+0x2a0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	4a19      	ldr	r2, [pc, #100]	; (8001588 <runNormalMode+0x2a0>)
 8001524:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <runNormalMode+0x2a0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	dc0e      	bgt.n	800154c <runNormalMode+0x264>
			{
				counterLedRed2 = durationLedRed;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <runNormalMode+0x278>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a16      	ldr	r2, [pc, #88]	; (800158c <runNormalMode+0x2a4>)
 8001534:	6013      	str	r3, [r2, #0]
				statusTraffic2 = REDNORMAL;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <runNormalMode+0x298>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 800153c:	f7ff fa72 	bl	8000a24 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <runNormalMode+0x2a4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fa01 	bl	800094c <update7SEGBufferTraffic2>
			{
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
			}
		}
		break;
 800154a:	e049      	b.n	80015e0 <runNormalMode+0x2f8>
				onSingleYellowTraffic2();
 800154c:	f7ff fa72 	bl	8000a34 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <runNormalMode+0x2a0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f9f9 	bl	800094c <update7SEGBufferTraffic2>
		break;
 800155a:	e041      	b.n	80015e0 <runNormalMode+0x2f8>
 800155c:	200000c8 	.word	0x200000c8
 8001560:	2000005c 	.word	0x2000005c
 8001564:	200001c4 	.word	0x200001c4
 8001568:	20000060 	.word	0x20000060
 800156c:	200001b4 	.word	0x200001b4
 8001570:	200000d8 	.word	0x200000d8
 8001574:	200000d4 	.word	0x200000d4
 8001578:	20000064 	.word	0x20000064
 800157c:	200001b8 	.word	0x200001b8
 8001580:	200000cc 	.word	0x200000cc
 8001584:	200001c0 	.word	0x200001c0
 8001588:	200001bc 	.word	0x200001bc
 800158c:	200001b0 	.word	0x200001b0
	case REDNORMAL:
		if (counterLedRed2 > 0)
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <runNormalMode+0x304>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	dd25      	ble.n	80015e4 <runNormalMode+0x2fc>
		{
			counterLedRed2--;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <runNormalMode+0x304>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <runNormalMode+0x304>)
 80015a0:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <runNormalMode+0x304>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dc0e      	bgt.n	80015c8 <runNormalMode+0x2e0>
			{
				counterLedGreen2 = durationLedGreen;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <runNormalMode+0x308>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <runNormalMode+0x30c>)
 80015b0:	6013      	str	r3, [r2, #0]
				statusTraffic2 = GREENNORMAL;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <runNormalMode+0x310>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 80015b8:	f7ff fa44 	bl	8000a44 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <runNormalMode+0x30c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff f9c3 	bl	800094c <update7SEGBufferTraffic2>
			{
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
			}
		}
		break;
 80015c6:	e00d      	b.n	80015e4 <runNormalMode+0x2fc>
				onSingleRedTraffic2();
 80015c8:	f7ff fa2c 	bl	8000a24 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <runNormalMode+0x304>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f9bb 	bl	800094c <update7SEGBufferTraffic2>
		break;
 80015d6:	e005      	b.n	80015e4 <runNormalMode+0x2fc>
	default:
		break;
 80015d8:	bf00      	nop
 80015da:	e004      	b.n	80015e6 <runNormalMode+0x2fe>
		break;
 80015dc:	bf00      	nop
 80015de:	e002      	b.n	80015e6 <runNormalMode+0x2fe>
		break;
 80015e0:	bf00      	nop
 80015e2:	e000      	b.n	80015e6 <runNormalMode+0x2fe>
		break;
 80015e4:	bf00      	nop
	}
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200001b0 	.word	0x200001b0
 80015f0:	20000060 	.word	0x20000060
 80015f4:	200001c0 	.word	0x200001c0
 80015f8:	200000cc 	.word	0x200000cc

080015fc <beginNormalMode>:

void beginNormalMode()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <beginNormalMode+0x2c>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
	offSingleRedGreenWalk();
 8001606:	f7ff fa25 	bl	8000a54 <offSingleRedGreenWalk>
	offAllSingLEDs();
 800160a:	f7ff f9db 	bl	80009c4 <offAllSingLEDs>
	initStatusNormalMode();
 800160e:	f7ff fe59 	bl	80012c4 <initStatusNormalMode>
	runNormalMode();
 8001612:	f7ff fe69 	bl	80012e8 <runNormalMode>
	setTimer2(100);
 8001616:	2064      	movs	r0, #100	; 0x64
 8001618:	f000 f9c8 	bl	80019ac <setTimer2>
	update7SEGBufferMode(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff f9a1 	bl	8000964 <update7SEGBufferMode>
//	displayAll7Seg();
//	setTimer4(10);
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000d4 	.word	0x200000d4

0800162c <beginWalkNormalMode>:

void beginWalkNormalMode()
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	numberFreq= 3;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <beginWalkNormalMode+0x1c>)
 8001632:	2203      	movs	r2, #3
 8001634:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusTraffic1;
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <beginWalkNormalMode+0x20>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <beginWalkNormalMode+0x24>)
 800163c:	6013      	str	r3, [r2, #0]
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	200000d4 	.word	0x200000d4
 800164c:	200000c8 	.word	0x200000c8
 8001650:	200000d8 	.word	0x200000d8

08001654 <controlSingleLedTraffic>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLedTraffic(int orderTraffic, int statusLed)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d003      	beq.n	800166c <controlSingleLedTraffic+0x18>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b09      	cmp	r3, #9
 8001668:	d077      	beq.n	800175a <controlSingleLedTraffic+0x106>
		default:
			break;
		}
		break;
	default:
		break;
 800166a:	e0ee      	b.n	800184a <controlSingleLedTraffic+0x1f6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d871      	bhi.n	8001756 <controlSingleLedTraffic+0x102>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <controlSingleLedTraffic+0x24>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	08001699 	.word	0x08001699
 800167c:	080016b9 	.word	0x080016b9
 8001680:	080016d9 	.word	0x080016d9
 8001684:	080016f9 	.word	0x080016f9
 8001688:	0800170d 	.word	0x0800170d
 800168c:	08001703 	.word	0x08001703
 8001690:	08001717 	.word	0x08001717
 8001694:	08001737 	.word	0x08001737
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2101      	movs	r1, #1
 800169c:	486d      	ldr	r0, [pc, #436]	; (8001854 <controlSingleLedTraffic+0x200>)
 800169e:	f001 f847 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2104      	movs	r1, #4
 80016a6:	486b      	ldr	r0, [pc, #428]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016a8:	f001 f842 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2102      	movs	r1, #2
 80016b0:	4868      	ldr	r0, [pc, #416]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016b2:	f001 f83d 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 80016b6:	e04f      	b.n	8001758 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2101      	movs	r1, #1
 80016bc:	4865      	ldr	r0, [pc, #404]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016be:	f001 f837 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2104      	movs	r1, #4
 80016c6:	4863      	ldr	r0, [pc, #396]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016c8:	f001 f832 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2102      	movs	r1, #2
 80016d0:	4860      	ldr	r0, [pc, #384]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016d2:	f001 f82d 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 80016d6:	e03f      	b.n	8001758 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2101      	movs	r1, #1
 80016dc:	485d      	ldr	r0, [pc, #372]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016de:	f001 f827 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2104      	movs	r1, #4
 80016e6:	485b      	ldr	r0, [pc, #364]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016e8:	f001 f822 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2102      	movs	r1, #2
 80016f0:	4858      	ldr	r0, [pc, #352]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016f2:	f001 f81d 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 80016f6:	e02f      	b.n	8001758 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80016f8:	2101      	movs	r1, #1
 80016fa:	4856      	ldr	r0, [pc, #344]	; (8001854 <controlSingleLedTraffic+0x200>)
 80016fc:	f001 f831 	bl	8002762 <HAL_GPIO_TogglePin>
			break;
 8001700:	e02a      	b.n	8001758 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001702:	2104      	movs	r1, #4
 8001704:	4853      	ldr	r0, [pc, #332]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001706:	f001 f82c 	bl	8002762 <HAL_GPIO_TogglePin>
			break;
 800170a:	e025      	b.n	8001758 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800170c:	2102      	movs	r1, #2
 800170e:	4851      	ldr	r0, [pc, #324]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001710:	f001 f827 	bl	8002762 <HAL_GPIO_TogglePin>
			break;
 8001714:	e020      	b.n	8001758 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2101      	movs	r1, #1
 800171a:	484e      	ldr	r0, [pc, #312]	; (8001854 <controlSingleLedTraffic+0x200>)
 800171c:	f001 f808 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2104      	movs	r1, #4
 8001724:	484b      	ldr	r0, [pc, #300]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001726:	f001 f803 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2102      	movs	r1, #2
 800172e:	4849      	ldr	r0, [pc, #292]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001730:	f000 fffe 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 8001734:	e010      	b.n	8001758 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001736:	2201      	movs	r2, #1
 8001738:	2101      	movs	r1, #1
 800173a:	4846      	ldr	r0, [pc, #280]	; (8001854 <controlSingleLedTraffic+0x200>)
 800173c:	f000 fff8 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2104      	movs	r1, #4
 8001744:	4843      	ldr	r0, [pc, #268]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001746:	f000 fff3 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2102      	movs	r1, #2
 800174e:	4841      	ldr	r0, [pc, #260]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001750:	f000 ffee 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 8001754:	e000      	b.n	8001758 <controlSingleLedTraffic+0x104>
			break;
 8001756:	bf00      	nop
		break;
 8001758:	e077      	b.n	800184a <controlSingleLedTraffic+0x1f6>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b07      	cmp	r3, #7
 800175e:	d872      	bhi.n	8001846 <controlSingleLedTraffic+0x1f2>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <controlSingleLedTraffic+0x114>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	08001789 	.word	0x08001789
 800176c:	080017a9 	.word	0x080017a9
 8001770:	080017c9 	.word	0x080017c9
 8001774:	080017e9 	.word	0x080017e9
 8001778:	080017fd 	.word	0x080017fd
 800177c:	080017f3 	.word	0x080017f3
 8001780:	08001807 	.word	0x08001807
 8001784:	08001827 	.word	0x08001827
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2108      	movs	r1, #8
 800178c:	4831      	ldr	r0, [pc, #196]	; (8001854 <controlSingleLedTraffic+0x200>)
 800178e:	f000 ffcf 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2120      	movs	r1, #32
 8001796:	482f      	ldr	r0, [pc, #188]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001798:	f000 ffca 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2110      	movs	r1, #16
 80017a0:	482c      	ldr	r0, [pc, #176]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017a2:	f000 ffc5 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 80017a6:	e04f      	b.n	8001848 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2108      	movs	r1, #8
 80017ac:	4829      	ldr	r0, [pc, #164]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017ae:	f000 ffbf 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	4827      	ldr	r0, [pc, #156]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017b8:	f000 ffba 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2110      	movs	r1, #16
 80017c0:	4824      	ldr	r0, [pc, #144]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017c2:	f000 ffb5 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 80017c6:	e03f      	b.n	8001848 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2108      	movs	r1, #8
 80017cc:	4821      	ldr	r0, [pc, #132]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017ce:	f000 ffaf 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2120      	movs	r1, #32
 80017d6:	481f      	ldr	r0, [pc, #124]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017d8:	f000 ffaa 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2110      	movs	r1, #16
 80017e0:	481c      	ldr	r0, [pc, #112]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017e2:	f000 ffa5 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 80017e6:	e02f      	b.n	8001848 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80017e8:	2108      	movs	r1, #8
 80017ea:	481a      	ldr	r0, [pc, #104]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017ec:	f000 ffb9 	bl	8002762 <HAL_GPIO_TogglePin>
			break;
 80017f0:	e02a      	b.n	8001848 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80017f2:	2120      	movs	r1, #32
 80017f4:	4817      	ldr	r0, [pc, #92]	; (8001854 <controlSingleLedTraffic+0x200>)
 80017f6:	f000 ffb4 	bl	8002762 <HAL_GPIO_TogglePin>
			break;
 80017fa:	e025      	b.n	8001848 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80017fc:	2110      	movs	r1, #16
 80017fe:	4815      	ldr	r0, [pc, #84]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001800:	f000 ffaf 	bl	8002762 <HAL_GPIO_TogglePin>
			break;
 8001804:	e020      	b.n	8001848 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2108      	movs	r1, #8
 800180a:	4812      	ldr	r0, [pc, #72]	; (8001854 <controlSingleLedTraffic+0x200>)
 800180c:	f000 ff90 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	2120      	movs	r1, #32
 8001814:	480f      	ldr	r0, [pc, #60]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001816:	f000 ff8b 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2110      	movs	r1, #16
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001820:	f000 ff86 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 8001824:	e010      	b.n	8001848 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2108      	movs	r1, #8
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <controlSingleLedTraffic+0x200>)
 800182c:	f000 ff80 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2120      	movs	r1, #32
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001836:	f000 ff7b 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800183a:	2201      	movs	r2, #1
 800183c:	2110      	movs	r1, #16
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <controlSingleLedTraffic+0x200>)
 8001840:	f000 ff76 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 8001844:	e000      	b.n	8001848 <controlSingleLedTraffic+0x1f4>
			break;
 8001846:	bf00      	nop
		break;
 8001848:	bf00      	nop
	}
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40020400 	.word	0x40020400

08001858 <controlSingleLedWalk>:

void controlSingleLedWalk(int statusLed)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	switch (statusLed)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d022      	beq.n	80018ac <controlSingleLedWalk+0x54>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0c      	cmp	r3, #12
 800186a:	dc2c      	bgt.n	80018c6 <controlSingleLedWalk+0x6e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b0a      	cmp	r3, #10
 8001870:	d00f      	beq.n	8001892 <controlSingleLedWalk+0x3a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0b      	cmp	r3, #11
 8001876:	d126      	bne.n	80018c6 <controlSingleLedWalk+0x6e>
	{
		case ONGREENOFFREDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, SET);
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800187e:	4814      	ldr	r0, [pc, #80]	; (80018d0 <controlSingleLedWalk+0x78>)
 8001880:	f000 ff56 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800188a:	4811      	ldr	r0, [pc, #68]	; (80018d0 <controlSingleLedWalk+0x78>)
 800188c:	f000 ff50 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 8001890:	e01a      	b.n	80018c8 <controlSingleLedWalk+0x70>
		case OFFLEDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <controlSingleLedWalk+0x78>)
 800189a:	f000 ff49 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <controlSingleLedWalk+0x78>)
 80018a6:	f000 ff43 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 80018aa:	e00d      	b.n	80018c8 <controlSingleLedWalk+0x70>
		case ONREDOFFGREENWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <controlSingleLedWalk+0x78>)
 80018b4:	f000 ff3c 	bl	8002730 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <controlSingleLedWalk+0x78>)
 80018c0:	f000 ff36 	bl	8002730 <HAL_GPIO_WritePin>
			break;
 80018c4:	e000      	b.n	80018c8 <controlSingleLedWalk+0x70>
		default:
			break;
 80018c6:	bf00      	nop
	}
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020c00 	.word	0x40020c00

080018d4 <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <runTimer+0x90>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	dd0b      	ble.n	80018f8 <runTimer+0x24>
	{
		counter1--;
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <runTimer+0x90>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <runTimer+0x90>)
 80018e8:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <runTimer+0x90>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	dc02      	bgt.n	80018f8 <runTimer+0x24>
		{
			flag1 = 1;
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <runTimer+0x94>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <runTimer+0x98>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dd0b      	ble.n	8001918 <runTimer+0x44>
	{
		counter2--;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <runTimer+0x98>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	4a19      	ldr	r2, [pc, #100]	; (800196c <runTimer+0x98>)
 8001908:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <runTimer+0x98>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	dc02      	bgt.n	8001918 <runTimer+0x44>
		{
			flag2 = 1;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <runTimer+0x9c>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <runTimer+0xa0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	dd0b      	ble.n	8001938 <runTimer+0x64>
	{
		counter3--;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <runTimer+0xa0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <runTimer+0xa0>)
 8001928:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <runTimer+0xa0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	dc02      	bgt.n	8001938 <runTimer+0x64>
		{
			flag3 = 1;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <runTimer+0xa4>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <runTimer+0xa8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dd0b      	ble.n	8001958 <runTimer+0x84>
	{
		counter4--;
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <runTimer+0xa8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	4a0d      	ldr	r2, [pc, #52]	; (800197c <runTimer+0xa8>)
 8001948:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <runTimer+0xa8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	dc02      	bgt.n	8001958 <runTimer+0x84>
		{
			flag4 = 1;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <runTimer+0xac>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200001cc 	.word	0x200001cc
 8001968:	200001d8 	.word	0x200001d8
 800196c:	200001e4 	.word	0x200001e4
 8001970:	200001d0 	.word	0x200001d0
 8001974:	200001c8 	.word	0x200001c8
 8001978:	200001e0 	.word	0x200001e0
 800197c:	200001dc 	.word	0x200001dc
 8001980:	200001d4 	.word	0x200001d4

08001984 <setTimer1>:

void setTimer1(int duration)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	counter1 = duration;
 800198c:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <setTimer1+0x20>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <setTimer1+0x24>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	200001cc 	.word	0x200001cc
 80019a8:	200001d8 	.word	0x200001d8

080019ac <setTimer2>:

void setTimer2(int duration)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	counter2 = duration;
 80019b4:	4a05      	ldr	r2, [pc, #20]	; (80019cc <setTimer2+0x20>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
	flag2 = 0;
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <setTimer2+0x24>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	200001e4 	.word	0x200001e4
 80019d0:	200001d0 	.word	0x200001d0

080019d4 <setTimer3>:

void setTimer3(int duration)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	counter3 = duration;
 80019dc:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <setTimer3+0x20>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
	flag3 = 0;
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <setTimer3+0x24>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	200001c8 	.word	0x200001c8
 80019f8:	200001e0 	.word	0x200001e0

080019fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5c:	d116      	bne.n	8001a8c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_TIM_Base_MspInit+0x80>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_TIM_Base_MspInit+0x80>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_TIM_Base_MspInit+0x80>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	201c      	movs	r0, #28
 8001a80:	f000 fbd9 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a84:	201c      	movs	r0, #28
 8001a86:	f000 fbf2 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a8a:	e01a      	b.n	8001ac2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_TIM_Base_MspInit+0x84>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d115      	bne.n	8001ac2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_TIM_Base_MspInit+0x80>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_TIM_Base_MspInit+0x80>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_TIM_Base_MspInit+0x80>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	201d      	movs	r0, #29
 8001ab8:	f000 fbbd 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001abc:	201d      	movs	r0, #29
 8001abe:	f000 fbd6 	bl	800226e <HAL_NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40000400 	.word	0x40000400

08001ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11d      	bne.n	8001b32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <HAL_TIM_MspPostInit+0x70>)
 8001b2e:	f000 fc4b 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_UART_MspInit+0x94>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d133      	bne.n	8001bd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba2:	23c0      	movs	r3, #192	; 0xc0
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001bbe:	f000 fc03 	bl	80023c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2025      	movs	r0, #37	; 0x25
 8001bc8:	f000 fb35 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bcc:	2025      	movs	r0, #37	; 0x25
 8001bce:	f000 fb4e 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020400 	.word	0x40020400

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 fa04 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM2_IRQHandler+0x10>)
 8001c42:	f001 fbd3 	bl	80033ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000168 	.word	0x20000168

08001c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <TIM3_IRQHandler+0x10>)
 8001c56:	f001 fbc9 	bl	80033ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200000dc 	.word	0x200000dc

08001c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <USART1_IRQHandler+0x10>)
 8001c6a:	f002 fa67 	bl	800413c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000124 	.word	0x20000124

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <runTuningMode>:
#define GREENTUNING 3

int statusTuningMode= INITMODE;

void runTuningMode()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <runTuningMode+0xc4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d857      	bhi.n	8001d58 <runTuningMode+0xbc>
 8001ca8:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <runTuningMode+0x14>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001cc1 	.word	0x08001cc1
 8001cb4:	08001ce7 	.word	0x08001ce7
 8001cb8:	08001d0d 	.word	0x08001d0d
 8001cbc:	08001d33 	.word	0x08001d33
    {
        case INITMODE:
            statusTuningMode= REDTUNING;
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <runTuningMode+0xc4>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001cc6:	f7fe fe7d 	bl	80009c4 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <runTuningMode+0xc8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fe30 	bl	8000934 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <runTuningMode+0xc8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fe37 	bl	800094c <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f7fe fe40 	bl	8000964 <update7SEGBufferMode>
            // displayAll7Seg();
            // setTimer4(10);
            break;
 8001ce4:	e039      	b.n	8001d5a <runTuningMode+0xbe>
        case REDTUNING:
            statusTuningMode= YELLOWTUNING;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <runTuningMode+0xc4>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001cec:	f7fe fe6a 	bl	80009c4 <offAllSingLEDs>
            // blinkingYELLOW();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedYellow);
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <runTuningMode+0xcc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fe1d 	bl	8000934 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedYellow);
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <runTuningMode+0xcc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fe24 	bl	800094c <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f7fe fe2d 	bl	8000964 <update7SEGBufferMode>
//            displayAll7Seg();
//            setTimer4(10);
            break;
 8001d0a:	e026      	b.n	8001d5a <runTuningMode+0xbe>
        case YELLOWTUNING:
            statusTuningMode= GREENTUNING;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <runTuningMode+0xc4>)
 8001d0e:	2203      	movs	r2, #3
 8001d10:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001d12:	f7fe fe57 	bl	80009c4 <offAllSingLEDs>
            // blinkingGREEN();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedGreen);
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <runTuningMode+0xd0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fe0a 	bl	8000934 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedGreen);
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <runTuningMode+0xd0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fe11 	bl	800094c <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	f7fe fe1a 	bl	8000964 <update7SEGBufferMode>
            // displayAll7Seg();
            // setTimer4(10);
            break;
 8001d30:	e013      	b.n	8001d5a <runTuningMode+0xbe>
        case GREENTUNING:
            statusTuningMode= REDTUNING;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <runTuningMode+0xc4>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001d38:	f7fe fe44 	bl	80009c4 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <runTuningMode+0xc8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fdf7 	bl	8000934 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <runTuningMode+0xc8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fdfe 	bl	800094c <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f7fe fe07 	bl	8000964 <update7SEGBufferMode>
            // displayAll7Seg();
            // setTimer4(10);
            break;
 8001d56:	e000      	b.n	8001d5a <runTuningMode+0xbe>
        default:
            break;
 8001d58:	bf00      	nop
    }
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200000d0 	.word	0x200000d0
 8001d64:	2000005c 	.word	0x2000005c
 8001d68:	20000064 	.word	0x20000064
 8001d6c:	20000060 	.word	0x20000060

08001d70 <initStatusTuningMode>:

void initStatusTuningMode()
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
    statusTuningMode= INITMODE;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <initStatusTuningMode+0x14>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	200000d0 	.word	0x200000d0

08001d88 <beginTuningMode>:

void beginTuningMode()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <beginTuningMode+0x1c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    offSingleRedGreenWalk();
 8001d92:	f7fe fe5f 	bl	8000a54 <offSingleRedGreenWalk>
    initStatusTuningMode();
 8001d96:	f7ff ffeb 	bl	8001d70 <initStatusTuningMode>
    runTuningMode();
 8001d9a:	f7ff ff7f 	bl	8001c9c <runTuningMode>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200000d4 	.word	0x200000d4

08001da8 <modifyTuningMode>:

void modifyTuningMode()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <modifyTuningMode+0xac>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d034      	beq.n	8001e1e <modifyTuningMode+0x76>
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	dc49      	bgt.n	8001e4c <modifyTuningMode+0xa4>
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d002      	beq.n	8001dc2 <modifyTuningMode+0x1a>
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d017      	beq.n	8001df0 <modifyTuningMode+0x48>
            }
            update7SEGBufferTraffic1(tempDurationLedGreen);
            update7SEGBufferTraffic2(tempDurationLedGreen);
            break;
        default:
            break;
 8001dc0:	e044      	b.n	8001e4c <modifyTuningMode+0xa4>
            tempDurationLedRed++;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <modifyTuningMode+0xb0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <modifyTuningMode+0xb0>)
 8001dca:	6013      	str	r3, [r2, #0]
            if (tempDurationLedRed > 99)
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <modifyTuningMode+0xb0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b63      	cmp	r3, #99	; 0x63
 8001dd2:	dd02      	ble.n	8001dda <modifyTuningMode+0x32>
                tempDurationLedRed = 0;
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <modifyTuningMode+0xb0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedRed);
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <modifyTuningMode+0xb0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fda8 	bl	8000934 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedRed);
 8001de4:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <modifyTuningMode+0xb0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fdaf 	bl	800094c <update7SEGBufferTraffic2>
            break;
 8001dee:	e02e      	b.n	8001e4e <modifyTuningMode+0xa6>
            tempDurationLedYellow++;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <modifyTuningMode+0xb4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <modifyTuningMode+0xb4>)
 8001df8:	6013      	str	r3, [r2, #0]
            if (tempDurationLedYellow > 99)
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <modifyTuningMode+0xb4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b63      	cmp	r3, #99	; 0x63
 8001e00:	dd02      	ble.n	8001e08 <modifyTuningMode+0x60>
                tempDurationLedYellow = 0;
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <modifyTuningMode+0xb4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedYellow);
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <modifyTuningMode+0xb4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fd91 	bl	8000934 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedYellow);
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <modifyTuningMode+0xb4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fd98 	bl	800094c <update7SEGBufferTraffic2>
            break;
 8001e1c:	e017      	b.n	8001e4e <modifyTuningMode+0xa6>
            tempDurationLedGreen++;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <modifyTuningMode+0xb8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <modifyTuningMode+0xb8>)
 8001e26:	6013      	str	r3, [r2, #0]
            if (tempDurationLedGreen > 99)
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <modifyTuningMode+0xb8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b63      	cmp	r3, #99	; 0x63
 8001e2e:	dd02      	ble.n	8001e36 <modifyTuningMode+0x8e>
                tempDurationLedGreen = 0;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <modifyTuningMode+0xb8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedGreen);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <modifyTuningMode+0xb8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fd7a 	bl	8000934 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedGreen);
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <modifyTuningMode+0xb8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fd81 	bl	800094c <update7SEGBufferTraffic2>
            break;
 8001e4a:	e000      	b.n	8001e4e <modifyTuningMode+0xa6>
            break;
 8001e4c:	bf00      	nop
    }
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200000d0 	.word	0x200000d0
 8001e58:	20000050 	.word	0x20000050
 8001e5c:	20000058 	.word	0x20000058
 8001e60:	20000054 	.word	0x20000054

08001e64 <saveTuningMode>:

void saveTuningMode()
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <saveTuningMode+0x88>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <saveTuningMode+0x8c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	441a      	add	r2, r3
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <saveTuningMode+0x90>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d028      	beq.n	8001ecc <saveTuningMode+0x68>
    {
        switch (statusTuningMode)
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <saveTuningMode+0x94>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d117      	bne.n	8001eb2 <saveTuningMode+0x4e>
        {
            case GREENTUNING:
                update7SEGBufferTraffic1(88);
 8001e82:	2058      	movs	r0, #88	; 0x58
 8001e84:	f7fe fd56 	bl	8000934 <update7SEGBufferTraffic1>
                update7SEGBufferTraffic2(88);
 8001e88:	2058      	movs	r0, #88	; 0x58
 8001e8a:	f7fe fd5f 	bl	800094c <update7SEGBufferTraffic2>
                update7SEGBufferMode(8);
 8001e8e:	2008      	movs	r0, #8
 8001e90:	f7fe fd68 	bl	8000964 <update7SEGBufferMode>
                onAllSingLEDs();
 8001e94:	f7fe fda2 	bl	80009dc <onAllSingLEDs>
                tempDurationLedGreen = durationLedGreen;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <saveTuningMode+0x98>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <saveTuningMode+0x8c>)
 8001e9e:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <saveTuningMode+0x9c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <saveTuningMode+0x90>)
 8001ea6:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <saveTuningMode+0xa0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <saveTuningMode+0x88>)
 8001eae:	6013      	str	r3, [r2, #0]
                break;
 8001eb0:	e019      	b.n	8001ee6 <saveTuningMode+0x82>
            default:
                tempDurationLedGreen = durationLedGreen;
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <saveTuningMode+0x98>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <saveTuningMode+0x8c>)
 8001eb8:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <saveTuningMode+0x9c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <saveTuningMode+0x90>)
 8001ec0:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <saveTuningMode+0xa0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <saveTuningMode+0x88>)
 8001ec8:	6013      	str	r3, [r2, #0]
                break;
 8001eca:	e00c      	b.n	8001ee6 <saveTuningMode+0x82>
        }
    }
    else
    {
        durationLedGreen = tempDurationLedGreen;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <saveTuningMode+0x8c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <saveTuningMode+0x98>)
 8001ed2:	6013      	str	r3, [r2, #0]
        durationLedRed = tempDurationLedRed;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <saveTuningMode+0x90>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <saveTuningMode+0x9c>)
 8001eda:	6013      	str	r3, [r2, #0]
        durationLedYellow = tempDurationLedYellow;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <saveTuningMode+0x88>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <saveTuningMode+0xa0>)
 8001ee2:	6013      	str	r3, [r2, #0]
    }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000058 	.word	0x20000058
 8001ef0:	20000054 	.word	0x20000054
 8001ef4:	20000050 	.word	0x20000050
 8001ef8:	200000d0 	.word	0x200000d0
 8001efc:	20000060 	.word	0x20000060
 8001f00:	2000005c 	.word	0x2000005c
 8001f04:	20000064 	.word	0x20000064

08001f08 <animationTuningMode>:

void animationTuningMode()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <animationTuningMode+0x3c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d814      	bhi.n	8001f3e <animationTuningMode+0x36>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <animationTuningMode+0x14>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f3f 	.word	0x08001f3f
 8001f20:	08001f2d 	.word	0x08001f2d
 8001f24:	08001f33 	.word	0x08001f33
 8001f28:	08001f39 	.word	0x08001f39
    {
    case INITMODE:
        break;
    case REDTUNING:
        blinkingRED();
 8001f2c:	f7fe fd32 	bl	8000994 <blinkingRED>
        break;
 8001f30:	e006      	b.n	8001f40 <animationTuningMode+0x38>
    case YELLOWTUNING:
        blinkingYELLOW();
 8001f32:	f7fe fd23 	bl	800097c <blinkingYELLOW>
        break;
 8001f36:	e003      	b.n	8001f40 <animationTuningMode+0x38>
    case GREENTUNING:
        blinkingGREEN();
 8001f38:	f7fe fd38 	bl	80009ac <blinkingGREEN>
        break;
 8001f3c:	e000      	b.n	8001f40 <animationTuningMode+0x38>
    default:
        break;
 8001f3e:	bf00      	nop
    }
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200000d0 	.word	0x200000d0

08001f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f4e:	490e      	ldr	r1, [pc, #56]	; (8001f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f50:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f64:	4c0b      	ldr	r4, [pc, #44]	; (8001f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f72:	f7ff fe81 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f76:	f002 fefb 	bl	8004d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7a:	f7fe fdf5 	bl	8000b68 <main>
  bx  lr    
 8001f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f88:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f8c:	08004e08 	.word	0x08004e08
  ldr r2, =_sbss
 8001f90:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f94:	200001ec 	.word	0x200001ec

08001f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f98:	e7fe      	b.n	8001f98 <ADC_IRQHandler>
	...

08001f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <HAL_Init+0x40>)
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_Init+0x40>)
 8001fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_Init+0x40>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f92b 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fd14 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f943 	bl	800228a <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f90b 	bl	8002236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000068 	.word	0x20000068
 8002038:	20000070 	.word	0x20000070
 800203c:	2000006c 	.word	0x2000006c

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000070 	.word	0x20000070
 8002064:	200001e8 	.word	0x200001e8

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	200001e8 	.word	0x200001e8

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	; (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	; (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff29 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff3e 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff8e 	bl	8002174 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff31 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa2 	bl	80021dc <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff feda 	bl	8002068 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d008      	beq.n	80022d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e052      	b.n	800237a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0216 	bic.w	r2, r2, #22
 80022e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <HAL_DMA_Abort+0x62>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0208 	bic.w	r2, r2, #8
 8002312:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002324:	e013      	b.n	800234e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002326:	f7ff fe9f 	bl	8002068 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b05      	cmp	r3, #5
 8002332:	d90c      	bls.n	800234e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e015      	b.n	800237a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e4      	bne.n	8002326 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d004      	beq.n	80023a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e00c      	b.n	80023ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2205      	movs	r2, #5
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	e16b      	b.n	80026bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f040 815a 	bne.w	80026b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d005      	beq.n	800241a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002416:	2b02      	cmp	r3, #2
 8002418:	d130      	bne.n	800247c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 0201 	and.w	r2, r3, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b03      	cmp	r3, #3
 8002486:	d017      	beq.n	80024b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d123      	bne.n	800250c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	08da      	lsrs	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3208      	adds	r2, #8
 8002506:	69b9      	ldr	r1, [r7, #24]
 8002508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0203 	and.w	r2, r3, #3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80b4 	beq.w	80026b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b60      	ldr	r3, [pc, #384]	; (80026d4 <HAL_GPIO_Init+0x30c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a5f      	ldr	r2, [pc, #380]	; (80026d4 <HAL_GPIO_Init+0x30c>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <HAL_GPIO_Init+0x30c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256a:	4a5b      	ldr	r2, [pc, #364]	; (80026d8 <HAL_GPIO_Init+0x310>)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_GPIO_Init+0x314>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d02b      	beq.n	80025ee <HAL_GPIO_Init+0x226>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a51      	ldr	r2, [pc, #324]	; (80026e0 <HAL_GPIO_Init+0x318>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d025      	beq.n	80025ea <HAL_GPIO_Init+0x222>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a50      	ldr	r2, [pc, #320]	; (80026e4 <HAL_GPIO_Init+0x31c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_GPIO_Init+0x21e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	; (80026e8 <HAL_GPIO_Init+0x320>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_Init+0x21a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <HAL_GPIO_Init+0x324>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0x216>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_GPIO_Init+0x328>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00d      	beq.n	80025da <HAL_GPIO_Init+0x212>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_GPIO_Init+0x32c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_GPIO_Init+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <HAL_GPIO_Init+0x330>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_GPIO_Init+0x20a>
 80025ce:	2307      	movs	r3, #7
 80025d0:	e00e      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025d2:	2308      	movs	r3, #8
 80025d4:	e00c      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025d6:	2306      	movs	r3, #6
 80025d8:	e00a      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025da:	2305      	movs	r3, #5
 80025dc:	e008      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025de:	2304      	movs	r3, #4
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025e2:	2303      	movs	r3, #3
 80025e4:	e004      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e002      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025ee:	2300      	movs	r3, #0
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	f002 0203 	and.w	r2, r2, #3
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	4093      	lsls	r3, r2
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002600:	4935      	ldr	r1, [pc, #212]	; (80026d8 <HAL_GPIO_Init+0x310>)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260e:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_GPIO_Init+0x334>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002632:	4a32      	ldr	r2, [pc, #200]	; (80026fc <HAL_GPIO_Init+0x334>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_GPIO_Init+0x334>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <HAL_GPIO_Init+0x334>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_GPIO_Init+0x334>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_GPIO_Init+0x334>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_GPIO_Init+0x334>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_GPIO_Init+0x334>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	f67f ae90 	bls.w	80023e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40013800 	.word	0x40013800
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020c00 	.word	0x40020c00
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40021400 	.word	0x40021400
 80026f4:	40021800 	.word	0x40021800
 80026f8:	40021c00 	.word	0x40021c00
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	887b      	ldrh	r3, [r7, #2]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e001      	b.n	8002722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800274c:	e003      	b.n	8002756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	041a      	lsls	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002774:	887a      	ldrh	r2, [r7, #2]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	041a      	lsls	r2, r3, #16
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43d9      	mvns	r1, r3
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	400b      	ands	r3, r1
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	619a      	str	r2, [r3, #24]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e264      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d075      	beq.n	80028a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b6:	4ba3      	ldr	r3, [pc, #652]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d00c      	beq.n	80027dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4ba0      	ldr	r3, [pc, #640]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d112      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ce:	4b9d      	ldr	r3, [pc, #628]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027da:	d10b      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	4b99      	ldr	r3, [pc, #612]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d05b      	beq.n	80028a0 <HAL_RCC_OscConfig+0x108>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d157      	bne.n	80028a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e23f      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fc:	d106      	bne.n	800280c <HAL_RCC_OscConfig+0x74>
 80027fe:	4b91      	ldr	r3, [pc, #580]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a90      	ldr	r2, [pc, #576]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e01d      	b.n	8002848 <HAL_RCC_OscConfig+0xb0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x98>
 8002816:	4b8b      	ldr	r3, [pc, #556]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a8a      	ldr	r2, [pc, #552]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a87      	ldr	r2, [pc, #540]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0xb0>
 8002830:	4b84      	ldr	r3, [pc, #528]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a83      	ldr	r2, [pc, #524]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b81      	ldr	r3, [pc, #516]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a80      	ldr	r2, [pc, #512]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff fc0a 	bl	8002068 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff fc06 	bl	8002068 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e204      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0xc0>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff fbf6 	bl	8002068 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff fbf2 	bl	8002068 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1f0      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	4b6c      	ldr	r3, [pc, #432]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0xe8>
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d063      	beq.n	8002976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ae:	4b65      	ldr	r3, [pc, #404]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b62      	ldr	r3, [pc, #392]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d11c      	bne.n	8002900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b5f      	ldr	r3, [pc, #380]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d116      	bne.n	8002900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x152>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e1c4      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ea:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4952      	ldr	r1, [pc, #328]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	e03a      	b.n	8002976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <HAL_RCC_OscConfig+0x2b0>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7ff fbab 	bl	8002068 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002916:	f7ff fba7 	bl	8002068 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1a5      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002928:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4940      	ldr	r1, [pc, #256]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
 8002948:	e015      	b.n	8002976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294a:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCC_OscConfig+0x2b0>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff fb8a 	bl	8002068 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002958:	f7ff fb86 	bl	8002068 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e184      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296a:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d030      	beq.n	80029e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_RCC_OscConfig+0x2b4>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7ff fb6a 	bl	8002068 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7ff fb66 	bl	8002068 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e164      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x200>
 80029b6:	e015      	b.n	80029e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_OscConfig+0x2b4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7ff fb53 	bl	8002068 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c6:	f7ff fb4f 	bl	8002068 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e14d      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f0      	bne.n	80029c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a0 	beq.w	8002b32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_OscConfig+0x2b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d121      	bne.n	8002a72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_RCC_OscConfig+0x2b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_RCC_OscConfig+0x2b8>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff fb15 	bl	8002068 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	e011      	b.n	8002a66 <HAL_RCC_OscConfig+0x2ce>
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	42470000 	.word	0x42470000
 8002a4c:	42470e80 	.word	0x42470e80
 8002a50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a54:	f7ff fb08 	bl	8002068 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e106      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b85      	ldr	r3, [pc, #532]	; (8002c7c <HAL_RCC_OscConfig+0x4e4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2f0>
 8002a7a:	4b81      	ldr	r3, [pc, #516]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	4a80      	ldr	r2, [pc, #512]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70
 8002a86:	e01c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x32a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d10c      	bne.n	8002aaa <HAL_RCC_OscConfig+0x312>
 8002a90:	4b7b      	ldr	r3, [pc, #492]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a7a      	ldr	r2, [pc, #488]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	f043 0304 	orr.w	r3, r3, #4
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a77      	ldr	r2, [pc, #476]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	e00b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x32a>
 8002aaa:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a74      	ldr	r2, [pc, #464]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	4b72      	ldr	r3, [pc, #456]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a71      	ldr	r2, [pc, #452]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d015      	beq.n	8002af6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7ff facd 	bl	8002068 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7ff fac9 	bl	8002068 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e0c5      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae8:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ee      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x33a>
 8002af4:	e014      	b.n	8002b20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fab7 	bl	8002068 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7ff fab3 	bl	8002068 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0af      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b14:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ee      	bne.n	8002afe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d105      	bne.n	8002b32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a55      	ldr	r2, [pc, #340]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 809b 	beq.w	8002c72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d05c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d141      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <HAL_RCC_OscConfig+0x4ec>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7ff fa87 	bl	8002068 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7ff fa83 	bl	8002068 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e081      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b70:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	019b      	lsls	r3, r3, #6
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	3b01      	subs	r3, #1
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
 8002ba0:	4937      	ldr	r1, [pc, #220]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_OscConfig+0x4ec>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff fa5c 	bl	8002068 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7ff fa58 	bl	8002068 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e056      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x41c>
 8002bd2:	e04e      	b.n	8002c72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_RCC_OscConfig+0x4ec>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7ff fa45 	bl	8002068 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be2:	f7ff fa41 	bl	8002068 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e03f      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x44a>
 8002c00:	e037      	b.n	8002c72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e032      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_RCC_OscConfig+0x4e8>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d028      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d11a      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c3e:	4013      	ands	r3, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d111      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	40023800 	.word	0x40023800
 8002c84:	42470060 	.word	0x42470060

08002c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0cc      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d90c      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d044      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d119      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e067      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4934      	ldr	r1, [pc, #208]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7ff f976 	bl	8002068 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7ff f972 	bl	8002068 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e04f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d20c      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f8d6 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08004de0 	.word	0x08004de0
 8002e4c:	20000068 	.word	0x20000068
 8002e50:	2000006c 	.word	0x2000006c

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	6079      	str	r1, [r7, #4]
 8002e5e:	2100      	movs	r1, #0
 8002e60:	60f9      	str	r1, [r7, #12]
 8002e62:	2100      	movs	r1, #0
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e66:	2100      	movs	r1, #0
 8002e68:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6a:	4952      	ldr	r1, [pc, #328]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e6c:	6889      	ldr	r1, [r1, #8]
 8002e6e:	f001 010c 	and.w	r1, r1, #12
 8002e72:	2908      	cmp	r1, #8
 8002e74:	d00d      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x3e>
 8002e76:	2908      	cmp	r1, #8
 8002e78:	f200 8094 	bhi.w	8002fa4 <HAL_RCC_GetSysClockFreq+0x150>
 8002e7c:	2900      	cmp	r1, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x32>
 8002e80:	2904      	cmp	r1, #4
 8002e82:	d003      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x38>
 8002e84:	e08e      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e86:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002e88:	60bb      	str	r3, [r7, #8]
       break;
 8002e8a:	e08e      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8c:	4b4b      	ldr	r3, [pc, #300]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8002e8e:	60bb      	str	r3, [r7, #8]
      break;
 8002e90:	e08b      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e92:	4948      	ldr	r1, [pc, #288]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e94:	6849      	ldr	r1, [r1, #4]
 8002e96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002e9a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9c:	4945      	ldr	r1, [pc, #276]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e9e:	6849      	ldr	r1, [r1, #4]
 8002ea0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	d024      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	4942      	ldr	r1, [pc, #264]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eaa:	6849      	ldr	r1, [r1, #4]
 8002eac:	0989      	lsrs	r1, r1, #6
 8002eae:	4608      	mov	r0, r1
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002eb8:	f04f 0500 	mov.w	r5, #0
 8002ebc:	ea00 0204 	and.w	r2, r0, r4
 8002ec0:	ea01 0305 	and.w	r3, r1, r5
 8002ec4:	493d      	ldr	r1, [pc, #244]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8002ec6:	fb01 f003 	mul.w	r0, r1, r3
 8002eca:	2100      	movs	r1, #0
 8002ecc:	fb01 f102 	mul.w	r1, r1, r2
 8002ed0:	1844      	adds	r4, r0, r1
 8002ed2:	493a      	ldr	r1, [pc, #232]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8002ed4:	fba2 0101 	umull	r0, r1, r2, r1
 8002ed8:	1863      	adds	r3, r4, r1
 8002eda:	4619      	mov	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	f7fd f970 	bl	80001c8 <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4613      	mov	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e04a      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	ea02 0400 	and.w	r4, r2, r0
 8002f0a:	ea03 0501 	and.w	r5, r3, r1
 8002f0e:	4620      	mov	r0, r4
 8002f10:	4629      	mov	r1, r5
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	014b      	lsls	r3, r1, #5
 8002f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f20:	0142      	lsls	r2, r0, #5
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	1b00      	subs	r0, r0, r4
 8002f28:	eb61 0105 	sbc.w	r1, r1, r5
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	018b      	lsls	r3, r1, #6
 8002f36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f3a:	0182      	lsls	r2, r0, #6
 8002f3c:	1a12      	subs	r2, r2, r0
 8002f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f42:	f04f 0000 	mov.w	r0, #0
 8002f46:	f04f 0100 	mov.w	r1, #0
 8002f4a:	00d9      	lsls	r1, r3, #3
 8002f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f50:	00d0      	lsls	r0, r2, #3
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	1912      	adds	r2, r2, r4
 8002f58:	eb45 0303 	adc.w	r3, r5, r3
 8002f5c:	f04f 0000 	mov.w	r0, #0
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	0299      	lsls	r1, r3, #10
 8002f66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f6a:	0290      	lsls	r0, r2, #10
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	f7fd f924 	bl	80001c8 <__aeabi_uldivmod>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4613      	mov	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	3301      	adds	r3, #1
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	60bb      	str	r3, [r7, #8]
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002fa6:	60bb      	str	r3, [r7, #8]
      break;
 8002fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002faa:	68bb      	ldr	r3, [r7, #8]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	017d7840 	.word	0x017d7840

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000068 	.word	0x20000068

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fdc:	f7ff fff0 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0a9b      	lsrs	r3, r3, #10
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	08004df0 	.word	0x08004df0

08003000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003004:	f7ff ffdc 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0b5b      	lsrs	r3, r3, #13
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	; (8003024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	08004df0 	.word	0x08004df0

08003028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e041      	b.n	80030be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe fcfc 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f000 fc7a 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e04e      	b.n	800317e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a23      	ldr	r2, [pc, #140]	; (800318c <HAL_TIM_Base_Start_IT+0xc4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d01d      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_TIM_Base_Start_IT+0xc8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <HAL_TIM_Base_Start_IT+0xcc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <HAL_TIM_Base_Start_IT+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_TIM_Base_Start_IT+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d111      	bne.n	800316c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b06      	cmp	r3, #6
 8003158:	d010      	beq.n	800317c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316a:	e007      	b.n	800317c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40010400 	.word	0x40010400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40001800 	.word	0x40001800

080031a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f839 	bl	8003246 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fbba 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_TIM_PWM_Start+0x24>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e022      	b.n	80032c6 <HAL_TIM_PWM_Start+0x6a>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b04      	cmp	r3, #4
 8003284:	d109      	bne.n	800329a <HAL_TIM_PWM_Start+0x3e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	bf14      	ite	ne
 8003292:	2301      	movne	r3, #1
 8003294:	2300      	moveq	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e015      	b.n	80032c6 <HAL_TIM_PWM_Start+0x6a>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d109      	bne.n	80032b4 <HAL_TIM_PWM_Start+0x58>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e008      	b.n	80032c6 <HAL_TIM_PWM_Start+0x6a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07c      	b.n	80033c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <HAL_TIM_PWM_Start+0x82>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032dc:	e013      	b.n	8003306 <HAL_TIM_PWM_Start+0xaa>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0x92>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ec:	e00b      	b.n	8003306 <HAL_TIM_PWM_Start+0xaa>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_PWM_Start+0xa2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	e003      	b.n	8003306 <HAL_TIM_PWM_Start+0xaa>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fe10 	bl	8003f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2d      	ldr	r2, [pc, #180]	; (80033d0 <HAL_TIM_PWM_Start+0x174>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIM_PWM_Start+0xcc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2c      	ldr	r2, [pc, #176]	; (80033d4 <HAL_TIM_PWM_Start+0x178>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_TIM_PWM_Start+0xd0>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_TIM_PWM_Start+0xd2>
 800332c:	2300      	movs	r3, #0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <HAL_TIM_PWM_Start+0x174>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_TIM_PWM_Start+0x136>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d01d      	beq.n	8003392 <HAL_TIM_PWM_Start+0x136>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_TIM_PWM_Start+0x17c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_TIM_PWM_Start+0x136>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_TIM_PWM_Start+0x180>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_TIM_PWM_Start+0x136>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_TIM_PWM_Start+0x184>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_TIM_PWM_Start+0x136>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_TIM_PWM_Start+0x178>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_TIM_PWM_Start+0x136>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <HAL_TIM_PWM_Start+0x188>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIM_PWM_Start+0x136>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <HAL_TIM_PWM_Start+0x18c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d111      	bne.n	80033b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	d010      	beq.n	80033c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	e007      	b.n	80033c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40010400 	.word	0x40010400
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40014000 	.word	0x40014000
 80033e8:	40001800 	.word	0x40001800

080033ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b02      	cmp	r3, #2
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0202 	mvn.w	r2, #2
 8003418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa77 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa69 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa7a 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0204 	mvn.w	r2, #4
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa4d 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa3f 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa50 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0208 	mvn.w	r2, #8
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2204      	movs	r2, #4
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa23 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa15 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa26 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b10      	cmp	r3, #16
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0210 	mvn.w	r2, #16
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2208      	movs	r2, #8
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9f9 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9eb 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9fc 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d107      	bne.n	8003570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0201 	mvn.w	r2, #1
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fdbe 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b80      	cmp	r3, #128	; 0x80
 800357c:	d10e      	bne.n	800359c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d107      	bne.n	800359c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fd78 	bl	800408c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d10e      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d107      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9c1 	bl	800394a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d10e      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d107      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0220 	mvn.w	r2, #32
 80035ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fd42 	bl	8004078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003616:	2302      	movs	r3, #2
 8003618:	e0ae      	b.n	8003778 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	f200 809f 	bhi.w	8003768 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003665 	.word	0x08003665
 8003634:	08003769 	.word	0x08003769
 8003638:	08003769 	.word	0x08003769
 800363c:	08003769 	.word	0x08003769
 8003640:	080036a5 	.word	0x080036a5
 8003644:	08003769 	.word	0x08003769
 8003648:	08003769 	.word	0x08003769
 800364c:	08003769 	.word	0x08003769
 8003650:	080036e7 	.word	0x080036e7
 8003654:	08003769 	.word	0x08003769
 8003658:	08003769 	.word	0x08003769
 800365c:	08003769 	.word	0x08003769
 8003660:	08003727 	.word	0x08003727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fa18 	bl	8003aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	619a      	str	r2, [r3, #24]
      break;
 80036a2:	e064      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fa68 	bl	8003b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6999      	ldr	r1, [r3, #24]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]
      break;
 80036e4:	e043      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fabd 	bl	8003c6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0208 	orr.w	r2, r2, #8
 8003700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0204 	bic.w	r2, r2, #4
 8003710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	61da      	str	r2, [r3, #28]
      break;
 8003724:	e023      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fb11 	bl	8003d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69d9      	ldr	r1, [r3, #28]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	021a      	lsls	r2, r3, #8
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	61da      	str	r2, [r3, #28]
      break;
 8003766:	e002      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
      break;
 800376c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIM_ConfigClockSource+0x1c>
 8003798:	2302      	movs	r3, #2
 800379a:	e0b4      	b.n	8003906 <HAL_TIM_ConfigClockSource+0x186>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d4:	d03e      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0xd4>
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037da:	f200 8087 	bhi.w	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e2:	f000 8086 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x172>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	d87f      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b70      	cmp	r3, #112	; 0x70
 80037ee:	d01a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0xa6>
 80037f0:	2b70      	cmp	r3, #112	; 0x70
 80037f2:	d87b      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b60      	cmp	r3, #96	; 0x60
 80037f6:	d050      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x11a>
 80037f8:	2b60      	cmp	r3, #96	; 0x60
 80037fa:	d877      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b50      	cmp	r3, #80	; 0x50
 80037fe:	d03c      	beq.n	800387a <HAL_TIM_ConfigClockSource+0xfa>
 8003800:	2b50      	cmp	r3, #80	; 0x50
 8003802:	d873      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d058      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x13a>
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d86f      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b30      	cmp	r3, #48	; 0x30
 800380e:	d064      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x15a>
 8003810:	2b30      	cmp	r3, #48	; 0x30
 8003812:	d86b      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b20      	cmp	r3, #32
 8003816:	d060      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x15a>
 8003818:	2b20      	cmp	r3, #32
 800381a:	d867      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d05c      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b10      	cmp	r3, #16
 8003822:	d05a      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x15a>
 8003824:	e062      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f000 fb5d 	bl	8003ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	609a      	str	r2, [r3, #8]
      break;
 8003852:	e04f      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6899      	ldr	r1, [r3, #8]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f000 fb46 	bl	8003ef4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003876:	609a      	str	r2, [r3, #8]
      break;
 8003878:	e03c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	461a      	mov	r2, r3
 8003888:	f000 faba 	bl	8003e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2150      	movs	r1, #80	; 0x50
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fb13 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003898:	e02c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f000 fad9 	bl	8003e5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2160      	movs	r1, #96	; 0x60
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fb03 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 80038b8:	e01c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	461a      	mov	r2, r3
 80038c8:	f000 fa9a 	bl	8003e00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2140      	movs	r1, #64	; 0x40
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 faf3 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 80038d8:	e00c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f000 faea 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 80038ea:	e003      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e000      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a40      	ldr	r2, [pc, #256]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d00f      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3d      	ldr	r2, [pc, #244]	; (8003a78 <TIM_Base_SetConfig+0x118>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3c      	ldr	r2, [pc, #240]	; (8003a7c <TIM_Base_SetConfig+0x11c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3b      	ldr	r2, [pc, #236]	; (8003a80 <TIM_Base_SetConfig+0x120>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d027      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <TIM_Base_SetConfig+0x118>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d023      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2b      	ldr	r2, [pc, #172]	; (8003a7c <TIM_Base_SetConfig+0x11c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01f      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <TIM_Base_SetConfig+0x120>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d017      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <TIM_Base_SetConfig+0x128>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <TIM_Base_SetConfig+0x12c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <TIM_Base_SetConfig+0x130>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a25      	ldr	r2, [pc, #148]	; (8003a94 <TIM_Base_SetConfig+0x134>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <TIM_Base_SetConfig+0x138>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <TIM_Base_SetConfig+0x13c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xf8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40010400 	.word	0x40010400
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800
 8003a94:	40001800 	.word	0x40001800
 8003a98:	40001c00 	.word	0x40001c00
 8003a9c:	40002000 	.word	0x40002000

08003aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f023 0201 	bic.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f023 0302 	bic.w	r3, r3, #2
 8003ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a20      	ldr	r2, [pc, #128]	; (8003b78 <TIM_OC1_SetConfig+0xd8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_OC1_SetConfig+0x64>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <TIM_OC1_SetConfig+0xdc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10c      	bne.n	8003b1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0308 	bic.w	r3, r3, #8
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <TIM_OC1_SetConfig+0xd8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_OC1_SetConfig+0x8e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <TIM_OC1_SetConfig+0xdc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40010400 	.word	0x40010400

08003b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0210 	bic.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0320 	bic.w	r3, r3, #32
 8003bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <TIM_OC2_SetConfig+0xe4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_OC2_SetConfig+0x68>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_OC2_SetConfig+0xe8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10d      	bne.n	8003c04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a17      	ldr	r2, [pc, #92]	; (8003c64 <TIM_OC2_SetConfig+0xe4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_OC2_SetConfig+0x94>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <TIM_OC2_SetConfig+0xe8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d113      	bne.n	8003c3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40010400 	.word	0x40010400

08003c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a21      	ldr	r2, [pc, #132]	; (8003d4c <TIM_OC3_SetConfig+0xe0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC3_SetConfig+0x66>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <TIM_OC3_SetConfig+0xe4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10d      	bne.n	8003cee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a16      	ldr	r2, [pc, #88]	; (8003d4c <TIM_OC3_SetConfig+0xe0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_OC3_SetConfig+0x92>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <TIM_OC3_SetConfig+0xe4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d113      	bne.n	8003d26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	621a      	str	r2, [r3, #32]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40010400 	.word	0x40010400

08003d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	031b      	lsls	r3, r3, #12
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <TIM_OC4_SetConfig+0xa4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_OC4_SetConfig+0x68>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <TIM_OC4_SetConfig+0xa8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d109      	bne.n	8003dd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40010400 	.word	0x40010400

08003e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f023 0201 	bic.w	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 030a 	bic.w	r3, r3, #10
 8003e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b087      	sub	sp, #28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f023 0210 	bic.w	r2, r3, #16
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	031b      	lsls	r3, r3, #12
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f043 0307 	orr.w	r3, r3, #7
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	021a      	lsls	r2, r3, #8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2201      	movs	r2, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1a      	ldr	r2, [r3, #32]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	401a      	ands	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e05a      	b.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe4:	d01d      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a18      	ldr	r2, [pc, #96]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a17      	ldr	r2, [pc, #92]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a15      	ldr	r2, [pc, #84]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10c      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40010400 	.word	0x40010400
 8004070:	40014000 	.word	0x40014000
 8004074:	40001800 	.word	0x40001800

08004078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e03f      	b.n	8004132 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd fd3e 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2224      	movs	r2, #36	; 0x24
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fc7b 	bl	80049e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b0ba      	sub	sp, #232	; 0xe8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800417a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_UART_IRQHandler+0x66>
 800418e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fb65 	bl	800486a <UART_Receive_IT>
      return;
 80041a0:	e256      	b.n	8004650 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80de 	beq.w	8004368 <HAL_UART_IRQHandler+0x22c>
 80041ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80d1 	beq.w	8004368 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_UART_IRQHandler+0xae>
 80041d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_UART_IRQHandler+0xd2>
 80041f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f043 0202 	orr.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_UART_IRQHandler+0xf6>
 800421a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0204 	orr.w	r2, r3, #4
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d011      	beq.n	8004262 <HAL_UART_IRQHandler+0x126>
 800423e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800424a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0208 	orr.w	r2, r3, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 81ed 	beq.w	8004646 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_UART_IRQHandler+0x14e>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 faf0 	bl	800486a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <HAL_UART_IRQHandler+0x17a>
 80042ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d04f      	beq.n	8004356 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9f8 	bl	80046ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d141      	bne.n	800434e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3314      	adds	r3, #20
 80042d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800430e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1d9      	bne.n	80042ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	2b00      	cmp	r3, #0
 800431c:	d013      	beq.n	8004346 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	4a7d      	ldr	r2, [pc, #500]	; (8004518 <HAL_UART_IRQHandler+0x3dc>)
 8004324:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe f829 	bl	8002382 <HAL_DMA_Abort_IT>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004340:	4610      	mov	r0, r2
 8004342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e00e      	b.n	8004364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f99a 	bl	8004680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	e00a      	b.n	8004364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f996 	bl	8004680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004354:	e006      	b.n	8004364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f992 	bl	8004680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004362:	e170      	b.n	8004646 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	bf00      	nop
    return;
 8004366:	e16e      	b.n	8004646 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 814a 	bne.w	8004606 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8143 	beq.w	8004606 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 813c 	beq.w	8004606 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	f040 80b4 	bne.w	800451c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8140 	beq.w	800464a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043d2:	429a      	cmp	r2, r3
 80043d4:	f080 8139 	bcs.w	800464a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	f000 8088 	beq.w	80044fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800440c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800441a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800441e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004426:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1d9      	bne.n	80043ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3314      	adds	r3, #20
 8004440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800444a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800445e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004462:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004466:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e1      	bne.n	800443a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800449a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800449c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e3      	bne.n	8004476 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80044e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e3      	bne.n	80044bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd fed2 	bl	80022a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004506:	b29b      	uxth	r3, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b29b      	uxth	r3, r3
 800450c:	4619      	mov	r1, r3
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8c0 	bl	8004694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004514:	e099      	b.n	800464a <HAL_UART_IRQHandler+0x50e>
 8004516:	bf00      	nop
 8004518:	08004773 	.word	0x08004773
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004524:	b29b      	uxth	r3, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 808b 	beq.w	800464e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8086 	beq.w	800464e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004566:	647a      	str	r2, [r7, #68]	; 0x44
 8004568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800456c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e3      	bne.n	8004542 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3314      	adds	r3, #20
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	623b      	str	r3, [r7, #32]
   return(result);
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800459e:	633a      	str	r2, [r7, #48]	; 0x30
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e3      	bne.n	800457a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0310 	bic.w	r3, r3, #16
 80045d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045e4:	61fa      	str	r2, [r7, #28]
 80045e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	69b9      	ldr	r1, [r7, #24]
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	617b      	str	r3, [r7, #20]
   return(result);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e3      	bne.n	80045c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f848 	bl	8004694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004604:	e023      	b.n	800464e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_UART_IRQHandler+0x4ea>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8bb 	bl	800479a <UART_Transmit_IT>
    return;
 8004624:	e014      	b.n	8004650 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00e      	beq.n	8004650 <HAL_UART_IRQHandler+0x514>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8fb 	bl	800483a <UART_EndTransmit_IT>
    return;
 8004644:	e004      	b.n	8004650 <HAL_UART_IRQHandler+0x514>
    return;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <HAL_UART_IRQHandler+0x514>
      return;
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <HAL_UART_IRQHandler+0x514>
      return;
 800464e:	bf00      	nop
  }
}
 8004650:	37e8      	adds	r7, #232	; 0xe8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop

08004658 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b095      	sub	sp, #84	; 0x54
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046d4:	643a      	str	r2, [r7, #64]	; 0x40
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3314      	adds	r3, #20
 8004706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004708:	62fa      	str	r2, [r7, #44]	; 0x2c
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800470e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e5      	bne.n	80046e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	2b01      	cmp	r3, #1
 8004722:	d119      	bne.n	8004758 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60bb      	str	r3, [r7, #8]
   return(result);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	647b      	str	r3, [r7, #68]	; 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004744:	61ba      	str	r2, [r7, #24]
 8004746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	6979      	ldr	r1, [r7, #20]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	613b      	str	r3, [r7, #16]
   return(result);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e5      	bne.n	8004724 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004766:	bf00      	nop
 8004768:	3754      	adds	r7, #84	; 0x54
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff ff77 	bl	8004680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b21      	cmp	r3, #33	; 0x21
 80047ac:	d13e      	bne.n	800482c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b6:	d114      	bne.n	80047e2 <UART_Transmit_IT+0x48>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d110      	bne.n	80047e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	1c9a      	adds	r2, r3, #2
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	621a      	str	r2, [r3, #32]
 80047e0:	e008      	b.n	80047f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	1c59      	adds	r1, r3, #1
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6211      	str	r1, [r2, #32]
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4619      	mov	r1, r3
 8004802:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10f      	bne.n	8004828 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004816:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004826:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004850:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fefc 	bl	8004658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b08c      	sub	sp, #48	; 0x30
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b22      	cmp	r3, #34	; 0x22
 800487c:	f040 80ab 	bne.w	80049d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004888:	d117      	bne.n	80048ba <UART_Receive_IT+0x50>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d113      	bne.n	80048ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	1c9a      	adds	r2, r3, #2
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28
 80048b8:	e026      	b.n	8004908 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048cc:	d007      	beq.n	80048de <UART_Receive_IT+0x74>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <UART_Receive_IT+0x82>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e008      	b.n	80048fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	4619      	mov	r1, r3
 8004916:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004918:	2b00      	cmp	r3, #0
 800491a:	d15a      	bne.n	80049d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0220 	bic.w	r2, r2, #32
 800492a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800493a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	2b01      	cmp	r3, #1
 800495a:	d135      	bne.n	80049c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	613b      	str	r3, [r7, #16]
   return(result);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f023 0310 	bic.w	r3, r3, #16
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	330c      	adds	r3, #12
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	623a      	str	r2, [r7, #32]
 8004984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	69f9      	ldr	r1, [r7, #28]
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e5      	bne.n	8004962 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d10a      	bne.n	80049ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff fe67 	bl	8004694 <HAL_UARTEx_RxEventCallback>
 80049c6:	e002      	b.n	80049ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff fe4f 	bl	800466c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e002      	b.n	80049d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
  }
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3730      	adds	r7, #48	; 0x30
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e4:	b09f      	sub	sp, #124	; 0x7c
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	68d9      	ldr	r1, [r3, #12]
 80049f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	ea40 0301 	orr.w	r3, r0, r1
 8004a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a24:	f021 010c 	bic.w	r1, r1, #12
 8004a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	6999      	ldr	r1, [r3, #24]
 8004a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	ea40 0301 	orr.w	r3, r0, r1
 8004a48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4bc5      	ldr	r3, [pc, #788]	; (8004d64 <UART_SetConfig+0x384>)
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d004      	beq.n	8004a5e <UART_SetConfig+0x7e>
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4bc3      	ldr	r3, [pc, #780]	; (8004d68 <UART_SetConfig+0x388>)
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d103      	bne.n	8004a66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a5e:	f7fe facf 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 8004a62:	6778      	str	r0, [r7, #116]	; 0x74
 8004a64:	e002      	b.n	8004a6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a66:	f7fe fab7 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8004a6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a74:	f040 80b6 	bne.w	8004be4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7a:	461c      	mov	r4, r3
 8004a7c:	f04f 0500 	mov.w	r5, #0
 8004a80:	4622      	mov	r2, r4
 8004a82:	462b      	mov	r3, r5
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	6439      	str	r1, [r7, #64]	; 0x40
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a90:	1912      	adds	r2, r2, r4
 8004a92:	eb45 0303 	adc.w	r3, r5, r3
 8004a96:	f04f 0000 	mov.w	r0, #0
 8004a9a:	f04f 0100 	mov.w	r1, #0
 8004a9e:	00d9      	lsls	r1, r3, #3
 8004aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aa4:	00d0      	lsls	r0, r2, #3
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	1911      	adds	r1, r2, r4
 8004aac:	6639      	str	r1, [r7, #96]	; 0x60
 8004aae:	416b      	adcs	r3, r5
 8004ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	1891      	adds	r1, r2, r2
 8004abe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ac0:	415b      	adcs	r3, r3
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ac8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004acc:	f7fb fb7c 	bl	80001c8 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4ba5      	ldr	r3, [pc, #660]	; (8004d6c <UART_SetConfig+0x38c>)
 8004ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	011e      	lsls	r6, r3, #4
 8004ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae0:	461c      	mov	r4, r3
 8004ae2:	f04f 0500 	mov.w	r5, #0
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	462b      	mov	r3, r5
 8004aea:	1891      	adds	r1, r2, r2
 8004aec:	6339      	str	r1, [r7, #48]	; 0x30
 8004aee:	415b      	adcs	r3, r3
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004af6:	1912      	adds	r2, r2, r4
 8004af8:	eb45 0303 	adc.w	r3, r5, r3
 8004afc:	f04f 0000 	mov.w	r0, #0
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	00d9      	lsls	r1, r3, #3
 8004b06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b0a:	00d0      	lsls	r0, r2, #3
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	1911      	adds	r1, r2, r4
 8004b12:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b14:	416b      	adcs	r3, r5
 8004b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	1891      	adds	r1, r2, r2
 8004b24:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b26:	415b      	adcs	r3, r3
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004b32:	f7fb fb49 	bl	80001c8 <__aeabi_uldivmod>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4b8c      	ldr	r3, [pc, #560]	; (8004d6c <UART_SetConfig+0x38c>)
 8004b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	2164      	movs	r1, #100	; 0x64
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	3332      	adds	r3, #50	; 0x32
 8004b4e:	4a87      	ldr	r2, [pc, #540]	; (8004d6c <UART_SetConfig+0x38c>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b5c:	441e      	add	r6, r3
 8004b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b60:	4618      	mov	r0, r3
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	1894      	adds	r4, r2, r2
 8004b6c:	623c      	str	r4, [r7, #32]
 8004b6e:	415b      	adcs	r3, r3
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
 8004b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b76:	1812      	adds	r2, r2, r0
 8004b78:	eb41 0303 	adc.w	r3, r1, r3
 8004b7c:	f04f 0400 	mov.w	r4, #0
 8004b80:	f04f 0500 	mov.w	r5, #0
 8004b84:	00dd      	lsls	r5, r3, #3
 8004b86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b8a:	00d4      	lsls	r4, r2, #3
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	462b      	mov	r3, r5
 8004b90:	1814      	adds	r4, r2, r0
 8004b92:	653c      	str	r4, [r7, #80]	; 0x50
 8004b94:	414b      	adcs	r3, r1
 8004b96:	657b      	str	r3, [r7, #84]	; 0x54
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	61b9      	str	r1, [r7, #24]
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004bb2:	f7fb fb09 	bl	80001c8 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4b6c      	ldr	r3, [pc, #432]	; (8004d6c <UART_SetConfig+0x38c>)
 8004bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	2164      	movs	r1, #100	; 0x64
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	3332      	adds	r3, #50	; 0x32
 8004bce:	4a67      	ldr	r2, [pc, #412]	; (8004d6c <UART_SetConfig+0x38c>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f003 0207 	and.w	r2, r3, #7
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4432      	add	r2, r6
 8004be0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004be2:	e0b9      	b.n	8004d58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be6:	461c      	mov	r4, r3
 8004be8:	f04f 0500 	mov.w	r5, #0
 8004bec:	4622      	mov	r2, r4
 8004bee:	462b      	mov	r3, r5
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	6139      	str	r1, [r7, #16]
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bfc:	1912      	adds	r2, r2, r4
 8004bfe:	eb45 0303 	adc.w	r3, r5, r3
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	00d9      	lsls	r1, r3, #3
 8004c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c10:	00d0      	lsls	r0, r2, #3
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	eb12 0804 	adds.w	r8, r2, r4
 8004c1a:	eb43 0905 	adc.w	r9, r3, r5
 8004c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	008b      	lsls	r3, r1, #2
 8004c32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c36:	0082      	lsls	r2, r0, #2
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb fac4 	bl	80001c8 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4b49      	ldr	r3, [pc, #292]	; (8004d6c <UART_SetConfig+0x38c>)
 8004c46:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	011e      	lsls	r6, r3, #4
 8004c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c50:	4618      	mov	r0, r3
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	1894      	adds	r4, r2, r2
 8004c5c:	60bc      	str	r4, [r7, #8]
 8004c5e:	415b      	adcs	r3, r3
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c66:	1812      	adds	r2, r2, r0
 8004c68:	eb41 0303 	adc.w	r3, r1, r3
 8004c6c:	f04f 0400 	mov.w	r4, #0
 8004c70:	f04f 0500 	mov.w	r5, #0
 8004c74:	00dd      	lsls	r5, r3, #3
 8004c76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c7a:	00d4      	lsls	r4, r2, #3
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	462b      	mov	r3, r5
 8004c80:	1814      	adds	r4, r2, r0
 8004c82:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c84:	414b      	adcs	r3, r1
 8004c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	008b      	lsls	r3, r1, #2
 8004c9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ca0:	0082      	lsls	r2, r0, #2
 8004ca2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ca6:	f7fb fa8f 	bl	80001c8 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <UART_SetConfig+0x38c>)
 8004cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	2164      	movs	r1, #100	; 0x64
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	3332      	adds	r3, #50	; 0x32
 8004cc2:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <UART_SetConfig+0x38c>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cce:	441e      	add	r6, r3
 8004cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	1894      	adds	r4, r2, r2
 8004cde:	603c      	str	r4, [r7, #0]
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce8:	1812      	adds	r2, r2, r0
 8004cea:	eb41 0303 	adc.w	r3, r1, r3
 8004cee:	f04f 0400 	mov.w	r4, #0
 8004cf2:	f04f 0500 	mov.w	r5, #0
 8004cf6:	00dd      	lsls	r5, r3, #3
 8004cf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cfc:	00d4      	lsls	r4, r2, #3
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	eb12 0a00 	adds.w	sl, r2, r0
 8004d06:	eb43 0b01 	adc.w	fp, r3, r1
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	008b      	lsls	r3, r1, #2
 8004d1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d22:	0082      	lsls	r2, r0, #2
 8004d24:	4650      	mov	r0, sl
 8004d26:	4659      	mov	r1, fp
 8004d28:	f7fb fa4e 	bl	80001c8 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <UART_SetConfig+0x38c>)
 8004d32:	fba3 1302 	umull	r1, r3, r3, r2
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	2164      	movs	r1, #100	; 0x64
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	3332      	adds	r3, #50	; 0x32
 8004d44:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <UART_SetConfig+0x38c>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	f003 020f 	and.w	r2, r3, #15
 8004d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4432      	add	r2, r6
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	377c      	adds	r7, #124	; 0x7c
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	40011000 	.word	0x40011000
 8004d68:	40011400 	.word	0x40011400
 8004d6c:	51eb851f 	.word	0x51eb851f

08004d70 <__libc_init_array>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	4d0d      	ldr	r5, [pc, #52]	; (8004da8 <__libc_init_array+0x38>)
 8004d74:	4c0d      	ldr	r4, [pc, #52]	; (8004dac <__libc_init_array+0x3c>)
 8004d76:	1b64      	subs	r4, r4, r5
 8004d78:	10a4      	asrs	r4, r4, #2
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	42a6      	cmp	r6, r4
 8004d7e:	d109      	bne.n	8004d94 <__libc_init_array+0x24>
 8004d80:	4d0b      	ldr	r5, [pc, #44]	; (8004db0 <__libc_init_array+0x40>)
 8004d82:	4c0c      	ldr	r4, [pc, #48]	; (8004db4 <__libc_init_array+0x44>)
 8004d84:	f000 f820 	bl	8004dc8 <_init>
 8004d88:	1b64      	subs	r4, r4, r5
 8004d8a:	10a4      	asrs	r4, r4, #2
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	42a6      	cmp	r6, r4
 8004d90:	d105      	bne.n	8004d9e <__libc_init_array+0x2e>
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d98:	4798      	blx	r3
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	e7ee      	b.n	8004d7c <__libc_init_array+0xc>
 8004d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da2:	4798      	blx	r3
 8004da4:	3601      	adds	r6, #1
 8004da6:	e7f2      	b.n	8004d8e <__libc_init_array+0x1e>
 8004da8:	08004e00 	.word	0x08004e00
 8004dac:	08004e00 	.word	0x08004e00
 8004db0:	08004e00 	.word	0x08004e00
 8004db4:	08004e04 	.word	0x08004e04

08004db8 <memset>:
 8004db8:	4402      	add	r2, r0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d100      	bne.n	8004dc2 <memset+0xa>
 8004dc0:	4770      	bx	lr
 8004dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc6:	e7f9      	b.n	8004dbc <memset+0x4>

08004dc8 <_init>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr

08004dd4 <_fini>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	bf00      	nop
 8004dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dda:	bc08      	pop	{r3}
 8004ddc:	469e      	mov	lr, r3
 8004dde:	4770      	bx	lr
