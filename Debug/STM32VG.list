
STM32VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005478  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800565c  0800565c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000494  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee89  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023db  00000000  00000000  0002ef31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d80  00000000  00000000  000321c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021901  00000000  00000000  00032f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012814  00000000  00000000  00054849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cab26  00000000  00000000  0006705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131b83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b00  00000000  00000000  00131bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080055e8 	.word	0x080055e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080055e8 	.word	0x080055e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <resetAllButton>:
int timerNormalState[3]= {0, 0, 0};
int eventButtonPressed[3]= {0, 0, 0};
int eventButtonDrop[3]= {0, 0, 0};

void resetAllButton()
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
	for (int i=0 ; i < 3; i++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	e011      	b.n	80004fc <resetAllButton+0x30>
	{
		eventButtonDrop[i]= 0;
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <resetAllButton+0x44>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		eventButtonPressed[i]= 0;
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <resetAllButton+0x48>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2100      	movs	r1, #0
 80004e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timerNormalState[i]= 0;
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <resetAllButton+0x4c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2100      	movs	r1, #0
 80004f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0 ; i < 3; i++)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	ddea      	ble.n	80004d8 <resetAllButton+0xc>
	}
}
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	200000ac 	.word	0x200000ac
 8000514:	200000a0 	.word	0x200000a0
 8000518:	20000094 	.word	0x20000094

0800051c <checkEventButton>:

int checkEventButton(int indexButton)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	switch (indexButton)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b02      	cmp	r3, #2
 8000528:	f000 80ab 	beq.w	8000682 <checkEventButton+0x166>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b02      	cmp	r3, #2
 8000530:	f300 80ec 	bgt.w	800070c <checkEventButton+0x1f0>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d003      	beq.n	8000542 <checkEventButton+0x26>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d05b      	beq.n	80005f8 <checkEventButton+0xdc>
 8000540:	e0e4      	b.n	800070c <checkEventButton+0x1f0>
	{
		case 0:
			switch (eventButtonPressed[indexButton])
 8000542:	4a76      	ldr	r2, [pc, #472]	; (800071c <checkEventButton+0x200>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d852      	bhi.n	80005f4 <checkEventButton+0xd8>
 800054e:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <checkEventButton+0x38>)
 8000550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000554:	08000565 	.word	0x08000565
 8000558:	08000589 	.word	0x08000589
 800055c:	080005ad 	.word	0x080005ad
 8000560:	080005d1 	.word	0x080005d1
			{
			case 0:
				switch (eventButtonDrop[indexButton])
 8000564:	4a6e      	ldr	r2, [pc, #440]	; (8000720 <checkEventButton+0x204>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <checkEventButton+0x5a>
 8000570:	2b01      	cmp	r3, #1
 8000572:	d004      	beq.n	800057e <checkEventButton+0x62>
				case 1:
					resetAllButton();
					return NOBUTTON;
					break;
				default:
					break;
 8000574:	e007      	b.n	8000586 <checkEventButton+0x6a>
					resetAllButton();
 8000576:	f7ff ffa9 	bl	80004cc <resetAllButton>
					return BUTTON1LongPress;
 800057a:	2305      	movs	r3, #5
 800057c:	e0ca      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 800057e:	f7ff ffa5 	bl	80004cc <resetAllButton>
					return NOBUTTON;
 8000582:	230c      	movs	r3, #12
 8000584:	e0c6      	b.n	8000714 <checkEventButton+0x1f8>
				}
				break;
 8000586:	e036      	b.n	80005f6 <checkEventButton+0xda>
			case 1:
				switch (eventButtonDrop[indexButton])
 8000588:	4a65      	ldr	r2, [pc, #404]	; (8000720 <checkEventButton+0x204>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <checkEventButton+0x7e>
 8000594:	2b01      	cmp	r3, #1
 8000596:	d004      	beq.n	80005a2 <checkEventButton+0x86>
				case 1:
					resetAllButton();
					return BUTTON1SinglePress;
					break;
				default:
					break;
 8000598:	e007      	b.n	80005aa <checkEventButton+0x8e>
					resetAllButton();
 800059a:	f7ff ff97 	bl	80004cc <resetAllButton>
					return BUTTON1LongPress;
 800059e:	2305      	movs	r3, #5
 80005a0:	e0b8      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 80005a2:	f7ff ff93 	bl	80004cc <resetAllButton>
					return BUTTON1SinglePress;
 80005a6:	2302      	movs	r3, #2
 80005a8:	e0b4      	b.n	8000714 <checkEventButton+0x1f8>
				}
				break;
 80005aa:	e024      	b.n	80005f6 <checkEventButton+0xda>
			case 2:
				switch (eventButtonDrop[indexButton])
 80005ac:	4a5c      	ldr	r2, [pc, #368]	; (8000720 <checkEventButton+0x204>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d002      	beq.n	80005be <checkEventButton+0xa2>
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d004      	beq.n	80005c6 <checkEventButton+0xaa>
				case 2:
					resetAllButton();
					return BUTTON1DoublePress;
					break;
				default:
					break;
 80005bc:	e007      	b.n	80005ce <checkEventButton+0xb2>
					resetAllButton();
 80005be:	f7ff ff85 	bl	80004cc <resetAllButton>
					return BUTTON1DoublePress;
 80005c2:	2303      	movs	r3, #3
 80005c4:	e0a6      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 80005c6:	f7ff ff81 	bl	80004cc <resetAllButton>
					return BUTTON1DoublePress;
 80005ca:	2303      	movs	r3, #3
 80005cc:	e0a2      	b.n	8000714 <checkEventButton+0x1f8>
				}
				break;
 80005ce:	e012      	b.n	80005f6 <checkEventButton+0xda>
			case 3:
				switch (eventButtonDrop[indexButton])
 80005d0:	4a53      	ldr	r2, [pc, #332]	; (8000720 <checkEventButton+0x204>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d002      	beq.n	80005e2 <checkEventButton+0xc6>
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d004      	beq.n	80005ea <checkEventButton+0xce>
				case 3:
					resetAllButton();
					return BUTTON1TriplePress;
					break;
				default:
					break;
 80005e0:	e007      	b.n	80005f2 <checkEventButton+0xd6>
					resetAllButton();
 80005e2:	f7ff ff73 	bl	80004cc <resetAllButton>
					return BUTTON1TriplePress;
 80005e6:	2304      	movs	r3, #4
 80005e8:	e094      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 80005ea:	f7ff ff6f 	bl	80004cc <resetAllButton>
					return BUTTON1TriplePress;
 80005ee:	2304      	movs	r3, #4
 80005f0:	e090      	b.n	8000714 <checkEventButton+0x1f8>
				}
				break;
 80005f2:	e000      	b.n	80005f6 <checkEventButton+0xda>
			default:
				break;
 80005f4:	bf00      	nop
			}
			break;
 80005f6:	e08d      	b.n	8000714 <checkEventButton+0x1f8>
		case 1:
			switch (eventButtonPressed[indexButton])
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <checkEventButton+0x200>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d02a      	beq.n	800065a <checkEventButton+0x13e>
 8000604:	2b02      	cmp	r3, #2
 8000606:	dc3a      	bgt.n	800067e <checkEventButton+0x162>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <checkEventButton+0xf6>
 800060c:	2b01      	cmp	r3, #1
 800060e:	d012      	beq.n	8000636 <checkEventButton+0x11a>
				default:
					break;
				}
				break;
			default:
				break;
 8000610:	e035      	b.n	800067e <checkEventButton+0x162>
				switch (eventButtonDrop[indexButton])
 8000612:	4a43      	ldr	r2, [pc, #268]	; (8000720 <checkEventButton+0x204>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <checkEventButton+0x108>
 800061e:	2b01      	cmp	r3, #1
 8000620:	d004      	beq.n	800062c <checkEventButton+0x110>
					break;
 8000622:	e007      	b.n	8000634 <checkEventButton+0x118>
					resetAllButton();
 8000624:	f7ff ff52 	bl	80004cc <resetAllButton>
					return BUTTON2LongPress;
 8000628:	2308      	movs	r3, #8
 800062a:	e073      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 800062c:	f7ff ff4e 	bl	80004cc <resetAllButton>
					return NOBUTTON;
 8000630:	230c      	movs	r3, #12
 8000632:	e06f      	b.n	8000714 <checkEventButton+0x1f8>
				break;
 8000634:	e024      	b.n	8000680 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 8000636:	4a3a      	ldr	r2, [pc, #232]	; (8000720 <checkEventButton+0x204>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <checkEventButton+0x12c>
 8000642:	2b01      	cmp	r3, #1
 8000644:	d004      	beq.n	8000650 <checkEventButton+0x134>
					break;
 8000646:	e007      	b.n	8000658 <checkEventButton+0x13c>
					resetAllButton();
 8000648:	f7ff ff40 	bl	80004cc <resetAllButton>
					return BUTTON2LongPress;
 800064c:	2308      	movs	r3, #8
 800064e:	e061      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 8000650:	f7ff ff3c 	bl	80004cc <resetAllButton>
					return BUTTON2SinglePress;
 8000654:	2306      	movs	r3, #6
 8000656:	e05d      	b.n	8000714 <checkEventButton+0x1f8>
				break;
 8000658:	e012      	b.n	8000680 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <checkEventButton+0x204>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d002      	beq.n	800066c <checkEventButton+0x150>
 8000666:	2b02      	cmp	r3, #2
 8000668:	d004      	beq.n	8000674 <checkEventButton+0x158>
					break;
 800066a:	e007      	b.n	800067c <checkEventButton+0x160>
					resetAllButton();
 800066c:	f7ff ff2e 	bl	80004cc <resetAllButton>
					return BUTTON2DoublePress;
 8000670:	2307      	movs	r3, #7
 8000672:	e04f      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 8000674:	f7ff ff2a 	bl	80004cc <resetAllButton>
					return BUTTON2DoublePress;
 8000678:	2307      	movs	r3, #7
 800067a:	e04b      	b.n	8000714 <checkEventButton+0x1f8>
				break;
 800067c:	e000      	b.n	8000680 <checkEventButton+0x164>
				break;
 800067e:	bf00      	nop
			}
			break;
 8000680:	e048      	b.n	8000714 <checkEventButton+0x1f8>
		case 2:
			switch (eventButtonPressed[indexButton])
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <checkEventButton+0x200>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d02a      	beq.n	80006e4 <checkEventButton+0x1c8>
 800068e:	2b02      	cmp	r3, #2
 8000690:	dc3a      	bgt.n	8000708 <checkEventButton+0x1ec>
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <checkEventButton+0x180>
 8000696:	2b01      	cmp	r3, #1
 8000698:	d012      	beq.n	80006c0 <checkEventButton+0x1a4>
				default:
					break;
				}
				break;
			default:
				break;
 800069a:	e035      	b.n	8000708 <checkEventButton+0x1ec>
				switch (eventButtonDrop[indexButton])
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <checkEventButton+0x204>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <checkEventButton+0x192>
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d004      	beq.n	80006b6 <checkEventButton+0x19a>
					break;
 80006ac:	e007      	b.n	80006be <checkEventButton+0x1a2>
					resetAllButton();
 80006ae:	f7ff ff0d 	bl	80004cc <resetAllButton>
					return BUTTON3LongPress;
 80006b2:	230b      	movs	r3, #11
 80006b4:	e02e      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 80006b6:	f7ff ff09 	bl	80004cc <resetAllButton>
					return NOBUTTON;
 80006ba:	230c      	movs	r3, #12
 80006bc:	e02a      	b.n	8000714 <checkEventButton+0x1f8>
				break;
 80006be:	e024      	b.n	800070a <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 80006c0:	4a17      	ldr	r2, [pc, #92]	; (8000720 <checkEventButton+0x204>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <checkEventButton+0x1b6>
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d004      	beq.n	80006da <checkEventButton+0x1be>
					break;
 80006d0:	e007      	b.n	80006e2 <checkEventButton+0x1c6>
					resetAllButton();
 80006d2:	f7ff fefb 	bl	80004cc <resetAllButton>
					return BUTTON3LongPress;
 80006d6:	230b      	movs	r3, #11
 80006d8:	e01c      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 80006da:	f7ff fef7 	bl	80004cc <resetAllButton>
					return BUTTON3SinglePress;
 80006de:	2309      	movs	r3, #9
 80006e0:	e018      	b.n	8000714 <checkEventButton+0x1f8>
				break;
 80006e2:	e012      	b.n	800070a <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <checkEventButton+0x204>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d002      	beq.n	80006f6 <checkEventButton+0x1da>
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d004      	beq.n	80006fe <checkEventButton+0x1e2>
					break;
 80006f4:	e007      	b.n	8000706 <checkEventButton+0x1ea>
					resetAllButton();
 80006f6:	f7ff fee9 	bl	80004cc <resetAllButton>
					return BUTTON3DoublePress;
 80006fa:	230a      	movs	r3, #10
 80006fc:	e00a      	b.n	8000714 <checkEventButton+0x1f8>
					resetAllButton();
 80006fe:	f7ff fee5 	bl	80004cc <resetAllButton>
					return BUTTON3DoublePress;
 8000702:	230a      	movs	r3, #10
 8000704:	e006      	b.n	8000714 <checkEventButton+0x1f8>
				break;
 8000706:	e000      	b.n	800070a <checkEventButton+0x1ee>
				break;
 8000708:	bf00      	nop
			}
			break;
 800070a:	e003      	b.n	8000714 <checkEventButton+0x1f8>
		default:
			resetAllButton();
 800070c:	f7ff fede 	bl	80004cc <resetAllButton>
			return NOBUTTON;
 8000710:	230c      	movs	r3, #12
 8000712:	e7ff      	b.n	8000714 <checkEventButton+0x1f8>
			break;
	}
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000a0 	.word	0x200000a0
 8000720:	200000ac 	.word	0x200000ac

08000724 <getInputButton>:

int getInputButton()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	e0c1      	b.n	80008b4 <getInputButton+0x190>
	{
		state1Button[i]= state2Button[i];
 8000730:	4a65      	ldr	r2, [pc, #404]	; (80008c8 <getInputButton+0x1a4>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000738:	4964      	ldr	r1, [pc, #400]	; (80008cc <getInputButton+0x1a8>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 8000740:	4a63      	ldr	r2, [pc, #396]	; (80008d0 <getInputButton+0x1ac>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000748:	495f      	ldr	r1, [pc, #380]	; (80008c8 <getInputButton+0x1a4>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000750:	4a60      	ldr	r2, [pc, #384]	; (80008d4 <getInputButton+0x1b0>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000758:	495f      	ldr	r1, [pc, #380]	; (80008d8 <getInputButton+0x1b4>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000760:	4619      	mov	r1, r3
 8000762:	4610      	mov	r0, r2
 8000764:	f002 f9c4 	bl	8002af0 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	4619      	mov	r1, r3
 800076c:	4a58      	ldr	r2, [pc, #352]	; (80008d0 <getInputButton+0x1ac>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 8000774:	4a55      	ldr	r2, [pc, #340]	; (80008cc <getInputButton+0x1a8>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077c:	4952      	ldr	r1, [pc, #328]	; (80008c8 <getInputButton+0x1a4>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000784:	429a      	cmp	r2, r3
 8000786:	f040 8092 	bne.w	80008ae <getInputButton+0x18a>
 800078a:	4a4f      	ldr	r2, [pc, #316]	; (80008c8 <getInputButton+0x1a4>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000792:	494f      	ldr	r1, [pc, #316]	; (80008d0 <getInputButton+0x1ac>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800079a:	429a      	cmp	r2, r3
 800079c:	f040 8087 	bne.w	80008ae <getInputButton+0x18a>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 80007a0:	4a4e      	ldr	r2, [pc, #312]	; (80008dc <getInputButton+0x1b8>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a8:	4948      	ldr	r1, [pc, #288]	; (80008cc <getInputButton+0x1a8>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d031      	beq.n	8000818 <getInputButton+0xf4>
			{
				switch (state0Button[i])
 80007b4:	4a49      	ldr	r2, [pc, #292]	; (80008dc <getInputButton+0x1b8>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <getInputButton+0xa2>
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d014      	beq.n	80007ee <getInputButton+0xca>
						state0Button[i]= PRESS_STATE;
						eventButtonPressed[i]+= 1;
						timerLongPress[i]= 300;
						break;
					default:
						break;
 80007c4:	e073      	b.n	80008ae <getInputButton+0x18a>
						state0Button[i]= NORMAL_STATE;
 80007c6:	4a45      	ldr	r2, [pc, #276]	; (80008dc <getInputButton+0x1b8>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2101      	movs	r1, #1
 80007cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonDrop[i]+= 1;
 80007d0:	4a43      	ldr	r2, [pc, #268]	; (80008e0 <getInputButton+0x1bc>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	4941      	ldr	r1, [pc, #260]	; (80008e0 <getInputButton+0x1bc>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerNormalState[i]= 10;
 80007e2:	4a40      	ldr	r2, [pc, #256]	; (80008e4 <getInputButton+0x1c0>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	210a      	movs	r1, #10
 80007e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 80007ec:	e05f      	b.n	80008ae <getInputButton+0x18a>
						state0Button[i]= PRESS_STATE;
 80007ee:	4a3b      	ldr	r2, [pc, #236]	; (80008dc <getInputButton+0x1b8>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2100      	movs	r1, #0
 80007f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonPressed[i]+= 1;
 80007f8:	4a3b      	ldr	r2, [pc, #236]	; (80008e8 <getInputButton+0x1c4>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4939      	ldr	r1, [pc, #228]	; (80008e8 <getInputButton+0x1c4>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerLongPress[i]= 300;
 800080a:	4a38      	ldr	r2, [pc, #224]	; (80008ec <getInputButton+0x1c8>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8000816:	e04a      	b.n	80008ae <getInputButton+0x18a>

				}
			}
			else
			{
				if (state0Button[i]== NORMAL_STATE)
 8000818:	4a30      	ldr	r2, [pc, #192]	; (80008dc <getInputButton+0x1b8>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d119      	bne.n	8000858 <getInputButton+0x134>
				{
					if (timerNormalState[i] > 0)
 8000824:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <getInputButton+0x1c0>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dd3e      	ble.n	80008ae <getInputButton+0x18a>
					{
						timerNormalState[i]--;
 8000830:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <getInputButton+0x1c0>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	492a      	ldr	r1, [pc, #168]	; (80008e4 <getInputButton+0x1c0>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerNormalState[i] <= 0)
 8000842:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <getInputButton+0x1c0>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084a:	2b00      	cmp	r3, #0
 800084c:	dc2f      	bgt.n	80008ae <getInputButton+0x18a>
						{
							return checkEventButton(i);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe64 	bl	800051c <checkEventButton>
 8000854:	4603      	mov	r3, r0
 8000856:	e032      	b.n	80008be <getInputButton+0x19a>
						}
					}
				}
				else   // state0Button[i]== PRESS_SATE;
				{
					if (timerLongPress[i] > 0)
 8000858:	4a24      	ldr	r2, [pc, #144]	; (80008ec <getInputButton+0x1c8>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000860:	2b00      	cmp	r3, #0
 8000862:	dd24      	ble.n	80008ae <getInputButton+0x18a>
					{
						timerLongPress[i]--;
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <getInputButton+0x1c8>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	1e5a      	subs	r2, r3, #1
 800086e:	491f      	ldr	r1, [pc, #124]	; (80008ec <getInputButton+0x1c8>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerLongPress[i] <= 0)
 8000876:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <getInputButton+0x1c8>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087e:	2b00      	cmp	r3, #0
 8000880:	dc15      	bgt.n	80008ae <getInputButton+0x18a>
						{
							if (i== 0)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d105      	bne.n	8000894 <getInputButton+0x170>
								timerLongPress[i]= 300;
 8000888:	4a18      	ldr	r2, [pc, #96]	; (80008ec <getInputButton+0x1c8>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							if (i== 1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d104      	bne.n	80008a4 <getInputButton+0x180>
								timerLongPress[i]= 20;
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <getInputButton+0x1c8>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2114      	movs	r1, #20
 80008a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							return checkEventButton(i);		
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fe39 	bl	800051c <checkEventButton>
 80008aa:	4603      	mov	r3, r0
 80008ac:	e007      	b.n	80008be <getInputButton+0x19a>
	for (int i= 0; i < 3; i++)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	f77f af3a 	ble.w	8000730 <getInputButton+0xc>
					}
				}
			}
		}
	}
	return NOBUTTON;
 80008bc:	230c      	movs	r3, #12
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000002c 	.word	0x2000002c
 80008cc:	20000020 	.word	0x20000020
 80008d0:	20000038 	.word	0x20000038
 80008d4:	20000000 	.word	0x20000000
 80008d8:	2000000c 	.word	0x2000000c
 80008dc:	20000014 	.word	0x20000014
 80008e0:	200000ac 	.word	0x200000ac
 80008e4:	20000094 	.word	0x20000094
 80008e8:	200000a0 	.word	0x200000a0
 80008ec:	20000044 	.word	0x20000044

080008f0 <update7SEGBuffer>:
int durationLedGreen = 3;
int durationLedYellow = 2;

int led_buffer[3]= {0, 0, 0};
void update7SEGBuffer(int time, int signalUpdate)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
	switch (signalUpdate)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d011      	beq.n	8000924 <update7SEGBuffer+0x34>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2b02      	cmp	r3, #2
 8000904:	dc12      	bgt.n	800092c <update7SEGBuffer+0x3c>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d003      	beq.n	8000914 <update7SEGBuffer+0x24>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d004      	beq.n	800091c <update7SEGBuffer+0x2c>
		break;
	case UPDATEMODE:
		led_buffer[2] = time;
		break;
	default:
		break;
 8000912:	e00b      	b.n	800092c <update7SEGBuffer+0x3c>
		led_buffer[0] = time;
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <update7SEGBuffer+0x4c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
		break;
 800091a:	e008      	b.n	800092e <update7SEGBuffer+0x3e>
		led_buffer[1] = time;
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <update7SEGBuffer+0x4c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6053      	str	r3, [r2, #4]
		break;
 8000922:	e004      	b.n	800092e <update7SEGBuffer+0x3e>
		led_buffer[2] = time;
 8000924:	4a05      	ldr	r2, [pc, #20]	; (800093c <update7SEGBuffer+0x4c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6093      	str	r3, [r2, #8]
		break;
 800092a:	e000      	b.n	800092e <update7SEGBuffer+0x3e>
		break;
 800092c:	bf00      	nop
	}
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	200000b8 	.word	0x200000b8

08000940 <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC1);
 8000948:	2100      	movs	r1, #0
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffd0 	bl	80008f0 <update7SEGBuffer>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC2);
 8000960:	2101      	movs	r1, #1
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ffc4 	bl	80008f0 <update7SEGBuffer>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATEMODE);
 8000978:	2102      	movs	r1, #2
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffb8 	bl	80008f0 <update7SEGBuffer>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWTUNING);
 800098c:	2105      	movs	r1, #5
 800098e:	2008      	movs	r0, #8
 8000990:	f000 ff98 	bl	80018c4 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, YELLOWTUNING);
 8000994:	2105      	movs	r1, #5
 8000996:	2009      	movs	r0, #9
 8000998:	f000 ff94 	bl	80018c4 <controlSingleLedTraffic>
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <blinkingRED>:

void blinkingRED()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDTUNING);
 80009a4:	2103      	movs	r1, #3
 80009a6:	2008      	movs	r0, #8
 80009a8:	f000 ff8c 	bl	80018c4 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, REDTUNING);
 80009ac:	2103      	movs	r1, #3
 80009ae:	2009      	movs	r0, #9
 80009b0:	f000 ff88 	bl	80018c4 <controlSingleLedTraffic>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <blinkingGREEN>:

void blinkingGREEN()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENTUNING);
 80009bc:	2104      	movs	r1, #4
 80009be:	2008      	movs	r0, #8
 80009c0:	f000 ff80 	bl	80018c4 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, GREENTUNING);
 80009c4:	2104      	movs	r1, #4
 80009c6:	2009      	movs	r0, #9
 80009c8:	f000 ff7c 	bl	80018c4 <controlSingleLedTraffic>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <offAllSingLEDs>:

void offAllSingLEDs()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, OFF);
 80009d4:	2106      	movs	r1, #6
 80009d6:	2008      	movs	r0, #8
 80009d8:	f000 ff74 	bl	80018c4 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, OFF);
 80009dc:	2106      	movs	r1, #6
 80009de:	2009      	movs	r0, #9
 80009e0:	f000 ff70 	bl	80018c4 <controlSingleLedTraffic>
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <onAllSingLEDs>:

void onAllSingLEDs()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, ON);
 80009ec:	2107      	movs	r1, #7
 80009ee:	2008      	movs	r0, #8
 80009f0:	f000 ff68 	bl	80018c4 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, ON);
 80009f4:	2107      	movs	r1, #7
 80009f6:	2009      	movs	r0, #9
 80009f8:	f000 ff64 	bl	80018c4 <controlSingleLedTraffic>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <onSingleRedTraffic1>:

void onSingleRedTraffic1()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDNORMAL);
 8000a04:	2100      	movs	r1, #0
 8000a06:	2008      	movs	r0, #8
 8000a08:	f000 ff5c 	bl	80018c4 <controlSingleLedTraffic>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <onSingleYellowTraffic1>:

void onSingleYellowTraffic1()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWNORMAL);
 8000a14:	2102      	movs	r1, #2
 8000a16:	2008      	movs	r0, #8
 8000a18:	f000 ff54 	bl	80018c4 <controlSingleLedTraffic>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENNORMAL);
 8000a24:	2101      	movs	r1, #1
 8000a26:	2008      	movs	r0, #8
 8000a28:	f000 ff4c 	bl	80018c4 <controlSingleLedTraffic>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, REDNORMAL);
 8000a34:	2100      	movs	r1, #0
 8000a36:	2009      	movs	r0, #9
 8000a38:	f000 ff44 	bl	80018c4 <controlSingleLedTraffic>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <onSingleYellowTraffic2>:

void onSingleYellowTraffic2()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, YELLOWNORMAL);
 8000a44:	2102      	movs	r1, #2
 8000a46:	2009      	movs	r0, #9
 8000a48:	f000 ff3c 	bl	80018c4 <controlSingleLedTraffic>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, GREENNORMAL);
 8000a54:	2101      	movs	r1, #1
 8000a56:	2009      	movs	r0, #9
 8000a58:	f000 ff34 	bl	80018c4 <controlSingleLedTraffic>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <offSingleRedGreenWalk>:

void offSingleRedGreenWalk()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	controlSingleLedWalk(OFFLEDWALK);
 8000a64:	200a      	movs	r0, #10
 8000a66:	f001 f82f 	bl	8001ac8 <controlSingleLedWalk>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <onGreenOffRedWalk>:
void onGreenOffRedWalk()
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONGREENOFFREDWALK);
 8000a72:	200b      	movs	r0, #11
 8000a74:	f001 f828 	bl	8001ac8 <controlSingleLedWalk>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <onRedOffGreenWalk>:
void onRedOffGreenWalk()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONREDOFFGREENWALK);
 8000a80:	200c      	movs	r0, #12
 8000a82:	f001 f821 	bl	8001ac8 <controlSingleLedWalk>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <ledWalkOperationNormalMode>:

int numberFreq;
int statusLedWalkButton3Press;

void ledWalkOperationNormalMode()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    switch (statusTraffic1)
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <ledWalkOperationNormalMode+0x5c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d01a      	beq.n	8000ace <ledWalkOperationNormalMode+0x42>
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	dc22      	bgt.n	8000ae2 <ledWalkOperationNormalMode+0x56>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d002      	beq.n	8000aa6 <ledWalkOperationNormalMode+0x1a>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d00a      	beq.n	8000aba <ledWalkOperationNormalMode+0x2e>
			offSingleRedGreenWalk();
		else	
			onRedOffGreenWalk();
        break;
    default:
        break;
 8000aa4:	e01d      	b.n	8000ae2 <ledWalkOperationNormalMode+0x56>
		if (numberFreq <= 0)
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <ledWalkOperationNormalMode+0x60>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	dc02      	bgt.n	8000ab4 <ledWalkOperationNormalMode+0x28>
			offSingleRedGreenWalk();
 8000aae:	f7ff ffd7 	bl	8000a60 <offSingleRedGreenWalk>
        break;
 8000ab2:	e017      	b.n	8000ae4 <ledWalkOperationNormalMode+0x58>
			onGreenOffRedWalk();
 8000ab4:	f7ff ffdb 	bl	8000a6e <onGreenOffRedWalk>
        break;
 8000ab8:	e014      	b.n	8000ae4 <ledWalkOperationNormalMode+0x58>
		if (numberFreq <= 0)
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <ledWalkOperationNormalMode+0x60>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	dc02      	bgt.n	8000ac8 <ledWalkOperationNormalMode+0x3c>
			offSingleRedGreenWalk();
 8000ac2:	f7ff ffcd 	bl	8000a60 <offSingleRedGreenWalk>
        break;
 8000ac6:	e00d      	b.n	8000ae4 <ledWalkOperationNormalMode+0x58>
			onRedOffGreenWalk();
 8000ac8:	f7ff ffd8 	bl	8000a7c <onRedOffGreenWalk>
        break;
 8000acc:	e00a      	b.n	8000ae4 <ledWalkOperationNormalMode+0x58>
		if (numberFreq <= 0)
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <ledWalkOperationNormalMode+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	dc02      	bgt.n	8000adc <ledWalkOperationNormalMode+0x50>
			offSingleRedGreenWalk();
 8000ad6:	f7ff ffc3 	bl	8000a60 <offSingleRedGreenWalk>
        break;
 8000ada:	e003      	b.n	8000ae4 <ledWalkOperationNormalMode+0x58>
			onRedOffGreenWalk();
 8000adc:	f7ff ffce 	bl	8000a7c <onRedOffGreenWalk>
        break;
 8000ae0:	e000      	b.n	8000ae4 <ledWalkOperationNormalMode+0x58>
        break;
 8000ae2:	bf00      	nop
    }
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000480 	.word	0x20000480
 8000aec:	200000c4 	.word	0x200000c4

08000af0 <ledWalkOperationManualMode>:

void ledWalkOperationManualMode()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	switch (statusManualMode)
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <ledWalkOperationManualMode+0x7c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d832      	bhi.n	8000b64 <ledWalkOperationManualMode+0x74>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <ledWalkOperationManualMode+0x14>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b51 	.word	0x08000b51
 8000b0c:	08000b3d 	.word	0x08000b3d
 8000b10:	08000b29 	.word	0x08000b29
	{
	case REDGREENMANUAL:
		if (numberFreq <= 0)
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <ledWalkOperationManualMode+0x80>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dc02      	bgt.n	8000b22 <ledWalkOperationManualMode+0x32>
			offSingleRedGreenWalk();
 8000b1c:	f7ff ffa0 	bl	8000a60 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 8000b20:	e021      	b.n	8000b66 <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000b22:	f7ff ffa4 	bl	8000a6e <onGreenOffRedWalk>
		break;
 8000b26:	e01e      	b.n	8000b66 <ledWalkOperationManualMode+0x76>
	case YELLOWREDMANUAL:
		if (numberFreq <= 0)
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <ledWalkOperationManualMode+0x80>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dc02      	bgt.n	8000b36 <ledWalkOperationManualMode+0x46>
			offSingleRedGreenWalk();
 8000b30:	f7ff ff96 	bl	8000a60 <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 8000b34:	e017      	b.n	8000b66 <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 8000b36:	f7ff ffa1 	bl	8000a7c <onRedOffGreenWalk>
		break;
 8000b3a:	e014      	b.n	8000b66 <ledWalkOperationManualMode+0x76>
	case GREENREDMANUAL:
		if (numberFreq <= 0)
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <ledWalkOperationManualMode+0x80>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	dc02      	bgt.n	8000b4a <ledWalkOperationManualMode+0x5a>
			offSingleRedGreenWalk();
 8000b44:	f7ff ff8c 	bl	8000a60 <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 8000b48:	e00d      	b.n	8000b66 <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 8000b4a:	f7ff ff97 	bl	8000a7c <onRedOffGreenWalk>
		break;
 8000b4e:	e00a      	b.n	8000b66 <ledWalkOperationManualMode+0x76>
	case REDYELLOWMANUAL:
		if (numberFreq <= 0)
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <ledWalkOperationManualMode+0x80>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	dc02      	bgt.n	8000b5e <ledWalkOperationManualMode+0x6e>
			offSingleRedGreenWalk();
 8000b58:	f7ff ff82 	bl	8000a60 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 8000b5c:	e003      	b.n	8000b66 <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000b5e:	f7ff ff86 	bl	8000a6e <onGreenOffRedWalk>
		break;
 8000b62:	e000      	b.n	8000b66 <ledWalkOperationManualMode+0x76>
	default:
		break;
 8000b64:	bf00      	nop
	}
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000047c 	.word	0x2000047c
 8000b70:	200000c4 	.word	0x200000c4

08000b74 <SCH_Add_Task>:
  }
}

// Ham them task vao mang
void SCH_Add_Task(void(*pFunction), const uint32_t Delay, const uint32_t Period)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  int index = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  int total_delay = Delay / 10;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4a72      	ldr	r2, [pc, #456]	; (8000d50 <SCH_Add_Task+0x1dc>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	61bb      	str	r3, [r7, #24]

  for (int i = 0; i < SCH_MAX_TASKS; i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e02b      	b.n	8000bee <SCH_Add_Task+0x7a>
  {
    if (SCH_tasks_G[i].pTask)
 8000b96:	496f      	ldr	r1, [pc, #444]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d01b      	beq.n	8000be2 <SCH_Add_Task+0x6e>
    {
      if (SCH_tasks_G[i].Delay <= total_delay)
 8000baa:	496a      	ldr	r1, [pc, #424]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3304      	adds	r3, #4
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d80c      	bhi.n	8000bdc <SCH_Add_Task+0x68>
      {
        total_delay = total_delay - SCH_tasks_G[i].Delay;
 8000bc2:	69b9      	ldr	r1, [r7, #24]
 8000bc4:	4863      	ldr	r0, [pc, #396]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4403      	add	r3, r0
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	1acb      	subs	r3, r1, r3
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	e005      	b.n	8000be8 <SCH_Add_Task+0x74>
      }
      else
      {
        index = i;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	61fb      	str	r3, [r7, #28]
        break;
 8000be0:	e008      	b.n	8000bf4 <SCH_Add_Task+0x80>
      }
    }
    else
    {
      index = i;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	61fb      	str	r3, [r7, #28]
      break;
 8000be6:	e005      	b.n	8000bf4 <SCH_Add_Task+0x80>
  for (int i = 0; i < SCH_MAX_TASKS; i++)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3301      	adds	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2b27      	cmp	r3, #39	; 0x27
 8000bf2:	ddd0      	ble.n	8000b96 <SCH_Add_Task+0x22>
    }
  }
  for (int i = SCH_MAX_TASKS; i > index; i--)
 8000bf4:	2328      	movs	r3, #40	; 0x28
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	e058      	b.n	8000cac <SCH_Add_Task+0x138>
  {
    if (SCH_tasks_G[i - 1].pTask)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	4955      	ldr	r1, [pc, #340]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d04a      	beq.n	8000ca6 <SCH_Add_Task+0x132>
    {
      SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	494f      	ldr	r1, [pc, #316]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	6819      	ldr	r1, [r3, #0]
 8000c22:	484c      	ldr	r0, [pc, #304]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4403      	add	r3, r0
 8000c30:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1e5a      	subs	r2, r3, #1
 8000c36:	4947      	ldr	r1, [pc, #284]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	3304      	adds	r3, #4
 8000c44:	6819      	ldr	r1, [r3, #0]
 8000c46:	4843      	ldr	r0, [pc, #268]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4403      	add	r3, r0
 8000c54:	3304      	adds	r3, #4
 8000c56:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	1e5a      	subs	r2, r3, #1
 8000c5c:	493d      	ldr	r1, [pc, #244]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	3308      	adds	r3, #8
 8000c6a:	6819      	ldr	r1, [r3, #0]
 8000c6c:	4839      	ldr	r0, [pc, #228]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4403      	add	r3, r0
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	4934      	ldr	r1, [pc, #208]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	330c      	adds	r3, #12
 8000c90:	7818      	ldrb	r0, [r3, #0]
 8000c92:	4930      	ldr	r1, [pc, #192]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	330c      	adds	r3, #12
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	701a      	strb	r2, [r3, #0]
  for (int i = SCH_MAX_TASKS; i > index; i--)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dca2      	bgt.n	8000bfa <SCH_Add_Task+0x86>
    }
  }
  SCH_tasks_G[index].pTask = pFunction;
 8000cb4:	68f9      	ldr	r1, [r7, #12]
 8000cb6:	4827      	ldr	r0, [pc, #156]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4403      	add	r3, r0
 8000cc4:	6019      	str	r1, [r3, #0]
  SCH_tasks_G[index].Delay = total_delay;
 8000cc6:	69b9      	ldr	r1, [r7, #24]
 8000cc8:	4822      	ldr	r0, [pc, #136]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4403      	add	r3, r0
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	6019      	str	r1, [r3, #0]
  SCH_tasks_G[index].Period = Period;
 8000cda:	491e      	ldr	r1, [pc, #120]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000cdc:	69fa      	ldr	r2, [r7, #28]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3308      	adds	r3, #8
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].RunMe = 0;
 8000cee:	4919      	ldr	r1, [pc, #100]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000cf0:	69fa      	ldr	r2, [r7, #28]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	330c      	adds	r3, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
  if (SCH_tasks_G[index + 1].pTask)
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	4913      	ldr	r1, [pc, #76]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d015      	beq.n	8000d44 <SCH_Add_Task+0x1d0>
  {
    SCH_tasks_G[index + 1].Delay = SCH_tasks_G[index + 1].Delay - total_delay;
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	490d      	ldr	r1, [pc, #52]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	3304      	adds	r3, #4
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	3201      	adds	r2, #1
 8000d32:	1ac9      	subs	r1, r1, r3
 8000d34:	4807      	ldr	r0, [pc, #28]	; (8000d54 <SCH_Add_Task+0x1e0>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4403      	add	r3, r0
 8000d40:	3304      	adds	r3, #4
 8000d42:	6019      	str	r1, [r3, #0]
  }
}
 8000d44:	bf00      	nop
 8000d46:	3724      	adds	r7, #36	; 0x24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	cccccccd 	.word	0xcccccccd
 8000d54:	2000015c 	.word	0x2000015c

08000d58 <SCH_Init>:
    }
  }
}
// Ham xoa tat ca cac task trong array, khien array nhu vua duoc khoi tao
void SCH_Init(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  uint8_t i;
  for (i = 0; i < SCH_MAX_TASKS; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	e029      	b.n	8000db8 <SCH_Init+0x60>
  {
    SCH_tasks_G[i].Delay = 0;
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	4919      	ldr	r1, [pc, #100]	; (8000dcc <SCH_Init+0x74>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	3304      	adds	r3, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].Period = 0;
 8000d78:	79fa      	ldrb	r2, [r7, #7]
 8000d7a:	4914      	ldr	r1, [pc, #80]	; (8000dcc <SCH_Init+0x74>)
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	3308      	adds	r3, #8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].RunMe = 0;
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	490f      	ldr	r1, [pc, #60]	; (8000dcc <SCH_Init+0x74>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	330c      	adds	r3, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[i].pTask = 0x0000;
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	490a      	ldr	r1, [pc, #40]	; (8000dcc <SCH_Init+0x74>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	440b      	add	r3, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < SCH_MAX_TASKS; i++)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	3301      	adds	r3, #1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b27      	cmp	r3, #39	; 0x27
 8000dbc:	d9d2      	bls.n	8000d64 <SCH_Init+0xc>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	2000015c 	.word	0x2000015c

08000dd0 <task1>:

void task1()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  if (modeStatus == NORMALMODE)
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <task1+0x18>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b06      	cmp	r3, #6
 8000dda:	d103      	bne.n	8000de4 <task1+0x14>
  {
    runNormalMode();
 8000ddc:	f000 fb9e 	bl	800151c <runNormalMode>
    ledWalkOperationNormalMode();
 8000de0:	f7ff fe54 	bl	8000a8c <ledWalkOperationNormalMode>
  }
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000068 	.word	0x20000068

08000dec <task2>:
void task2()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  if (modeStatus == TUNINGMODE)
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <task2+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d101      	bne.n	8000dfc <task2+0x10>
  {
    animationTuningMode();
 8000df8:	f001 f9a4 	bl	8002144 <animationTuningMode>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000068 	.word	0x20000068

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f001 fac0 	bl	800238c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f8ca 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 f9e8 	bl	80011e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e14:	f000 f924 	bl	8001060 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e18:	f000 f96e 	bl	80010f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e1c:	f001 f9b2 	bl	8002184 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e20:	485a      	ldr	r0, [pc, #360]	; (8000f8c <main+0x188>)
 8000e22:	f002 fb59 	bl	80034d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e26:	2104      	movs	r1, #4
 8000e28:	4859      	ldr	r0, [pc, #356]	; (8000f90 <main+0x18c>)
 8000e2a:	f002 fc1f 	bl	800366c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000e2e:	f7ff ff93 	bl	8000d58 <SCH_Init>
  setTimer1(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 fede 	bl	8001bf4 <setTimer1>
  SCH_Add_Task(task1, 1000, 1000);
 8000e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e40:	4854      	ldr	r0, [pc, #336]	; (8000f94 <main+0x190>)
 8000e42:	f7ff fe97 	bl	8000b74 <SCH_Add_Task>
  SCH_Add_Task(task2, 500, 500);
 8000e46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e4e:	4852      	ldr	r0, [pc, #328]	; (8000f98 <main+0x194>)
 8000e50:	f7ff fe90 	bl	8000b74 <SCH_Add_Task>
//  setTimer2(100);
//  setTimer3(50);
	while (1)
	{
		if (flag1== 1) // flag for getInputButton
 8000e54:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <main+0x198>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	f040 8092 	bne.w	8000f82 <main+0x17e>
		{
			setTimer1(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f000 fec8 	bl	8001bf4 <setTimer1>
			switch (getInputButton())
 8000e64:	f7ff fc5e 	bl	8000724 <getInputButton>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	f200 808a 	bhi.w	8000f86 <main+0x182>
 8000e72:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <main+0x74>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000e9d 	.word	0x08000e9d
 8000e7c:	08000ea9 	.word	0x08000ea9
 8000e80:	08000eb5 	.word	0x08000eb5
 8000e84:	08000ec1 	.word	0x08000ec1
 8000e88:	08000eeb 	.word	0x08000eeb
 8000e8c:	08000f17 	.word	0x08000f17
 8000e90:	08000f33 	.word	0x08000f33
 8000e94:	08000f4f 	.word	0x08000f4f
 8000e98:	08000f73 	.word	0x08000f73
			{
				case BUTTON1SinglePress:
					modeStatus= NORMALMODE;
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <main+0x19c>)
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	601a      	str	r2, [r3, #0]
					beginNormalMode();
 8000ea2:	f000 fce3 	bl	800186c <beginNormalMode>
					break;
 8000ea6:	e06f      	b.n	8000f88 <main+0x184>
				case BUTTON1DoublePress:
					modeStatus= MANUALMODE;
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <main+0x19c>)
 8000eaa:	2207      	movs	r2, #7
 8000eac:	601a      	str	r2, [r3, #0]
					beginManualMode();
 8000eae:	f000 faff 	bl	80014b0 <beginManualMode>
					break;
 8000eb2:	e069      	b.n	8000f88 <main+0x184>
				case BUTTON1TriplePress:
					modeStatus= TUNINGMODE;
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <main+0x19c>)
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	601a      	str	r2, [r3, #0]
					beginTuningMode();
 8000eba:	f001 f881 	bl	8001fc0 <beginTuningMode>
					break;
 8000ebe:	e063      	b.n	8000f88 <main+0x184>
				case BUTTON1LongPress:
					switch (modeStatus)
 8000ec0:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <main+0x19c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d008      	beq.n	8000eda <main+0xd6>
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	dc0c      	bgt.n	8000ee6 <main+0xe2>
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d007      	beq.n	8000ee0 <main+0xdc>
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	d108      	bne.n	8000ee6 <main+0xe2>
					{
						case MANUALMODE:
							runManualModeFunction();
 8000ed4:	f000 fa40 	bl	8001358 <runManualModeFunction>
							break;
 8000ed8:	e006      	b.n	8000ee8 <main+0xe4>
						case TUNINGMODE:
							runTuningMode();
 8000eda:	f001 f803 	bl	8001ee4 <runTuningMode>
							break;
 8000ede:	e003      	b.n	8000ee8 <main+0xe4>
						case INITMODES:
							offAllSingLEDs();
 8000ee0:	f7ff fd76 	bl	80009d0 <offAllSingLEDs>
							break;
 8000ee4:	e000      	b.n	8000ee8 <main+0xe4>
						default:
							break;
 8000ee6:	bf00      	nop
					}
					break;
 8000ee8:	e04e      	b.n	8000f88 <main+0x184>
				case BUTTON2SinglePress:
					switch (modeStatus)
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <main+0x19c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d00c      	beq.n	8000f0c <main+0x108>
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	dc0d      	bgt.n	8000f12 <main+0x10e>
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d002      	beq.n	8000f00 <main+0xfc>
 8000efa:	2b07      	cmp	r3, #7
 8000efc:	d003      	beq.n	8000f06 <main+0x102>
							break;
						case TUNINGMODE:
							modifyTuningMode();
							break;
						default:
							break;
 8000efe:	e008      	b.n	8000f12 <main+0x10e>
							beginNormalMode();
 8000f00:	f000 fcb4 	bl	800186c <beginNormalMode>
							break;
 8000f04:	e006      	b.n	8000f14 <main+0x110>
							runManualModeFunction();
 8000f06:	f000 fa27 	bl	8001358 <runManualModeFunction>
							break;
 8000f0a:	e003      	b.n	8000f14 <main+0x110>
							modifyTuningMode();
 8000f0c:	f001 f86a 	bl	8001fe4 <modifyTuningMode>
							break;
 8000f10:	e000      	b.n	8000f14 <main+0x110>
							break;
 8000f12:	bf00      	nop
					}
					break;
 8000f14:	e038      	b.n	8000f88 <main+0x184>
				case BUTTON2DoublePress:
					switch (modeStatus)
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <main+0x19c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b05      	cmp	r3, #5
 8000f1c:	d004      	beq.n	8000f28 <main+0x124>
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d105      	bne.n	8000f2e <main+0x12a>
					{
						case TUNINGMODE:
							saveTuningMode();
 8000f22:	f001 f8bd 	bl	80020a0 <saveTuningMode>
							break;
 8000f26:	e003      	b.n	8000f30 <main+0x12c>
						case INITMODES:
							offAllSingLEDs();
 8000f28:	f7ff fd52 	bl	80009d0 <offAllSingLEDs>
							break;
 8000f2c:	e000      	b.n	8000f30 <main+0x12c>
						default:
							break;
 8000f2e:	bf00      	nop
					}
					break;
 8000f30:	e02a      	b.n	8000f88 <main+0x184>
				case BUTTON2LongPress:
					switch (modeStatus)
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <main+0x19c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b05      	cmp	r3, #5
 8000f38:	d004      	beq.n	8000f44 <main+0x140>
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d105      	bne.n	8000f4a <main+0x146>
					{
						case TUNINGMODE:
							modifyTuningMode();
 8000f3e:	f001 f851 	bl	8001fe4 <modifyTuningMode>
							break;
 8000f42:	e003      	b.n	8000f4c <main+0x148>
						case INITMODES:
							offAllSingLEDs();
 8000f44:	f7ff fd44 	bl	80009d0 <offAllSingLEDs>
							break;
 8000f48:	e000      	b.n	8000f4c <main+0x148>
						default:
							break;
 8000f4a:	bf00      	nop
					}
					break;
 8000f4c:	e01c      	b.n	8000f88 <main+0x184>
				case BUTTON3SinglePress:
					switch (modeStatus)
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <main+0x19c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d002      	beq.n	8000f5c <main+0x158>
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	d005      	beq.n	8000f66 <main+0x162>
						case MANUALMODE:
							beginWalkManualMode();
							ledWalkOperationManualMode();
							break;
						default:
							break;
 8000f5a:	e009      	b.n	8000f70 <main+0x16c>
							beginWalkNormalMode();
 8000f5c:	f000 fc9e 	bl	800189c <beginWalkNormalMode>
							ledWalkOperationNormalMode();
 8000f60:	f7ff fd94 	bl	8000a8c <ledWalkOperationNormalMode>
							break;
 8000f64:	e004      	b.n	8000f70 <main+0x16c>
							beginWalkManualMode();
 8000f66:	f000 fab3 	bl	80014d0 <beginWalkManualMode>
							ledWalkOperationManualMode();
 8000f6a:	f7ff fdc1 	bl	8000af0 <ledWalkOperationManualMode>
							break;
 8000f6e:	bf00      	nop

					}
					break;
 8000f70:	e00a      	b.n	8000f88 <main+0x184>
				case BUTTON3DoublePress:
          modeStatus= INITMODES;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <main+0x19c>)
 8000f74:	2205      	movs	r2, #5
 8000f76:	601a      	str	r2, [r3, #0]
					offAllSingLEDs();
 8000f78:	f7ff fd2a 	bl	80009d0 <offAllSingLEDs>
					offSingleRedGreenWalk();
 8000f7c:	f7ff fd70 	bl	8000a60 <offSingleRedGreenWalk>
					break;
 8000f80:	e002      	b.n	8000f88 <main+0x184>
				default:
					break;
			}
		}
 8000f82:	bf00      	nop
 8000f84:	e766      	b.n	8000e54 <main+0x50>
					break;
 8000f86:	bf00      	nop
		if (flag1== 1) // flag for getInputButton
 8000f88:	e764      	b.n	8000e54 <main+0x50>
 8000f8a:	bf00      	nop
 8000f8c:	200000cc 	.word	0x200000cc
 8000f90:	20000114 	.word	0x20000114
 8000f94:	08000dd1 	.word	0x08000dd1
 8000f98:	08000ded 	.word	0x08000ded
 8000f9c:	200004a4 	.word	0x200004a4
 8000fa0:	20000068 	.word	0x20000068

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 face 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <SystemClock_Config+0xb4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <SystemClock_Config+0xb4>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <SystemClock_Config+0xb4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <SystemClock_Config+0xb8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <SystemClock_Config+0xb8>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <SystemClock_Config+0xb8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	4618      	mov	r0, r3
 8001016:	f001 fdb7 	bl	8002b88 <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001020:	f000 f988 	bl	8001334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 f81a 	bl	8003078 <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800104a:	f000 f973 	bl	8001334 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3750      	adds	r7, #80	; 0x50
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM2_Init+0x94>)
 800107e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001086:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800108a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001094:	2209      	movs	r2, #9
 8001096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_TIM2_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a6:	f002 f9c7 	bl	8003438 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b0:	f000 f940 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010c2:	f002 fd65 	bl	8003b90 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 f932 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010de:	f003 f957 	bl	8004390 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f000 f924 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000cc 	.word	0x200000cc

080010f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001128:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <MX_TIM3_Init+0xe4>)
 800112a:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <MX_TIM3_Init+0xe8>)
 800112c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_TIM3_Init+0xe4>)
 8001130:	2207      	movs	r2, #7
 8001132:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <MX_TIM3_Init+0xe4>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 299;
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_TIM3_Init+0xe4>)
 800113c:	f240 122b 	movw	r2, #299	; 0x12b
 8001140:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_TIM3_Init+0xe4>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_TIM3_Init+0xe4>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114e:	4823      	ldr	r0, [pc, #140]	; (80011dc <MX_TIM3_Init+0xe4>)
 8001150:	f002 f972 	bl	8003438 <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800115a:	f000 f8eb 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001168:	4619      	mov	r1, r3
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_TIM3_Init+0xe4>)
 800116c:	f002 fd10 	bl	8003b90 <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001176:	f000 f8dd 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800117a:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_TIM3_Init+0xe4>)
 800117c:	f002 fa1c 	bl	80035b8 <HAL_TIM_PWM_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001186:	f000 f8d5 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_TIM3_Init+0xe4>)
 800119a:	f003 f8f9 	bl	8004390 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011a4:	f000 f8c6 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a8:	2360      	movs	r3, #96	; 0x60
 80011aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 80011ac:	23c8      	movs	r3, #200	; 0xc8
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2204      	movs	r2, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <MX_TIM3_Init+0xe4>)
 80011c0:	f002 fc24 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ca:	f000 f8b3 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM3_Init+0xe4>)
 80011d0:	f000 fda4 	bl	8001d1c <HAL_TIM_MspPostInit>

}
 80011d4:	bf00      	nop
 80011d6:	3738      	adds	r7, #56	; 0x38
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000114 	.word	0x20000114
 80011e0:	40000400 	.word	0x40000400

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <MX_GPIO_Init+0x12c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a43      	ldr	r2, [pc, #268]	; (8001310 <MX_GPIO_Init+0x12c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <MX_GPIO_Init+0x12c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <MX_GPIO_Init+0x12c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a3c      	ldr	r2, [pc, #240]	; (8001310 <MX_GPIO_Init+0x12c>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <MX_GPIO_Init+0x12c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <MX_GPIO_Init+0x12c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a35      	ldr	r2, [pc, #212]	; (8001310 <MX_GPIO_Init+0x12c>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <MX_GPIO_Init+0x12c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segA_Pin|segB_Pin|segC_Pin|segD_Pin
 800124e:	2200      	movs	r2, #0
 8001250:	217f      	movs	r1, #127	; 0x7f
 8001252:	4830      	ldr	r0, [pc, #192]	; (8001314 <MX_GPIO_Init+0x130>)
 8001254:	f001 fc64 	bl	8002b20 <HAL_GPIO_WritePin>
                          |segE_Pin|segF_Pin|segG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8001258:	2201      	movs	r2, #1
 800125a:	213f      	movs	r1, #63	; 0x3f
 800125c:	482e      	ldr	r0, [pc, #184]	; (8001318 <MX_GPIO_Init+0x134>)
 800125e:	f001 fc5f 	bl	8002b20 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, en2_Pin|en3_Pin|en4_Pin|en0_Pin
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001268:	482b      	ldr	r0, [pc, #172]	; (8001318 <MX_GPIO_Init+0x134>)
 800126a:	f001 fc59 	bl	8002b20 <HAL_GPIO_WritePin>
                          |en1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WALKGREEN_Pin|WALKRED_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001274:	4829      	ldr	r0, [pc, #164]	; (800131c <MX_GPIO_Init+0x138>)
 8001276:	f001 fc53 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
                           segE_Pin segF_Pin segG_Pin */
  GPIO_InitStruct.Pin = segA_Pin|segB_Pin|segC_Pin|segD_Pin
 800127a:	237f      	movs	r3, #127	; 0x7f
 800127c:	60fb      	str	r3, [r7, #12]
                          |segE_Pin|segF_Pin|segG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4619      	mov	r1, r3
 8001290:	4820      	ldr	r0, [pc, #128]	; (8001314 <MX_GPIO_Init+0x130>)
 8001292:	f001 fa91 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8001296:	233f      	movs	r3, #63	; 0x3f
 8001298:	60fb      	str	r3, [r7, #12]
                          |GREEN2_Pin|YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	4619      	mov	r1, r3
 80012ac:	481a      	ldr	r0, [pc, #104]	; (8001318 <MX_GPIO_Init+0x134>)
 80012ae:	f001 fa83 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : en2_Pin en3_Pin en4_Pin en0_Pin
                           en1_Pin */
  GPIO_InitStruct.Pin = en2_Pin|en3_Pin|en4_Pin|en0_Pin
 80012b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012b6:	60fb      	str	r3, [r7, #12]
                          |en1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_GPIO_Init+0x134>)
 80012cc:	f001 fa74 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WALKGREEN_Pin WALKRED_Pin */
  GPIO_InitStruct.Pin = WALKGREEN_Pin|WALKRED_Pin;
 80012d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0x138>)
 80012ea:	f001 fa65 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 80012ee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4619      	mov	r1, r3
 8001302:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_GPIO_Init+0x130>)
 8001304:	f001 fa58 	bl	80027b8 <HAL_GPIO_Init>

}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020c00 	.word	0x40020c00

08001320 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	runTimer();
 8001328:	f000 fc0c 	bl	8001b44 <runTimer>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <initStatusManualMode>:
#include "ledWalk.h"

int statusManualMode= INITMANUAL;

void initStatusManualMode()
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	statusManualMode= INITMANUAL;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <initStatusManualMode+0x14>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	2000047c 	.word	0x2000047c

08001358 <runManualModeFunction>:
void runManualModeFunction()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	switch (statusManualMode) 
 800135c:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <runManualModeFunction+0x14c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b04      	cmp	r3, #4
 8001362:	f200 809b 	bhi.w	800149c <runManualModeFunction+0x144>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <runManualModeFunction+0x14>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	08001381 	.word	0x08001381
 8001370:	0800139b 	.word	0x0800139b
 8001374:	080013d7 	.word	0x080013d7
 8001378:	08001419 	.word	0x08001419
 800137c:	0800145b 	.word	0x0800145b
	{
		case INITMANUAL:
			statusManualMode= REDGREENMANUAL;
 8001380:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <runManualModeFunction+0x14c>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8001386:	2002      	movs	r0, #2
 8001388:	f7ff faf2 	bl	8000970 <update7SEGBufferMode>
			offAllSingLEDs();
 800138c:	f7ff fb20 	bl	80009d0 <offAllSingLEDs>
			onSingleRedTraffic1();
 8001390:	f7ff fb36 	bl	8000a00 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8001394:	f7ff fb5c 	bl	8000a50 <onSingleGreenTraffic2>
			break;
 8001398:	e081      	b.n	800149e <runManualModeFunction+0x146>
		case REDGREENMANUAL:
			statusManualMode= REDYELLOWMANUAL;
 800139a:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <runManualModeFunction+0x14c>)
 800139c:	2202      	movs	r2, #2
 800139e:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 80013a0:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <runManualModeFunction+0x14c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <runManualModeFunction+0x150>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d10b      	bne.n	80013c4 <runManualModeFunction+0x6c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <runManualModeFunction+0x154>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	dd03      	ble.n	80013bc <runManualModeFunction+0x64>
 80013b4:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <runManualModeFunction+0x154>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	e001      	b.n	80013c0 <runManualModeFunction+0x68>
 80013bc:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <runManualModeFunction+0x154>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a3a      	ldr	r2, [pc, #232]	; (80014ac <runManualModeFunction+0x154>)
 80013c2:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 80013c4:	f7ff fb94 	bl	8000af0 <ledWalkOperationManualMode>
			offAllSingLEDs();
 80013c8:	f7ff fb02 	bl	80009d0 <offAllSingLEDs>
			onSingleRedTraffic1();
 80013cc:	f7ff fb18 	bl	8000a00 <onSingleRedTraffic1>
			onSingleYellowTraffic2();
 80013d0:	f7ff fb36 	bl	8000a40 <onSingleYellowTraffic2>
			break;
 80013d4:	e063      	b.n	800149e <runManualModeFunction+0x146>
		case REDYELLOWMANUAL:
			statusManualMode= GREENREDMANUAL;
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <runManualModeFunction+0x14c>)
 80013d8:	2203      	movs	r2, #3
 80013da:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <runManualModeFunction+0x14c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <runManualModeFunction+0x150>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d10b      	bne.n	8001400 <runManualModeFunction+0xa8>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <runManualModeFunction+0x154>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd03      	ble.n	80013f8 <runManualModeFunction+0xa0>
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <runManualModeFunction+0x154>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	e001      	b.n	80013fc <runManualModeFunction+0xa4>
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <runManualModeFunction+0x154>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <runManualModeFunction+0x154>)
 80013fe:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8001400:	f7ff fb76 	bl	8000af0 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8001404:	2002      	movs	r0, #2
 8001406:	f7ff fab3 	bl	8000970 <update7SEGBufferMode>
			offAllSingLEDs();
 800140a:	f7ff fae1 	bl	80009d0 <offAllSingLEDs>
			onSingleGreenTraffic1();
 800140e:	f7ff fb07 	bl	8000a20 <onSingleGreenTraffic1>
			onSingleRedTraffic2();
 8001412:	f7ff fb0d 	bl	8000a30 <onSingleRedTraffic2>
			break;
 8001416:	e042      	b.n	800149e <runManualModeFunction+0x146>
		case GREENREDMANUAL:
			statusManualMode= YELLOWREDMANUAL;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <runManualModeFunction+0x14c>)
 800141a:	2204      	movs	r2, #4
 800141c:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <runManualModeFunction+0x14c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <runManualModeFunction+0x150>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d10b      	bne.n	8001442 <runManualModeFunction+0xea>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <runManualModeFunction+0x154>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	dd03      	ble.n	800143a <runManualModeFunction+0xe2>
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <runManualModeFunction+0x154>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3b01      	subs	r3, #1
 8001438:	e001      	b.n	800143e <runManualModeFunction+0xe6>
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <runManualModeFunction+0x154>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <runManualModeFunction+0x154>)
 8001440:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8001442:	f7ff fb55 	bl	8000af0 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8001446:	2002      	movs	r0, #2
 8001448:	f7ff fa92 	bl	8000970 <update7SEGBufferMode>
			offAllSingLEDs();
 800144c:	f7ff fac0 	bl	80009d0 <offAllSingLEDs>
			onSingleYellowTraffic1();
 8001450:	f7ff fade 	bl	8000a10 <onSingleYellowTraffic1>
			onSingleRedTraffic2();
 8001454:	f7ff faec 	bl	8000a30 <onSingleRedTraffic2>
			break;
 8001458:	e021      	b.n	800149e <runManualModeFunction+0x146>
		case YELLOWREDMANUAL:
			statusManualMode= REDGREENMANUAL;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <runManualModeFunction+0x14c>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <runManualModeFunction+0x14c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <runManualModeFunction+0x150>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d10b      	bne.n	8001484 <runManualModeFunction+0x12c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <runManualModeFunction+0x154>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd03      	ble.n	800147c <runManualModeFunction+0x124>
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <runManualModeFunction+0x154>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	e001      	b.n	8001480 <runManualModeFunction+0x128>
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <runManualModeFunction+0x154>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <runManualModeFunction+0x154>)
 8001482:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8001484:	f7ff fb34 	bl	8000af0 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff fa71 	bl	8000970 <update7SEGBufferMode>
			offAllSingLEDs();
 800148e:	f7ff fa9f 	bl	80009d0 <offAllSingLEDs>
			onSingleRedTraffic1();
 8001492:	f7ff fab5 	bl	8000a00 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8001496:	f7ff fadb 	bl	8000a50 <onSingleGreenTraffic2>
			break;
 800149a:	e000      	b.n	800149e <runManualModeFunction+0x146>
		default:
			break;
 800149c:	bf00      	nop
	}
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000047c 	.word	0x2000047c
 80014a8:	200000c8 	.word	0x200000c8
 80014ac:	200000c4 	.word	0x200000c4

080014b0 <beginManualMode>:

void beginManualMode()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	numberFreq= 0;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <beginManualMode+0x1c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
	offSingleRedGreenWalk();
 80014ba:	f7ff fad1 	bl	8000a60 <offSingleRedGreenWalk>
	initStatusManualMode();
 80014be:	f7ff ff3f 	bl	8001340 <initStatusManualMode>
	runManualModeFunction();
 80014c2:	f7ff ff49 	bl	8001358 <runManualModeFunction>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000c4 	.word	0x200000c4

080014d0 <beginWalkManualMode>:

void beginWalkManualMode()
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	numberFreq= 3;
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <beginWalkManualMode+0x1c>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusManualMode;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <beginWalkManualMode+0x20>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <beginWalkManualMode+0x24>)
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	200000c4 	.word	0x200000c4
 80014f0:	2000047c 	.word	0x2000047c
 80014f4:	200000c8 	.word	0x200000c8

080014f8 <initStatusNormalMode>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void initStatusNormalMode()
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	statusTraffic1 = INITNORMAL;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <initStatusNormalMode+0x1c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	statusTraffic2 = INITNORMAL;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <initStatusNormalMode+0x20>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000480 	.word	0x20000480
 8001518:	20000484 	.word	0x20000484

0800151c <runNormalMode>:
void runNormalMode()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 8001520:	4b93      	ldr	r3, [pc, #588]	; (8001770 <runNormalMode+0x254>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b03      	cmp	r3, #3
 8001526:	f200 80d1 	bhi.w	80016cc <runNormalMode+0x1b0>
 800152a:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <runNormalMode+0x14>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	08001541 	.word	0x08001541
 8001534:	08001563 	.word	0x08001563
 8001538:	080015dd 	.word	0x080015dd
 800153c:	08001655 	.word	0x08001655
	{
	case INITNORMAL:
		counterLedRed1 = durationLedRed;
 8001540:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <runNormalMode+0x258>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a8c      	ldr	r2, [pc, #560]	; (8001778 <runNormalMode+0x25c>)
 8001546:	6013      	str	r3, [r2, #0]
		statusTraffic1 = REDNORMAL;
 8001548:	4b89      	ldr	r3, [pc, #548]	; (8001770 <runNormalMode+0x254>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 800154e:	f7ff fa57 	bl	8000a00 <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 8001552:	4b89      	ldr	r3, [pc, #548]	; (8001778 <runNormalMode+0x25c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f9f2 	bl	8000940 <update7SEGBufferTraffic1>
		printTerminalInfoModeTraffic1();
 800155c:	f000 fe7e 	bl	800225c <printTerminalInfoModeTraffic1>
		break;
 8001560:	e0bb      	b.n	80016da <runNormalMode+0x1be>
	case REDNORMAL:
		if (counterLedRed1 > 0)
 8001562:	4b85      	ldr	r3, [pc, #532]	; (8001778 <runNormalMode+0x25c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f340 80b2 	ble.w	80016d0 <runNormalMode+0x1b4>
		{
			counterLedRed1--;
 800156c:	4b82      	ldr	r3, [pc, #520]	; (8001778 <runNormalMode+0x25c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	4a81      	ldr	r2, [pc, #516]	; (8001778 <runNormalMode+0x25c>)
 8001574:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 8001576:	4b80      	ldr	r3, [pc, #512]	; (8001778 <runNormalMode+0x25c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	dc24      	bgt.n	80015c8 <runNormalMode+0xac>
			{
				counterLedGreen1 = durationLedGreen;
 800157e:	4b7f      	ldr	r3, [pc, #508]	; (800177c <runNormalMode+0x260>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7f      	ldr	r2, [pc, #508]	; (8001780 <runNormalMode+0x264>)
 8001584:	6013      	str	r3, [r2, #0]
				statusTraffic1 = GREENNORMAL;
 8001586:	4b7a      	ldr	r3, [pc, #488]	; (8001770 <runNormalMode+0x254>)
 8001588:	2202      	movs	r2, #2
 800158a:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 800158c:	4b7d      	ldr	r3, [pc, #500]	; (8001784 <runNormalMode+0x268>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b77      	ldr	r3, [pc, #476]	; (8001770 <runNormalMode+0x254>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d10b      	bne.n	80015b0 <runNormalMode+0x94>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001598:	4b7b      	ldr	r3, [pc, #492]	; (8001788 <runNormalMode+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd03      	ble.n	80015a8 <runNormalMode+0x8c>
 80015a0:	4b79      	ldr	r3, [pc, #484]	; (8001788 <runNormalMode+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	e001      	b.n	80015ac <runNormalMode+0x90>
 80015a8:	4b77      	ldr	r3, [pc, #476]	; (8001788 <runNormalMode+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a76      	ldr	r2, [pc, #472]	; (8001788 <runNormalMode+0x26c>)
 80015ae:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 80015b0:	f7ff fa6c 	bl	8000a8c <ledWalkOperationNormalMode>
				onSingleGreenTraffic1();
 80015b4:	f7ff fa34 	bl	8000a20 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 80015b8:	4b71      	ldr	r3, [pc, #452]	; (8001780 <runNormalMode+0x264>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f9bf 	bl	8000940 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 80015c2:	f000 fe4b 	bl	800225c <printTerminalInfoModeTraffic1>
				onSingleRedTraffic1();
				update7SEGBufferTraffic1(counterLedRed1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 80015c6:	e083      	b.n	80016d0 <runNormalMode+0x1b4>
				onSingleRedTraffic1();
 80015c8:	f7ff fa1a 	bl	8000a00 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <runNormalMode+0x25c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f9b5 	bl	8000940 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 80015d6:	f000 fe41 	bl	800225c <printTerminalInfoModeTraffic1>
		break;
 80015da:	e079      	b.n	80016d0 <runNormalMode+0x1b4>
	case GREENNORMAL:
		if (counterLedGreen1 > 0)
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <runNormalMode+0x264>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dd77      	ble.n	80016d4 <runNormalMode+0x1b8>
		{
			counterLedGreen1--;
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <runNormalMode+0x264>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <runNormalMode+0x264>)
 80015ec:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 80015ee:	4b64      	ldr	r3, [pc, #400]	; (8001780 <runNormalMode+0x264>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	dc24      	bgt.n	8001640 <runNormalMode+0x124>
			{
				counterLedYellow1 = durationLedYellow;
 80015f6:	4b65      	ldr	r3, [pc, #404]	; (800178c <runNormalMode+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a65      	ldr	r2, [pc, #404]	; (8001790 <runNormalMode+0x274>)
 80015fc:	6013      	str	r3, [r2, #0]
				statusTraffic1 = YELLOWNORMAL;
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <runNormalMode+0x254>)
 8001600:	2203      	movs	r2, #3
 8001602:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8001604:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <runNormalMode+0x268>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <runNormalMode+0x254>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d10b      	bne.n	8001628 <runNormalMode+0x10c>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001610:	4b5d      	ldr	r3, [pc, #372]	; (8001788 <runNormalMode+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd03      	ble.n	8001620 <runNormalMode+0x104>
 8001618:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <runNormalMode+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	e001      	b.n	8001624 <runNormalMode+0x108>
 8001620:	4b59      	ldr	r3, [pc, #356]	; (8001788 <runNormalMode+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a58      	ldr	r2, [pc, #352]	; (8001788 <runNormalMode+0x26c>)
 8001626:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8001628:	f7ff fa30 	bl	8000a8c <ledWalkOperationNormalMode>
				onSingleYellowTraffic1();
 800162c:	f7ff f9f0 	bl	8000a10 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8001630:	4b57      	ldr	r3, [pc, #348]	; (8001790 <runNormalMode+0x274>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff f983 	bl	8000940 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800163a:	f000 fe0f 	bl	800225c <printTerminalInfoModeTraffic1>
				onSingleGreenTraffic1();
				update7SEGBufferTraffic1(counterLedGreen1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 800163e:	e049      	b.n	80016d4 <runNormalMode+0x1b8>
				onSingleGreenTraffic1();
 8001640:	f7ff f9ee 	bl	8000a20 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <runNormalMode+0x264>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f979 	bl	8000940 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800164e:	f000 fe05 	bl	800225c <printTerminalInfoModeTraffic1>
		break;
 8001652:	e03f      	b.n	80016d4 <runNormalMode+0x1b8>
	case YELLOWNORMAL:
		if (counterLedYellow1 > 0)
 8001654:	4b4e      	ldr	r3, [pc, #312]	; (8001790 <runNormalMode+0x274>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dd3d      	ble.n	80016d8 <runNormalMode+0x1bc>
		{
			counterLedYellow1--;
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <runNormalMode+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <runNormalMode+0x274>)
 8001664:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 8001666:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <runNormalMode+0x274>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dc24      	bgt.n	80016b8 <runNormalMode+0x19c>
			{
				counterLedRed1 = durationLedRed;
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <runNormalMode+0x258>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a41      	ldr	r2, [pc, #260]	; (8001778 <runNormalMode+0x25c>)
 8001674:	6013      	str	r3, [r2, #0]
				statusTraffic1 = REDNORMAL;
 8001676:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <runNormalMode+0x254>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 800167c:	4b41      	ldr	r3, [pc, #260]	; (8001784 <runNormalMode+0x268>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <runNormalMode+0x254>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d10b      	bne.n	80016a0 <runNormalMode+0x184>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001688:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <runNormalMode+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	dd03      	ble.n	8001698 <runNormalMode+0x17c>
 8001690:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <runNormalMode+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	e001      	b.n	800169c <runNormalMode+0x180>
 8001698:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <runNormalMode+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a3a      	ldr	r2, [pc, #232]	; (8001788 <runNormalMode+0x26c>)
 800169e:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 80016a0:	f7ff f9f4 	bl	8000a8c <ledWalkOperationNormalMode>
				onSingleRedTraffic1();
 80016a4:	f7ff f9ac 	bl	8000a00 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 80016a8:	4b33      	ldr	r3, [pc, #204]	; (8001778 <runNormalMode+0x25c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f947 	bl	8000940 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 80016b2:	f000 fdd3 	bl	800225c <printTerminalInfoModeTraffic1>
				onSingleYellowTraffic1();
				update7SEGBufferTraffic1(counterLedYellow1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 80016b6:	e00f      	b.n	80016d8 <runNormalMode+0x1bc>
				onSingleYellowTraffic1();
 80016b8:	f7ff f9aa 	bl	8000a10 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <runNormalMode+0x274>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f93d 	bl	8000940 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 80016c6:	f000 fdc9 	bl	800225c <printTerminalInfoModeTraffic1>
		break;
 80016ca:	e005      	b.n	80016d8 <runNormalMode+0x1bc>
	default:
		break;
 80016cc:	bf00      	nop
 80016ce:	e004      	b.n	80016da <runNormalMode+0x1be>
		break;
 80016d0:	bf00      	nop
 80016d2:	e002      	b.n	80016da <runNormalMode+0x1be>
		break;
 80016d4:	bf00      	nop
 80016d6:	e000      	b.n	80016da <runNormalMode+0x1be>
		break;
 80016d8:	bf00      	nop
	}
	switch (statusTraffic2)
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <runNormalMode+0x278>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	f200 80ae 	bhi.w	8001840 <runNormalMode+0x324>
 80016e4:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <runNormalMode+0x1d0>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	080017f1 	.word	0x080017f1
 80016f4:	0800171f 	.word	0x0800171f
 80016f8:	080017a1 	.word	0x080017a1
	{
	case INITNORMAL:
		statusTraffic2 = GREENNORMAL;
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <runNormalMode+0x278>)
 80016fe:	2202      	movs	r2, #2
 8001700:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <runNormalMode+0x260>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a24      	ldr	r2, [pc, #144]	; (8001798 <runNormalMode+0x27c>)
 8001708:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 800170a:	f7ff f9a1 	bl	8000a50 <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <runNormalMode+0x27c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f920 	bl	8000958 <update7SEGBufferTraffic2>
		printTerminalInfoTraffic2();
 8001718:	f000 fd5e 	bl	80021d8 <printTerminalInfoTraffic2>
		break;
 800171c:	e097      	b.n	800184e <runNormalMode+0x332>
	case GREENNORMAL:
		if (counterLedGreen2 > 0)
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <runNormalMode+0x27c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f340 808e 	ble.w	8001844 <runNormalMode+0x328>
		{
			counterLedGreen2--;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <runNormalMode+0x27c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3b01      	subs	r3, #1
 800172e:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <runNormalMode+0x27c>)
 8001730:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <runNormalMode+0x27c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	dc10      	bgt.n	800175c <runNormalMode+0x240>
			{
				counterLedYellow2 = durationLedYellow;
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <runNormalMode+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <runNormalMode+0x280>)
 8001740:	6013      	str	r3, [r2, #0]
				statusTraffic2 = YELLOWNORMAL;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <runNormalMode+0x278>)
 8001744:	2203      	movs	r2, #3
 8001746:	601a      	str	r2, [r3, #0]
				onSingleYellowTraffic2();
 8001748:	f7ff f97a 	bl	8000a40 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <runNormalMode+0x280>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f901 	bl	8000958 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001756:	f000 fd3f 	bl	80021d8 <printTerminalInfoTraffic2>
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 800175a:	e073      	b.n	8001844 <runNormalMode+0x328>
				onSingleGreenTraffic2();
 800175c:	f7ff f978 	bl	8000a50 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <runNormalMode+0x27c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff f8f7 	bl	8000958 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 800176a:	f000 fd35 	bl	80021d8 <printTerminalInfoTraffic2>
		break;
 800176e:	e069      	b.n	8001844 <runNormalMode+0x328>
 8001770:	20000480 	.word	0x20000480
 8001774:	2000005c 	.word	0x2000005c
 8001778:	20000488 	.word	0x20000488
 800177c:	20000060 	.word	0x20000060
 8001780:	20000490 	.word	0x20000490
 8001784:	200000c8 	.word	0x200000c8
 8001788:	200000c4 	.word	0x200000c4
 800178c:	20000064 	.word	0x20000064
 8001790:	20000498 	.word	0x20000498
 8001794:	20000484 	.word	0x20000484
 8001798:	20000494 	.word	0x20000494
 800179c:	2000049c 	.word	0x2000049c
	case YELLOWNORMAL:
		if (counterLedYellow2 > 0)
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <runNormalMode+0x338>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	dd4f      	ble.n	8001848 <runNormalMode+0x32c>
		{
			counterLedYellow2--;
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <runNormalMode+0x338>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	4a29      	ldr	r2, [pc, #164]	; (8001854 <runNormalMode+0x338>)
 80017b0:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <runNormalMode+0x338>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc10      	bgt.n	80017dc <runNormalMode+0x2c0>
			{
				counterLedRed2 = durationLedRed;
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <runNormalMode+0x33c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a27      	ldr	r2, [pc, #156]	; (800185c <runNormalMode+0x340>)
 80017c0:	6013      	str	r3, [r2, #0]
				statusTraffic2 = REDNORMAL;
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <runNormalMode+0x344>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 80017c8:	f7ff f932 	bl	8000a30 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <runNormalMode+0x340>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f8c1 	bl	8000958 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80017d6:	f000 fcff 	bl	80021d8 <printTerminalInfoTraffic2>
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 80017da:	e035      	b.n	8001848 <runNormalMode+0x32c>
				onSingleYellowTraffic2();
 80017dc:	f7ff f930 	bl	8000a40 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <runNormalMode+0x338>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff f8b7 	bl	8000958 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80017ea:	f000 fcf5 	bl	80021d8 <printTerminalInfoTraffic2>
		break;
 80017ee:	e02b      	b.n	8001848 <runNormalMode+0x32c>
	case REDNORMAL:
		if (counterLedRed2 > 0)
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <runNormalMode+0x340>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd29      	ble.n	800184c <runNormalMode+0x330>
		{
			counterLedRed2--;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <runNormalMode+0x340>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <runNormalMode+0x340>)
 8001800:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <runNormalMode+0x340>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc10      	bgt.n	800182c <runNormalMode+0x310>
			{
				counterLedGreen2 = durationLedGreen;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <runNormalMode+0x348>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <runNormalMode+0x34c>)
 8001810:	6013      	str	r3, [r2, #0]
				statusTraffic2 = GREENNORMAL;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <runNormalMode+0x344>)
 8001814:	2202      	movs	r2, #2
 8001816:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 8001818:	f7ff f91a 	bl	8000a50 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <runNormalMode+0x34c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f899 	bl	8000958 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001826:	f000 fcd7 	bl	80021d8 <printTerminalInfoTraffic2>
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 800182a:	e00f      	b.n	800184c <runNormalMode+0x330>
				onSingleRedTraffic2();
 800182c:	f7ff f900 	bl	8000a30 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <runNormalMode+0x340>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f88f 	bl	8000958 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 800183a:	f000 fccd 	bl	80021d8 <printTerminalInfoTraffic2>
		break;
 800183e:	e005      	b.n	800184c <runNormalMode+0x330>
	default:
		break;
 8001840:	bf00      	nop
 8001842:	e004      	b.n	800184e <runNormalMode+0x332>
		break;
 8001844:	bf00      	nop
 8001846:	e002      	b.n	800184e <runNormalMode+0x332>
		break;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <runNormalMode+0x332>
		break;
 800184c:	bf00      	nop
	}
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000049c 	.word	0x2000049c
 8001858:	2000005c 	.word	0x2000005c
 800185c:	2000048c 	.word	0x2000048c
 8001860:	20000484 	.word	0x20000484
 8001864:	20000060 	.word	0x20000060
 8001868:	20000494 	.word	0x20000494

0800186c <beginNormalMode>:

void beginNormalMode()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <beginNormalMode+0x2c>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
	offSingleRedGreenWalk();
 8001876:	f7ff f8f3 	bl	8000a60 <offSingleRedGreenWalk>
	offAllSingLEDs();
 800187a:	f7ff f8a9 	bl	80009d0 <offAllSingLEDs>
	update7SEGBufferMode(1);
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff f876 	bl	8000970 <update7SEGBufferMode>
	initStatusNormalMode();
 8001884:	f7ff fe38 	bl	80014f8 <initStatusNormalMode>
	runNormalMode();
 8001888:	f7ff fe48 	bl	800151c <runNormalMode>
	setTimer2(100);
 800188c:	2064      	movs	r0, #100	; 0x64
 800188e:	f000 f9c5 	bl	8001c1c <setTimer2>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200000c4 	.word	0x200000c4

0800189c <beginWalkNormalMode>:

void beginWalkNormalMode()
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
	numberFreq= 3;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <beginWalkNormalMode+0x1c>)
 80018a2:	2203      	movs	r2, #3
 80018a4:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusTraffic1;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <beginWalkNormalMode+0x20>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <beginWalkNormalMode+0x24>)
 80018ac:	6013      	str	r3, [r2, #0]
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	200000c4 	.word	0x200000c4
 80018bc:	20000480 	.word	0x20000480
 80018c0:	200000c8 	.word	0x200000c8

080018c4 <controlSingleLedTraffic>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLedTraffic(int orderTraffic, int statusLed)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d003      	beq.n	80018dc <controlSingleLedTraffic+0x18>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b09      	cmp	r3, #9
 80018d8:	d077      	beq.n	80019ca <controlSingleLedTraffic+0x106>
		default:
			break;
		}
		break;
	default:
		break;
 80018da:	e0ee      	b.n	8001aba <controlSingleLedTraffic+0x1f6>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b07      	cmp	r3, #7
 80018e0:	d871      	bhi.n	80019c6 <controlSingleLedTraffic+0x102>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <controlSingleLedTraffic+0x24>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	08001909 	.word	0x08001909
 80018ec:	08001929 	.word	0x08001929
 80018f0:	08001949 	.word	0x08001949
 80018f4:	08001969 	.word	0x08001969
 80018f8:	0800197d 	.word	0x0800197d
 80018fc:	08001973 	.word	0x08001973
 8001900:	08001987 	.word	0x08001987
 8001904:	080019a7 	.word	0x080019a7
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2101      	movs	r1, #1
 800190c:	486d      	ldr	r0, [pc, #436]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 800190e:	f001 f907 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2104      	movs	r1, #4
 8001916:	486b      	ldr	r0, [pc, #428]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001918:	f001 f902 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2102      	movs	r1, #2
 8001920:	4868      	ldr	r0, [pc, #416]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001922:	f001 f8fd 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001926:	e04f      	b.n	80019c8 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2101      	movs	r1, #1
 800192c:	4865      	ldr	r0, [pc, #404]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 800192e:	f001 f8f7 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2104      	movs	r1, #4
 8001936:	4863      	ldr	r0, [pc, #396]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001938:	f001 f8f2 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2102      	movs	r1, #2
 8001940:	4860      	ldr	r0, [pc, #384]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001942:	f001 f8ed 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001946:	e03f      	b.n	80019c8 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2101      	movs	r1, #1
 800194c:	485d      	ldr	r0, [pc, #372]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 800194e:	f001 f8e7 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001952:	2201      	movs	r2, #1
 8001954:	2104      	movs	r1, #4
 8001956:	485b      	ldr	r0, [pc, #364]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001958:	f001 f8e2 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2102      	movs	r1, #2
 8001960:	4858      	ldr	r0, [pc, #352]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001962:	f001 f8dd 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001966:	e02f      	b.n	80019c8 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8001968:	2101      	movs	r1, #1
 800196a:	4856      	ldr	r0, [pc, #344]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 800196c:	f001 f8f1 	bl	8002b52 <HAL_GPIO_TogglePin>
			break;
 8001970:	e02a      	b.n	80019c8 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001972:	2104      	movs	r1, #4
 8001974:	4853      	ldr	r0, [pc, #332]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001976:	f001 f8ec 	bl	8002b52 <HAL_GPIO_TogglePin>
			break;
 800197a:	e025      	b.n	80019c8 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800197c:	2102      	movs	r1, #2
 800197e:	4851      	ldr	r0, [pc, #324]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001980:	f001 f8e7 	bl	8002b52 <HAL_GPIO_TogglePin>
			break;
 8001984:	e020      	b.n	80019c8 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2101      	movs	r1, #1
 800198a:	484e      	ldr	r0, [pc, #312]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 800198c:	f001 f8c8 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2104      	movs	r1, #4
 8001994:	484b      	ldr	r0, [pc, #300]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001996:	f001 f8c3 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2102      	movs	r1, #2
 800199e:	4849      	ldr	r0, [pc, #292]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 80019a0:	f001 f8be 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 80019a4:	e010      	b.n	80019c8 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2101      	movs	r1, #1
 80019aa:	4846      	ldr	r0, [pc, #280]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 80019ac:	f001 f8b8 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2104      	movs	r1, #4
 80019b4:	4843      	ldr	r0, [pc, #268]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 80019b6:	f001 f8b3 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2102      	movs	r1, #2
 80019be:	4841      	ldr	r0, [pc, #260]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 80019c0:	f001 f8ae 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 80019c4:	e000      	b.n	80019c8 <controlSingleLedTraffic+0x104>
			break;
 80019c6:	bf00      	nop
		break;
 80019c8:	e077      	b.n	8001aba <controlSingleLedTraffic+0x1f6>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d872      	bhi.n	8001ab6 <controlSingleLedTraffic+0x1f2>
 80019d0:	a201      	add	r2, pc, #4	; (adr r2, 80019d8 <controlSingleLedTraffic+0x114>)
 80019d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d6:	bf00      	nop
 80019d8:	080019f9 	.word	0x080019f9
 80019dc:	08001a19 	.word	0x08001a19
 80019e0:	08001a39 	.word	0x08001a39
 80019e4:	08001a59 	.word	0x08001a59
 80019e8:	08001a6d 	.word	0x08001a6d
 80019ec:	08001a63 	.word	0x08001a63
 80019f0:	08001a77 	.word	0x08001a77
 80019f4:	08001a97 	.word	0x08001a97
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2108      	movs	r1, #8
 80019fc:	4831      	ldr	r0, [pc, #196]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 80019fe:	f001 f88f 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2120      	movs	r1, #32
 8001a06:	482f      	ldr	r0, [pc, #188]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a08:	f001 f88a 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2110      	movs	r1, #16
 8001a10:	482c      	ldr	r0, [pc, #176]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a12:	f001 f885 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001a16:	e04f      	b.n	8001ab8 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	4829      	ldr	r0, [pc, #164]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a1e:	f001 f87f 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2120      	movs	r1, #32
 8001a26:	4827      	ldr	r0, [pc, #156]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a28:	f001 f87a 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2110      	movs	r1, #16
 8001a30:	4824      	ldr	r0, [pc, #144]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a32:	f001 f875 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001a36:	e03f      	b.n	8001ab8 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2108      	movs	r1, #8
 8001a3c:	4821      	ldr	r0, [pc, #132]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a3e:	f001 f86f 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	2120      	movs	r1, #32
 8001a46:	481f      	ldr	r0, [pc, #124]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a48:	f001 f86a 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2110      	movs	r1, #16
 8001a50:	481c      	ldr	r0, [pc, #112]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a52:	f001 f865 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001a56:	e02f      	b.n	8001ab8 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8001a58:	2108      	movs	r1, #8
 8001a5a:	481a      	ldr	r0, [pc, #104]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a5c:	f001 f879 	bl	8002b52 <HAL_GPIO_TogglePin>
			break;
 8001a60:	e02a      	b.n	8001ab8 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001a62:	2120      	movs	r1, #32
 8001a64:	4817      	ldr	r0, [pc, #92]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a66:	f001 f874 	bl	8002b52 <HAL_GPIO_TogglePin>
			break;
 8001a6a:	e025      	b.n	8001ab8 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	4815      	ldr	r0, [pc, #84]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a70:	f001 f86f 	bl	8002b52 <HAL_GPIO_TogglePin>
			break;
 8001a74:	e020      	b.n	8001ab8 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2108      	movs	r1, #8
 8001a7a:	4812      	ldr	r0, [pc, #72]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a7c:	f001 f850 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2120      	movs	r1, #32
 8001a84:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a86:	f001 f84b 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a90:	f001 f846 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001a94:	e010      	b.n	8001ab8 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001a96:	2201      	movs	r2, #1
 8001a98:	2108      	movs	r1, #8
 8001a9a:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001a9c:	f001 f840 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001aa6:	f001 f83b 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2110      	movs	r1, #16
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <controlSingleLedTraffic+0x200>)
 8001ab0:	f001 f836 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001ab4:	e000      	b.n	8001ab8 <controlSingleLedTraffic+0x1f4>
			break;
 8001ab6:	bf00      	nop
		break;
 8001ab8:	bf00      	nop
	}
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <controlSingleLedWalk>:

void controlSingleLedWalk(int statusLed)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	switch (statusLed)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d022      	beq.n	8001b1c <controlSingleLedWalk+0x54>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0c      	cmp	r3, #12
 8001ada:	dc2c      	bgt.n	8001b36 <controlSingleLedWalk+0x6e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	d00f      	beq.n	8001b02 <controlSingleLedWalk+0x3a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0b      	cmp	r3, #11
 8001ae6:	d126      	bne.n	8001b36 <controlSingleLedWalk+0x6e>
	{
		case ONGREENOFFREDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aee:	4814      	ldr	r0, [pc, #80]	; (8001b40 <controlSingleLedWalk+0x78>)
 8001af0:	f001 f816 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afa:	4811      	ldr	r0, [pc, #68]	; (8001b40 <controlSingleLedWalk+0x78>)
 8001afc:	f001 f810 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001b00:	e01a      	b.n	8001b38 <controlSingleLedWalk+0x70>
		case OFFLEDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <controlSingleLedWalk+0x78>)
 8001b0a:	f001 f809 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b14:	480a      	ldr	r0, [pc, #40]	; (8001b40 <controlSingleLedWalk+0x78>)
 8001b16:	f001 f803 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001b1a:	e00d      	b.n	8001b38 <controlSingleLedWalk+0x70>
		case ONREDOFFGREENWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <controlSingleLedWalk+0x78>)
 8001b24:	f000 fffc 	bl	8002b20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <controlSingleLedWalk+0x78>)
 8001b30:	f000 fff6 	bl	8002b20 <HAL_GPIO_WritePin>
			break;
 8001b34:	e000      	b.n	8001b38 <controlSingleLedWalk+0x70>
		default:
			break;
 8001b36:	bf00      	nop
	}
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40020c00 	.word	0x40020c00

08001b44 <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <runTimer+0x90>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	dd0b      	ble.n	8001b68 <runTimer+0x24>
	{
		counter1--;
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <runTimer+0x90>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <runTimer+0x90>)
 8001b58:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <runTimer+0x90>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	dc02      	bgt.n	8001b68 <runTimer+0x24>
		{
			flag1 = 1;
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <runTimer+0x94>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <runTimer+0x98>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	dd0b      	ble.n	8001b88 <runTimer+0x44>
	{
		counter2--;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <runTimer+0x98>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <runTimer+0x98>)
 8001b78:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <runTimer+0x98>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	dc02      	bgt.n	8001b88 <runTimer+0x44>
		{
			flag2 = 1;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <runTimer+0x9c>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <runTimer+0xa0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	dd0b      	ble.n	8001ba8 <runTimer+0x64>
	{
		counter3--;
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <runTimer+0xa0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <runTimer+0xa0>)
 8001b98:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <runTimer+0xa0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dc02      	bgt.n	8001ba8 <runTimer+0x64>
		{
			flag3 = 1;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <runTimer+0xa4>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <runTimer+0xa8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	dd0b      	ble.n	8001bc8 <runTimer+0x84>
	{
		counter4--;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <runTimer+0xa8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <runTimer+0xa8>)
 8001bb8:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <runTimer+0xa8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	dc02      	bgt.n	8001bc8 <runTimer+0x84>
		{
			flag4 = 1;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <runTimer+0xac>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200004a0 	.word	0x200004a0
 8001bd8:	200004a4 	.word	0x200004a4
 8001bdc:	200004a8 	.word	0x200004a8
 8001be0:	200004ac 	.word	0x200004ac
 8001be4:	200004b0 	.word	0x200004b0
 8001be8:	200004b4 	.word	0x200004b4
 8001bec:	200004b8 	.word	0x200004b8
 8001bf0:	200004bc 	.word	0x200004bc

08001bf4 <setTimer1>:

void setTimer1(int duration)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	counter1 = duration;
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <setTimer1+0x20>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <setTimer1+0x24>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	200004a0 	.word	0x200004a0
 8001c18:	200004a4 	.word	0x200004a4

08001c1c <setTimer2>:

void setTimer2(int duration)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	counter2 = duration;
 8001c24:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <setTimer2+0x20>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
	flag2 = 0;
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <setTimer2+0x24>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	200004a8 	.word	0x200004a8
 8001c40:	200004ac 	.word	0x200004ac

08001c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_MspInit+0x4c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_MspInit+0x4c>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <HAL_MspInit+0x4c>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca4:	d116      	bne.n	8001cd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_TIM_Base_MspInit+0x80>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_TIM_Base_MspInit+0x80>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_TIM_Base_MspInit+0x80>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	201c      	movs	r0, #28
 8001cc8:	f000 fcad 	bl	8002626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ccc:	201c      	movs	r0, #28
 8001cce:	f000 fcc6 	bl	800265e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cd2:	e01a      	b.n	8001d0a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_TIM_Base_MspInit+0x84>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d115      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_TIM_Base_MspInit+0x80>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_TIM_Base_MspInit+0x80>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_TIM_Base_MspInit+0x80>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	201d      	movs	r0, #29
 8001d00:	f000 fc91 	bl	8002626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d04:	201d      	movs	r0, #29
 8001d06:	f000 fcaa 	bl	800265e <HAL_NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40000400 	.word	0x40000400

08001d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <HAL_TIM_MspPostInit+0x68>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d11d      	bne.n	8001d7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_TIM_MspPostInit+0x6c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_TIM_MspPostInit+0x6c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_TIM_MspPostInit+0x6c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <HAL_TIM_MspPostInit+0x70>)
 8001d76:	f000 fd1f 	bl	80027b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000

08001d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_UART_MspInit+0x94>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d133      	bne.n	8001e1a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_UART_MspInit+0x98>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <HAL_UART_MspInit+0x98>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_UART_MspInit+0x98>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_UART_MspInit+0x98>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <HAL_UART_MspInit+0x98>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_UART_MspInit+0x98>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dea:	23c0      	movs	r3, #192	; 0xc0
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4809      	ldr	r0, [pc, #36]	; (8001e2c <HAL_UART_MspInit+0x9c>)
 8001e06:	f000 fcd7 	bl	80027b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2025      	movs	r0, #37	; 0x25
 8001e10:	f000 fc09 	bl	8002626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e14:	2025      	movs	r0, #37	; 0x25
 8001e16:	f000 fc22 	bl	800265e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020400 	.word	0x40020400

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7c:	f000 fad8 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM2_IRQHandler+0x10>)
 8001e8a:	f001 fcb7 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200000cc 	.word	0x200000cc

08001e98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM3_IRQHandler+0x10>)
 8001e9e:	f001 fcad 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000114 	.word	0x20000114

08001eac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <USART1_IRQHandler+0x10>)
 8001eb2:	f002 fbdd 	bl	8004670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200004c4 	.word	0x200004c4

08001ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <runTuningMode>:
#define GREENTUNING 3

int statusTuningMode= INITMODE;

void runTuningMode()
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <runTuningMode+0xb4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d84b      	bhi.n	8001f88 <runTuningMode+0xa4>
 8001ef0:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <runTuningMode+0x14>)
 8001ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef6:	bf00      	nop
 8001ef8:	08001f09 	.word	0x08001f09
 8001efc:	08001f29 	.word	0x08001f29
 8001f00:	08001f49 	.word	0x08001f49
 8001f04:	08001f69 	.word	0x08001f69
    {
        case INITMODE:
            statusTuningMode= REDTUNING;
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <runTuningMode+0xb4>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001f0e:	f7fe fd5f 	bl	80009d0 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <runTuningMode+0xb8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fd12 	bl	8000940 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <runTuningMode+0xb8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fd19 	bl	8000958 <update7SEGBufferTraffic2>
            break;
 8001f26:	e030      	b.n	8001f8a <runTuningMode+0xa6>
        case REDTUNING:
            statusTuningMode= YELLOWTUNING;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <runTuningMode+0xb4>)
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001f2e:	f7fe fd4f 	bl	80009d0 <offAllSingLEDs>
            // blinkingYELLOW();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedYellow);
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <runTuningMode+0xbc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fd02 	bl	8000940 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedYellow);
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <runTuningMode+0xbc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fd09 	bl	8000958 <update7SEGBufferTraffic2>
            break;
 8001f46:	e020      	b.n	8001f8a <runTuningMode+0xa6>
        case YELLOWTUNING:
            statusTuningMode= GREENTUNING;
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <runTuningMode+0xb4>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001f4e:	f7fe fd3f 	bl	80009d0 <offAllSingLEDs>
            // blinkingGREEN();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedGreen);
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <runTuningMode+0xc0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fcf2 	bl	8000940 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedGreen);
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <runTuningMode+0xc0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fcf9 	bl	8000958 <update7SEGBufferTraffic2>
            break;
 8001f66:	e010      	b.n	8001f8a <runTuningMode+0xa6>
        case GREENTUNING:
            statusTuningMode= REDTUNING;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <runTuningMode+0xb4>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001f6e:	f7fe fd2f 	bl	80009d0 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <runTuningMode+0xb8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fce2 	bl	8000940 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <runTuningMode+0xb8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fce9 	bl	8000958 <update7SEGBufferTraffic2>
            break;
 8001f86:	e000      	b.n	8001f8a <runTuningMode+0xa6>
        default:
            break;
 8001f88:	bf00      	nop
    }
    printTerminalInfoModeTraffic1();
 8001f8a:	f000 f967 	bl	800225c <printTerminalInfoModeTraffic1>
    printTerminalInfoTraffic2();
 8001f8e:	f000 f923 	bl	80021d8 <printTerminalInfoTraffic2>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200004c0 	.word	0x200004c0
 8001f9c:	2000005c 	.word	0x2000005c
 8001fa0:	20000064 	.word	0x20000064
 8001fa4:	20000060 	.word	0x20000060

08001fa8 <initStatusTuningMode>:

void initStatusTuningMode()
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
    statusTuningMode= INITMODE;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <initStatusTuningMode+0x14>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	200004c0 	.word	0x200004c0

08001fc0 <beginTuningMode>:

void beginTuningMode()
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <beginTuningMode+0x20>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
    offSingleRedGreenWalk();
 8001fca:	f7fe fd49 	bl	8000a60 <offSingleRedGreenWalk>
    initStatusTuningMode();
 8001fce:	f7ff ffeb 	bl	8001fa8 <initStatusTuningMode>
    update7SEGBufferMode(3);
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f7fe fccc 	bl	8000970 <update7SEGBufferMode>
    runTuningMode();
 8001fd8:	f7ff ff84 	bl	8001ee4 <runTuningMode>
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200000c4 	.word	0x200000c4

08001fe4 <modifyTuningMode>:

void modifyTuningMode()
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <modifyTuningMode+0xac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d034      	beq.n	800205a <modifyTuningMode+0x76>
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	dc49      	bgt.n	8002088 <modifyTuningMode+0xa4>
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d002      	beq.n	8001ffe <modifyTuningMode+0x1a>
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d017      	beq.n	800202c <modifyTuningMode+0x48>
            }
            update7SEGBufferTraffic1(tempDurationLedGreen);
            update7SEGBufferTraffic2(tempDurationLedGreen);
            break;
        default:
            break;
 8001ffc:	e044      	b.n	8002088 <modifyTuningMode+0xa4>
            tempDurationLedRed++;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <modifyTuningMode+0xb0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a23      	ldr	r2, [pc, #140]	; (8002094 <modifyTuningMode+0xb0>)
 8002006:	6013      	str	r3, [r2, #0]
            if (tempDurationLedRed > 99)
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <modifyTuningMode+0xb0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b63      	cmp	r3, #99	; 0x63
 800200e:	dd02      	ble.n	8002016 <modifyTuningMode+0x32>
                tempDurationLedRed = 0;
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <modifyTuningMode+0xb0>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedRed);
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <modifyTuningMode+0xb0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fc90 	bl	8000940 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedRed);
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <modifyTuningMode+0xb0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fc97 	bl	8000958 <update7SEGBufferTraffic2>
            break;
 800202a:	e02e      	b.n	800208a <modifyTuningMode+0xa6>
            tempDurationLedYellow++;
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <modifyTuningMode+0xb4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	4a19      	ldr	r2, [pc, #100]	; (8002098 <modifyTuningMode+0xb4>)
 8002034:	6013      	str	r3, [r2, #0]
            if (tempDurationLedYellow > 99)
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <modifyTuningMode+0xb4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b63      	cmp	r3, #99	; 0x63
 800203c:	dd02      	ble.n	8002044 <modifyTuningMode+0x60>
                tempDurationLedYellow = 0;
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <modifyTuningMode+0xb4>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedYellow);
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <modifyTuningMode+0xb4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fc79 	bl	8000940 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedYellow);
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <modifyTuningMode+0xb4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fc80 	bl	8000958 <update7SEGBufferTraffic2>
            break;
 8002058:	e017      	b.n	800208a <modifyTuningMode+0xa6>
            tempDurationLedGreen++;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <modifyTuningMode+0xb8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	4a0e      	ldr	r2, [pc, #56]	; (800209c <modifyTuningMode+0xb8>)
 8002062:	6013      	str	r3, [r2, #0]
            if (tempDurationLedGreen > 99)
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <modifyTuningMode+0xb8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b63      	cmp	r3, #99	; 0x63
 800206a:	dd02      	ble.n	8002072 <modifyTuningMode+0x8e>
                tempDurationLedGreen = 0;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <modifyTuningMode+0xb8>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedGreen);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <modifyTuningMode+0xb8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fc62 	bl	8000940 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedGreen);
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <modifyTuningMode+0xb8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fc69 	bl	8000958 <update7SEGBufferTraffic2>
            break;
 8002086:	e000      	b.n	800208a <modifyTuningMode+0xa6>
            break;
 8002088:	bf00      	nop
    }
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200004c0 	.word	0x200004c0
 8002094:	20000050 	.word	0x20000050
 8002098:	20000058 	.word	0x20000058
 800209c:	20000054 	.word	0x20000054

080020a0 <saveTuningMode>:

void saveTuningMode()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <saveTuningMode+0x88>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b20      	ldr	r3, [pc, #128]	; (800212c <saveTuningMode+0x8c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	441a      	add	r2, r3
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <saveTuningMode+0x90>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d028      	beq.n	8002108 <saveTuningMode+0x68>
    {
        switch (statusTuningMode)
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <saveTuningMode+0x94>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d117      	bne.n	80020ee <saveTuningMode+0x4e>
        {
            case GREENTUNING:
                update7SEGBufferTraffic1(88);
 80020be:	2058      	movs	r0, #88	; 0x58
 80020c0:	f7fe fc3e 	bl	8000940 <update7SEGBufferTraffic1>
                update7SEGBufferTraffic2(88);
 80020c4:	2058      	movs	r0, #88	; 0x58
 80020c6:	f7fe fc47 	bl	8000958 <update7SEGBufferTraffic2>
                update7SEGBufferMode(8);
 80020ca:	2008      	movs	r0, #8
 80020cc:	f7fe fc50 	bl	8000970 <update7SEGBufferMode>
                onAllSingLEDs();
 80020d0:	f7fe fc8a 	bl	80009e8 <onAllSingLEDs>
                tempDurationLedGreen = durationLedGreen;
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <saveTuningMode+0x98>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <saveTuningMode+0x8c>)
 80020da:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <saveTuningMode+0x9c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a13      	ldr	r2, [pc, #76]	; (8002130 <saveTuningMode+0x90>)
 80020e2:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <saveTuningMode+0xa0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <saveTuningMode+0x88>)
 80020ea:	6013      	str	r3, [r2, #0]
                break;
 80020ec:	e019      	b.n	8002122 <saveTuningMode+0x82>
            default:
                tempDurationLedGreen = durationLedGreen;
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <saveTuningMode+0x98>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <saveTuningMode+0x8c>)
 80020f4:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <saveTuningMode+0x9c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <saveTuningMode+0x90>)
 80020fc:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <saveTuningMode+0xa0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <saveTuningMode+0x88>)
 8002104:	6013      	str	r3, [r2, #0]
                break;
 8002106:	e00c      	b.n	8002122 <saveTuningMode+0x82>
        }
    }
    else
    {
        durationLedGreen = tempDurationLedGreen;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <saveTuningMode+0x8c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <saveTuningMode+0x98>)
 800210e:	6013      	str	r3, [r2, #0]
        durationLedRed = tempDurationLedRed;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <saveTuningMode+0x90>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a09      	ldr	r2, [pc, #36]	; (800213c <saveTuningMode+0x9c>)
 8002116:	6013      	str	r3, [r2, #0]
        durationLedYellow = tempDurationLedYellow;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <saveTuningMode+0x88>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <saveTuningMode+0xa0>)
 800211e:	6013      	str	r3, [r2, #0]
    }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000058 	.word	0x20000058
 800212c:	20000054 	.word	0x20000054
 8002130:	20000050 	.word	0x20000050
 8002134:	200004c0 	.word	0x200004c0
 8002138:	20000060 	.word	0x20000060
 800213c:	2000005c 	.word	0x2000005c
 8002140:	20000064 	.word	0x20000064

08002144 <animationTuningMode>:

void animationTuningMode()
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <animationTuningMode+0x3c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d814      	bhi.n	800217a <animationTuningMode+0x36>
 8002150:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <animationTuningMode+0x14>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	0800217b 	.word	0x0800217b
 800215c:	08002169 	.word	0x08002169
 8002160:	0800216f 	.word	0x0800216f
 8002164:	08002175 	.word	0x08002175
    {
    case INITMODE:
        break;
    case REDTUNING:
        blinkingRED();
 8002168:	f7fe fc1a 	bl	80009a0 <blinkingRED>
        break;
 800216c:	e006      	b.n	800217c <animationTuningMode+0x38>
    case YELLOWTUNING:
        blinkingYELLOW();
 800216e:	f7fe fc0b 	bl	8000988 <blinkingYELLOW>
        break;
 8002172:	e003      	b.n	800217c <animationTuningMode+0x38>
    case GREENTUNING:
        blinkingGREEN();
 8002174:	f7fe fc20 	bl	80009b8 <blinkingGREEN>
        break;
 8002178:	e000      	b.n	800217c <animationTuningMode+0x38>
    default:
        break;
 800217a:	bf00      	nop
    }
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200004c0 	.word	0x200004c0

08002184 <MX_USART1_UART_Init>:
#include "deviceDriver7Segment.h"
#include <stdlib.h>
UART_HandleTypeDef huart1;

void MX_USART1_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_USART1_UART_Init+0x48>)
 800218a:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <MX_USART1_UART_Init+0x4c>)
 800218c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 96000;
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <MX_USART1_UART_Init+0x48>)
 8002190:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <MX_USART1_UART_Init+0x50>)
 8002192:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <MX_USART1_UART_Init+0x48>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <MX_USART1_UART_Init+0x48>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <MX_USART1_UART_Init+0x48>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <MX_USART1_UART_Init+0x48>)
 80021a8:	220c      	movs	r2, #12
 80021aa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <MX_USART1_UART_Init+0x48>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_USART1_UART_Init+0x48>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <MX_USART1_UART_Init+0x48>)
 80021ba:	f002 f979 	bl	80044b0 <HAL_UART_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80021c4:	f7ff f8b6 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200004c4 	.word	0x200004c4
 80021d0:	40011000 	.word	0x40011000
 80021d4:	00017700 	.word	0x00017700

080021d8 <printTerminalInfoTraffic2>:

void printTerminalInfoTraffic2()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 80021de:	4a1b      	ldr	r2, [pc, #108]	; (800224c <printTerminalInfoTraffic2+0x74>)
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e8:	6018      	str	r0, [r3, #0]
 80021ea:	3304      	adds	r3, #4
 80021ec:	8019      	strh	r1, [r3, #0]
 80021ee:	3302      	adds	r3, #2
 80021f0:	0c0a      	lsrs	r2, r1, #16
 80021f2:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\r";
 80021f4:	4a16      	ldr	r2, [pc, #88]	; (8002250 <printTerminalInfoTraffic2+0x78>)
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	4611      	mov	r1, r2
 80021fe:	8019      	strh	r1, [r3, #0]
 8002200:	3302      	adds	r3, #2
 8002202:	0c12      	lsrs	r2, r2, #16
 8002204:	701a      	strb	r2, [r3, #0]

	char valueTraffic2[10];
	itoa(led_buffer[1], valueTraffic2, 10);
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <printTerminalInfoTraffic2+0x7c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4639      	mov	r1, r7
 800220c:	220a      	movs	r2, #10
 800220e:	4618      	mov	r0, r3
 8002210:	f003 f99e 	bl	8005550 <itoa>

	HAL_UART_Transmit(&huart1, str01, sizeof(str01), 1000);
 8002214:	f107 0110 	add.w	r1, r7, #16
 8002218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221c:	2207      	movs	r2, #7
 800221e:	480e      	ldr	r0, [pc, #56]	; (8002258 <printTerminalInfoTraffic2+0x80>)
 8002220:	f002 f993 	bl	800454a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueTraffic2, sizeof(valueTraffic2), 1000);
 8002224:	4639      	mov	r1, r7
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	220a      	movs	r2, #10
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <printTerminalInfoTraffic2+0x80>)
 800222e:	f002 f98c 	bl	800454a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 8002232:	f107 010c 	add.w	r1, r7, #12
 8002236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223a:	2203      	movs	r2, #3
 800223c:	4806      	ldr	r0, [pc, #24]	; (8002258 <printTerminalInfoTraffic2+0x80>)
 800223e:	f002 f984 	bl	800454a <HAL_UART_Transmit>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	08005600 	.word	0x08005600
 8002250:	08005608 	.word	0x08005608
 8002254:	200000b8 	.word	0x200000b8
 8002258:	200004c4 	.word	0x200004c4

0800225c <printTerminalInfoModeTraffic1>:
void printTerminalInfoModeTraffic1()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	; 0x30
 8002260:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 8002262:	4a30      	ldr	r2, [pc, #192]	; (8002324 <printTerminalInfoModeTraffic1+0xc8>)
 8002264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800226c:	6018      	str	r0, [r3, #0]
 800226e:	3304      	adds	r3, #4
 8002270:	8019      	strh	r1, [r3, #0]
 8002272:	3302      	adds	r3, #2
 8002274:	0c0a      	lsrs	r2, r1, #16
 8002276:	701a      	strb	r2, [r3, #0]
	uint8_t str2[]= "!MODE:";
 8002278:	4a2b      	ldr	r2, [pc, #172]	; (8002328 <printTerminalInfoModeTraffic1+0xcc>)
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002282:	6018      	str	r0, [r3, #0]
 8002284:	3304      	adds	r3, #4
 8002286:	8019      	strh	r1, [r3, #0]
 8002288:	3302      	adds	r3, #2
 800228a:	0c0a      	lsrs	r2, r1, #16
 800228c:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\r";
 800228e:	4a27      	ldr	r2, [pc, #156]	; (800232c <printTerminalInfoModeTraffic1+0xd0>)
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	4611      	mov	r1, r2
 8002298:	8019      	strh	r1, [r3, #0]
 800229a:	3302      	adds	r3, #2
 800229c:	0c12      	lsrs	r2, r2, #16
 800229e:	701a      	strb	r2, [r3, #0]

	char valueTraffic1[10];
	itoa(led_buffer[0], valueTraffic1, 10);
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <printTerminalInfoModeTraffic1+0xd4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f107 0110 	add.w	r1, r7, #16
 80022a8:	220a      	movs	r2, #10
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 f950 	bl	8005550 <itoa>

	char valueMode[10];
	itoa(led_buffer[2], valueMode, 10);
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <printTerminalInfoModeTraffic1+0xd4>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	1d39      	adds	r1, r7, #4
 80022b6:	220a      	movs	r2, #10
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 f949 	bl	8005550 <itoa>

	HAL_UART_Transmit(&huart1, str2, sizeof(str2), 1000);
 80022be:	f107 0120 	add.w	r1, r7, #32
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	2207      	movs	r2, #7
 80022c8:	481a      	ldr	r0, [pc, #104]	; (8002334 <printTerminalInfoModeTraffic1+0xd8>)
 80022ca:	f002 f93e 	bl	800454a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueMode, sizeof(valueMode), 1000);
 80022ce:	1d39      	adds	r1, r7, #4
 80022d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d4:	220a      	movs	r2, #10
 80022d6:	4817      	ldr	r0, [pc, #92]	; (8002334 <printTerminalInfoModeTraffic1+0xd8>)
 80022d8:	f002 f937 	bl	800454a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 80022dc:	f107 011c 	add.w	r1, r7, #28
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	2203      	movs	r2, #3
 80022e6:	4813      	ldr	r0, [pc, #76]	; (8002334 <printTerminalInfoModeTraffic1+0xd8>)
 80022e8:	f002 f92f 	bl	800454a <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, str01, sizeof(str01), 1000);
 80022ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f4:	2207      	movs	r2, #7
 80022f6:	480f      	ldr	r0, [pc, #60]	; (8002334 <printTerminalInfoModeTraffic1+0xd8>)
 80022f8:	f002 f927 	bl	800454a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueTraffic1, sizeof(valueTraffic1), 1000);
 80022fc:	f107 0110 	add.w	r1, r7, #16
 8002300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002304:	220a      	movs	r2, #10
 8002306:	480b      	ldr	r0, [pc, #44]	; (8002334 <printTerminalInfoModeTraffic1+0xd8>)
 8002308:	f002 f91f 	bl	800454a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 800230c:	f107 011c 	add.w	r1, r7, #28
 8002310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002314:	2203      	movs	r2, #3
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <printTerminalInfoModeTraffic1+0xd8>)
 8002318:	f002 f917 	bl	800454a <HAL_UART_Transmit>
}
 800231c:	bf00      	nop
 800231e:	3730      	adds	r7, #48	; 0x30
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	08005600 	.word	0x08005600
 8002328:	0800560c 	.word	0x0800560c
 800232c:	08005608 	.word	0x08005608
 8002330:	200000b8 	.word	0x200000b8
 8002334:	200004c4 	.word	0x200004c4

08002338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002370 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800233c:	480d      	ldr	r0, [pc, #52]	; (8002374 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800233e:	490e      	ldr	r1, [pc, #56]	; (8002378 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002340:	4a0e      	ldr	r2, [pc, #56]	; (800237c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002344:	e002      	b.n	800234c <LoopCopyDataInit>

08002346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234a:	3304      	adds	r3, #4

0800234c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800234c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002350:	d3f9      	bcc.n	8002346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002354:	4c0b      	ldr	r4, [pc, #44]	; (8002384 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002358:	e001      	b.n	800235e <LoopFillZerobss>

0800235a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800235c:	3204      	adds	r2, #4

0800235e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002360:	d3fb      	bcc.n	800235a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002362:	f7ff fdad 	bl	8001ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002366:	f003 f8b7 	bl	80054d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236a:	f7fe fd4b 	bl	8000e04 <main>
  bx  lr    
 800236e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800237c:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 8002380:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002384:	2000050c 	.word	0x2000050c

08002388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC_IRQHandler>
	...

0800238c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_Init+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <HAL_Init+0x40>)
 8002396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_Init+0x40>)
 80023a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_Init+0x40>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f000 f92b 	bl	8002610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ba:	200f      	movs	r0, #15
 80023bc:	f000 f808 	bl	80023d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c0:	f7ff fc40 	bl	8001c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00

080023d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_InitTick+0x54>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_InitTick+0x58>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f943 	bl	800267a <HAL_SYSTICK_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00e      	b.n	800241c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d80a      	bhi.n	800241a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f000 f90b 	bl	8002626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_InitTick+0x5c>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2000006c 	.word	0x2000006c
 8002428:	20000074 	.word	0x20000074
 800242c:	20000070 	.word	0x20000070

08002430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000074 	.word	0x20000074
 8002454:	20000508 	.word	0x20000508

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000508 	.word	0x20000508

08002470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800248c:	4013      	ands	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a2:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	60d3      	str	r3, [r2, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <__NVIC_GetPriorityGrouping+0x18>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 0307 	and.w	r3, r3, #7
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db0b      	blt.n	80024fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4907      	ldr	r1, [pc, #28]	; (800250c <__NVIC_EnableIRQ+0x38>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2001      	movs	r0, #1
 80024f6:	fa00 f202 	lsl.w	r2, r0, r2
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e100 	.word	0xe000e100

08002510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	db0a      	blt.n	800253a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	490c      	ldr	r1, [pc, #48]	; (800255c <__NVIC_SetPriority+0x4c>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	440b      	add	r3, r1
 8002534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002538:	e00a      	b.n	8002550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4908      	ldr	r1, [pc, #32]	; (8002560 <__NVIC_SetPriority+0x50>)
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	3b04      	subs	r3, #4
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	440b      	add	r3, r1
 800254e:	761a      	strb	r2, [r3, #24]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000e100 	.word	0xe000e100
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f1c3 0307 	rsb	r3, r3, #7
 800257e:	2b04      	cmp	r3, #4
 8002580:	bf28      	it	cs
 8002582:	2304      	movcs	r3, #4
 8002584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3304      	adds	r3, #4
 800258a:	2b06      	cmp	r3, #6
 800258c:	d902      	bls.n	8002594 <NVIC_EncodePriority+0x30>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3b03      	subs	r3, #3
 8002592:	e000      	b.n	8002596 <NVIC_EncodePriority+0x32>
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	401a      	ands	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	43d9      	mvns	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	4313      	orrs	r3, r2
         );
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025dc:	d301      	bcc.n	80025e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025de:	2301      	movs	r3, #1
 80025e0:	e00f      	b.n	8002602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <SysTick_Config+0x40>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ea:	210f      	movs	r1, #15
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f7ff ff8e 	bl	8002510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <SysTick_Config+0x40>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <SysTick_Config+0x40>)
 80025fc:	2207      	movs	r2, #7
 80025fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	e000e010 	.word	0xe000e010

08002610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ff29 	bl	8002470 <__NVIC_SetPriorityGrouping>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002638:	f7ff ff3e 	bl	80024b8 <__NVIC_GetPriorityGrouping>
 800263c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	6978      	ldr	r0, [r7, #20]
 8002644:	f7ff ff8e 	bl	8002564 <NVIC_EncodePriority>
 8002648:	4602      	mov	r2, r0
 800264a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff5d 	bl	8002510 <__NVIC_SetPriority>
}
 8002656:	bf00      	nop
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff31 	bl	80024d4 <__NVIC_EnableIRQ>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ffa2 	bl	80025cc <SysTick_Config>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff feda 	bl	8002458 <HAL_GetTick>
 80026a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d008      	beq.n	80026c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e052      	b.n	800276a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0216 	bic.w	r2, r2, #22
 80026d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d103      	bne.n	80026f4 <HAL_DMA_Abort+0x62>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0208 	bic.w	r2, r2, #8
 8002702:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	e013      	b.n	800273e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002716:	f7ff fe9f 	bl	8002458 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b05      	cmp	r3, #5
 8002722:	d90c      	bls.n	800273e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e015      	b.n	800276a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e4      	bne.n	8002716 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	223f      	movs	r2, #63	; 0x3f
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d004      	beq.n	8002790 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e00c      	b.n	80027aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2205      	movs	r2, #5
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e16b      	b.n	8002aac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f040 815a 	bne.w	8002aa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d005      	beq.n	800280a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002806:	2b02      	cmp	r3, #2
 8002808:	d130      	bne.n	800286c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 0201 	and.w	r2, r3, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b03      	cmp	r3, #3
 8002876:	d017      	beq.n	80028a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d123      	bne.n	80028fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80b4 	beq.w	8002aa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b60      	ldr	r3, [pc, #384]	; (8002ac4 <HAL_GPIO_Init+0x30c>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a5f      	ldr	r2, [pc, #380]	; (8002ac4 <HAL_GPIO_Init+0x30c>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <HAL_GPIO_Init+0x30c>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295a:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <HAL_GPIO_Init+0x310>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a52      	ldr	r2, [pc, #328]	; (8002acc <HAL_GPIO_Init+0x314>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02b      	beq.n	80029de <HAL_GPIO_Init+0x226>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a51      	ldr	r2, [pc, #324]	; (8002ad0 <HAL_GPIO_Init+0x318>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d025      	beq.n	80029da <HAL_GPIO_Init+0x222>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a50      	ldr	r2, [pc, #320]	; (8002ad4 <HAL_GPIO_Init+0x31c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_Init+0x21e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4f      	ldr	r2, [pc, #316]	; (8002ad8 <HAL_GPIO_Init+0x320>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_Init+0x21a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4e      	ldr	r2, [pc, #312]	; (8002adc <HAL_GPIO_Init+0x324>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_Init+0x216>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4d      	ldr	r2, [pc, #308]	; (8002ae0 <HAL_GPIO_Init+0x328>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_Init+0x212>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4c      	ldr	r2, [pc, #304]	; (8002ae4 <HAL_GPIO_Init+0x32c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_Init+0x20e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4b      	ldr	r2, [pc, #300]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_Init+0x20a>
 80029be:	2307      	movs	r3, #7
 80029c0:	e00e      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029c2:	2308      	movs	r3, #8
 80029c4:	e00c      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00a      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029ca:	2305      	movs	r3, #5
 80029cc:	e008      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029ce:	2304      	movs	r3, #4
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029d2:	2303      	movs	r3, #3
 80029d4:	e004      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_Init+0x228>
 80029de:	2300      	movs	r3, #0
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	f002 0203 	and.w	r2, r2, #3
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	4093      	lsls	r3, r2
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f0:	4935      	ldr	r1, [pc, #212]	; (8002ac8 <HAL_GPIO_Init+0x310>)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	3302      	adds	r3, #2
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a22:	4a32      	ldr	r2, [pc, #200]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa0:	4a12      	ldr	r2, [pc, #72]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b0f      	cmp	r3, #15
 8002ab0:	f67f ae90 	bls.w	80027d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020800 	.word	0x40020800
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021400 	.word	0x40021400
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40021c00 	.word	0x40021c00
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	887b      	ldrh	r3, [r7, #2]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e001      	b.n	8002b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b3c:	e003      	b.n	8002b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	041a      	lsls	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	619a      	str	r2, [r3, #24]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b64:	887a      	ldrh	r2, [r7, #2]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	041a      	lsls	r2, r3, #16
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	400b      	ands	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e267      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d075      	beq.n	8002c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba6:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb2:	4b85      	ldr	r3, [pc, #532]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d112      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b82      	ldr	r3, [pc, #520]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d05b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x108>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d157      	bne.n	8002c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e242      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d106      	bne.n	8002bfc <HAL_RCC_OscConfig+0x74>
 8002bee:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a75      	ldr	r2, [pc, #468]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e01d      	b.n	8002c38 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x98>
 8002c06:	4b70      	ldr	r3, [pc, #448]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6f      	ldr	r2, [pc, #444]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6c      	ldr	r2, [pc, #432]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0xb0>
 8002c20:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a68      	ldr	r2, [pc, #416]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a65      	ldr	r2, [pc, #404]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7ff fc0a 	bl	8002458 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff fc06 	bl	8002458 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e207      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b5b      	ldr	r3, [pc, #364]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0xc0>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff fbf6 	bl	8002458 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff fbf2 	bl	8002458 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1f3      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0xe8>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d063      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d116      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x152>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1c7      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4937      	ldr	r1, [pc, #220]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	e03a      	b.n	8002d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_RCC_OscConfig+0x244>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7ff fbab 	bl	8002458 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d06:	f7ff fba7 	bl	8002458 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1a8      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4925      	ldr	r1, [pc, #148]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCC_OscConfig+0x244>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff fb8a 	bl	8002458 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d48:	f7ff fb86 	bl	8002458 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e187      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d036      	beq.n	8002de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_RCC_OscConfig+0x248>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7ff fb6a 	bl	8002458 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d88:	f7ff fb66 	bl	8002458 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e167      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x200>
 8002da6:	e01b      	b.n	8002de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_OscConfig+0x248>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7ff fb53 	bl	8002458 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	e00e      	b.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db6:	f7ff fb4f 	bl	8002458 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d907      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e150      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	42470000 	.word	0x42470000
 8002dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ea      	bne.n	8002db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8097 	beq.w	8002f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b81      	ldr	r3, [pc, #516]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	4b7d      	ldr	r3, [pc, #500]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a7c      	ldr	r2, [pc, #496]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b7a      	ldr	r3, [pc, #488]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b77      	ldr	r3, [pc, #476]	; (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2a:	4b74      	ldr	r3, [pc, #464]	; (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	; (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7ff fb0f 	bl	8002458 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7ff fb0b 	bl	8002458 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e10c      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2ea>
 8002e64:	4b64      	ldr	r3, [pc, #400]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e01c      	b.n	8002eac <HAL_RCC_OscConfig+0x324>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x30c>
 8002e7a:	4b5f      	ldr	r3, [pc, #380]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a5e      	ldr	r2, [pc, #376]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b5c      	ldr	r3, [pc, #368]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a5b      	ldr	r2, [pc, #364]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0x324>
 8002e94:	4b58      	ldr	r3, [pc, #352]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a57      	ldr	r2, [pc, #348]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	4b55      	ldr	r3, [pc, #340]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a54      	ldr	r2, [pc, #336]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7ff fad0 	bl	8002458 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7ff facc 	bl	8002458 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0cb      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	4b49      	ldr	r3, [pc, #292]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ee      	beq.n	8002ebc <HAL_RCC_OscConfig+0x334>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7ff faba 	bl	8002458 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7ff fab6 	bl	8002458 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0b5      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efe:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ee      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	4a38      	ldr	r2, [pc, #224]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a1 	beq.w	8003068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f26:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d05c      	beq.n	8002fec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d141      	bne.n	8002fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_RCC_OscConfig+0x478>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7ff fa8a 	bl	8002458 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f48:	f7ff fa86 	bl	8002458 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e087      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	491b      	ldr	r1, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <HAL_RCC_OscConfig+0x478>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7ff fa5f 	bl	8002458 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7ff fa5b 	bl	8002458 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e05c      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x416>
 8002fbc:	e054      	b.n	8003068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_RCC_OscConfig+0x478>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7ff fa48 	bl	8002458 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7ff fa44 	bl	8002458 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e045      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x444>
 8002fea:	e03d      	b.n	8003068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e038      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40007000 	.word	0x40007000
 8003000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x4ec>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d028      	beq.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d121      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d11a      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800303a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d111      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0cc      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d90c      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b65      	ldr	r3, [pc, #404]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b8      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	494d      	ldr	r1, [pc, #308]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d044      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d119      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	2b03      	cmp	r3, #3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e067      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b37      	ldr	r3, [pc, #220]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4934      	ldr	r1, [pc, #208]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7ff f976 	bl	8002458 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7ff f972 	bl	8002458 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d20c      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e032      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4916      	ldr	r1, [pc, #88]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fe:	f000 f821 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003202:	4602      	mov	r2, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	490a      	ldr	r1, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	5ccb      	ldrb	r3, [r1, r3]
 8003212:	fa22 f303 	lsr.w	r3, r2, r3
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f8d6 	bl	80023d0 <HAL_InitTick>

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00
 8003234:	40023800 	.word	0x40023800
 8003238:	08005614 	.word	0x08005614
 800323c:	2000006c 	.word	0x2000006c
 8003240:	20000070 	.word	0x20000070

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003248:	b090      	sub	sp, #64	; 0x40
 800324a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
 8003250:	2300      	movs	r3, #0
 8003252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003254:	2300      	movs	r3, #0
 8003256:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325c:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d00d      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x40>
 8003268:	2b08      	cmp	r3, #8
 800326a:	f200 80a1 	bhi.w	80033b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x34>
 8003272:	2b04      	cmp	r3, #4
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x3a>
 8003276:	e09b      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800327a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800327c:	e09b      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327e:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003282:	e098      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003284:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800328e:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d028      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	2200      	movs	r2, #0
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	627a      	str	r2, [r7, #36]	; 0x24
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032ac:	2100      	movs	r1, #0
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_GetSysClockFreq+0x188>)
 80032b0:	fb03 f201 	mul.w	r2, r3, r1
 80032b4:	2300      	movs	r3, #0
 80032b6:	fb00 f303 	mul.w	r3, r0, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	4a43      	ldr	r2, [pc, #268]	; (80033cc <HAL_RCC_GetSysClockFreq+0x188>)
 80032be:	fba0 1202 	umull	r1, r2, r0, r2
 80032c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c4:	460a      	mov	r2, r1
 80032c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80032c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ca:	4413      	add	r3, r2
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d0:	2200      	movs	r2, #0
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	61fa      	str	r2, [r7, #28]
 80032d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032de:	f7fc ff73 	bl	80001c8 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4613      	mov	r3, r2
 80032e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ea:	e053      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ec:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	2200      	movs	r2, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	617a      	str	r2, [r7, #20]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032fe:	f04f 0b00 	mov.w	fp, #0
 8003302:	4652      	mov	r2, sl
 8003304:	465b      	mov	r3, fp
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	0159      	lsls	r1, r3, #5
 8003310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003314:	0150      	lsls	r0, r2, #5
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	ebb2 080a 	subs.w	r8, r2, sl
 800331e:	eb63 090b 	sbc.w	r9, r3, fp
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800332e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003332:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003336:	ebb2 0408 	subs.w	r4, r2, r8
 800333a:	eb63 0509 	sbc.w	r5, r3, r9
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	00eb      	lsls	r3, r5, #3
 8003348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334c:	00e2      	lsls	r2, r4, #3
 800334e:	4614      	mov	r4, r2
 8003350:	461d      	mov	r5, r3
 8003352:	eb14 030a 	adds.w	r3, r4, sl
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	eb45 030b 	adc.w	r3, r5, fp
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800336a:	4629      	mov	r1, r5
 800336c:	028b      	lsls	r3, r1, #10
 800336e:	4621      	mov	r1, r4
 8003370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003374:	4621      	mov	r1, r4
 8003376:	028a      	lsls	r2, r1, #10
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337e:	2200      	movs	r2, #0
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	60fa      	str	r2, [r7, #12]
 8003384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003388:	f7fc ff1e 	bl	80001c8 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	3301      	adds	r3, #1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033ae:	e002      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3740      	adds	r7, #64	; 0x40
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	017d7840 	.word	0x017d7840

080033d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000006c 	.word	0x2000006c

080033e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	08005624 	.word	0x08005624

08003410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003414:	f7ff ffdc 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0b5b      	lsrs	r3, r3, #13
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4903      	ldr	r1, [pc, #12]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	08005624 	.word	0x08005624

08003438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e041      	b.n	80034ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe fc18 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 fc7a 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d001      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e04e      	b.n	800358e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a23      	ldr	r2, [pc, #140]	; (800359c <HAL_TIM_Base_Start_IT+0xc4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d022      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x80>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351a:	d01d      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x80>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d018      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x80>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x80>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00e      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x80>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_TIM_Base_Start_IT+0xd4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d009      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x80>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x80>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d111      	bne.n	800357c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b06      	cmp	r3, #6
 8003568:	d010      	beq.n	800358c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357a:	e007      	b.n	800358c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40010000 	.word	0x40010000
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40000800 	.word	0x40000800
 80035a8:	40000c00 	.word	0x40000c00
 80035ac:	40010400 	.word	0x40010400
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40001800 	.word	0x40001800

080035b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e041      	b.n	800364e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f839 	bl	8003656 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 fbba 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_TIM_PWM_Start+0x24>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e022      	b.n	80036d6 <HAL_TIM_PWM_Start+0x6a>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b04      	cmp	r3, #4
 8003694:	d109      	bne.n	80036aa <HAL_TIM_PWM_Start+0x3e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e015      	b.n	80036d6 <HAL_TIM_PWM_Start+0x6a>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d109      	bne.n	80036c4 <HAL_TIM_PWM_Start+0x58>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	bf14      	ite	ne
 80036bc:	2301      	movne	r3, #1
 80036be:	2300      	moveq	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e008      	b.n	80036d6 <HAL_TIM_PWM_Start+0x6a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07c      	b.n	80037d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0x82>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ec:	e013      	b.n	8003716 <HAL_TIM_PWM_Start+0xaa>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0x92>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036fc:	e00b      	b.n	8003716 <HAL_TIM_PWM_Start+0xaa>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d104      	bne.n	800370e <HAL_TIM_PWM_Start+0xa2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800370c:	e003      	b.n	8003716 <HAL_TIM_PWM_Start+0xaa>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fe10 	bl	8004344 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_TIM_PWM_Start+0x174>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_TIM_PWM_Start+0xcc>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_TIM_PWM_Start+0x178>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_TIM_PWM_Start+0xd0>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_TIM_PWM_Start+0xd2>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <HAL_TIM_PWM_Start+0x174>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d022      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x136>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d01d      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x136>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_TIM_PWM_Start+0x17c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d018      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x136>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <HAL_TIM_PWM_Start+0x180>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x136>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <HAL_TIM_PWM_Start+0x184>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x136>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <HAL_TIM_PWM_Start+0x178>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x136>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <HAL_TIM_PWM_Start+0x188>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x136>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <HAL_TIM_PWM_Start+0x18c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d111      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b06      	cmp	r3, #6
 80037b2:	d010      	beq.n	80037d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	e007      	b.n	80037d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010400 	.word	0x40010400
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40001800 	.word	0x40001800

080037fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0202 	mvn.w	r2, #2
 8003828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa77 	bl	8003d32 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa69 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fa7a 	bl	8003d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b04      	cmp	r3, #4
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0204 	mvn.w	r2, #4
 800387c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa4d 	bl	8003d32 <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa3f 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fa50 	bl	8003d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0208 	mvn.w	r2, #8
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa23 	bl	8003d32 <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fa15 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fa26 	bl	8003d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b10      	cmp	r3, #16
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b10      	cmp	r3, #16
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0210 	mvn.w	r2, #16
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2208      	movs	r2, #8
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f9f9 	bl	8003d32 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f9eb 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f9fc 	bl	8003d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10e      	bne.n	8003980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0201 	mvn.w	r2, #1
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fcd0 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	d10e      	bne.n	80039ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b80      	cmp	r3, #128	; 0x80
 800399a:	d107      	bne.n	80039ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fd78 	bl	800449c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d10e      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d107      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9c1 	bl	8003d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0220 	mvn.w	r2, #32
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fd42 	bl	8004488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0ae      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	f200 809f 	bhi.w	8003b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003b79 	.word	0x08003b79
 8003a48:	08003b79 	.word	0x08003b79
 8003a4c:	08003b79 	.word	0x08003b79
 8003a50:	08003ab5 	.word	0x08003ab5
 8003a54:	08003b79 	.word	0x08003b79
 8003a58:	08003b79 	.word	0x08003b79
 8003a5c:	08003b79 	.word	0x08003b79
 8003a60:	08003af7 	.word	0x08003af7
 8003a64:	08003b79 	.word	0x08003b79
 8003a68:	08003b79 	.word	0x08003b79
 8003a6c:	08003b79 	.word	0x08003b79
 8003a70:	08003b37 	.word	0x08003b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fa18 	bl	8003eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0208 	orr.w	r2, r2, #8
 8003a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0204 	bic.w	r2, r2, #4
 8003a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	619a      	str	r2, [r3, #24]
      break;
 8003ab2:	e064      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fa68 	bl	8003f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	021a      	lsls	r2, r3, #8
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]
      break;
 8003af4:	e043      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fabd 	bl	800407c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0208 	orr.w	r2, r2, #8
 8003b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0204 	bic.w	r2, r2, #4
 8003b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
      break;
 8003b34:	e023      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fb11 	bl	8004164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	61da      	str	r2, [r3, #28]
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_ConfigClockSource+0x1c>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0b4      	b.n	8003d16 <HAL_TIM_ConfigClockSource+0x186>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be4:	d03e      	beq.n	8003c64 <HAL_TIM_ConfigClockSource+0xd4>
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bea:	f200 8087 	bhi.w	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	f000 8086 	beq.w	8003d02 <HAL_TIM_ConfigClockSource+0x172>
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfa:	d87f      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b70      	cmp	r3, #112	; 0x70
 8003bfe:	d01a      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xa6>
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d87b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b60      	cmp	r3, #96	; 0x60
 8003c06:	d050      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x11a>
 8003c08:	2b60      	cmp	r3, #96	; 0x60
 8003c0a:	d877      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b50      	cmp	r3, #80	; 0x50
 8003c0e:	d03c      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xfa>
 8003c10:	2b50      	cmp	r3, #80	; 0x50
 8003c12:	d873      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d058      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x13a>
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d86f      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b30      	cmp	r3, #48	; 0x30
 8003c1e:	d064      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c20:	2b30      	cmp	r3, #48	; 0x30
 8003c22:	d86b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d060      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d867      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05c      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d05a      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x15a>
 8003c34:	e062      	b.n	8003cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6899      	ldr	r1, [r3, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f000 fb5d 	bl	8004304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	609a      	str	r2, [r3, #8]
      break;
 8003c62:	e04f      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f000 fb46 	bl	8004304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c86:	609a      	str	r2, [r3, #8]
      break;
 8003c88:	e03c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 faba 	bl	8004210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2150      	movs	r1, #80	; 0x50
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fb13 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e02c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f000 fad9 	bl	800426e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2160      	movs	r1, #96	; 0x60
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fb03 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e01c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f000 fa9a 	bl	8004210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2140      	movs	r1, #64	; 0x40
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 faf3 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e00c      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f000 faea 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8003cfa:	e003      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003d00:	e000      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a40      	ldr	r2, [pc, #256]	; (8003e84 <TIM_Base_SetConfig+0x114>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d00f      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3d      	ldr	r2, [pc, #244]	; (8003e88 <TIM_Base_SetConfig+0x118>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3c      	ldr	r2, [pc, #240]	; (8003e8c <TIM_Base_SetConfig+0x11c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <TIM_Base_SetConfig+0x120>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3a      	ldr	r2, [pc, #232]	; (8003e94 <TIM_Base_SetConfig+0x124>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d108      	bne.n	8003dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2f      	ldr	r2, [pc, #188]	; (8003e84 <TIM_Base_SetConfig+0x114>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d02b      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d027      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <TIM_Base_SetConfig+0x118>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d023      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <TIM_Base_SetConfig+0x11c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01f      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <TIM_Base_SetConfig+0x120>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01b      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <TIM_Base_SetConfig+0x124>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d017      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a28      	ldr	r2, [pc, #160]	; (8003e98 <TIM_Base_SetConfig+0x128>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a27      	ldr	r2, [pc, #156]	; (8003e9c <TIM_Base_SetConfig+0x12c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00f      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <TIM_Base_SetConfig+0x130>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <TIM_Base_SetConfig+0x134>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <TIM_Base_SetConfig+0x138>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a23      	ldr	r2, [pc, #140]	; (8003eac <TIM_Base_SetConfig+0x13c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d108      	bne.n	8003e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	; (8003e84 <TIM_Base_SetConfig+0x114>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0xf8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <TIM_Base_SetConfig+0x124>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d103      	bne.n	8003e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	615a      	str	r2, [r3, #20]
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800
 8003ea4:	40001800 	.word	0x40001800
 8003ea8:	40001c00 	.word	0x40001c00
 8003eac:	40002000 	.word	0x40002000

08003eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f023 0302 	bic.w	r3, r3, #2
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <TIM_OC1_SetConfig+0xd8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_OC1_SetConfig+0x64>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <TIM_OC1_SetConfig+0xdc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d10c      	bne.n	8003f2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0308 	bic.w	r3, r3, #8
 8003f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f023 0304 	bic.w	r3, r3, #4
 8003f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <TIM_OC1_SetConfig+0xd8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d003      	beq.n	8003f3e <TIM_OC1_SetConfig+0x8e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <TIM_OC1_SetConfig+0xdc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d111      	bne.n	8003f62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40010400 	.word	0x40010400

08003f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f023 0210 	bic.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 0320 	bic.w	r3, r3, #32
 8003fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a22      	ldr	r2, [pc, #136]	; (8004074 <TIM_OC2_SetConfig+0xe4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_OC2_SetConfig+0x68>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	; (8004078 <TIM_OC2_SetConfig+0xe8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10d      	bne.n	8004014 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a17      	ldr	r2, [pc, #92]	; (8004074 <TIM_OC2_SetConfig+0xe4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC2_SetConfig+0x94>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a16      	ldr	r2, [pc, #88]	; (8004078 <TIM_OC2_SetConfig+0xe8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d113      	bne.n	800404c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800402a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40010000 	.word	0x40010000
 8004078:	40010400 	.word	0x40010400

0800407c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a21      	ldr	r2, [pc, #132]	; (800415c <TIM_OC3_SetConfig+0xe0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_OC3_SetConfig+0x66>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a20      	ldr	r2, [pc, #128]	; (8004160 <TIM_OC3_SetConfig+0xe4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10d      	bne.n	80040fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a16      	ldr	r2, [pc, #88]	; (800415c <TIM_OC3_SetConfig+0xe0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC3_SetConfig+0x92>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a15      	ldr	r2, [pc, #84]	; (8004160 <TIM_OC3_SetConfig+0xe4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d113      	bne.n	8004136 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40010000 	.word	0x40010000
 8004160:	40010400 	.word	0x40010400

08004164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	031b      	lsls	r3, r3, #12
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a12      	ldr	r2, [pc, #72]	; (8004208 <TIM_OC4_SetConfig+0xa4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC4_SetConfig+0x68>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a11      	ldr	r2, [pc, #68]	; (800420c <TIM_OC4_SetConfig+0xa8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d109      	bne.n	80041e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	019b      	lsls	r3, r3, #6
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400

08004210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800423a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 030a 	bic.w	r3, r3, #10
 800424c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800426e:	b480      	push	{r7}
 8004270:	b087      	sub	sp, #28
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0210 	bic.w	r2, r3, #16
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004298:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	031b      	lsls	r3, r3, #12
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f043 0307 	orr.w	r3, r3, #7
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800431e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	021a      	lsls	r2, r3, #8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	431a      	orrs	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	609a      	str	r2, [r3, #8]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2201      	movs	r2, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1a      	ldr	r2, [r3, #32]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1a      	ldr	r2, [r3, #32]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e05a      	b.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a21      	ldr	r2, [pc, #132]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d022      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d01d      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d018      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1b      	ldr	r2, [pc, #108]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a17      	ldr	r2, [pc, #92]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a15      	ldr	r2, [pc, #84]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10c      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40010000 	.word	0x40010000
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	40000c00 	.word	0x40000c00
 800447c:	40010400 	.word	0x40010400
 8004480:	40014000 	.word	0x40014000
 8004484:	40001800 	.word	0x40001800

08004488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e03f      	b.n	8004542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd fc5a 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fd7b 	bl	8004ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b08a      	sub	sp, #40	; 0x28
 800454e:	af02      	add	r7, sp, #8
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	d17c      	bne.n	8004664 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_UART_Transmit+0x2c>
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e075      	b.n	8004666 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_UART_Transmit+0x3e>
 8004584:	2302      	movs	r3, #2
 8004586:	e06e      	b.n	8004666 <HAL_UART_Transmit+0x11c>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2221      	movs	r2, #33	; 0x21
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800459e:	f7fd ff5b 	bl	8002458 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b8:	d108      	bne.n	80045cc <HAL_UART_Transmit+0x82>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	e003      	b.n	80045d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045dc:	e02a      	b.n	8004634 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2200      	movs	r2, #0
 80045e6:	2180      	movs	r1, #128	; 0x80
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 faf9 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e036      	b.n	8004666 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3302      	adds	r3, #2
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	e007      	b.n	8004626 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3301      	adds	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1cf      	bne.n	80045de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2140      	movs	r1, #64	; 0x40
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fac9 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e006      	b.n	8004666 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b0ba      	sub	sp, #232	; 0xe8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_UART_IRQHandler+0x66>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fbd3 	bl	8004e7a <UART_Receive_IT>
      return;
 80046d4:	e256      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80de 	beq.w	800489c <HAL_UART_IRQHandler+0x22c>
 80046e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80d1 	beq.w	800489c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_UART_IRQHandler+0xae>
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <HAL_UART_IRQHandler+0xd2>
 800472a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f043 0202 	orr.w	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_UART_IRQHandler+0xf6>
 800474e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f043 0204 	orr.w	r2, r3, #4
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d011      	beq.n	8004796 <HAL_UART_IRQHandler+0x126>
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800477e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0208 	orr.w	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 81ed 	beq.w	8004b7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_UART_IRQHandler+0x14e>
 80047ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fb5e 	bl	8004e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <HAL_UART_IRQHandler+0x17a>
 80047e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04f      	beq.n	800488a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa66 	bl	8004cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d141      	bne.n	8004882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3314      	adds	r3, #20
 8004826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800482a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800482e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d9      	bne.n	80047fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	2b00      	cmp	r3, #0
 8004850:	d013      	beq.n	800487a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	4a7d      	ldr	r2, [pc, #500]	; (8004a4c <HAL_UART_IRQHandler+0x3dc>)
 8004858:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd ff87 	bl	8002772 <HAL_DMA_Abort_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004874:	4610      	mov	r0, r2
 8004876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00e      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f99a 	bl	8004bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e00a      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f996 	bl	8004bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e006      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f992 	bl	8004bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004896:	e170      	b.n	8004b7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	bf00      	nop
    return;
 800489a:	e16e      	b.n	8004b7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f040 814a 	bne.w	8004b3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8143 	beq.w	8004b3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 813c 	beq.w	8004b3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	f040 80b4 	bne.w	8004a50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8140 	beq.w	8004b7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004906:	429a      	cmp	r2, r3
 8004908:	f080 8139 	bcs.w	8004b7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004912:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491e:	f000 8088 	beq.w	8004a32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800493c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800494e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800495a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1d9      	bne.n	8004922 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800497e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3314      	adds	r3, #20
 800498e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004992:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004996:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800499a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e1      	bne.n	800496e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3314      	adds	r3, #20
 80049b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e3      	bne.n	80049aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a02:	f023 0310 	bic.w	r3, r3, #16
 8004a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a14:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e3      	bne.n	80049f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fd fe30 	bl	8002692 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8c0 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a48:	e099      	b.n	8004b7e <HAL_UART_IRQHandler+0x50e>
 8004a4a:	bf00      	nop
 8004a4c:	08004d83 	.word	0x08004d83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 808b 	beq.w	8004b82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8086 	beq.w	8004b82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a9a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3314      	adds	r3, #20
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	623b      	str	r3, [r7, #32]
   return(result);
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3314      	adds	r3, #20
 8004ace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ad2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e3      	bne.n	8004aae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0310 	bic.w	r3, r3, #16
 8004b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b18:	61fa      	str	r2, [r7, #28]
 8004b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	617b      	str	r3, [r7, #20]
   return(result);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e3      	bne.n	8004af4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f848 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b38:	e023      	b.n	8004b82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_UART_IRQHandler+0x4ea>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f929 	bl	8004daa <UART_Transmit_IT>
    return;
 8004b58:	e014      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00e      	beq.n	8004b84 <HAL_UART_IRQHandler+0x514>
 8004b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f969 	bl	8004e4a <UART_EndTransmit_IT>
    return;
 8004b78:	e004      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
    return;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
      return;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
      return;
 8004b82:	bf00      	nop
  }
}
 8004b84:	37e8      	adds	r7, #232	; 0xe8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop

08004b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b090      	sub	sp, #64	; 0x40
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf0:	e050      	b.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d04c      	beq.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c00:	f7fd fc2a 	bl	8002458 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d241      	bcs.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c30:	637a      	str	r2, [r7, #52]	; 0x34
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e5      	bne.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	613b      	str	r3, [r7, #16]
   return(result);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3314      	adds	r3, #20
 8004c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c64:	623a      	str	r2, [r7, #32]
 8004c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	69f9      	ldr	r1, [r7, #28]
 8004c6a:	6a3a      	ldr	r2, [r7, #32]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e5      	bne.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e00f      	b.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d09f      	beq.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3740      	adds	r7, #64	; 0x40
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b095      	sub	sp, #84	; 0x54
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ce4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e5      	bne.n	8004cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d119      	bne.n	8004d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d54:	61ba      	str	r2, [r7, #24]
 8004d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6979      	ldr	r1, [r7, #20]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	613b      	str	r3, [r7, #16]
   return(result);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d76:	bf00      	nop
 8004d78:	3754      	adds	r7, #84	; 0x54
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7ff ff09 	bl	8004bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b21      	cmp	r3, #33	; 0x21
 8004dbc:	d13e      	bne.n	8004e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	d114      	bne.n	8004df2 <UART_Transmit_IT+0x48>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d110      	bne.n	8004df2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	621a      	str	r2, [r3, #32]
 8004df0:	e008      	b.n	8004e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6211      	str	r1, [r2, #32]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe8e 	bl	8004b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08c      	sub	sp, #48	; 0x30
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b22      	cmp	r3, #34	; 0x22
 8004e8c:	f040 80ab 	bne.w	8004fe6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d117      	bne.n	8004eca <UART_Receive_IT+0x50>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d113      	bne.n	8004eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec8:	e026      	b.n	8004f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	d007      	beq.n	8004eee <UART_Receive_IT+0x74>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <UART_Receive_IT+0x82>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e008      	b.n	8004f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4619      	mov	r1, r3
 8004f26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d15a      	bne.n	8004fe2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0220 	bic.w	r2, r2, #32
 8004f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d135      	bne.n	8004fd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	613b      	str	r3, [r7, #16]
   return(result);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f92:	623a      	str	r2, [r7, #32]
 8004f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	69f9      	ldr	r1, [r7, #28]
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d10a      	bne.n	8004fca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fdf9 	bl	8004bc8 <HAL_UARTEx_RxEventCallback>
 8004fd6:	e002      	b.n	8004fde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fde1 	bl	8004ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e002      	b.n	8004fe8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3730      	adds	r7, #48	; 0x30
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b0c0      	sub	sp, #256	; 0x100
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	431a      	orrs	r2, r3
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005048:	f021 010c 	bic.w	r1, r1, #12
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	6999      	ldr	r1, [r3, #24]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	ea40 0301 	orr.w	r3, r0, r1
 8005076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8f      	ldr	r3, [pc, #572]	; (80052bc <UART_SetConfig+0x2cc>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0xa0>
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b8d      	ldr	r3, [pc, #564]	; (80052c0 <UART_SetConfig+0x2d0>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d104      	bne.n	800509a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fe f9be 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 8005094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005098:	e003      	b.n	80050a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509a:	f7fe f9a5 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 800509e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	f040 810c 	bne.w	80052c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ca:	415b      	adcs	r3, r3
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050d2:	4621      	mov	r1, r4
 80050d4:	eb12 0801 	adds.w	r8, r2, r1
 80050d8:	4629      	mov	r1, r5
 80050da:	eb43 0901 	adc.w	r9, r3, r1
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f2:	4690      	mov	r8, r2
 80050f4:	4699      	mov	r9, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	eb18 0303 	adds.w	r3, r8, r3
 80050fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005100:	462b      	mov	r3, r5
 8005102:	eb49 0303 	adc.w	r3, r9, r3
 8005106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800511a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800511e:	460b      	mov	r3, r1
 8005120:	18db      	adds	r3, r3, r3
 8005122:	653b      	str	r3, [r7, #80]	; 0x50
 8005124:	4613      	mov	r3, r2
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	657b      	str	r3, [r7, #84]	; 0x54
 800512c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005134:	f7fb f848 	bl	80001c8 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <UART_SetConfig+0x2d4>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	011c      	lsls	r4, r3, #4
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005160:	415b      	adcs	r3, r3
 8005162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005168:	4641      	mov	r1, r8
 800516a:	eb12 0a01 	adds.w	sl, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb43 0b01 	adc.w	fp, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005188:	4692      	mov	sl, r2
 800518a:	469b      	mov	fp, r3
 800518c:	4643      	mov	r3, r8
 800518e:	eb1a 0303 	adds.w	r3, sl, r3
 8005192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005196:	464b      	mov	r3, r9
 8005198:	eb4b 0303 	adc.w	r3, fp, r3
 800519c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
 80051c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051ca:	f7fa fffd 	bl	80001c8 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <UART_SetConfig+0x2d4>)
 80051d6:	fba3 2301 	umull	r2, r3, r3, r1
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	2264      	movs	r2, #100	; 0x64
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	1acb      	subs	r3, r1, r3
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <UART_SetConfig+0x2d4>)
 80051ec:	fba3 2302 	umull	r2, r3, r3, r2
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f8:	441c      	add	r4, r3
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	1891      	adds	r1, r2, r2
 8005212:	63b9      	str	r1, [r7, #56]	; 0x38
 8005214:	415b      	adcs	r3, r3
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800521c:	4641      	mov	r1, r8
 800521e:	1851      	adds	r1, r2, r1
 8005220:	6339      	str	r1, [r7, #48]	; 0x30
 8005222:	4649      	mov	r1, r9
 8005224:	414b      	adcs	r3, r1
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005234:	4659      	mov	r1, fp
 8005236:	00cb      	lsls	r3, r1, #3
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523e:	4651      	mov	r1, sl
 8005240:	00ca      	lsls	r2, r1, #3
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4603      	mov	r3, r0
 8005248:	4642      	mov	r2, r8
 800524a:	189b      	adds	r3, r3, r2
 800524c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800526c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005270:	460b      	mov	r3, r1
 8005272:	18db      	adds	r3, r3, r3
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	4613      	mov	r3, r2
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005286:	f7fa ff9f 	bl	80001c8 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <UART_SetConfig+0x2d4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	; 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	3332      	adds	r3, #50	; 0x32
 80052a2:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <UART_SetConfig+0x2d4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 0207 	and.w	r2, r3, #7
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4422      	add	r2, r4
 80052b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b8:	e105      	b.n	80054c6 <UART_SetConfig+0x4d6>
 80052ba:	bf00      	nop
 80052bc:	40011000 	.word	0x40011000
 80052c0:	40011400 	.word	0x40011400
 80052c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	6239      	str	r1, [r7, #32]
 80052e2:	415b      	adcs	r3, r3
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ea:	4641      	mov	r1, r8
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	4649      	mov	r1, r9
 80052f0:	eb43 0501 	adc.w	r5, r3, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	00eb      	lsls	r3, r5, #3
 80052fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005302:	00e2      	lsls	r2, r4, #3
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	4643      	mov	r3, r8
 800530a:	18e3      	adds	r3, r4, r3
 800530c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005310:	464b      	mov	r3, r9
 8005312:	eb45 0303 	adc.w	r3, r5, r3
 8005316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005336:	4629      	mov	r1, r5
 8005338:	008b      	lsls	r3, r1, #2
 800533a:	4621      	mov	r1, r4
 800533c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005340:	4621      	mov	r1, r4
 8005342:	008a      	lsls	r2, r1, #2
 8005344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005348:	f7fa ff3e 	bl	80001c8 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4b60      	ldr	r3, [pc, #384]	; (80054d4 <UART_SetConfig+0x4e4>)
 8005352:	fba3 2302 	umull	r2, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	011c      	lsls	r4, r3, #4
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	61b9      	str	r1, [r7, #24]
 8005374:	415b      	adcs	r3, r3
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6139      	str	r1, [r7, #16]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053b0:	464b      	mov	r3, r9
 80053b2:	460a      	mov	r2, r1
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053d4:	4649      	mov	r1, r9
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	4641      	mov	r1, r8
 80053da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053de:	4641      	mov	r1, r8
 80053e0:	008a      	lsls	r2, r1, #2
 80053e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053e6:	f7fa feef 	bl	80001c8 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <UART_SetConfig+0x4e4>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <UART_SetConfig+0x4e4>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540e:	441c      	add	r4, r3
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005414:	2200      	movs	r2, #0
 8005416:	673b      	str	r3, [r7, #112]	; 0x70
 8005418:	677a      	str	r2, [r7, #116]	; 0x74
 800541a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	1891      	adds	r1, r2, r2
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	415b      	adcs	r3, r3
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542e:	4641      	mov	r1, r8
 8005430:	1851      	adds	r1, r2, r1
 8005432:	6039      	str	r1, [r7, #0]
 8005434:	4649      	mov	r1, r9
 8005436:	414b      	adcs	r3, r1
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005446:	4659      	mov	r1, fp
 8005448:	00cb      	lsls	r3, r1, #3
 800544a:	4651      	mov	r1, sl
 800544c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005450:	4651      	mov	r1, sl
 8005452:	00ca      	lsls	r2, r1, #3
 8005454:	4610      	mov	r0, r2
 8005456:	4619      	mov	r1, r3
 8005458:	4603      	mov	r3, r0
 800545a:	4642      	mov	r2, r8
 800545c:	189b      	adds	r3, r3, r2
 800545e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005460:	464b      	mov	r3, r9
 8005462:	460a      	mov	r2, r1
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	663b      	str	r3, [r7, #96]	; 0x60
 8005474:	667a      	str	r2, [r7, #100]	; 0x64
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005482:	4649      	mov	r1, r9
 8005484:	008b      	lsls	r3, r1, #2
 8005486:	4641      	mov	r1, r8
 8005488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548c:	4641      	mov	r1, r8
 800548e:	008a      	lsls	r2, r1, #2
 8005490:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005494:	f7fa fe98 	bl	80001c8 <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <UART_SetConfig+0x4e4>)
 800549e:	fba3 1302 	umull	r1, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2164      	movs	r1, #100	; 0x64
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <UART_SetConfig+0x4e4>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4422      	add	r2, r4
 80054c4:	609a      	str	r2, [r3, #8]
}
 80054c6:	bf00      	nop
 80054c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054cc:	46bd      	mov	sp, r7
 80054ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d2:	bf00      	nop
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <__libc_init_array>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	4d0d      	ldr	r5, [pc, #52]	; (8005510 <__libc_init_array+0x38>)
 80054dc:	4c0d      	ldr	r4, [pc, #52]	; (8005514 <__libc_init_array+0x3c>)
 80054de:	1b64      	subs	r4, r4, r5
 80054e0:	10a4      	asrs	r4, r4, #2
 80054e2:	2600      	movs	r6, #0
 80054e4:	42a6      	cmp	r6, r4
 80054e6:	d109      	bne.n	80054fc <__libc_init_array+0x24>
 80054e8:	4d0b      	ldr	r5, [pc, #44]	; (8005518 <__libc_init_array+0x40>)
 80054ea:	4c0c      	ldr	r4, [pc, #48]	; (800551c <__libc_init_array+0x44>)
 80054ec:	f000 f87c 	bl	80055e8 <_init>
 80054f0:	1b64      	subs	r4, r4, r5
 80054f2:	10a4      	asrs	r4, r4, #2
 80054f4:	2600      	movs	r6, #0
 80054f6:	42a6      	cmp	r6, r4
 80054f8:	d105      	bne.n	8005506 <__libc_init_array+0x2e>
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005500:	4798      	blx	r3
 8005502:	3601      	adds	r6, #1
 8005504:	e7ee      	b.n	80054e4 <__libc_init_array+0xc>
 8005506:	f855 3b04 	ldr.w	r3, [r5], #4
 800550a:	4798      	blx	r3
 800550c:	3601      	adds	r6, #1
 800550e:	e7f2      	b.n	80054f6 <__libc_init_array+0x1e>
 8005510:	0800565c 	.word	0x0800565c
 8005514:	0800565c 	.word	0x0800565c
 8005518:	0800565c 	.word	0x0800565c
 800551c:	08005660 	.word	0x08005660

08005520 <__itoa>:
 8005520:	1e93      	subs	r3, r2, #2
 8005522:	2b22      	cmp	r3, #34	; 0x22
 8005524:	b510      	push	{r4, lr}
 8005526:	460c      	mov	r4, r1
 8005528:	d904      	bls.n	8005534 <__itoa+0x14>
 800552a:	2300      	movs	r3, #0
 800552c:	700b      	strb	r3, [r1, #0]
 800552e:	461c      	mov	r4, r3
 8005530:	4620      	mov	r0, r4
 8005532:	bd10      	pop	{r4, pc}
 8005534:	2a0a      	cmp	r2, #10
 8005536:	d109      	bne.n	800554c <__itoa+0x2c>
 8005538:	2800      	cmp	r0, #0
 800553a:	da07      	bge.n	800554c <__itoa+0x2c>
 800553c:	232d      	movs	r3, #45	; 0x2d
 800553e:	700b      	strb	r3, [r1, #0]
 8005540:	4240      	negs	r0, r0
 8005542:	2101      	movs	r1, #1
 8005544:	4421      	add	r1, r4
 8005546:	f000 f80d 	bl	8005564 <__utoa>
 800554a:	e7f1      	b.n	8005530 <__itoa+0x10>
 800554c:	2100      	movs	r1, #0
 800554e:	e7f9      	b.n	8005544 <__itoa+0x24>

08005550 <itoa>:
 8005550:	f7ff bfe6 	b.w	8005520 <__itoa>

08005554 <memset>:
 8005554:	4402      	add	r2, r0
 8005556:	4603      	mov	r3, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <__utoa>:
 8005564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005566:	4c1f      	ldr	r4, [pc, #124]	; (80055e4 <__utoa+0x80>)
 8005568:	b08b      	sub	sp, #44	; 0x2c
 800556a:	4605      	mov	r5, r0
 800556c:	460b      	mov	r3, r1
 800556e:	466e      	mov	r6, sp
 8005570:	f104 0c20 	add.w	ip, r4, #32
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	6861      	ldr	r1, [r4, #4]
 8005578:	4637      	mov	r7, r6
 800557a:	c703      	stmia	r7!, {r0, r1}
 800557c:	3408      	adds	r4, #8
 800557e:	4564      	cmp	r4, ip
 8005580:	463e      	mov	r6, r7
 8005582:	d1f7      	bne.n	8005574 <__utoa+0x10>
 8005584:	7921      	ldrb	r1, [r4, #4]
 8005586:	7139      	strb	r1, [r7, #4]
 8005588:	1e91      	subs	r1, r2, #2
 800558a:	6820      	ldr	r0, [r4, #0]
 800558c:	6038      	str	r0, [r7, #0]
 800558e:	2922      	cmp	r1, #34	; 0x22
 8005590:	f04f 0100 	mov.w	r1, #0
 8005594:	d904      	bls.n	80055a0 <__utoa+0x3c>
 8005596:	7019      	strb	r1, [r3, #0]
 8005598:	460b      	mov	r3, r1
 800559a:	4618      	mov	r0, r3
 800559c:	b00b      	add	sp, #44	; 0x2c
 800559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a0:	1e58      	subs	r0, r3, #1
 80055a2:	4684      	mov	ip, r0
 80055a4:	fbb5 f7f2 	udiv	r7, r5, r2
 80055a8:	fb02 5617 	mls	r6, r2, r7, r5
 80055ac:	3628      	adds	r6, #40	; 0x28
 80055ae:	446e      	add	r6, sp
 80055b0:	460c      	mov	r4, r1
 80055b2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80055b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80055ba:	462e      	mov	r6, r5
 80055bc:	42b2      	cmp	r2, r6
 80055be:	f101 0101 	add.w	r1, r1, #1
 80055c2:	463d      	mov	r5, r7
 80055c4:	d9ee      	bls.n	80055a4 <__utoa+0x40>
 80055c6:	2200      	movs	r2, #0
 80055c8:	545a      	strb	r2, [r3, r1]
 80055ca:	1919      	adds	r1, r3, r4
 80055cc:	1aa5      	subs	r5, r4, r2
 80055ce:	42aa      	cmp	r2, r5
 80055d0:	dae3      	bge.n	800559a <__utoa+0x36>
 80055d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80055d6:	780e      	ldrb	r6, [r1, #0]
 80055d8:	7006      	strb	r6, [r0, #0]
 80055da:	3201      	adds	r2, #1
 80055dc:	f801 5901 	strb.w	r5, [r1], #-1
 80055e0:	e7f4      	b.n	80055cc <__utoa+0x68>
 80055e2:	bf00      	nop
 80055e4:	0800562c 	.word	0x0800562c

080055e8 <_init>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr

080055f4 <_fini>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr
