
STM32VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005908  08005908  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005910  08005910  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000494  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1f9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000258b  00000000  00000000  0002f2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00031830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d98  00000000  00000000  00032728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d93  00000000  00000000  000334c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013933  00000000  00000000  00055253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cab87  00000000  00000000  00068b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013370d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b50  00000000  00000000  00133760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800589c 	.word	0x0800589c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	0800589c 	.word	0x0800589c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SCH_Update>:
uint8_t nTask = 0;
sTask SCH_tasks_G[SCH_MAX_TASKS];

// Ham giam dan thoi gian delay va set RunMe len de execute
void SCH_Update()
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  if (SCH_tasks_G[0].pTask)
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <SCH_Update+0x38>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d00f      	beq.n	80004f8 <SCH_Update+0x2c>
  {
    if (SCH_tasks_G[0].Delay == 0)
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <SCH_Update+0x38>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d106      	bne.n	80004ee <SCH_Update+0x22>
    {
      SCH_tasks_G[0].RunMe += 1;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <SCH_Update+0x38>)
 80004e2:	7b1b      	ldrb	r3, [r3, #12]
 80004e4:	3301      	adds	r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <SCH_Update+0x38>)
 80004ea:	731a      	strb	r2, [r3, #12]
    else
    {
      SCH_tasks_G[0].Delay--;
    }
  }
}
 80004ec:	e004      	b.n	80004f8 <SCH_Update+0x2c>
      SCH_tasks_G[0].Delay--;
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <SCH_Update+0x38>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <SCH_Update+0x38>)
 80004f6:	6053      	str	r3, [r2, #4]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000094 	.word	0x20000094

08000508 <SCH_Add_Task>:

// Ham them task vao mang
void SCH_Add_Task(void(*pFunction), const uint32_t Delay, const uint32_t Period, uint8_t taskID)
{
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	70fb      	strb	r3, [r7, #3]
  int index = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  int total_delay = Delay / 10;
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a80      	ldr	r2, [pc, #512]	; (8000720 <SCH_Add_Task+0x218>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	08db      	lsrs	r3, r3, #3
 8000524:	61bb      	str	r3, [r7, #24]

  for (int i = 0; i < SCH_MAX_TASKS; i++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e02b      	b.n	8000584 <SCH_Add_Task+0x7c>
  {
    if (SCH_tasks_G[i].pTask)
 800052c:	497d      	ldr	r1, [pc, #500]	; (8000724 <SCH_Add_Task+0x21c>)
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	440b      	add	r3, r1
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01b      	beq.n	8000578 <SCH_Add_Task+0x70>
    {
      if (SCH_tasks_G[i].Delay <= total_delay)
 8000540:	4978      	ldr	r1, [pc, #480]	; (8000724 <SCH_Add_Task+0x21c>)
 8000542:	697a      	ldr	r2, [r7, #20]
 8000544:	4613      	mov	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	440b      	add	r3, r1
 800054e:	3304      	adds	r3, #4
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	429a      	cmp	r2, r3
 8000556:	d80c      	bhi.n	8000572 <SCH_Add_Task+0x6a>
      {
        total_delay = total_delay - SCH_tasks_G[i].Delay;
 8000558:	69b9      	ldr	r1, [r7, #24]
 800055a:	4872      	ldr	r0, [pc, #456]	; (8000724 <SCH_Add_Task+0x21c>)
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	4613      	mov	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4413      	add	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4403      	add	r3, r0
 8000568:	3304      	adds	r3, #4
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	1acb      	subs	r3, r1, r3
 800056e:	61bb      	str	r3, [r7, #24]
 8000570:	e005      	b.n	800057e <SCH_Add_Task+0x76>
      }
      else
      {
        index = i;
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	61fb      	str	r3, [r7, #28]
        break;
 8000576:	e008      	b.n	800058a <SCH_Add_Task+0x82>
      }
    }
    else
    {
      index = i;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	61fb      	str	r3, [r7, #28]
      break;
 800057c:	e005      	b.n	800058a <SCH_Add_Task+0x82>
  for (int i = 0; i < SCH_MAX_TASKS; i++)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3301      	adds	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	2b27      	cmp	r3, #39	; 0x27
 8000588:	ddd0      	ble.n	800052c <SCH_Add_Task+0x24>
    }
  }
  for (int i = SCH_MAX_TASKS; i > index; i--)
 800058a:	2328      	movs	r3, #40	; 0x28
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	e06b      	b.n	8000668 <SCH_Add_Task+0x160>
  {
    if (SCH_tasks_G[i - 1].pTask)
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	1e5a      	subs	r2, r3, #1
 8000594:	4963      	ldr	r1, [pc, #396]	; (8000724 <SCH_Add_Task+0x21c>)
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	440b      	add	r3, r1
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d05d      	beq.n	8000662 <SCH_Add_Task+0x15a>
    {
      SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	1e5a      	subs	r2, r3, #1
 80005aa:	495e      	ldr	r1, [pc, #376]	; (8000724 <SCH_Add_Task+0x21c>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	440b      	add	r3, r1
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	485a      	ldr	r0, [pc, #360]	; (8000724 <SCH_Add_Task+0x21c>)
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4403      	add	r3, r0
 80005c6:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	4955      	ldr	r1, [pc, #340]	; (8000724 <SCH_Add_Task+0x21c>)
 80005ce:	4613      	mov	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	440b      	add	r3, r1
 80005d8:	3304      	adds	r3, #4
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	4851      	ldr	r0, [pc, #324]	; (8000724 <SCH_Add_Task+0x21c>)
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4403      	add	r3, r0
 80005ea:	3304      	adds	r3, #4
 80005ec:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	1e5a      	subs	r2, r3, #1
 80005f2:	494c      	ldr	r1, [pc, #304]	; (8000724 <SCH_Add_Task+0x21c>)
 80005f4:	4613      	mov	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4413      	add	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	3308      	adds	r3, #8
 8000600:	6819      	ldr	r1, [r3, #0]
 8000602:	4848      	ldr	r0, [pc, #288]	; (8000724 <SCH_Add_Task+0x21c>)
 8000604:	693a      	ldr	r2, [r7, #16]
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4403      	add	r3, r0
 8000610:	3308      	adds	r3, #8
 8000612:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	4942      	ldr	r1, [pc, #264]	; (8000724 <SCH_Add_Task+0x21c>)
 800061a:	4613      	mov	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	330c      	adds	r3, #12
 8000626:	7818      	ldrb	r0, [r3, #0]
 8000628:	493e      	ldr	r1, [pc, #248]	; (8000724 <SCH_Add_Task+0x21c>)
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	4613      	mov	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	330c      	adds	r3, #12
 8000638:	4602      	mov	r2, r0
 800063a:	701a      	strb	r2, [r3, #0]
      SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	4938      	ldr	r1, [pc, #224]	; (8000724 <SCH_Add_Task+0x21c>)
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	440b      	add	r3, r1
 800064c:	3310      	adds	r3, #16
 800064e:	6819      	ldr	r1, [r3, #0]
 8000650:	4834      	ldr	r0, [pc, #208]	; (8000724 <SCH_Add_Task+0x21c>)
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	4613      	mov	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4403      	add	r3, r0
 800065e:	3310      	adds	r3, #16
 8000660:	6019      	str	r1, [r3, #0]
  for (int i = SCH_MAX_TASKS; i > index; i--)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	3b01      	subs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	429a      	cmp	r2, r3
 800066e:	dc8f      	bgt.n	8000590 <SCH_Add_Task+0x88>
    }
  }
  SCH_tasks_G[index].pTask = pFunction;
 8000670:	68f9      	ldr	r1, [r7, #12]
 8000672:	482c      	ldr	r0, [pc, #176]	; (8000724 <SCH_Add_Task+0x21c>)
 8000674:	69fa      	ldr	r2, [r7, #28]
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4403      	add	r3, r0
 8000680:	6019      	str	r1, [r3, #0]
  SCH_tasks_G[index].Delay = total_delay;
 8000682:	69b9      	ldr	r1, [r7, #24]
 8000684:	4827      	ldr	r0, [pc, #156]	; (8000724 <SCH_Add_Task+0x21c>)
 8000686:	69fa      	ldr	r2, [r7, #28]
 8000688:	4613      	mov	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4403      	add	r3, r0
 8000692:	3304      	adds	r3, #4
 8000694:	6019      	str	r1, [r3, #0]
  SCH_tasks_G[index].Period = Period;
 8000696:	4923      	ldr	r1, [pc, #140]	; (8000724 <SCH_Add_Task+0x21c>)
 8000698:	69fa      	ldr	r2, [r7, #28]
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	440b      	add	r3, r1
 80006a4:	3308      	adds	r3, #8
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].RunMe = 0;
 80006aa:	491e      	ldr	r1, [pc, #120]	; (8000724 <SCH_Add_Task+0x21c>)
 80006ac:	69fa      	ldr	r2, [r7, #28]
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	440b      	add	r3, r1
 80006b8:	330c      	adds	r3, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
  SCH_tasks_G[index].TaskID = taskID;
 80006be:	78f9      	ldrb	r1, [r7, #3]
 80006c0:	4818      	ldr	r0, [pc, #96]	; (8000724 <SCH_Add_Task+0x21c>)
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	4613      	mov	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4403      	add	r3, r0
 80006ce:	3310      	adds	r3, #16
 80006d0:	6019      	str	r1, [r3, #0]
  if (SCH_tasks_G[index + 1].pTask)
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	4913      	ldr	r1, [pc, #76]	; (8000724 <SCH_Add_Task+0x21c>)
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d015      	beq.n	8000714 <SCH_Add_Task+0x20c>
  {
    SCH_tasks_G[index + 1].Delay = SCH_tasks_G[index + 1].Delay - total_delay;
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	490d      	ldr	r1, [pc, #52]	; (8000724 <SCH_Add_Task+0x21c>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	3304      	adds	r3, #4
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	69fa      	ldr	r2, [r7, #28]
 8000700:	3201      	adds	r2, #1
 8000702:	1ac9      	subs	r1, r1, r3
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <SCH_Add_Task+0x21c>)
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4403      	add	r3, r0
 8000710:	3304      	adds	r3, #4
 8000712:	6019      	str	r1, [r3, #0]
  }
}
 8000714:	bf00      	nop
 8000716:	3724      	adds	r7, #36	; 0x24
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	cccccccd 	.word	0xcccccccd
 8000724:	20000094 	.word	0x20000094

08000728 <SCH_Delete>:

void SCH_Delete(uint8_t index)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  SCH_tasks_G[index].Delay = 0;
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	491a      	ldr	r1, [pc, #104]	; (80007a0 <SCH_Delete+0x78>)
 8000736:	4613      	mov	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	440b      	add	r3, r1
 8000740:	3304      	adds	r3, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].Period = 0;
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	4915      	ldr	r1, [pc, #84]	; (80007a0 <SCH_Delete+0x78>)
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	440b      	add	r3, r1
 8000754:	3308      	adds	r3, #8
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].RunMe = 0;
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	4910      	ldr	r1, [pc, #64]	; (80007a0 <SCH_Delete+0x78>)
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	440b      	add	r3, r1
 8000768:	330c      	adds	r3, #12
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
  SCH_tasks_G[index].pTask = 0x0000;
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	490b      	ldr	r1, [pc, #44]	; (80007a0 <SCH_Delete+0x78>)
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].TaskID = 0;
 8000780:	79fa      	ldrb	r2, [r7, #7]
 8000782:	4907      	ldr	r1, [pc, #28]	; (80007a0 <SCH_Delete+0x78>)
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	3310      	adds	r3, #16
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000094 	.word	0x20000094

080007a4 <SCH_Delete_ID>:

void SCH_Delete_ID(uint8_t ID)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < SCH_MAX_TASKS; i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e014      	b.n	80007de <SCH_Delete_ID+0x3a>
  {
	  if( SCH_tasks_G[i].TaskID == ID){
 80007b4:	490d      	ldr	r1, [pc, #52]	; (80007ec <SCH_Delete_ID+0x48>)
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	440b      	add	r3, r1
 80007c2:	3310      	adds	r3, #16
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <SCH_Delete_ID+0x34>
		  SCH_Delete(i);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ffa9 	bl	8000728 <SCH_Delete>
		  return;
 80007d6:	e005      	b.n	80007e4 <SCH_Delete_ID+0x40>
  for(int i = 0; i < SCH_MAX_TASKS; i++)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3301      	adds	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b27      	cmp	r3, #39	; 0x27
 80007e2:	dde7      	ble.n	80007b4 <SCH_Delete_ID+0x10>
	  }
  }
}
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000094 	.word	0x20000094

080007f0 <SCH_Delete_Task>:

// Xoa task dau tien
void SCH_Delete_Task(uint8_t index)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  int final = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  SCH_Delete(index);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff91 	bl	8000728 <SCH_Delete>
  for (int i = index; i < SCH_MAX_TASKS; i++)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	e06d      	b.n	80008e8 <SCH_Delete_Task+0xf8>
  {
    SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	493b      	ldr	r1, [pc, #236]	; (8000900 <SCH_Delete_Task+0x110>)
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	440b      	add	r3, r1
 800081c:	6819      	ldr	r1, [r3, #0]
 800081e:	4838      	ldr	r0, [pc, #224]	; (8000900 <SCH_Delete_Task+0x110>)
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4403      	add	r3, r0
 800082c:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	4933      	ldr	r1, [pc, #204]	; (8000900 <SCH_Delete_Task+0x110>)
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	440b      	add	r3, r1
 800083e:	3304      	adds	r3, #4
 8000840:	6819      	ldr	r1, [r3, #0]
 8000842:	482f      	ldr	r0, [pc, #188]	; (8000900 <SCH_Delete_Task+0x110>)
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4403      	add	r3, r0
 8000850:	3304      	adds	r3, #4
 8000852:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	4929      	ldr	r1, [pc, #164]	; (8000900 <SCH_Delete_Task+0x110>)
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	3308      	adds	r3, #8
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	4825      	ldr	r0, [pc, #148]	; (8000900 <SCH_Delete_Task+0x110>)
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4403      	add	r3, r0
 8000876:	3308      	adds	r3, #8
 8000878:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	4920      	ldr	r1, [pc, #128]	; (8000900 <SCH_Delete_Task+0x110>)
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	440b      	add	r3, r1
 800088a:	330c      	adds	r3, #12
 800088c:	7818      	ldrb	r0, [r3, #0]
 800088e:	491c      	ldr	r1, [pc, #112]	; (8000900 <SCH_Delete_Task+0x110>)
 8000890:	68ba      	ldr	r2, [r7, #8]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	330c      	adds	r3, #12
 800089e:	4602      	mov	r2, r0
 80008a0:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[i].TaskID = SCH_tasks_G[i + 1].TaskID;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	4916      	ldr	r1, [pc, #88]	; (8000900 <SCH_Delete_Task+0x110>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	440b      	add	r3, r1
 80008b2:	3310      	adds	r3, #16
 80008b4:	6819      	ldr	r1, [r3, #0]
 80008b6:	4812      	ldr	r0, [pc, #72]	; (8000900 <SCH_Delete_Task+0x110>)
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	4613      	mov	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4403      	add	r3, r0
 80008c4:	3310      	adds	r3, #16
 80008c6:	6019      	str	r1, [r3, #0]
    if (SCH_tasks_G[i].pTask == 0x0000)
 80008c8:	490d      	ldr	r1, [pc, #52]	; (8000900 <SCH_Delete_Task+0x110>)
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <SCH_Delete_Task+0xf2>
    {
      final = i;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60fb      	str	r3, [r7, #12]
      break;
 80008e0:	e005      	b.n	80008ee <SCH_Delete_Task+0xfe>
  for (int i = index; i < SCH_MAX_TASKS; i++)
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	2b27      	cmp	r3, #39	; 0x27
 80008ec:	dd8e      	ble.n	800080c <SCH_Delete_Task+0x1c>
    }
  }
  SCH_Delete(final);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff18 	bl	8000728 <SCH_Delete>
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000094 	.word	0x20000094

08000904 <SCH_Dispatch_Tasks>:

// Ham check xem task0 da can execute chua
void SCH_Dispatch_Tasks(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  if (SCH_tasks_G[0].pTask)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d01e      	beq.n	800094e <SCH_Dispatch_Tasks+0x4a>
  {
    if (SCH_tasks_G[0].RunMe > 0)
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 8000912:	7b1b      	ldrb	r3, [r3, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d01a      	beq.n	800094e <SCH_Dispatch_Tasks+0x4a>
    {
      (*SCH_tasks_G[0].pTask)();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4798      	blx	r3
      SCH_tasks_G[0].RunMe--;
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 8000920:	7b1b      	ldrb	r3, [r3, #12]
 8000922:	3b01      	subs	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 8000928:	731a      	strb	r2, [r3, #12]

      if (SCH_tasks_G[0].Period)
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00a      	beq.n	8000948 <SCH_Dispatch_Tasks+0x44>
      {
        SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].Period,
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 8000938:	6899      	ldr	r1, [r3, #8]
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 800093c:	689a      	ldr	r2, [r3, #8]
        		SCH_tasks_G[0].Period, SCH_tasks_G[0].TaskID);
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <SCH_Dispatch_Tasks+0x50>)
 8000940:	691b      	ldr	r3, [r3, #16]
        SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].Period,
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f7ff fde0 	bl	8000508 <SCH_Add_Task>
      }
      SCH_Delete_Task(0);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff ff51 	bl	80007f0 <SCH_Delete_Task>
    }
  }
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000094 	.word	0x20000094

08000958 <SCH_Init>:
// Ham xoa tat ca cac task trong array, khien array nhu vua duoc khoi tao
void SCH_Init(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  uint8_t i;
  for (i = 0; i < SCH_MAX_TASKS; i++)
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e033      	b.n	80009cc <SCH_Init+0x74>
  {
    SCH_tasks_G[i].Delay = 0;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	491e      	ldr	r1, [pc, #120]	; (80009e0 <SCH_Init+0x88>)
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	440b      	add	r3, r1
 8000972:	3304      	adds	r3, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].Period = 0;
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	4919      	ldr	r1, [pc, #100]	; (80009e0 <SCH_Init+0x88>)
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	3308      	adds	r3, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].RunMe = 0;
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	4914      	ldr	r1, [pc, #80]	; (80009e0 <SCH_Init+0x88>)
 8000990:	4613      	mov	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	440b      	add	r3, r1
 800099a:	330c      	adds	r3, #12
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[i].pTask = 0x0000;
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	490f      	ldr	r1, [pc, #60]	; (80009e0 <SCH_Init+0x88>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	440b      	add	r3, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].TaskID = 0;
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	490a      	ldr	r1, [pc, #40]	; (80009e0 <SCH_Init+0x88>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	440b      	add	r3, r1
 80009c0:	3310      	adds	r3, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < SCH_MAX_TASKS; i++)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	3301      	adds	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b27      	cmp	r3, #39	; 0x27
 80009d0:	d9c8      	bls.n	8000964 <SCH_Init+0xc>
  }
}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000094 	.word	0x20000094

080009e4 <task1>:

void task1()
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  if (modeStatus == 6)
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <task1+0x18>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b06      	cmp	r3, #6
 80009ee:	d103      	bne.n	80009f8 <task1+0x14>
  {
    runNormalMode();
 80009f0:	f000 fef8 	bl	80017e4 <runNormalMode>
    ledWalkOperationNormalMode();
 80009f4:	f000 fb86 	bl	8001104 <ledWalkOperationNormalMode>
  }
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000006c 	.word	0x2000006c

08000a00 <task2>:
void task2()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  if (modeStatus == 8)
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <task2+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b08      	cmp	r3, #8
 8000a0a:	d101      	bne.n	8000a10 <task2+0x10>
  {
    animationTuningMode();
 8000a0c:	f001 fcf4 	bl	80023f8 <animationTuningMode>
  }
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000006c 	.word	0x2000006c

08000a18 <task3>:
void task3()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	switch (getInputButton())
 8000a1c:	f000 f9be 	bl	8000d9c <getInputButton>
 8000a20:	4603      	mov	r3, r0
 8000a22:	3b02      	subs	r3, #2
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	f200 8088 	bhi.w	8000b3a <task3+0x122>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <task3+0x18>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a55 	.word	0x08000a55
 8000a34:	08000a61 	.word	0x08000a61
 8000a38:	08000a6d 	.word	0x08000a6d
 8000a3c:	08000a79 	.word	0x08000a79
 8000a40:	08000aa3 	.word	0x08000aa3
 8000a44:	08000acf 	.word	0x08000acf
 8000a48:	08000aeb 	.word	0x08000aeb
 8000a4c:	08000b07 	.word	0x08000b07
 8000a50:	08000b2b 	.word	0x08000b2b
	{
		case BUTTON1SinglePress:
			modeStatus= NORMALMODE;
 8000a54:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <task3+0x128>)
 8000a56:	2206      	movs	r2, #6
 8000a58:	601a      	str	r2, [r3, #0]
			beginNormalMode();
 8000a5a:	f001 f86b 	bl	8001b34 <beginNormalMode>
			break;
 8000a5e:	e06d      	b.n	8000b3c <task3+0x124>
		case BUTTON1DoublePress:
			modeStatus= MANUALMODE;
 8000a60:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <task3+0x128>)
 8000a62:	2207      	movs	r2, #7
 8000a64:	601a      	str	r2, [r3, #0]
			beginManualMode();
 8000a66:	f000 fe87 	bl	8001778 <beginManualMode>
			break;
 8000a6a:	e067      	b.n	8000b3c <task3+0x124>
		case BUTTON1TriplePress:
			modeStatus= TUNINGMODE;
 8000a6c:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <task3+0x128>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	601a      	str	r2, [r3, #0]
			beginTuningMode();
 8000a72:	f001 fbff 	bl	8002274 <beginTuningMode>
			break;
 8000a76:	e061      	b.n	8000b3c <task3+0x124>
		case BUTTON1LongPress:
			switch (modeStatus)
 8000a78:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <task3+0x128>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b08      	cmp	r3, #8
 8000a7e:	d008      	beq.n	8000a92 <task3+0x7a>
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	dc0c      	bgt.n	8000a9e <task3+0x86>
 8000a84:	2b05      	cmp	r3, #5
 8000a86:	d007      	beq.n	8000a98 <task3+0x80>
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	d108      	bne.n	8000a9e <task3+0x86>
			{
				case MANUALMODE:
					runManualModeFunction();
 8000a8c:	f000 fdc8 	bl	8001620 <runManualModeFunction>
					break;
 8000a90:	e006      	b.n	8000aa0 <task3+0x88>
				case TUNINGMODE:
					runTuningMode();
 8000a92:	f001 fb81 	bl	8002198 <runTuningMode>
					break;
 8000a96:	e003      	b.n	8000aa0 <task3+0x88>
				case INITMODES:
					offAllSingLEDs();
 8000a98:	f000 fad6 	bl	8001048 <offAllSingLEDs>
					break;
 8000a9c:	e000      	b.n	8000aa0 <task3+0x88>
				default:
					break;
 8000a9e:	bf00      	nop
			}
			break;
 8000aa0:	e04c      	b.n	8000b3c <task3+0x124>
		case BUTTON2SinglePress:
			switch (modeStatus)
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <task3+0x128>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d00c      	beq.n	8000ac4 <task3+0xac>
 8000aaa:	2b08      	cmp	r3, #8
 8000aac:	dc0d      	bgt.n	8000aca <task3+0xb2>
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d002      	beq.n	8000ab8 <task3+0xa0>
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d003      	beq.n	8000abe <task3+0xa6>
					break;
				case TUNINGMODE:
					modifyTuningMode();
					break;
				default:
					break;
 8000ab6:	e008      	b.n	8000aca <task3+0xb2>
					beginNormalMode();
 8000ab8:	f001 f83c 	bl	8001b34 <beginNormalMode>
					break;
 8000abc:	e006      	b.n	8000acc <task3+0xb4>
					runManualModeFunction();
 8000abe:	f000 fdaf 	bl	8001620 <runManualModeFunction>
					break;
 8000ac2:	e003      	b.n	8000acc <task3+0xb4>
					modifyTuningMode();
 8000ac4:	f001 fbe8 	bl	8002298 <modifyTuningMode>
					break;
 8000ac8:	e000      	b.n	8000acc <task3+0xb4>
					break;
 8000aca:	bf00      	nop
			}
			break;
 8000acc:	e036      	b.n	8000b3c <task3+0x124>
		case BUTTON2DoublePress:
			switch (modeStatus)
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <task3+0x128>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b05      	cmp	r3, #5
 8000ad4:	d004      	beq.n	8000ae0 <task3+0xc8>
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d105      	bne.n	8000ae6 <task3+0xce>
			{
				case TUNINGMODE:
					saveTuningMode();
 8000ada:	f001 fc3b 	bl	8002354 <saveTuningMode>
					break;
 8000ade:	e003      	b.n	8000ae8 <task3+0xd0>
				case INITMODES:
					offAllSingLEDs();
 8000ae0:	f000 fab2 	bl	8001048 <offAllSingLEDs>
					break;
 8000ae4:	e000      	b.n	8000ae8 <task3+0xd0>
				default:
					break;
 8000ae6:	bf00      	nop
			}
			break;
 8000ae8:	e028      	b.n	8000b3c <task3+0x124>
		case BUTTON2LongPress:
			switch (modeStatus)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <task3+0x128>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b05      	cmp	r3, #5
 8000af0:	d004      	beq.n	8000afc <task3+0xe4>
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	d105      	bne.n	8000b02 <task3+0xea>
			{
				case TUNINGMODE:
					modifyTuningMode();
 8000af6:	f001 fbcf 	bl	8002298 <modifyTuningMode>
					break;
 8000afa:	e003      	b.n	8000b04 <task3+0xec>
				case INITMODES:
					offAllSingLEDs();
 8000afc:	f000 faa4 	bl	8001048 <offAllSingLEDs>
					break;
 8000b00:	e000      	b.n	8000b04 <task3+0xec>
				default:
					break;
 8000b02:	bf00      	nop
			}
			break;
 8000b04:	e01a      	b.n	8000b3c <task3+0x124>
		case BUTTON3SinglePress:
			switch (modeStatus)
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <task3+0x128>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d002      	beq.n	8000b14 <task3+0xfc>
 8000b0e:	2b07      	cmp	r3, #7
 8000b10:	d005      	beq.n	8000b1e <task3+0x106>
				case MANUALMODE:
					beginWalkManualMode();
					ledWalkOperationManualMode();
					break;
				default:
					break;
 8000b12:	e009      	b.n	8000b28 <task3+0x110>
					beginWalkNormalMode();
 8000b14:	f001 f830 	bl	8001b78 <beginWalkNormalMode>
					ledWalkOperationNormalMode();
 8000b18:	f000 faf4 	bl	8001104 <ledWalkOperationNormalMode>
					break;
 8000b1c:	e004      	b.n	8000b28 <task3+0x110>
					beginWalkManualMode();
 8000b1e:	f000 fe3b 	bl	8001798 <beginWalkManualMode>
					ledWalkOperationManualMode();
 8000b22:	f000 fb21 	bl	8001168 <ledWalkOperationManualMode>
					break;
 8000b26:	bf00      	nop

			}
			break;
 8000b28:	e008      	b.n	8000b3c <task3+0x124>
		case BUTTON3DoublePress:
  modeStatus= INITMODES;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <task3+0x128>)
 8000b2c:	2205      	movs	r2, #5
 8000b2e:	601a      	str	r2, [r3, #0]
			offAllSingLEDs();
 8000b30:	f000 fa8a 	bl	8001048 <offAllSingLEDs>
			offSingleRedGreenWalk();
 8000b34:	f000 fad0 	bl	80010d8 <offSingleRedGreenWalk>
			break;
 8000b38:	e000      	b.n	8000b3c <task3+0x124>
		default:
			break;
 8000b3a:	bf00      	nop
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000006c 	.word	0x2000006c

08000b44 <resetAllButton>:
int timerNormalState[3]= {0, 0, 0};
int eventButtonPressed[3]= {0, 0, 0};
int eventButtonDrop[3]= {0, 0, 0};

void resetAllButton()
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
	for (int i=0 ; i < 3; i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	e011      	b.n	8000b74 <resetAllButton+0x30>
	{
		eventButtonDrop[i]= 0;
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <resetAllButton+0x44>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2100      	movs	r1, #0
 8000b56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		eventButtonPressed[i]= 0;
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <resetAllButton+0x48>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timerNormalState[i]= 0;
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <resetAllButton+0x4c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0 ; i < 3; i++)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3301      	adds	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	ddea      	ble.n	8000b50 <resetAllButton+0xc>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	200003cc 	.word	0x200003cc
 8000b8c:	200003c0 	.word	0x200003c0
 8000b90:	200003b4 	.word	0x200003b4

08000b94 <checkEventButton>:

int checkEventButton(int indexButton)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	switch (indexButton)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	f000 80ab 	beq.w	8000cfa <checkEventButton+0x166>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	f300 80ec 	bgt.w	8000d84 <checkEventButton+0x1f0>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <checkEventButton+0x26>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d05b      	beq.n	8000c70 <checkEventButton+0xdc>
 8000bb8:	e0e4      	b.n	8000d84 <checkEventButton+0x1f0>
	{
		case 0:
			switch (eventButtonPressed[indexButton])
 8000bba:	4a76      	ldr	r2, [pc, #472]	; (8000d94 <checkEventButton+0x200>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d852      	bhi.n	8000c6c <checkEventButton+0xd8>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <checkEventButton+0x38>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000c01 	.word	0x08000c01
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c49 	.word	0x08000c49
			{
			case 0:
				switch (eventButtonDrop[indexButton])
 8000bdc:	4a6e      	ldr	r2, [pc, #440]	; (8000d98 <checkEventButton+0x204>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <checkEventButton+0x5a>
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d004      	beq.n	8000bf6 <checkEventButton+0x62>
				case 1:
					resetAllButton();
					return NOBUTTON;
					break;
				default:
					break;
 8000bec:	e007      	b.n	8000bfe <checkEventButton+0x6a>
					resetAllButton();
 8000bee:	f7ff ffa9 	bl	8000b44 <resetAllButton>
					return BUTTON1LongPress;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	e0ca      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000bf6:	f7ff ffa5 	bl	8000b44 <resetAllButton>
					return NOBUTTON;
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	e0c6      	b.n	8000d8c <checkEventButton+0x1f8>
				}
				break;
 8000bfe:	e036      	b.n	8000c6e <checkEventButton+0xda>
			case 1:
				switch (eventButtonDrop[indexButton])
 8000c00:	4a65      	ldr	r2, [pc, #404]	; (8000d98 <checkEventButton+0x204>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <checkEventButton+0x7e>
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d004      	beq.n	8000c1a <checkEventButton+0x86>
				case 1:
					resetAllButton();
					return BUTTON1SinglePress;
					break;
				default:
					break;
 8000c10:	e007      	b.n	8000c22 <checkEventButton+0x8e>
					resetAllButton();
 8000c12:	f7ff ff97 	bl	8000b44 <resetAllButton>
					return BUTTON1LongPress;
 8000c16:	2305      	movs	r3, #5
 8000c18:	e0b8      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000c1a:	f7ff ff93 	bl	8000b44 <resetAllButton>
					return BUTTON1SinglePress;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e0b4      	b.n	8000d8c <checkEventButton+0x1f8>
				}
				break;
 8000c22:	e024      	b.n	8000c6e <checkEventButton+0xda>
			case 2:
				switch (eventButtonDrop[indexButton])
 8000c24:	4a5c      	ldr	r2, [pc, #368]	; (8000d98 <checkEventButton+0x204>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d002      	beq.n	8000c36 <checkEventButton+0xa2>
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d004      	beq.n	8000c3e <checkEventButton+0xaa>
				case 2:
					resetAllButton();
					return BUTTON1DoublePress;
					break;
				default:
					break;
 8000c34:	e007      	b.n	8000c46 <checkEventButton+0xb2>
					resetAllButton();
 8000c36:	f7ff ff85 	bl	8000b44 <resetAllButton>
					return BUTTON1DoublePress;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e0a6      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000c3e:	f7ff ff81 	bl	8000b44 <resetAllButton>
					return BUTTON1DoublePress;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e0a2      	b.n	8000d8c <checkEventButton+0x1f8>
				}
				break;
 8000c46:	e012      	b.n	8000c6e <checkEventButton+0xda>
			case 3:
				switch (eventButtonDrop[indexButton])
 8000c48:	4a53      	ldr	r2, [pc, #332]	; (8000d98 <checkEventButton+0x204>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d002      	beq.n	8000c5a <checkEventButton+0xc6>
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d004      	beq.n	8000c62 <checkEventButton+0xce>
				case 3:
					resetAllButton();
					return BUTTON1TriplePress;
					break;
				default:
					break;
 8000c58:	e007      	b.n	8000c6a <checkEventButton+0xd6>
					resetAllButton();
 8000c5a:	f7ff ff73 	bl	8000b44 <resetAllButton>
					return BUTTON1TriplePress;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	e094      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000c62:	f7ff ff6f 	bl	8000b44 <resetAllButton>
					return BUTTON1TriplePress;
 8000c66:	2304      	movs	r3, #4
 8000c68:	e090      	b.n	8000d8c <checkEventButton+0x1f8>
				}
				break;
 8000c6a:	e000      	b.n	8000c6e <checkEventButton+0xda>
			default:
				break;
 8000c6c:	bf00      	nop
			}
			break;
 8000c6e:	e08d      	b.n	8000d8c <checkEventButton+0x1f8>
		case 1:
			switch (eventButtonPressed[indexButton])
 8000c70:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <checkEventButton+0x200>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d02a      	beq.n	8000cd2 <checkEventButton+0x13e>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	dc3a      	bgt.n	8000cf6 <checkEventButton+0x162>
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <checkEventButton+0xf6>
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d012      	beq.n	8000cae <checkEventButton+0x11a>
				default:
					break;
				}
				break;
			default:
				break;
 8000c88:	e035      	b.n	8000cf6 <checkEventButton+0x162>
				switch (eventButtonDrop[indexButton])
 8000c8a:	4a43      	ldr	r2, [pc, #268]	; (8000d98 <checkEventButton+0x204>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <checkEventButton+0x108>
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d004      	beq.n	8000ca4 <checkEventButton+0x110>
					break;
 8000c9a:	e007      	b.n	8000cac <checkEventButton+0x118>
					resetAllButton();
 8000c9c:	f7ff ff52 	bl	8000b44 <resetAllButton>
					return BUTTON2LongPress;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	e073      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000ca4:	f7ff ff4e 	bl	8000b44 <resetAllButton>
					return NOBUTTON;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	e06f      	b.n	8000d8c <checkEventButton+0x1f8>
				break;
 8000cac:	e024      	b.n	8000cf8 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 8000cae:	4a3a      	ldr	r2, [pc, #232]	; (8000d98 <checkEventButton+0x204>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <checkEventButton+0x12c>
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d004      	beq.n	8000cc8 <checkEventButton+0x134>
					break;
 8000cbe:	e007      	b.n	8000cd0 <checkEventButton+0x13c>
					resetAllButton();
 8000cc0:	f7ff ff40 	bl	8000b44 <resetAllButton>
					return BUTTON2LongPress;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	e061      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000cc8:	f7ff ff3c 	bl	8000b44 <resetAllButton>
					return BUTTON2SinglePress;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	e05d      	b.n	8000d8c <checkEventButton+0x1f8>
				break;
 8000cd0:	e012      	b.n	8000cf8 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 8000cd2:	4a31      	ldr	r2, [pc, #196]	; (8000d98 <checkEventButton+0x204>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d002      	beq.n	8000ce4 <checkEventButton+0x150>
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d004      	beq.n	8000cec <checkEventButton+0x158>
					break;
 8000ce2:	e007      	b.n	8000cf4 <checkEventButton+0x160>
					resetAllButton();
 8000ce4:	f7ff ff2e 	bl	8000b44 <resetAllButton>
					return BUTTON2DoublePress;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	e04f      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000cec:	f7ff ff2a 	bl	8000b44 <resetAllButton>
					return BUTTON2DoublePress;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	e04b      	b.n	8000d8c <checkEventButton+0x1f8>
				break;
 8000cf4:	e000      	b.n	8000cf8 <checkEventButton+0x164>
				break;
 8000cf6:	bf00      	nop
			}
			break;
 8000cf8:	e048      	b.n	8000d8c <checkEventButton+0x1f8>
		case 2:
			switch (eventButtonPressed[indexButton])
 8000cfa:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <checkEventButton+0x200>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d02a      	beq.n	8000d5c <checkEventButton+0x1c8>
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	dc3a      	bgt.n	8000d80 <checkEventButton+0x1ec>
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <checkEventButton+0x180>
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d012      	beq.n	8000d38 <checkEventButton+0x1a4>
				default:
					break;
				}
				break;
			default:
				break;
 8000d12:	e035      	b.n	8000d80 <checkEventButton+0x1ec>
				switch (eventButtonDrop[indexButton])
 8000d14:	4a20      	ldr	r2, [pc, #128]	; (8000d98 <checkEventButton+0x204>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <checkEventButton+0x192>
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d004      	beq.n	8000d2e <checkEventButton+0x19a>
					break;
 8000d24:	e007      	b.n	8000d36 <checkEventButton+0x1a2>
					resetAllButton();
 8000d26:	f7ff ff0d 	bl	8000b44 <resetAllButton>
					return BUTTON3LongPress;
 8000d2a:	230b      	movs	r3, #11
 8000d2c:	e02e      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000d2e:	f7ff ff09 	bl	8000b44 <resetAllButton>
					return NOBUTTON;
 8000d32:	230c      	movs	r3, #12
 8000d34:	e02a      	b.n	8000d8c <checkEventButton+0x1f8>
				break;
 8000d36:	e024      	b.n	8000d82 <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <checkEventButton+0x204>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <checkEventButton+0x1b6>
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d004      	beq.n	8000d52 <checkEventButton+0x1be>
					break;
 8000d48:	e007      	b.n	8000d5a <checkEventButton+0x1c6>
					resetAllButton();
 8000d4a:	f7ff fefb 	bl	8000b44 <resetAllButton>
					return BUTTON3LongPress;
 8000d4e:	230b      	movs	r3, #11
 8000d50:	e01c      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000d52:	f7ff fef7 	bl	8000b44 <resetAllButton>
					return BUTTON3SinglePress;
 8000d56:	2309      	movs	r3, #9
 8000d58:	e018      	b.n	8000d8c <checkEventButton+0x1f8>
				break;
 8000d5a:	e012      	b.n	8000d82 <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <checkEventButton+0x204>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d002      	beq.n	8000d6e <checkEventButton+0x1da>
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d004      	beq.n	8000d76 <checkEventButton+0x1e2>
					break;
 8000d6c:	e007      	b.n	8000d7e <checkEventButton+0x1ea>
					resetAllButton();
 8000d6e:	f7ff fee9 	bl	8000b44 <resetAllButton>
					return BUTTON3DoublePress;
 8000d72:	230a      	movs	r3, #10
 8000d74:	e00a      	b.n	8000d8c <checkEventButton+0x1f8>
					resetAllButton();
 8000d76:	f7ff fee5 	bl	8000b44 <resetAllButton>
					return BUTTON3DoublePress;
 8000d7a:	230a      	movs	r3, #10
 8000d7c:	e006      	b.n	8000d8c <checkEventButton+0x1f8>
				break;
 8000d7e:	e000      	b.n	8000d82 <checkEventButton+0x1ee>
				break;
 8000d80:	bf00      	nop
			}
			break;
 8000d82:	e003      	b.n	8000d8c <checkEventButton+0x1f8>
		default:
			resetAllButton();
 8000d84:	f7ff fede 	bl	8000b44 <resetAllButton>
			return NOBUTTON;
 8000d88:	230c      	movs	r3, #12
 8000d8a:	e7ff      	b.n	8000d8c <checkEventButton+0x1f8>
			break;
	}
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200003c0 	.word	0x200003c0
 8000d98:	200003cc 	.word	0x200003cc

08000d9c <getInputButton>:

int getInputButton()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	e0c1      	b.n	8000f2c <getInputButton+0x190>
	{
		state1Button[i]= state2Button[i];
 8000da8:	4a65      	ldr	r2, [pc, #404]	; (8000f40 <getInputButton+0x1a4>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db0:	4964      	ldr	r1, [pc, #400]	; (8000f44 <getInputButton+0x1a8>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 8000db8:	4a63      	ldr	r2, [pc, #396]	; (8000f48 <getInputButton+0x1ac>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dc0:	495f      	ldr	r1, [pc, #380]	; (8000f40 <getInputButton+0x1a4>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000dc8:	4a60      	ldr	r2, [pc, #384]	; (8000f4c <getInputButton+0x1b0>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dd0:	495f      	ldr	r1, [pc, #380]	; (8000f50 <getInputButton+0x1b4>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4610      	mov	r0, r2
 8000ddc:	f001 ffe2 	bl	8002da4 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <getInputButton+0x1ac>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 8000dec:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <getInputButton+0x1a8>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000df4:	4952      	ldr	r1, [pc, #328]	; (8000f40 <getInputButton+0x1a4>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f040 8092 	bne.w	8000f26 <getInputButton+0x18a>
 8000e02:	4a4f      	ldr	r2, [pc, #316]	; (8000f40 <getInputButton+0x1a4>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0a:	494f      	ldr	r1, [pc, #316]	; (8000f48 <getInputButton+0x1ac>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	f040 8087 	bne.w	8000f26 <getInputButton+0x18a>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 8000e18:	4a4e      	ldr	r2, [pc, #312]	; (8000f54 <getInputButton+0x1b8>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e20:	4948      	ldr	r1, [pc, #288]	; (8000f44 <getInputButton+0x1a8>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d031      	beq.n	8000e90 <getInputButton+0xf4>
			{
				switch (state0Button[i])
 8000e2c:	4a49      	ldr	r2, [pc, #292]	; (8000f54 <getInputButton+0x1b8>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <getInputButton+0xa2>
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d014      	beq.n	8000e66 <getInputButton+0xca>
						state0Button[i]= PRESS_STATE;
						eventButtonPressed[i]+= 1;
						timerLongPress[i]= 300;
						break;
					default:
						break;
 8000e3c:	e073      	b.n	8000f26 <getInputButton+0x18a>
						state0Button[i]= NORMAL_STATE;
 8000e3e:	4a45      	ldr	r2, [pc, #276]	; (8000f54 <getInputButton+0x1b8>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2101      	movs	r1, #1
 8000e44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonDrop[i]+= 1;
 8000e48:	4a43      	ldr	r2, [pc, #268]	; (8000f58 <getInputButton+0x1bc>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	4941      	ldr	r1, [pc, #260]	; (8000f58 <getInputButton+0x1bc>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerNormalState[i]= 10;
 8000e5a:	4a40      	ldr	r2, [pc, #256]	; (8000f5c <getInputButton+0x1c0>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	210a      	movs	r1, #10
 8000e60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8000e64:	e05f      	b.n	8000f26 <getInputButton+0x18a>
						state0Button[i]= PRESS_STATE;
 8000e66:	4a3b      	ldr	r2, [pc, #236]	; (8000f54 <getInputButton+0x1b8>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonPressed[i]+= 1;
 8000e70:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <getInputButton+0x1c4>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	4939      	ldr	r1, [pc, #228]	; (8000f60 <getInputButton+0x1c4>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerLongPress[i]= 300;
 8000e82:	4a38      	ldr	r2, [pc, #224]	; (8000f64 <getInputButton+0x1c8>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8000e8e:	e04a      	b.n	8000f26 <getInputButton+0x18a>

				}
			}
			else
			{
				if (state0Button[i]== NORMAL_STATE)
 8000e90:	4a30      	ldr	r2, [pc, #192]	; (8000f54 <getInputButton+0x1b8>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d119      	bne.n	8000ed0 <getInputButton+0x134>
				{
					if (timerNormalState[i] > 0)
 8000e9c:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <getInputButton+0x1c0>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	dd3e      	ble.n	8000f26 <getInputButton+0x18a>
					{
						timerNormalState[i]--;
 8000ea8:	4a2c      	ldr	r2, [pc, #176]	; (8000f5c <getInputButton+0x1c0>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	492a      	ldr	r1, [pc, #168]	; (8000f5c <getInputButton+0x1c0>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerNormalState[i] <= 0)
 8000eba:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <getInputButton+0x1c0>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	dc2f      	bgt.n	8000f26 <getInputButton+0x18a>
						{
							return checkEventButton(i);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fe64 	bl	8000b94 <checkEventButton>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	e032      	b.n	8000f36 <getInputButton+0x19a>
						}
					}
				}
				else   // state0Button[i]== PRESS_SATE;
				{
					if (timerLongPress[i] > 0)
 8000ed0:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <getInputButton+0x1c8>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	dd24      	ble.n	8000f26 <getInputButton+0x18a>
					{
						timerLongPress[i]--;
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <getInputButton+0x1c8>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	491f      	ldr	r1, [pc, #124]	; (8000f64 <getInputButton+0x1c8>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerLongPress[i] <= 0)
 8000eee:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <getInputButton+0x1c8>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	dc15      	bgt.n	8000f26 <getInputButton+0x18a>
						{
							if (i== 0)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <getInputButton+0x170>
								timerLongPress[i]= 300;
 8000f00:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <getInputButton+0x1c8>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							if (i== 1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d104      	bne.n	8000f1c <getInputButton+0x180>
								timerLongPress[i]= 20;
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <getInputButton+0x1c8>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2114      	movs	r1, #20
 8000f18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							return checkEventButton(i);		
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fe39 	bl	8000b94 <checkEventButton>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e007      	b.n	8000f36 <getInputButton+0x19a>
	for (int i= 0; i < 3; i++)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	f77f af3a 	ble.w	8000da8 <getInputButton+0xc>
					}
				}
			}
		}
	}
	return NOBUTTON;
 8000f34:	230c      	movs	r3, #12
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000002c 	.word	0x2000002c
 8000f44:	20000020 	.word	0x20000020
 8000f48:	20000038 	.word	0x20000038
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	20000014 	.word	0x20000014
 8000f58:	200003cc 	.word	0x200003cc
 8000f5c:	200003b4 	.word	0x200003b4
 8000f60:	200003c0 	.word	0x200003c0
 8000f64:	20000044 	.word	0x20000044

08000f68 <update7SEGBuffer>:
int durationLedGreen = 3;
int durationLedYellow = 2;

int led_buffer[3]= {0, 0, 0};
void update7SEGBuffer(int time, int signalUpdate)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	switch (signalUpdate)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d011      	beq.n	8000f9c <update7SEGBuffer+0x34>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	dc12      	bgt.n	8000fa4 <update7SEGBuffer+0x3c>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <update7SEGBuffer+0x24>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d004      	beq.n	8000f94 <update7SEGBuffer+0x2c>
		break;
	case UPDATEMODE:
		led_buffer[2] = time;
		break;
	default:
		break;
 8000f8a:	e00b      	b.n	8000fa4 <update7SEGBuffer+0x3c>
		led_buffer[0] = time;
 8000f8c:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <update7SEGBuffer+0x4c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
		break;
 8000f92:	e008      	b.n	8000fa6 <update7SEGBuffer+0x3e>
		led_buffer[1] = time;
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <update7SEGBuffer+0x4c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6053      	str	r3, [r2, #4]
		break;
 8000f9a:	e004      	b.n	8000fa6 <update7SEGBuffer+0x3e>
		led_buffer[2] = time;
 8000f9c:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <update7SEGBuffer+0x4c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6093      	str	r3, [r2, #8]
		break;
 8000fa2:	e000      	b.n	8000fa6 <update7SEGBuffer+0x3e>
		break;
 8000fa4:	bf00      	nop
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200003d8 	.word	0x200003d8

08000fb8 <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC1);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffd0 	bl	8000f68 <update7SEGBuffer>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC2);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffc4 	bl	8000f68 <update7SEGBuffer>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATEMODE);
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffb8 	bl	8000f68 <update7SEGBuffer>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWTUNING);
 8001004:	2105      	movs	r1, #5
 8001006:	2008      	movs	r0, #8
 8001008:	f000 fdca 	bl	8001ba0 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, YELLOWTUNING);
 800100c:	2105      	movs	r1, #5
 800100e:	2009      	movs	r0, #9
 8001010:	f000 fdc6 	bl	8001ba0 <controlSingleLedTraffic>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <blinkingRED>:

void blinkingRED()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDTUNING);
 800101c:	2103      	movs	r1, #3
 800101e:	2008      	movs	r0, #8
 8001020:	f000 fdbe 	bl	8001ba0 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, REDTUNING);
 8001024:	2103      	movs	r1, #3
 8001026:	2009      	movs	r0, #9
 8001028:	f000 fdba 	bl	8001ba0 <controlSingleLedTraffic>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <blinkingGREEN>:

void blinkingGREEN()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENTUNING);
 8001034:	2104      	movs	r1, #4
 8001036:	2008      	movs	r0, #8
 8001038:	f000 fdb2 	bl	8001ba0 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, GREENTUNING);
 800103c:	2104      	movs	r1, #4
 800103e:	2009      	movs	r0, #9
 8001040:	f000 fdae 	bl	8001ba0 <controlSingleLedTraffic>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <offAllSingLEDs>:

void offAllSingLEDs()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, OFF);
 800104c:	2106      	movs	r1, #6
 800104e:	2008      	movs	r0, #8
 8001050:	f000 fda6 	bl	8001ba0 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, OFF);
 8001054:	2106      	movs	r1, #6
 8001056:	2009      	movs	r0, #9
 8001058:	f000 fda2 	bl	8001ba0 <controlSingleLedTraffic>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <onAllSingLEDs>:

void onAllSingLEDs()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, ON);
 8001064:	2107      	movs	r1, #7
 8001066:	2008      	movs	r0, #8
 8001068:	f000 fd9a 	bl	8001ba0 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, ON);
 800106c:	2107      	movs	r1, #7
 800106e:	2009      	movs	r0, #9
 8001070:	f000 fd96 	bl	8001ba0 <controlSingleLedTraffic>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <onSingleRedTraffic1>:

void onSingleRedTraffic1()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDNORMAL);
 800107c:	2100      	movs	r1, #0
 800107e:	2008      	movs	r0, #8
 8001080:	f000 fd8e 	bl	8001ba0 <controlSingleLedTraffic>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <onSingleYellowTraffic1>:

void onSingleYellowTraffic1()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWNORMAL);
 800108c:	2102      	movs	r1, #2
 800108e:	2008      	movs	r0, #8
 8001090:	f000 fd86 	bl	8001ba0 <controlSingleLedTraffic>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENNORMAL);
 800109c:	2101      	movs	r1, #1
 800109e:	2008      	movs	r0, #8
 80010a0:	f000 fd7e 	bl	8001ba0 <controlSingleLedTraffic>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, REDNORMAL);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2009      	movs	r0, #9
 80010b0:	f000 fd76 	bl	8001ba0 <controlSingleLedTraffic>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <onSingleYellowTraffic2>:

void onSingleYellowTraffic2()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, YELLOWNORMAL);
 80010bc:	2102      	movs	r1, #2
 80010be:	2009      	movs	r0, #9
 80010c0:	f000 fd6e 	bl	8001ba0 <controlSingleLedTraffic>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, GREENNORMAL);
 80010cc:	2101      	movs	r1, #1
 80010ce:	2009      	movs	r0, #9
 80010d0:	f000 fd66 	bl	8001ba0 <controlSingleLedTraffic>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <offSingleRedGreenWalk>:

void offSingleRedGreenWalk()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	controlSingleLedWalk(OFFLEDWALK);
 80010dc:	200a      	movs	r0, #10
 80010de:	f000 fe61 	bl	8001da4 <controlSingleLedWalk>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <onGreenOffRedWalk>:
void onGreenOffRedWalk()
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONGREENOFFREDWALK);
 80010ea:	200b      	movs	r0, #11
 80010ec:	f000 fe5a 	bl	8001da4 <controlSingleLedWalk>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <onRedOffGreenWalk>:
void onRedOffGreenWalk()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONREDOFFGREENWALK);
 80010f8:	200c      	movs	r0, #12
 80010fa:	f000 fe53 	bl	8001da4 <controlSingleLedWalk>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <ledWalkOperationNormalMode>:

int numberFreq;
int statusLedWalkButton3Press;

void ledWalkOperationNormalMode()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    switch (statusTraffic1)
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <ledWalkOperationNormalMode+0x5c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b03      	cmp	r3, #3
 800110e:	d01a      	beq.n	8001146 <ledWalkOperationNormalMode+0x42>
 8001110:	2b03      	cmp	r3, #3
 8001112:	dc22      	bgt.n	800115a <ledWalkOperationNormalMode+0x56>
 8001114:	2b01      	cmp	r3, #1
 8001116:	d002      	beq.n	800111e <ledWalkOperationNormalMode+0x1a>
 8001118:	2b02      	cmp	r3, #2
 800111a:	d00a      	beq.n	8001132 <ledWalkOperationNormalMode+0x2e>
			offSingleRedGreenWalk();
		else	
			onRedOffGreenWalk();
        break;
    default:
        break;
 800111c:	e01d      	b.n	800115a <ledWalkOperationNormalMode+0x56>
		if (numberFreq <= 0)
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <ledWalkOperationNormalMode+0x60>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dc02      	bgt.n	800112c <ledWalkOperationNormalMode+0x28>
			offSingleRedGreenWalk();
 8001126:	f7ff ffd7 	bl	80010d8 <offSingleRedGreenWalk>
        break;
 800112a:	e017      	b.n	800115c <ledWalkOperationNormalMode+0x58>
			onGreenOffRedWalk();
 800112c:	f7ff ffdb 	bl	80010e6 <onGreenOffRedWalk>
        break;
 8001130:	e014      	b.n	800115c <ledWalkOperationNormalMode+0x58>
		if (numberFreq <= 0)
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <ledWalkOperationNormalMode+0x60>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dc02      	bgt.n	8001140 <ledWalkOperationNormalMode+0x3c>
			offSingleRedGreenWalk();
 800113a:	f7ff ffcd 	bl	80010d8 <offSingleRedGreenWalk>
        break;
 800113e:	e00d      	b.n	800115c <ledWalkOperationNormalMode+0x58>
			onRedOffGreenWalk();
 8001140:	f7ff ffd8 	bl	80010f4 <onRedOffGreenWalk>
        break;
 8001144:	e00a      	b.n	800115c <ledWalkOperationNormalMode+0x58>
		if (numberFreq <= 0)
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <ledWalkOperationNormalMode+0x60>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	dc02      	bgt.n	8001154 <ledWalkOperationNormalMode+0x50>
			offSingleRedGreenWalk();
 800114e:	f7ff ffc3 	bl	80010d8 <offSingleRedGreenWalk>
        break;
 8001152:	e003      	b.n	800115c <ledWalkOperationNormalMode+0x58>
			onRedOffGreenWalk();
 8001154:	f7ff ffce 	bl	80010f4 <onRedOffGreenWalk>
        break;
 8001158:	e000      	b.n	800115c <ledWalkOperationNormalMode+0x58>
        break;
 800115a:	bf00      	nop
    }
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000480 	.word	0x20000480
 8001164:	200003e4 	.word	0x200003e4

08001168 <ledWalkOperationManualMode>:

void ledWalkOperationManualMode()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	switch (statusManualMode)
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <ledWalkOperationManualMode+0x7c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	2b03      	cmp	r3, #3
 8001174:	d832      	bhi.n	80011dc <ledWalkOperationManualMode+0x74>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <ledWalkOperationManualMode+0x14>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800118d 	.word	0x0800118d
 8001180:	080011c9 	.word	0x080011c9
 8001184:	080011b5 	.word	0x080011b5
 8001188:	080011a1 	.word	0x080011a1
	{
	case REDGREENMANUAL:
		if (numberFreq <= 0)
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <ledWalkOperationManualMode+0x80>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dc02      	bgt.n	800119a <ledWalkOperationManualMode+0x32>
			offSingleRedGreenWalk();
 8001194:	f7ff ffa0 	bl	80010d8 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 8001198:	e021      	b.n	80011de <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 800119a:	f7ff ffa4 	bl	80010e6 <onGreenOffRedWalk>
		break;
 800119e:	e01e      	b.n	80011de <ledWalkOperationManualMode+0x76>
	case YELLOWREDMANUAL:
		if (numberFreq <= 0)
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <ledWalkOperationManualMode+0x80>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	dc02      	bgt.n	80011ae <ledWalkOperationManualMode+0x46>
			offSingleRedGreenWalk();
 80011a8:	f7ff ff96 	bl	80010d8 <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 80011ac:	e017      	b.n	80011de <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 80011ae:	f7ff ffa1 	bl	80010f4 <onRedOffGreenWalk>
		break;
 80011b2:	e014      	b.n	80011de <ledWalkOperationManualMode+0x76>
	case GREENREDMANUAL:
		if (numberFreq <= 0)
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <ledWalkOperationManualMode+0x80>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dc02      	bgt.n	80011c2 <ledWalkOperationManualMode+0x5a>
			offSingleRedGreenWalk();
 80011bc:	f7ff ff8c 	bl	80010d8 <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 80011c0:	e00d      	b.n	80011de <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 80011c2:	f7ff ff97 	bl	80010f4 <onRedOffGreenWalk>
		break;
 80011c6:	e00a      	b.n	80011de <ledWalkOperationManualMode+0x76>
	case REDYELLOWMANUAL:
		if (numberFreq <= 0)
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <ledWalkOperationManualMode+0x80>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dc02      	bgt.n	80011d6 <ledWalkOperationManualMode+0x6e>
			offSingleRedGreenWalk();
 80011d0:	f7ff ff82 	bl	80010d8 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 80011d4:	e003      	b.n	80011de <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 80011d6:	f7ff ff86 	bl	80010e6 <onGreenOffRedWalk>
		break;
 80011da:	e000      	b.n	80011de <ledWalkOperationManualMode+0x76>
	default:
		break;
 80011dc:	bf00      	nop
	}
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000047c 	.word	0x2000047c
 80011e8:	200003e4 	.word	0x200003e4

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f001 fa26 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f838 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f000 f956 	bl	80014a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011fc:	f000 f892 	bl	8001324 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001200:	f000 f8dc 	bl	80013bc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001204:	f001 f918 	bl	8002438 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001208:	4812      	ldr	r0, [pc, #72]	; (8001254 <main+0x68>)
 800120a:	f002 fabf 	bl	800378c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800120e:	2104      	movs	r1, #4
 8001210:	4811      	ldr	r0, [pc, #68]	; (8001258 <main+0x6c>)
 8001212:	f002 fb85 	bl	8003920 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8001216:	f7ff fb9f 	bl	8000958 <SCH_Init>
  setTimer1(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f000 fe58 	bl	8001ed0 <setTimer1>
  SCH_Add_Task(task1, 1000, 1000, 1);
 8001220:	2301      	movs	r3, #1
 8001222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001226:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800122a:	480c      	ldr	r0, [pc, #48]	; (800125c <main+0x70>)
 800122c:	f7ff f96c 	bl	8000508 <SCH_Add_Task>
  SCH_Add_Task(task2, 500, 500, 2);
 8001230:	2302      	movs	r3, #2
 8001232:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001236:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <main+0x74>)
 800123c:	f7ff f964 	bl	8000508 <SCH_Add_Task>
  SCH_Add_Task(task3, 1, 1, 3);
 8001240:	2303      	movs	r3, #3
 8001242:	2201      	movs	r2, #1
 8001244:	2101      	movs	r1, #1
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <main+0x78>)
 8001248:	f7ff f95e 	bl	8000508 <SCH_Add_Task>
//  setTimer2(100);
//  setTimer3(50);
	while (1)
	{
		SCH_Dispatch_Tasks();
 800124c:	f7ff fb5a 	bl	8000904 <SCH_Dispatch_Tasks>
 8001250:	e7fc      	b.n	800124c <main+0x60>
 8001252:	bf00      	nop
 8001254:	200003ec 	.word	0x200003ec
 8001258:	20000434 	.word	0x20000434
 800125c:	080009e5 	.word	0x080009e5
 8001260:	08000a01 	.word	0x08000a01
 8001264:	08000a19 	.word	0x08000a19

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	; 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2230      	movs	r2, #48	; 0x30
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f004 fac6 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <SystemClock_Config+0xb4>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a21      	ldr	r2, [pc, #132]	; (800131c <SystemClock_Config+0xb4>)
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <SystemClock_Config+0xb4>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <SystemClock_Config+0xb8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <SystemClock_Config+0xb8>)
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <SystemClock_Config+0xb8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c4:	2302      	movs	r3, #2
 80012c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012cc:	2310      	movs	r3, #16
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fdaf 	bl	8002e3c <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012e4:	f000 f98a 	bl	80015fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f002 f812 	bl	800332c <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800130e:	f000 f975 	bl	80015fc <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_TIM2_Init+0x94>)
 800134a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800134e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001358:	2209      	movs	r2, #9
 800135a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_TIM2_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <MX_TIM2_Init+0x94>)
 800136a:	f002 f9bf 	bl	80036ec <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001374:	f000 f942 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM2_Init+0x94>)
 8001386:	f002 fd5d 	bl	8003e44 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001390:	f000 f934 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM2_Init+0x94>)
 80013a2:	f003 f94f 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 f926 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200003ec 	.word	0x200003ec

080013bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	; 0x38
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_TIM3_Init+0xe4>)
 80013ee:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <MX_TIM3_Init+0xe8>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_TIM3_Init+0xe4>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <MX_TIM3_Init+0xe4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 299;
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <MX_TIM3_Init+0xe4>)
 8001400:	f240 122b 	movw	r2, #299	; 0x12b
 8001404:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <MX_TIM3_Init+0xe4>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <MX_TIM3_Init+0xe4>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001412:	4823      	ldr	r0, [pc, #140]	; (80014a0 <MX_TIM3_Init+0xe4>)
 8001414:	f002 f96a 	bl	80036ec <HAL_TIM_Base_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800141e:	f000 f8ed 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142c:	4619      	mov	r1, r3
 800142e:	481c      	ldr	r0, [pc, #112]	; (80014a0 <MX_TIM3_Init+0xe4>)
 8001430:	f002 fd08 	bl	8003e44 <HAL_TIM_ConfigClockSource>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800143a:	f000 f8df 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <MX_TIM3_Init+0xe4>)
 8001440:	f002 fa14 	bl	800386c <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800144a:	f000 f8d7 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	4619      	mov	r1, r3
 800145c:	4810      	ldr	r0, [pc, #64]	; (80014a0 <MX_TIM3_Init+0xe4>)
 800145e:	f003 f8f1 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001468:	f000 f8c8 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 8001470:	23c8      	movs	r3, #200	; 0xc8
 8001472:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2204      	movs	r2, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM3_Init+0xe4>)
 8001484:	f002 fc1c 	bl	8003cc0 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800148e:	f000 f8b5 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM3_Init+0xe4>)
 8001494:	f000 fd9c 	bl	8001fd0 <HAL_TIM_MspPostInit>

}
 8001498:	bf00      	nop
 800149a:	3738      	adds	r7, #56	; 0x38
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000434 	.word	0x20000434
 80014a4:	40000400 	.word	0x40000400

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <MX_GPIO_Init+0x12c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a43      	ldr	r2, [pc, #268]	; (80015d4 <MX_GPIO_Init+0x12c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <MX_GPIO_Init+0x12c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <MX_GPIO_Init+0x12c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a3c      	ldr	r2, [pc, #240]	; (80015d4 <MX_GPIO_Init+0x12c>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <MX_GPIO_Init+0x12c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <MX_GPIO_Init+0x12c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a35      	ldr	r2, [pc, #212]	; (80015d4 <MX_GPIO_Init+0x12c>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <MX_GPIO_Init+0x12c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segA_Pin|segB_Pin|segC_Pin|segD_Pin
 8001512:	2200      	movs	r2, #0
 8001514:	217f      	movs	r1, #127	; 0x7f
 8001516:	4830      	ldr	r0, [pc, #192]	; (80015d8 <MX_GPIO_Init+0x130>)
 8001518:	f001 fc5c 	bl	8002dd4 <HAL_GPIO_WritePin>
                          |segE_Pin|segF_Pin|segG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 800151c:	2201      	movs	r2, #1
 800151e:	213f      	movs	r1, #63	; 0x3f
 8001520:	482e      	ldr	r0, [pc, #184]	; (80015dc <MX_GPIO_Init+0x134>)
 8001522:	f001 fc57 	bl	8002dd4 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, en2_Pin|en3_Pin|en4_Pin|en0_Pin
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800152c:	482b      	ldr	r0, [pc, #172]	; (80015dc <MX_GPIO_Init+0x134>)
 800152e:	f001 fc51 	bl	8002dd4 <HAL_GPIO_WritePin>
                          |en1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WALKGREEN_Pin|WALKRED_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001538:	4829      	ldr	r0, [pc, #164]	; (80015e0 <MX_GPIO_Init+0x138>)
 800153a:	f001 fc4b 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
                           segE_Pin segF_Pin segG_Pin */
  GPIO_InitStruct.Pin = segA_Pin|segB_Pin|segC_Pin|segD_Pin
 800153e:	237f      	movs	r3, #127	; 0x7f
 8001540:	60fb      	str	r3, [r7, #12]
                          |segE_Pin|segF_Pin|segG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	4619      	mov	r1, r3
 8001554:	4820      	ldr	r0, [pc, #128]	; (80015d8 <MX_GPIO_Init+0x130>)
 8001556:	f001 fa89 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 800155a:	233f      	movs	r3, #63	; 0x3f
 800155c:	60fb      	str	r3, [r7, #12]
                          |GREEN2_Pin|YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4619      	mov	r1, r3
 8001570:	481a      	ldr	r0, [pc, #104]	; (80015dc <MX_GPIO_Init+0x134>)
 8001572:	f001 fa7b 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : en2_Pin en3_Pin en4_Pin en0_Pin
                           en1_Pin */
  GPIO_InitStruct.Pin = en2_Pin|en3_Pin|en4_Pin|en0_Pin
 8001576:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800157a:	60fb      	str	r3, [r7, #12]
                          |en1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_GPIO_Init+0x134>)
 8001590:	f001 fa6c 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : WALKGREEN_Pin WALKRED_Pin */
  GPIO_InitStruct.Pin = WALKGREEN_Pin|WALKRED_Pin;
 8001594:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_GPIO_Init+0x138>)
 80015ae:	f001 fa5d 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 80015b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_GPIO_Init+0x130>)
 80015c8:	f001 fa50 	bl	8002a6c <HAL_GPIO_Init>

}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020c00 	.word	0x40020c00

080015e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80015ec:	f7fe ff6e 	bl	80004cc <SCH_Update>
	runTimer();
 80015f0:	f000 fc16 	bl	8001e20 <runTimer>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <initStatusManualMode>:
#include "ledWalk.h"

int statusManualMode= INITMANUAL;

void initStatusManualMode()
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	statusManualMode= INITMANUAL;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <initStatusManualMode+0x14>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	2000047c 	.word	0x2000047c

08001620 <runManualModeFunction>:
void runManualModeFunction()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	switch (statusManualMode) 
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <runManualModeFunction+0x14c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b04      	cmp	r3, #4
 800162a:	f200 809b 	bhi.w	8001764 <runManualModeFunction+0x144>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <runManualModeFunction+0x14>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001649 	.word	0x08001649
 8001638:	08001663 	.word	0x08001663
 800163c:	0800169f 	.word	0x0800169f
 8001640:	080016e1 	.word	0x080016e1
 8001644:	08001723 	.word	0x08001723
	{
		case INITMANUAL:
			statusManualMode= REDGREENMANUAL;
 8001648:	4b48      	ldr	r3, [pc, #288]	; (800176c <runManualModeFunction+0x14c>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff fcca 	bl	8000fe8 <update7SEGBufferMode>
			offAllSingLEDs();
 8001654:	f7ff fcf8 	bl	8001048 <offAllSingLEDs>
			onSingleRedTraffic1();
 8001658:	f7ff fd0e 	bl	8001078 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 800165c:	f7ff fd34 	bl	80010c8 <onSingleGreenTraffic2>
			break;
 8001660:	e081      	b.n	8001766 <runManualModeFunction+0x146>
		case REDGREENMANUAL:
			statusManualMode= REDYELLOWMANUAL;
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <runManualModeFunction+0x14c>)
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <runManualModeFunction+0x14c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b40      	ldr	r3, [pc, #256]	; (8001770 <runManualModeFunction+0x150>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d10b      	bne.n	800168c <runManualModeFunction+0x6c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8001674:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <runManualModeFunction+0x154>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dd03      	ble.n	8001684 <runManualModeFunction+0x64>
 800167c:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <runManualModeFunction+0x154>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	e001      	b.n	8001688 <runManualModeFunction+0x68>
 8001684:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <runManualModeFunction+0x154>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a3a      	ldr	r2, [pc, #232]	; (8001774 <runManualModeFunction+0x154>)
 800168a:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 800168c:	f7ff fd6c 	bl	8001168 <ledWalkOperationManualMode>
			offAllSingLEDs();
 8001690:	f7ff fcda 	bl	8001048 <offAllSingLEDs>
			onSingleRedTraffic1();
 8001694:	f7ff fcf0 	bl	8001078 <onSingleRedTraffic1>
			onSingleYellowTraffic2();
 8001698:	f7ff fd0e 	bl	80010b8 <onSingleYellowTraffic2>
			break;
 800169c:	e063      	b.n	8001766 <runManualModeFunction+0x146>
		case REDYELLOWMANUAL:
			statusManualMode= GREENREDMANUAL;
 800169e:	4b33      	ldr	r3, [pc, #204]	; (800176c <runManualModeFunction+0x14c>)
 80016a0:	2203      	movs	r2, #3
 80016a2:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 80016a4:	4b31      	ldr	r3, [pc, #196]	; (800176c <runManualModeFunction+0x14c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b31      	ldr	r3, [pc, #196]	; (8001770 <runManualModeFunction+0x150>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d10b      	bne.n	80016c8 <runManualModeFunction+0xa8>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <runManualModeFunction+0x154>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dd03      	ble.n	80016c0 <runManualModeFunction+0xa0>
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <runManualModeFunction+0x154>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	e001      	b.n	80016c4 <runManualModeFunction+0xa4>
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <runManualModeFunction+0x154>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <runManualModeFunction+0x154>)
 80016c6:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 80016c8:	f7ff fd4e 	bl	8001168 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 80016cc:	2002      	movs	r0, #2
 80016ce:	f7ff fc8b 	bl	8000fe8 <update7SEGBufferMode>
			offAllSingLEDs();
 80016d2:	f7ff fcb9 	bl	8001048 <offAllSingLEDs>
			onSingleGreenTraffic1();
 80016d6:	f7ff fcdf 	bl	8001098 <onSingleGreenTraffic1>
			onSingleRedTraffic2();
 80016da:	f7ff fce5 	bl	80010a8 <onSingleRedTraffic2>
			break;
 80016de:	e042      	b.n	8001766 <runManualModeFunction+0x146>
		case GREENREDMANUAL:
			statusManualMode= YELLOWREDMANUAL;
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <runManualModeFunction+0x14c>)
 80016e2:	2204      	movs	r2, #4
 80016e4:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <runManualModeFunction+0x14c>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <runManualModeFunction+0x150>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d10b      	bne.n	800170a <runManualModeFunction+0xea>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <runManualModeFunction+0x154>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dd03      	ble.n	8001702 <runManualModeFunction+0xe2>
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <runManualModeFunction+0x154>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	e001      	b.n	8001706 <runManualModeFunction+0xe6>
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <runManualModeFunction+0x154>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <runManualModeFunction+0x154>)
 8001708:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 800170a:	f7ff fd2d 	bl	8001168 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 800170e:	2002      	movs	r0, #2
 8001710:	f7ff fc6a 	bl	8000fe8 <update7SEGBufferMode>
			offAllSingLEDs();
 8001714:	f7ff fc98 	bl	8001048 <offAllSingLEDs>
			onSingleYellowTraffic1();
 8001718:	f7ff fcb6 	bl	8001088 <onSingleYellowTraffic1>
			onSingleRedTraffic2();
 800171c:	f7ff fcc4 	bl	80010a8 <onSingleRedTraffic2>
			break;
 8001720:	e021      	b.n	8001766 <runManualModeFunction+0x146>
		case YELLOWREDMANUAL:
			statusManualMode= REDGREENMANUAL;
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <runManualModeFunction+0x14c>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <runManualModeFunction+0x14c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <runManualModeFunction+0x150>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d10b      	bne.n	800174c <runManualModeFunction+0x12c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <runManualModeFunction+0x154>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	dd03      	ble.n	8001744 <runManualModeFunction+0x124>
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <runManualModeFunction+0x154>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3b01      	subs	r3, #1
 8001742:	e001      	b.n	8001748 <runManualModeFunction+0x128>
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <runManualModeFunction+0x154>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <runManualModeFunction+0x154>)
 800174a:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 800174c:	f7ff fd0c 	bl	8001168 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8001750:	2002      	movs	r0, #2
 8001752:	f7ff fc49 	bl	8000fe8 <update7SEGBufferMode>
			offAllSingLEDs();
 8001756:	f7ff fc77 	bl	8001048 <offAllSingLEDs>
			onSingleRedTraffic1();
 800175a:	f7ff fc8d 	bl	8001078 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 800175e:	f7ff fcb3 	bl	80010c8 <onSingleGreenTraffic2>
			break;
 8001762:	e000      	b.n	8001766 <runManualModeFunction+0x146>
		default:
			break;
 8001764:	bf00      	nop
	}
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000047c 	.word	0x2000047c
 8001770:	200003e8 	.word	0x200003e8
 8001774:	200003e4 	.word	0x200003e4

08001778 <beginManualMode>:

void beginManualMode()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	numberFreq= 0;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <beginManualMode+0x1c>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	offSingleRedGreenWalk();
 8001782:	f7ff fca9 	bl	80010d8 <offSingleRedGreenWalk>
	initStatusManualMode();
 8001786:	f7ff ff3f 	bl	8001608 <initStatusManualMode>
	runManualModeFunction();
 800178a:	f7ff ff49 	bl	8001620 <runManualModeFunction>
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200003e4 	.word	0x200003e4

08001798 <beginWalkManualMode>:

void beginWalkManualMode()
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
	numberFreq= 3;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <beginWalkManualMode+0x1c>)
 800179e:	2203      	movs	r2, #3
 80017a0:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusManualMode;
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <beginWalkManualMode+0x20>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <beginWalkManualMode+0x24>)
 80017a8:	6013      	str	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	200003e4 	.word	0x200003e4
 80017b8:	2000047c 	.word	0x2000047c
 80017bc:	200003e8 	.word	0x200003e8

080017c0 <initStatusNormalMode>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void initStatusNormalMode()
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	statusTraffic1 = INITNORMAL;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <initStatusNormalMode+0x1c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
	statusTraffic2 = INITNORMAL;
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <initStatusNormalMode+0x20>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000480 	.word	0x20000480
 80017e0:	20000484 	.word	0x20000484

080017e4 <runNormalMode>:
void runNormalMode()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 80017e8:	4b93      	ldr	r3, [pc, #588]	; (8001a38 <runNormalMode+0x254>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	f200 80d1 	bhi.w	8001994 <runNormalMode+0x1b0>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <runNormalMode+0x14>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	08001809 	.word	0x08001809
 80017fc:	0800182b 	.word	0x0800182b
 8001800:	080018a5 	.word	0x080018a5
 8001804:	0800191d 	.word	0x0800191d
	{
	case INITNORMAL:
		counterLedRed1 = durationLedRed;
 8001808:	4b8c      	ldr	r3, [pc, #560]	; (8001a3c <runNormalMode+0x258>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a8c      	ldr	r2, [pc, #560]	; (8001a40 <runNormalMode+0x25c>)
 800180e:	6013      	str	r3, [r2, #0]
		statusTraffic1 = REDNORMAL;
 8001810:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <runNormalMode+0x254>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 8001816:	f7ff fc2f 	bl	8001078 <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 800181a:	4b89      	ldr	r3, [pc, #548]	; (8001a40 <runNormalMode+0x25c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fbca 	bl	8000fb8 <update7SEGBufferTraffic1>
		printTerminalInfoModeTraffic1();
 8001824:	f000 fe74 	bl	8002510 <printTerminalInfoModeTraffic1>
		break;
 8001828:	e0bb      	b.n	80019a2 <runNormalMode+0x1be>
	case REDNORMAL:
		if (counterLedRed1 > 0)
 800182a:	4b85      	ldr	r3, [pc, #532]	; (8001a40 <runNormalMode+0x25c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f340 80b2 	ble.w	8001998 <runNormalMode+0x1b4>
		{
			counterLedRed1--;
 8001834:	4b82      	ldr	r3, [pc, #520]	; (8001a40 <runNormalMode+0x25c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	4a81      	ldr	r2, [pc, #516]	; (8001a40 <runNormalMode+0x25c>)
 800183c:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 800183e:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <runNormalMode+0x25c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	dc24      	bgt.n	8001890 <runNormalMode+0xac>
			{
				counterLedGreen1 = durationLedGreen;
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <runNormalMode+0x260>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a7f      	ldr	r2, [pc, #508]	; (8001a48 <runNormalMode+0x264>)
 800184c:	6013      	str	r3, [r2, #0]
				statusTraffic1 = GREENNORMAL;
 800184e:	4b7a      	ldr	r3, [pc, #488]	; (8001a38 <runNormalMode+0x254>)
 8001850:	2202      	movs	r2, #2
 8001852:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8001854:	4b7d      	ldr	r3, [pc, #500]	; (8001a4c <runNormalMode+0x268>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <runNormalMode+0x254>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d10b      	bne.n	8001878 <runNormalMode+0x94>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001860:	4b7b      	ldr	r3, [pc, #492]	; (8001a50 <runNormalMode+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	dd03      	ble.n	8001870 <runNormalMode+0x8c>
 8001868:	4b79      	ldr	r3, [pc, #484]	; (8001a50 <runNormalMode+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	e001      	b.n	8001874 <runNormalMode+0x90>
 8001870:	4b77      	ldr	r3, [pc, #476]	; (8001a50 <runNormalMode+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a76      	ldr	r2, [pc, #472]	; (8001a50 <runNormalMode+0x26c>)
 8001876:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8001878:	f7ff fc44 	bl	8001104 <ledWalkOperationNormalMode>
				onSingleGreenTraffic1();
 800187c:	f7ff fc0c 	bl	8001098 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8001880:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <runNormalMode+0x264>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fb97 	bl	8000fb8 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800188a:	f000 fe41 	bl	8002510 <printTerminalInfoModeTraffic1>
				onSingleRedTraffic1();
				update7SEGBufferTraffic1(counterLedRed1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 800188e:	e083      	b.n	8001998 <runNormalMode+0x1b4>
				onSingleRedTraffic1();
 8001890:	f7ff fbf2 	bl	8001078 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <runNormalMode+0x25c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fb8d 	bl	8000fb8 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800189e:	f000 fe37 	bl	8002510 <printTerminalInfoModeTraffic1>
		break;
 80018a2:	e079      	b.n	8001998 <runNormalMode+0x1b4>
	case GREENNORMAL:
		if (counterLedGreen1 > 0)
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <runNormalMode+0x264>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	dd77      	ble.n	800199c <runNormalMode+0x1b8>
		{
			counterLedGreen1--;
 80018ac:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <runNormalMode+0x264>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <runNormalMode+0x264>)
 80018b4:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 80018b6:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <runNormalMode+0x264>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc24      	bgt.n	8001908 <runNormalMode+0x124>
			{
				counterLedYellow1 = durationLedYellow;
 80018be:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <runNormalMode+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a65      	ldr	r2, [pc, #404]	; (8001a58 <runNormalMode+0x274>)
 80018c4:	6013      	str	r3, [r2, #0]
				statusTraffic1 = YELLOWNORMAL;
 80018c6:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <runNormalMode+0x254>)
 80018c8:	2203      	movs	r2, #3
 80018ca:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 80018cc:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <runNormalMode+0x268>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <runNormalMode+0x254>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10b      	bne.n	80018f0 <runNormalMode+0x10c>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <runNormalMode+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	dd03      	ble.n	80018e8 <runNormalMode+0x104>
 80018e0:	4b5b      	ldr	r3, [pc, #364]	; (8001a50 <runNormalMode+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	e001      	b.n	80018ec <runNormalMode+0x108>
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <runNormalMode+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <runNormalMode+0x26c>)
 80018ee:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 80018f0:	f7ff fc08 	bl	8001104 <ledWalkOperationNormalMode>
				onSingleYellowTraffic1();
 80018f4:	f7ff fbc8 	bl	8001088 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 80018f8:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <runNormalMode+0x274>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fb5b 	bl	8000fb8 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 8001902:	f000 fe05 	bl	8002510 <printTerminalInfoModeTraffic1>
				onSingleGreenTraffic1();
				update7SEGBufferTraffic1(counterLedGreen1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 8001906:	e049      	b.n	800199c <runNormalMode+0x1b8>
				onSingleGreenTraffic1();
 8001908:	f7ff fbc6 	bl	8001098 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 800190c:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <runNormalMode+0x264>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fb51 	bl	8000fb8 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 8001916:	f000 fdfb 	bl	8002510 <printTerminalInfoModeTraffic1>
		break;
 800191a:	e03f      	b.n	800199c <runNormalMode+0x1b8>
	case YELLOWNORMAL:
		if (counterLedYellow1 > 0)
 800191c:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <runNormalMode+0x274>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	dd3d      	ble.n	80019a0 <runNormalMode+0x1bc>
		{
			counterLedYellow1--;
 8001924:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <runNormalMode+0x274>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	4a4b      	ldr	r2, [pc, #300]	; (8001a58 <runNormalMode+0x274>)
 800192c:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <runNormalMode+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	dc24      	bgt.n	8001980 <runNormalMode+0x19c>
			{
				counterLedRed1 = durationLedRed;
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <runNormalMode+0x258>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a41      	ldr	r2, [pc, #260]	; (8001a40 <runNormalMode+0x25c>)
 800193c:	6013      	str	r3, [r2, #0]
				statusTraffic1 = REDNORMAL;
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <runNormalMode+0x254>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <runNormalMode+0x268>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <runNormalMode+0x254>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d10b      	bne.n	8001968 <runNormalMode+0x184>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001950:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <runNormalMode+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	dd03      	ble.n	8001960 <runNormalMode+0x17c>
 8001958:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <runNormalMode+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3b01      	subs	r3, #1
 800195e:	e001      	b.n	8001964 <runNormalMode+0x180>
 8001960:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <runNormalMode+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a3a      	ldr	r2, [pc, #232]	; (8001a50 <runNormalMode+0x26c>)
 8001966:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8001968:	f7ff fbcc 	bl	8001104 <ledWalkOperationNormalMode>
				onSingleRedTraffic1();
 800196c:	f7ff fb84 	bl	8001078 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001970:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <runNormalMode+0x25c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fb1f 	bl	8000fb8 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800197a:	f000 fdc9 	bl	8002510 <printTerminalInfoModeTraffic1>
				onSingleYellowTraffic1();
				update7SEGBufferTraffic1(counterLedYellow1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 800197e:	e00f      	b.n	80019a0 <runNormalMode+0x1bc>
				onSingleYellowTraffic1();
 8001980:	f7ff fb82 	bl	8001088 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <runNormalMode+0x274>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fb15 	bl	8000fb8 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 800198e:	f000 fdbf 	bl	8002510 <printTerminalInfoModeTraffic1>
		break;
 8001992:	e005      	b.n	80019a0 <runNormalMode+0x1bc>
	default:
		break;
 8001994:	bf00      	nop
 8001996:	e004      	b.n	80019a2 <runNormalMode+0x1be>
		break;
 8001998:	bf00      	nop
 800199a:	e002      	b.n	80019a2 <runNormalMode+0x1be>
		break;
 800199c:	bf00      	nop
 800199e:	e000      	b.n	80019a2 <runNormalMode+0x1be>
		break;
 80019a0:	bf00      	nop
	}
	switch (statusTraffic2)
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <runNormalMode+0x278>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	f200 80ae 	bhi.w	8001b08 <runNormalMode+0x324>
 80019ac:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <runNormalMode+0x1d0>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	08001ab9 	.word	0x08001ab9
 80019bc:	080019e7 	.word	0x080019e7
 80019c0:	08001a69 	.word	0x08001a69
	{
	case INITNORMAL:
		statusTraffic2 = GREENNORMAL;
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <runNormalMode+0x278>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <runNormalMode+0x260>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a24      	ldr	r2, [pc, #144]	; (8001a60 <runNormalMode+0x27c>)
 80019d0:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 80019d2:	f7ff fb79 	bl	80010c8 <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <runNormalMode+0x27c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff faf8 	bl	8000fd0 <update7SEGBufferTraffic2>
		printTerminalInfoTraffic2();
 80019e0:	f000 fd54 	bl	800248c <printTerminalInfoTraffic2>
		break;
 80019e4:	e097      	b.n	8001b16 <runNormalMode+0x332>
	case GREENNORMAL:
		if (counterLedGreen2 > 0)
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <runNormalMode+0x27c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f340 808e 	ble.w	8001b0c <runNormalMode+0x328>
		{
			counterLedGreen2--;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <runNormalMode+0x27c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <runNormalMode+0x27c>)
 80019f8:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <runNormalMode+0x27c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	dc10      	bgt.n	8001a24 <runNormalMode+0x240>
			{
				counterLedYellow2 = durationLedYellow;
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <runNormalMode+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <runNormalMode+0x280>)
 8001a08:	6013      	str	r3, [r2, #0]
				statusTraffic2 = YELLOWNORMAL;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <runNormalMode+0x278>)
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	601a      	str	r2, [r3, #0]
				onSingleYellowTraffic2();
 8001a10:	f7ff fb52 	bl	80010b8 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <runNormalMode+0x280>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fad9 	bl	8000fd0 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001a1e:	f000 fd35 	bl	800248c <printTerminalInfoTraffic2>
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 8001a22:	e073      	b.n	8001b0c <runNormalMode+0x328>
				onSingleGreenTraffic2();
 8001a24:	f7ff fb50 	bl	80010c8 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <runNormalMode+0x27c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff facf 	bl	8000fd0 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001a32:	f000 fd2b 	bl	800248c <printTerminalInfoTraffic2>
		break;
 8001a36:	e069      	b.n	8001b0c <runNormalMode+0x328>
 8001a38:	20000480 	.word	0x20000480
 8001a3c:	2000005c 	.word	0x2000005c
 8001a40:	20000488 	.word	0x20000488
 8001a44:	20000060 	.word	0x20000060
 8001a48:	20000490 	.word	0x20000490
 8001a4c:	200003e8 	.word	0x200003e8
 8001a50:	200003e4 	.word	0x200003e4
 8001a54:	20000064 	.word	0x20000064
 8001a58:	20000498 	.word	0x20000498
 8001a5c:	20000484 	.word	0x20000484
 8001a60:	20000494 	.word	0x20000494
 8001a64:	2000049c 	.word	0x2000049c
	case YELLOWNORMAL:
		if (counterLedYellow2 > 0)
 8001a68:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <runNormalMode+0x338>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd4f      	ble.n	8001b10 <runNormalMode+0x32c>
		{
			counterLedYellow2--;
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <runNormalMode+0x338>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <runNormalMode+0x338>)
 8001a78:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <runNormalMode+0x338>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dc10      	bgt.n	8001aa4 <runNormalMode+0x2c0>
			{
				counterLedRed2 = durationLedRed;
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <runNormalMode+0x33c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a27      	ldr	r2, [pc, #156]	; (8001b24 <runNormalMode+0x340>)
 8001a88:	6013      	str	r3, [r2, #0]
				statusTraffic2 = REDNORMAL;
 8001a8a:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <runNormalMode+0x344>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 8001a90:	f7ff fb0a 	bl	80010a8 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <runNormalMode+0x340>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa99 	bl	8000fd0 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001a9e:	f000 fcf5 	bl	800248c <printTerminalInfoTraffic2>
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 8001aa2:	e035      	b.n	8001b10 <runNormalMode+0x32c>
				onSingleYellowTraffic2();
 8001aa4:	f7ff fb08 	bl	80010b8 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <runNormalMode+0x338>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fa8f 	bl	8000fd0 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001ab2:	f000 fceb 	bl	800248c <printTerminalInfoTraffic2>
		break;
 8001ab6:	e02b      	b.n	8001b10 <runNormalMode+0x32c>
	case REDNORMAL:
		if (counterLedRed2 > 0)
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <runNormalMode+0x340>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	dd29      	ble.n	8001b14 <runNormalMode+0x330>
		{
			counterLedRed2--;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <runNormalMode+0x340>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <runNormalMode+0x340>)
 8001ac8:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <runNormalMode+0x340>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dc10      	bgt.n	8001af4 <runNormalMode+0x310>
			{
				counterLedGreen2 = durationLedGreen;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <runNormalMode+0x348>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <runNormalMode+0x34c>)
 8001ad8:	6013      	str	r3, [r2, #0]
				statusTraffic2 = GREENNORMAL;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <runNormalMode+0x344>)
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 8001ae0:	f7ff faf2 	bl	80010c8 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <runNormalMode+0x34c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fa71 	bl	8000fd0 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001aee:	f000 fccd 	bl	800248c <printTerminalInfoTraffic2>
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 8001af2:	e00f      	b.n	8001b14 <runNormalMode+0x330>
				onSingleRedTraffic2();
 8001af4:	f7ff fad8 	bl	80010a8 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <runNormalMode+0x340>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fa67 	bl	8000fd0 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001b02:	f000 fcc3 	bl	800248c <printTerminalInfoTraffic2>
		break;
 8001b06:	e005      	b.n	8001b14 <runNormalMode+0x330>
	default:
		break;
 8001b08:	bf00      	nop
 8001b0a:	e004      	b.n	8001b16 <runNormalMode+0x332>
		break;
 8001b0c:	bf00      	nop
 8001b0e:	e002      	b.n	8001b16 <runNormalMode+0x332>
		break;
 8001b10:	bf00      	nop
 8001b12:	e000      	b.n	8001b16 <runNormalMode+0x332>
		break;
 8001b14:	bf00      	nop
	}
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000049c 	.word	0x2000049c
 8001b20:	2000005c 	.word	0x2000005c
 8001b24:	2000048c 	.word	0x2000048c
 8001b28:	20000484 	.word	0x20000484
 8001b2c:	20000060 	.word	0x20000060
 8001b30:	20000494 	.word	0x20000494

08001b34 <beginNormalMode>:

void beginNormalMode()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <beginNormalMode+0x3c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
	offSingleRedGreenWalk();
 8001b3e:	f7ff facb 	bl	80010d8 <offSingleRedGreenWalk>
	offAllSingLEDs();
 8001b42:	f7ff fa81 	bl	8001048 <offAllSingLEDs>
	update7SEGBufferMode(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fa4e 	bl	8000fe8 <update7SEGBufferMode>
	initStatusNormalMode();
 8001b4c:	f7ff fe38 	bl	80017c0 <initStatusNormalMode>
	runNormalMode();
 8001b50:	f7ff fe48 	bl	80017e4 <runNormalMode>
//	setTimer2(100);
	SCH_Delete_ID(2);
 8001b54:	2002      	movs	r0, #2
 8001b56:	f7fe fe25 	bl	80007a4 <SCH_Delete_ID>
	SCH_Add_Task(task2, 1000, 1000, 2);
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <beginNormalMode+0x40>)
 8001b66:	f7fe fccf 	bl	8000508 <SCH_Add_Task>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200003e4 	.word	0x200003e4
 8001b74:	08000a01 	.word	0x08000a01

08001b78 <beginWalkNormalMode>:

void beginWalkNormalMode()
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
	numberFreq= 3;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <beginWalkNormalMode+0x1c>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusTraffic1;
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <beginWalkNormalMode+0x20>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <beginWalkNormalMode+0x24>)
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	200003e4 	.word	0x200003e4
 8001b98:	20000480 	.word	0x20000480
 8001b9c:	200003e8 	.word	0x200003e8

08001ba0 <controlSingleLedTraffic>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLedTraffic(int orderTraffic, int statusLed)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d003      	beq.n	8001bb8 <controlSingleLedTraffic+0x18>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b09      	cmp	r3, #9
 8001bb4:	d077      	beq.n	8001ca6 <controlSingleLedTraffic+0x106>
		default:
			break;
		}
		break;
	default:
		break;
 8001bb6:	e0ee      	b.n	8001d96 <controlSingleLedTraffic+0x1f6>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b07      	cmp	r3, #7
 8001bbc:	d871      	bhi.n	8001ca2 <controlSingleLedTraffic+0x102>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <controlSingleLedTraffic+0x24>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001be5 	.word	0x08001be5
 8001bc8:	08001c05 	.word	0x08001c05
 8001bcc:	08001c25 	.word	0x08001c25
 8001bd0:	08001c45 	.word	0x08001c45
 8001bd4:	08001c59 	.word	0x08001c59
 8001bd8:	08001c4f 	.word	0x08001c4f
 8001bdc:	08001c63 	.word	0x08001c63
 8001be0:	08001c83 	.word	0x08001c83
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2101      	movs	r1, #1
 8001be8:	486d      	ldr	r0, [pc, #436]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001bea:	f001 f8f3 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	486b      	ldr	r0, [pc, #428]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001bf4:	f001 f8ee 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	4868      	ldr	r0, [pc, #416]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001bfe:	f001 f8e9 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001c02:	e04f      	b.n	8001ca4 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2101      	movs	r1, #1
 8001c08:	4865      	ldr	r0, [pc, #404]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c0a:	f001 f8e3 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2104      	movs	r1, #4
 8001c12:	4863      	ldr	r0, [pc, #396]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c14:	f001 f8de 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	4860      	ldr	r0, [pc, #384]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c1e:	f001 f8d9 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001c22:	e03f      	b.n	8001ca4 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2101      	movs	r1, #1
 8001c28:	485d      	ldr	r0, [pc, #372]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c2a:	f001 f8d3 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2104      	movs	r1, #4
 8001c32:	485b      	ldr	r0, [pc, #364]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c34:	f001 f8ce 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	4858      	ldr	r0, [pc, #352]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c3e:	f001 f8c9 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001c42:	e02f      	b.n	8001ca4 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8001c44:	2101      	movs	r1, #1
 8001c46:	4856      	ldr	r0, [pc, #344]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c48:	f001 f8dd 	bl	8002e06 <HAL_GPIO_TogglePin>
			break;
 8001c4c:	e02a      	b.n	8001ca4 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001c4e:	2104      	movs	r1, #4
 8001c50:	4853      	ldr	r0, [pc, #332]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c52:	f001 f8d8 	bl	8002e06 <HAL_GPIO_TogglePin>
			break;
 8001c56:	e025      	b.n	8001ca4 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4851      	ldr	r0, [pc, #324]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c5c:	f001 f8d3 	bl	8002e06 <HAL_GPIO_TogglePin>
			break;
 8001c60:	e020      	b.n	8001ca4 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2101      	movs	r1, #1
 8001c66:	484e      	ldr	r0, [pc, #312]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c68:	f001 f8b4 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2104      	movs	r1, #4
 8001c70:	484b      	ldr	r0, [pc, #300]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c72:	f001 f8af 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4849      	ldr	r0, [pc, #292]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c7c:	f001 f8aa 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001c80:	e010      	b.n	8001ca4 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	2101      	movs	r1, #1
 8001c86:	4846      	ldr	r0, [pc, #280]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c88:	f001 f8a4 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4843      	ldr	r0, [pc, #268]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c92:	f001 f89f 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8001c96:	2201      	movs	r2, #1
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4841      	ldr	r0, [pc, #260]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001c9c:	f001 f89a 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001ca0:	e000      	b.n	8001ca4 <controlSingleLedTraffic+0x104>
			break;
 8001ca2:	bf00      	nop
		break;
 8001ca4:	e077      	b.n	8001d96 <controlSingleLedTraffic+0x1f6>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d872      	bhi.n	8001d92 <controlSingleLedTraffic+0x1f2>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <controlSingleLedTraffic+0x114>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001cd5 	.word	0x08001cd5
 8001cb8:	08001cf5 	.word	0x08001cf5
 8001cbc:	08001d15 	.word	0x08001d15
 8001cc0:	08001d35 	.word	0x08001d35
 8001cc4:	08001d49 	.word	0x08001d49
 8001cc8:	08001d3f 	.word	0x08001d3f
 8001ccc:	08001d53 	.word	0x08001d53
 8001cd0:	08001d73 	.word	0x08001d73
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2108      	movs	r1, #8
 8001cd8:	4831      	ldr	r0, [pc, #196]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001cda:	f001 f87b 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	482f      	ldr	r0, [pc, #188]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001ce4:	f001 f876 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2110      	movs	r1, #16
 8001cec:	482c      	ldr	r0, [pc, #176]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001cee:	f001 f871 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001cf2:	e04f      	b.n	8001d94 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2108      	movs	r1, #8
 8001cf8:	4829      	ldr	r0, [pc, #164]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001cfa:	f001 f86b 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2120      	movs	r1, #32
 8001d02:	4827      	ldr	r0, [pc, #156]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d04:	f001 f866 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4824      	ldr	r0, [pc, #144]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d0e:	f001 f861 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001d12:	e03f      	b.n	8001d94 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2108      	movs	r1, #8
 8001d18:	4821      	ldr	r0, [pc, #132]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d1a:	f001 f85b 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	2120      	movs	r1, #32
 8001d22:	481f      	ldr	r0, [pc, #124]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d24:	f001 f856 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2110      	movs	r1, #16
 8001d2c:	481c      	ldr	r0, [pc, #112]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d2e:	f001 f851 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001d32:	e02f      	b.n	8001d94 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8001d34:	2108      	movs	r1, #8
 8001d36:	481a      	ldr	r0, [pc, #104]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d38:	f001 f865 	bl	8002e06 <HAL_GPIO_TogglePin>
			break;
 8001d3c:	e02a      	b.n	8001d94 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001d3e:	2120      	movs	r1, #32
 8001d40:	4817      	ldr	r0, [pc, #92]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d42:	f001 f860 	bl	8002e06 <HAL_GPIO_TogglePin>
			break;
 8001d46:	e025      	b.n	8001d94 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001d48:	2110      	movs	r1, #16
 8001d4a:	4815      	ldr	r0, [pc, #84]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d4c:	f001 f85b 	bl	8002e06 <HAL_GPIO_TogglePin>
			break;
 8001d50:	e020      	b.n	8001d94 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2108      	movs	r1, #8
 8001d56:	4812      	ldr	r0, [pc, #72]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d58:	f001 f83c 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2120      	movs	r1, #32
 8001d60:	480f      	ldr	r0, [pc, #60]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d62:	f001 f837 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2110      	movs	r1, #16
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d6c:	f001 f832 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001d70:	e010      	b.n	8001d94 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	2108      	movs	r1, #8
 8001d76:	480a      	ldr	r0, [pc, #40]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d78:	f001 f82c 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2120      	movs	r1, #32
 8001d80:	4807      	ldr	r0, [pc, #28]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d82:	f001 f827 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2110      	movs	r1, #16
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <controlSingleLedTraffic+0x200>)
 8001d8c:	f001 f822 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001d90:	e000      	b.n	8001d94 <controlSingleLedTraffic+0x1f4>
			break;
 8001d92:	bf00      	nop
		break;
 8001d94:	bf00      	nop
	}
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40020400 	.word	0x40020400

08001da4 <controlSingleLedWalk>:

void controlSingleLedWalk(int statusLed)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	switch (statusLed)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d022      	beq.n	8001df8 <controlSingleLedWalk+0x54>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	dc2c      	bgt.n	8001e12 <controlSingleLedWalk+0x6e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	d00f      	beq.n	8001dde <controlSingleLedWalk+0x3a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0b      	cmp	r3, #11
 8001dc2:	d126      	bne.n	8001e12 <controlSingleLedWalk+0x6e>
	{
		case ONGREENOFFREDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dca:	4814      	ldr	r0, [pc, #80]	; (8001e1c <controlSingleLedWalk+0x78>)
 8001dcc:	f001 f802 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd6:	4811      	ldr	r0, [pc, #68]	; (8001e1c <controlSingleLedWalk+0x78>)
 8001dd8:	f000 fffc 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001ddc:	e01a      	b.n	8001e14 <controlSingleLedWalk+0x70>
		case OFFLEDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	480d      	ldr	r0, [pc, #52]	; (8001e1c <controlSingleLedWalk+0x78>)
 8001de6:	f000 fff5 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df0:	480a      	ldr	r0, [pc, #40]	; (8001e1c <controlSingleLedWalk+0x78>)
 8001df2:	f000 ffef 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001df6:	e00d      	b.n	8001e14 <controlSingleLedWalk+0x70>
		case ONREDOFFGREENWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <controlSingleLedWalk+0x78>)
 8001e00:	f000 ffe8 	bl	8002dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0a:	4804      	ldr	r0, [pc, #16]	; (8001e1c <controlSingleLedWalk+0x78>)
 8001e0c:	f000 ffe2 	bl	8002dd4 <HAL_GPIO_WritePin>
			break;
 8001e10:	e000      	b.n	8001e14 <controlSingleLedWalk+0x70>
		default:
			break;
 8001e12:	bf00      	nop
	}
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020c00 	.word	0x40020c00

08001e20 <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <runTimer+0x90>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	dd0b      	ble.n	8001e44 <runTimer+0x24>
	{
		counter1--;
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <runTimer+0x90>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <runTimer+0x90>)
 8001e34:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <runTimer+0x90>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	dc02      	bgt.n	8001e44 <runTimer+0x24>
		{
			flag1 = 1;
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <runTimer+0x94>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <runTimer+0x98>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	dd0b      	ble.n	8001e64 <runTimer+0x44>
	{
		counter2--;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <runTimer+0x98>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <runTimer+0x98>)
 8001e54:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <runTimer+0x98>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dc02      	bgt.n	8001e64 <runTimer+0x44>
		{
			flag2 = 1;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <runTimer+0x9c>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <runTimer+0xa0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dd0b      	ble.n	8001e84 <runTimer+0x64>
	{
		counter3--;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <runTimer+0xa0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <runTimer+0xa0>)
 8001e74:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <runTimer+0xa0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	dc02      	bgt.n	8001e84 <runTimer+0x64>
		{
			flag3 = 1;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <runTimer+0xa4>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <runTimer+0xa8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	dd0b      	ble.n	8001ea4 <runTimer+0x84>
	{
		counter4--;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <runTimer+0xa8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <runTimer+0xa8>)
 8001e94:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <runTimer+0xa8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	dc02      	bgt.n	8001ea4 <runTimer+0x84>
		{
			flag4 = 1;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <runTimer+0xac>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200004a0 	.word	0x200004a0
 8001eb4:	200004a4 	.word	0x200004a4
 8001eb8:	200004a8 	.word	0x200004a8
 8001ebc:	200004ac 	.word	0x200004ac
 8001ec0:	200004b0 	.word	0x200004b0
 8001ec4:	200004b4 	.word	0x200004b4
 8001ec8:	200004b8 	.word	0x200004b8
 8001ecc:	200004bc 	.word	0x200004bc

08001ed0 <setTimer1>:

void setTimer1(int duration)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	counter1 = duration;
 8001ed8:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <setTimer1+0x20>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <setTimer1+0x24>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	200004a0 	.word	0x200004a0
 8001ef4:	200004a4 	.word	0x200004a4

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800

08001f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d116      	bne.n	8001f88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_TIM_Base_MspInit+0x80>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_TIM_Base_MspInit+0x80>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_TIM_Base_MspInit+0x80>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	201c      	movs	r0, #28
 8001f7c:	f000 fcad 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f80:	201c      	movs	r0, #28
 8001f82:	f000 fcc6 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f86:	e01a      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_TIM_Base_MspInit+0x84>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d115      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_TIM_Base_MspInit+0x80>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <HAL_TIM_Base_MspInit+0x80>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_TIM_Base_MspInit+0x80>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	201d      	movs	r0, #29
 8001fb4:	f000 fc91 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fb8:	201d      	movs	r0, #29
 8001fba:	f000 fcaa 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40000400 	.word	0x40000400

08001fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_TIM_MspPostInit+0x68>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d11d      	bne.n	800202e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_TIM_MspPostInit+0x6c>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_TIM_MspPostInit+0x6c>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_TIM_MspPostInit+0x6c>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800201e:	2302      	movs	r3, #2
 8002020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_TIM_MspPostInit+0x70>)
 800202a:	f000 fd1f 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40000400 	.word	0x40000400
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_UART_MspInit+0x94>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d133      	bne.n	80020ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_UART_MspInit+0x98>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_UART_MspInit+0x98>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_UART_MspInit+0x98>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ae:	2307      	movs	r3, #7
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <HAL_UART_MspInit+0x9c>)
 80020ba:	f000 fcd7 	bl	8002a6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2025      	movs	r0, #37	; 0x25
 80020c4:	f000 fc09 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f000 fc22 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 fad8 	bl	80026e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM2_IRQHandler+0x10>)
 800213e:	f001 fcb7 	bl	8003ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200003ec 	.word	0x200003ec

0800214c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM3_IRQHandler+0x10>)
 8002152:	f001 fcad 	bl	8003ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000434 	.word	0x20000434

08002160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <USART1_IRQHandler+0x10>)
 8002166:	f002 fbdd 	bl	8004924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200004c4 	.word	0x200004c4

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <runTuningMode>:
#define GREENTUNING 3

int statusTuningMode= INITMODE;

void runTuningMode()
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <runTuningMode+0xb4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d84b      	bhi.n	800223c <runTuningMode+0xa4>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <runTuningMode+0x14>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021bd 	.word	0x080021bd
 80021b0:	080021dd 	.word	0x080021dd
 80021b4:	080021fd 	.word	0x080021fd
 80021b8:	0800221d 	.word	0x0800221d
    {
        case INITMODE:
            statusTuningMode= REDTUNING;
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <runTuningMode+0xb4>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 80021c2:	f7fe ff41 	bl	8001048 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <runTuningMode+0xb8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fef4 	bl	8000fb8 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <runTuningMode+0xb8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fefb 	bl	8000fd0 <update7SEGBufferTraffic2>
            break;
 80021da:	e030      	b.n	800223e <runTuningMode+0xa6>
        case REDTUNING:
            statusTuningMode= YELLOWTUNING;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <runTuningMode+0xb4>)
 80021de:	2202      	movs	r2, #2
 80021e0:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 80021e2:	f7fe ff31 	bl	8001048 <offAllSingLEDs>
            // blinkingYELLOW();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedYellow);
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <runTuningMode+0xbc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fee4 	bl	8000fb8 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedYellow);
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <runTuningMode+0xbc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe feeb 	bl	8000fd0 <update7SEGBufferTraffic2>
            break;
 80021fa:	e020      	b.n	800223e <runTuningMode+0xa6>
        case YELLOWTUNING:
            statusTuningMode= GREENTUNING;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <runTuningMode+0xb4>)
 80021fe:	2203      	movs	r2, #3
 8002200:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8002202:	f7fe ff21 	bl	8001048 <offAllSingLEDs>
            // blinkingGREEN();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedGreen);
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <runTuningMode+0xc0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fed4 	bl	8000fb8 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedGreen);
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <runTuningMode+0xc0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fedb 	bl	8000fd0 <update7SEGBufferTraffic2>
            break;
 800221a:	e010      	b.n	800223e <runTuningMode+0xa6>
        case GREENTUNING:
            statusTuningMode= REDTUNING;
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <runTuningMode+0xb4>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8002222:	f7fe ff11 	bl	8001048 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <runTuningMode+0xb8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fec4 	bl	8000fb8 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <runTuningMode+0xb8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fecb 	bl	8000fd0 <update7SEGBufferTraffic2>
            break;
 800223a:	e000      	b.n	800223e <runTuningMode+0xa6>
        default:
            break;
 800223c:	bf00      	nop
    }
    printTerminalInfoModeTraffic1();
 800223e:	f000 f967 	bl	8002510 <printTerminalInfoModeTraffic1>
    printTerminalInfoTraffic2();
 8002242:	f000 f923 	bl	800248c <printTerminalInfoTraffic2>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200004c0 	.word	0x200004c0
 8002250:	2000005c 	.word	0x2000005c
 8002254:	20000064 	.word	0x20000064
 8002258:	20000060 	.word	0x20000060

0800225c <initStatusTuningMode>:

void initStatusTuningMode()
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
    statusTuningMode= INITMODE;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <initStatusTuningMode+0x14>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	200004c0 	.word	0x200004c0

08002274 <beginTuningMode>:

void beginTuningMode()
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <beginTuningMode+0x20>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    offSingleRedGreenWalk();
 800227e:	f7fe ff2b 	bl	80010d8 <offSingleRedGreenWalk>
    initStatusTuningMode();
 8002282:	f7ff ffeb 	bl	800225c <initStatusTuningMode>
    update7SEGBufferMode(3);
 8002286:	2003      	movs	r0, #3
 8002288:	f7fe feae 	bl	8000fe8 <update7SEGBufferMode>
    runTuningMode();
 800228c:	f7ff ff84 	bl	8002198 <runTuningMode>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200003e4 	.word	0x200003e4

08002298 <modifyTuningMode>:

void modifyTuningMode()
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 800229c:	4b29      	ldr	r3, [pc, #164]	; (8002344 <modifyTuningMode+0xac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d034      	beq.n	800230e <modifyTuningMode+0x76>
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	dc49      	bgt.n	800233c <modifyTuningMode+0xa4>
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d002      	beq.n	80022b2 <modifyTuningMode+0x1a>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d017      	beq.n	80022e0 <modifyTuningMode+0x48>
            }
            update7SEGBufferTraffic1(tempDurationLedGreen);
            update7SEGBufferTraffic2(tempDurationLedGreen);
            break;
        default:
            break;
 80022b0:	e044      	b.n	800233c <modifyTuningMode+0xa4>
            tempDurationLedRed++;
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <modifyTuningMode+0xb0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a23      	ldr	r2, [pc, #140]	; (8002348 <modifyTuningMode+0xb0>)
 80022ba:	6013      	str	r3, [r2, #0]
            if (tempDurationLedRed > 99)
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <modifyTuningMode+0xb0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b63      	cmp	r3, #99	; 0x63
 80022c2:	dd02      	ble.n	80022ca <modifyTuningMode+0x32>
                tempDurationLedRed = 0;
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <modifyTuningMode+0xb0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedRed);
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <modifyTuningMode+0xb0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fe72 	bl	8000fb8 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedRed);
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <modifyTuningMode+0xb0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fe79 	bl	8000fd0 <update7SEGBufferTraffic2>
            break;
 80022de:	e02e      	b.n	800233e <modifyTuningMode+0xa6>
            tempDurationLedYellow++;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <modifyTuningMode+0xb4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4a19      	ldr	r2, [pc, #100]	; (800234c <modifyTuningMode+0xb4>)
 80022e8:	6013      	str	r3, [r2, #0]
            if (tempDurationLedYellow > 99)
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <modifyTuningMode+0xb4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b63      	cmp	r3, #99	; 0x63
 80022f0:	dd02      	ble.n	80022f8 <modifyTuningMode+0x60>
                tempDurationLedYellow = 0;
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <modifyTuningMode+0xb4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedYellow);
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <modifyTuningMode+0xb4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fe5b 	bl	8000fb8 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedYellow);
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <modifyTuningMode+0xb4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fe62 	bl	8000fd0 <update7SEGBufferTraffic2>
            break;
 800230c:	e017      	b.n	800233e <modifyTuningMode+0xa6>
            tempDurationLedGreen++;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <modifyTuningMode+0xb8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <modifyTuningMode+0xb8>)
 8002316:	6013      	str	r3, [r2, #0]
            if (tempDurationLedGreen > 99)
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <modifyTuningMode+0xb8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b63      	cmp	r3, #99	; 0x63
 800231e:	dd02      	ble.n	8002326 <modifyTuningMode+0x8e>
                tempDurationLedGreen = 0;
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <modifyTuningMode+0xb8>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedGreen);
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <modifyTuningMode+0xb8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fe44 	bl	8000fb8 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedGreen);
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <modifyTuningMode+0xb8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fe4b 	bl	8000fd0 <update7SEGBufferTraffic2>
            break;
 800233a:	e000      	b.n	800233e <modifyTuningMode+0xa6>
            break;
 800233c:	bf00      	nop
    }
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200004c0 	.word	0x200004c0
 8002348:	20000050 	.word	0x20000050
 800234c:	20000058 	.word	0x20000058
 8002350:	20000054 	.word	0x20000054

08002354 <saveTuningMode>:

void saveTuningMode()
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
    if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <saveTuningMode+0x88>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <saveTuningMode+0x8c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	441a      	add	r2, r3
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <saveTuningMode+0x90>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d028      	beq.n	80023bc <saveTuningMode+0x68>
    {
        switch (statusTuningMode)
 800236a:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <saveTuningMode+0x94>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d117      	bne.n	80023a2 <saveTuningMode+0x4e>
        {
            case GREENTUNING:
                update7SEGBufferTraffic1(88);
 8002372:	2058      	movs	r0, #88	; 0x58
 8002374:	f7fe fe20 	bl	8000fb8 <update7SEGBufferTraffic1>
                update7SEGBufferTraffic2(88);
 8002378:	2058      	movs	r0, #88	; 0x58
 800237a:	f7fe fe29 	bl	8000fd0 <update7SEGBufferTraffic2>
                update7SEGBufferMode(8);
 800237e:	2008      	movs	r0, #8
 8002380:	f7fe fe32 	bl	8000fe8 <update7SEGBufferMode>
                onAllSingLEDs();
 8002384:	f7fe fe6c 	bl	8001060 <onAllSingLEDs>
                tempDurationLedGreen = durationLedGreen;
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <saveTuningMode+0x98>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <saveTuningMode+0x8c>)
 800238e:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <saveTuningMode+0x9c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a13      	ldr	r2, [pc, #76]	; (80023e4 <saveTuningMode+0x90>)
 8002396:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <saveTuningMode+0xa0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <saveTuningMode+0x88>)
 800239e:	6013      	str	r3, [r2, #0]
                break;
 80023a0:	e019      	b.n	80023d6 <saveTuningMode+0x82>
            default:
                tempDurationLedGreen = durationLedGreen;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <saveTuningMode+0x98>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <saveTuningMode+0x8c>)
 80023a8:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <saveTuningMode+0x9c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <saveTuningMode+0x90>)
 80023b0:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <saveTuningMode+0xa0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <saveTuningMode+0x88>)
 80023b8:	6013      	str	r3, [r2, #0]
                break;
 80023ba:	e00c      	b.n	80023d6 <saveTuningMode+0x82>
        }
    }
    else
    {
        durationLedGreen = tempDurationLedGreen;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <saveTuningMode+0x8c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <saveTuningMode+0x98>)
 80023c2:	6013      	str	r3, [r2, #0]
        durationLedRed = tempDurationLedRed;
 80023c4:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <saveTuningMode+0x90>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <saveTuningMode+0x9c>)
 80023ca:	6013      	str	r3, [r2, #0]
        durationLedYellow = tempDurationLedYellow;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <saveTuningMode+0x88>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <saveTuningMode+0xa0>)
 80023d2:	6013      	str	r3, [r2, #0]
    }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000058 	.word	0x20000058
 80023e0:	20000054 	.word	0x20000054
 80023e4:	20000050 	.word	0x20000050
 80023e8:	200004c0 	.word	0x200004c0
 80023ec:	20000060 	.word	0x20000060
 80023f0:	2000005c 	.word	0x2000005c
 80023f4:	20000064 	.word	0x20000064

080023f8 <animationTuningMode>:

void animationTuningMode()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <animationTuningMode+0x3c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d814      	bhi.n	800242e <animationTuningMode+0x36>
 8002404:	a201      	add	r2, pc, #4	; (adr r2, 800240c <animationTuningMode+0x14>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	0800242f 	.word	0x0800242f
 8002410:	0800241d 	.word	0x0800241d
 8002414:	08002423 	.word	0x08002423
 8002418:	08002429 	.word	0x08002429
    {
    case INITMODE:
        break;
    case REDTUNING:
        blinkingRED();
 800241c:	f7fe fdfc 	bl	8001018 <blinkingRED>
        break;
 8002420:	e006      	b.n	8002430 <animationTuningMode+0x38>
    case YELLOWTUNING:
        blinkingYELLOW();
 8002422:	f7fe fded 	bl	8001000 <blinkingYELLOW>
        break;
 8002426:	e003      	b.n	8002430 <animationTuningMode+0x38>
    case GREENTUNING:
        blinkingGREEN();
 8002428:	f7fe fe02 	bl	8001030 <blinkingGREEN>
        break;
 800242c:	e000      	b.n	8002430 <animationTuningMode+0x38>
    default:
        break;
 800242e:	bf00      	nop
    }
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200004c0 	.word	0x200004c0

08002438 <MX_USART1_UART_Init>:
#include "deviceDriver7Segment.h"
#include <stdlib.h>
UART_HandleTypeDef huart1;

void MX_USART1_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_USART1_UART_Init+0x48>)
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <MX_USART1_UART_Init+0x4c>)
 8002440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 96000;
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_USART1_UART_Init+0x48>)
 8002444:	4a10      	ldr	r2, [pc, #64]	; (8002488 <MX_USART1_UART_Init+0x50>)
 8002446:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <MX_USART1_UART_Init+0x48>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART1_UART_Init+0x48>)
 8002450:	2200      	movs	r2, #0
 8002452:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <MX_USART1_UART_Init+0x48>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART1_UART_Init+0x48>)
 800245c:	220c      	movs	r2, #12
 800245e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <MX_USART1_UART_Init+0x48>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART1_UART_Init+0x48>)
 8002468:	2200      	movs	r2, #0
 800246a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <MX_USART1_UART_Init+0x48>)
 800246e:	f002 f979 	bl	8004764 <HAL_UART_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002478:	f7ff f8c0 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200004c4 	.word	0x200004c4
 8002484:	40011000 	.word	0x40011000
 8002488:	00017700 	.word	0x00017700

0800248c <printTerminalInfoTraffic2>:

void printTerminalInfoTraffic2()
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 8002492:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <printTerminalInfoTraffic2+0x74>)
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800249c:	6018      	str	r0, [r3, #0]
 800249e:	3304      	adds	r3, #4
 80024a0:	8019      	strh	r1, [r3, #0]
 80024a2:	3302      	adds	r3, #2
 80024a4:	0c0a      	lsrs	r2, r1, #16
 80024a6:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\r";
 80024a8:	4a16      	ldr	r2, [pc, #88]	; (8002504 <printTerminalInfoTraffic2+0x78>)
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	4611      	mov	r1, r2
 80024b2:	8019      	strh	r1, [r3, #0]
 80024b4:	3302      	adds	r3, #2
 80024b6:	0c12      	lsrs	r2, r2, #16
 80024b8:	701a      	strb	r2, [r3, #0]

	char valueTraffic2[10];
	itoa(led_buffer[1], valueTraffic2, 10);
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <printTerminalInfoTraffic2+0x7c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4639      	mov	r1, r7
 80024c0:	220a      	movs	r2, #10
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 f99e 	bl	8005804 <itoa>

	HAL_UART_Transmit(&huart1, str01, sizeof(str01), 1000);
 80024c8:	f107 0110 	add.w	r1, r7, #16
 80024cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d0:	2207      	movs	r2, #7
 80024d2:	480e      	ldr	r0, [pc, #56]	; (800250c <printTerminalInfoTraffic2+0x80>)
 80024d4:	f002 f993 	bl	80047fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueTraffic2, sizeof(valueTraffic2), 1000);
 80024d8:	4639      	mov	r1, r7
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	220a      	movs	r2, #10
 80024e0:	480a      	ldr	r0, [pc, #40]	; (800250c <printTerminalInfoTraffic2+0x80>)
 80024e2:	f002 f98c 	bl	80047fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 80024e6:	f107 010c 	add.w	r1, r7, #12
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	2203      	movs	r2, #3
 80024f0:	4806      	ldr	r0, [pc, #24]	; (800250c <printTerminalInfoTraffic2+0x80>)
 80024f2:	f002 f984 	bl	80047fe <HAL_UART_Transmit>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	080058b4 	.word	0x080058b4
 8002504:	080058bc 	.word	0x080058bc
 8002508:	200003d8 	.word	0x200003d8
 800250c:	200004c4 	.word	0x200004c4

08002510 <printTerminalInfoModeTraffic1>:
void printTerminalInfoModeTraffic1()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 8002516:	4a30      	ldr	r2, [pc, #192]	; (80025d8 <printTerminalInfoModeTraffic1+0xc8>)
 8002518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002520:	6018      	str	r0, [r3, #0]
 8002522:	3304      	adds	r3, #4
 8002524:	8019      	strh	r1, [r3, #0]
 8002526:	3302      	adds	r3, #2
 8002528:	0c0a      	lsrs	r2, r1, #16
 800252a:	701a      	strb	r2, [r3, #0]
	uint8_t str2[]= "!MODE:";
 800252c:	4a2b      	ldr	r2, [pc, #172]	; (80025dc <printTerminalInfoModeTraffic1+0xcc>)
 800252e:	f107 0320 	add.w	r3, r7, #32
 8002532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002536:	6018      	str	r0, [r3, #0]
 8002538:	3304      	adds	r3, #4
 800253a:	8019      	strh	r1, [r3, #0]
 800253c:	3302      	adds	r3, #2
 800253e:	0c0a      	lsrs	r2, r1, #16
 8002540:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\r";
 8002542:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <printTerminalInfoModeTraffic1+0xd0>)
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	4611      	mov	r1, r2
 800254c:	8019      	strh	r1, [r3, #0]
 800254e:	3302      	adds	r3, #2
 8002550:	0c12      	lsrs	r2, r2, #16
 8002552:	701a      	strb	r2, [r3, #0]

	char valueTraffic1[10];
	itoa(led_buffer[0], valueTraffic1, 10);
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <printTerminalInfoModeTraffic1+0xd4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f107 0110 	add.w	r1, r7, #16
 800255c:	220a      	movs	r2, #10
 800255e:	4618      	mov	r0, r3
 8002560:	f003 f950 	bl	8005804 <itoa>

	char valueMode[10];
	itoa(led_buffer[2], valueMode, 10);
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <printTerminalInfoModeTraffic1+0xd4>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	1d39      	adds	r1, r7, #4
 800256a:	220a      	movs	r2, #10
 800256c:	4618      	mov	r0, r3
 800256e:	f003 f949 	bl	8005804 <itoa>

	HAL_UART_Transmit(&huart1, str2, sizeof(str2), 1000);
 8002572:	f107 0120 	add.w	r1, r7, #32
 8002576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257a:	2207      	movs	r2, #7
 800257c:	481a      	ldr	r0, [pc, #104]	; (80025e8 <printTerminalInfoModeTraffic1+0xd8>)
 800257e:	f002 f93e 	bl	80047fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueMode, sizeof(valueMode), 1000);
 8002582:	1d39      	adds	r1, r7, #4
 8002584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002588:	220a      	movs	r2, #10
 800258a:	4817      	ldr	r0, [pc, #92]	; (80025e8 <printTerminalInfoModeTraffic1+0xd8>)
 800258c:	f002 f937 	bl	80047fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 8002590:	f107 011c 	add.w	r1, r7, #28
 8002594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002598:	2203      	movs	r2, #3
 800259a:	4813      	ldr	r0, [pc, #76]	; (80025e8 <printTerminalInfoModeTraffic1+0xd8>)
 800259c:	f002 f92f 	bl	80047fe <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, str01, sizeof(str01), 1000);
 80025a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80025a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a8:	2207      	movs	r2, #7
 80025aa:	480f      	ldr	r0, [pc, #60]	; (80025e8 <printTerminalInfoModeTraffic1+0xd8>)
 80025ac:	f002 f927 	bl	80047fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)valueTraffic1, sizeof(valueTraffic1), 1000);
 80025b0:	f107 0110 	add.w	r1, r7, #16
 80025b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b8:	220a      	movs	r2, #10
 80025ba:	480b      	ldr	r0, [pc, #44]	; (80025e8 <printTerminalInfoModeTraffic1+0xd8>)
 80025bc:	f002 f91f 	bl	80047fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (void*)endline, sizeof(endline), 1000);
 80025c0:	f107 011c 	add.w	r1, r7, #28
 80025c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c8:	2203      	movs	r2, #3
 80025ca:	4807      	ldr	r0, [pc, #28]	; (80025e8 <printTerminalInfoModeTraffic1+0xd8>)
 80025cc:	f002 f917 	bl	80047fe <HAL_UART_Transmit>
}
 80025d0:	bf00      	nop
 80025d2:	3730      	adds	r7, #48	; 0x30
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	080058b4 	.word	0x080058b4
 80025dc:	080058c0 	.word	0x080058c0
 80025e0:	080058bc 	.word	0x080058bc
 80025e4:	200003d8 	.word	0x200003d8
 80025e8:	200004c4 	.word	0x200004c4

080025ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f0:	480d      	ldr	r0, [pc, #52]	; (8002628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025f2:	490e      	ldr	r1, [pc, #56]	; (800262c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002608:	4c0b      	ldr	r4, [pc, #44]	; (8002638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002616:	f7ff fdad 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261a:	f003 f8b7 	bl	800578c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261e:	f7fe fde5 	bl	80011ec <main>
  bx  lr    
 8002622:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800262c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002630:	08005918 	.word	0x08005918
  ldr r2, =_sbss
 8002634:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002638:	2000050c 	.word	0x2000050c

0800263c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC_IRQHandler>
	...

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_Init+0x40>)
 800264a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_Init+0x40>)
 8002656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_Init+0x40>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002668:	2003      	movs	r0, #3
 800266a:	f000 f92b 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266e:	200f      	movs	r0, #15
 8002670:	f000 f808 	bl	8002684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002674:	f7ff fc40 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x54>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x58>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	fbb3 f3f1 	udiv	r3, r3, r1
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f943 	bl	800292e <HAL_SYSTICK_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00e      	b.n	80026d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d80a      	bhi.n	80026ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f000 f90b 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_InitTick+0x5c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000068 	.word	0x20000068
 80026dc:	20000074 	.word	0x20000074
 80026e0:	20000070 	.word	0x20000070

080026e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x20>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x24>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_IncTick+0x24>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000074 	.word	0x20000074
 8002708:	20000508 	.word	0x20000508

0800270c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000508 	.word	0x20000508

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	; (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff29 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff3e 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff8e 	bl	8002818 <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5d 	bl	80027c4 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff31 	bl	8002788 <__NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffa2 	bl	8002880 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff feda 	bl	800270c <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d008      	beq.n	8002978 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e052      	b.n	8002a1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0216 	bic.w	r2, r2, #22
 8002986:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002996:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <HAL_DMA_Abort+0x62>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0208 	bic.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c8:	e013      	b.n	80029f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ca:	f7ff fe9f 	bl	800270c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d90c      	bls.n	80029f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2203      	movs	r2, #3
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e015      	b.n	8002a1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e4      	bne.n	80029ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	223f      	movs	r2, #63	; 0x3f
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d004      	beq.n	8002a44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e00c      	b.n	8002a5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2205      	movs	r2, #5
 8002a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e16b      	b.n	8002d60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 815a 	bne.w	8002d5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d005      	beq.n	8002abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d130      	bne.n	8002b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0201 	and.w	r2, r3, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d017      	beq.n	8002b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d123      	bne.n	8002bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80b4 	beq.w	8002d5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a5f      	ldr	r2, [pc, #380]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0e:	4a5b      	ldr	r2, [pc, #364]	; (8002d7c <HAL_GPIO_Init+0x310>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_GPIO_Init+0x314>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02b      	beq.n	8002c92 <HAL_GPIO_Init+0x226>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x318>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d025      	beq.n	8002c8e <HAL_GPIO_Init+0x222>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x31c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01f      	beq.n	8002c8a <HAL_GPIO_Init+0x21e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x320>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x21a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x216>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_GPIO_Init+0x328>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x212>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_GPIO_Init+0x32c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_GPIO_Init+0x330>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x20a>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e00e      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c76:	2308      	movs	r3, #8
 8002c78:	e00c      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	e00a      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c7e:	2305      	movs	r3, #5
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x310>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd6:	4a32      	ldr	r2, [pc, #200]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f ae90 	bls.w	8002a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40021400 	.word	0x40021400
 8002d98:	40021800 	.word	0x40021800
 8002d9c:	40021c00 	.word	0x40021c00
 8002da0:	40013c00 	.word	0x40013c00

08002da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e001      	b.n	8002dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
 8002de0:	4613      	mov	r3, r2
 8002de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de4:	787b      	ldrb	r3, [r7, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df0:	e003      	b.n	8002dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	041a      	lsls	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	619a      	str	r2, [r3, #24]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e18:	887a      	ldrh	r2, [r7, #2]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	041a      	lsls	r2, r3, #16
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	400b      	ands	r3, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e267      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d075      	beq.n	8002f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e66:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d112      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4b7e      	ldr	r3, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d05b      	beq.n	8002f44 <HAL_RCC_OscConfig+0x108>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d157      	bne.n	8002f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e242      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x74>
 8002ea2:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a75      	ldr	r2, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e01d      	b.n	8002eec <HAL_RCC_OscConfig+0xb0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x98>
 8002eba:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6f      	ldr	r2, [pc, #444]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6c      	ldr	r2, [pc, #432]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0xb0>
 8002ed4:	4b69      	ldr	r3, [pc, #420]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a68      	ldr	r2, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff fc0a 	bl	800270c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7ff fc06 	bl	800270c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e207      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xc0>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fbf6 	bl	800270c <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f24:	f7ff fbf2 	bl	800270c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1f3      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	4b51      	ldr	r3, [pc, #324]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0xe8>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d063      	beq.n	800301a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f52:	4b4a      	ldr	r3, [pc, #296]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5e:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d11c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6a:	4b44      	ldr	r3, [pc, #272]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x152>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e1c7      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4937      	ldr	r1, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	e03a      	b.n	800301a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fac:	4b34      	ldr	r3, [pc, #208]	; (8003080 <HAL_RCC_OscConfig+0x244>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7ff fbab 	bl	800270c <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fba:	f7ff fba7 	bl	800270c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e1a8      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4925      	ldr	r1, [pc, #148]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
 8002fec:	e015      	b.n	800301a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_OscConfig+0x244>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7ff fb8a 	bl	800270c <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffc:	f7ff fb86 	bl	800270c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e187      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d036      	beq.n	8003094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_RCC_OscConfig+0x248>)
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7ff fb6a 	bl	800270c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303c:	f7ff fb66 	bl	800270c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e167      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_OscConfig+0x240>)
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x200>
 800305a:	e01b      	b.n	8003094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_OscConfig+0x248>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7ff fb53 	bl	800270c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	e00e      	b.n	8003088 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306a:	f7ff fb4f 	bl	800270c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d907      	bls.n	8003088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e150      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
 800307c:	40023800 	.word	0x40023800
 8003080:	42470000 	.word	0x42470000
 8003084:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800308a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ea      	bne.n	800306a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8097 	beq.w	80031d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a6:	4b81      	ldr	r3, [pc, #516]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	4b7d      	ldr	r3, [pc, #500]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a7c      	ldr	r2, [pc, #496]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80030bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ce:	2301      	movs	r3, #1
 80030d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d2:	4b77      	ldr	r3, [pc, #476]	; (80032b0 <HAL_RCC_OscConfig+0x474>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d118      	bne.n	8003110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030de:	4b74      	ldr	r3, [pc, #464]	; (80032b0 <HAL_RCC_OscConfig+0x474>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a73      	ldr	r2, [pc, #460]	; (80032b0 <HAL_RCC_OscConfig+0x474>)
 80030e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ea:	f7ff fb0f 	bl	800270c <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f2:	f7ff fb0b 	bl	800270c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e10c      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <HAL_RCC_OscConfig+0x474>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d106      	bne.n	8003126 <HAL_RCC_OscConfig+0x2ea>
 8003118:	4b64      	ldr	r3, [pc, #400]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4a63      	ldr	r2, [pc, #396]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6713      	str	r3, [r2, #112]	; 0x70
 8003124:	e01c      	b.n	8003160 <HAL_RCC_OscConfig+0x324>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b05      	cmp	r3, #5
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x30c>
 800312e:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a5e      	ldr	r2, [pc, #376]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	4b5c      	ldr	r3, [pc, #368]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a5b      	ldr	r2, [pc, #364]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0x324>
 8003148:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a57      	ldr	r2, [pc, #348]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	4b55      	ldr	r3, [pc, #340]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 800315a:	f023 0304 	bic.w	r3, r3, #4
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d015      	beq.n	8003194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7ff fad0 	bl	800270c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7ff facc 	bl	800270c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0cb      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	4b49      	ldr	r3, [pc, #292]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ee      	beq.n	8003170 <HAL_RCC_OscConfig+0x334>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003194:	f7ff faba 	bl	800270c <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7ff fab6 	bl	800270c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0b5      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1ee      	bne.n	800319c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	4a38      	ldr	r2, [pc, #224]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a1 	beq.w	800331c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d05c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d141      	bne.n	8003272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <HAL_RCC_OscConfig+0x478>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7ff fa8a 	bl	800270c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7ff fa86 	bl	800270c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e087      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	019b      	lsls	r3, r3, #6
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	085b      	lsrs	r3, r3, #1
 8003232:	3b01      	subs	r3, #1
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	491b      	ldr	r1, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x478>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7ff fa5f 	bl	800270c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7ff fa5b 	bl	800270c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e05c      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x416>
 8003270:	e054      	b.n	800331c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_RCC_OscConfig+0x478>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7ff fa48 	bl	800270c <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003280:	f7ff fa44 	bl	800270c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e045      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCC_OscConfig+0x470>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x444>
 800329e:	e03d      	b.n	800331c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e038      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x4ec>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d028      	beq.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d121      	bne.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d11a      	bne.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e8:	4013      	ands	r3, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d111      	bne.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	3b01      	subs	r3, #1
 8003302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d107      	bne.n	8003318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800

0800332c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0cc      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d90c      	bls.n	8003368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0b8      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a58      	ldr	r2, [pc, #352]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800338a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003398:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	494d      	ldr	r1, [pc, #308]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d044      	beq.n	800344c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d119      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e07f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e067      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4934      	ldr	r1, [pc, #208]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341c:	f7ff f976 	bl	800270c <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7ff f972 	bl	800270c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d20c      	bcs.n	8003474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e032      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4916      	ldr	r1, [pc, #88]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	490e      	ldr	r1, [pc, #56]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b2:	f000 f821 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80034b6:	4602      	mov	r2, r0
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	490a      	ldr	r1, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	5ccb      	ldrb	r3, [r1, r3]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff f8d6 	bl	8002684 <HAL_InitTick>

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00
 80034e8:	40023800 	.word	0x40023800
 80034ec:	080058c8 	.word	0x080058c8
 80034f0:	20000068 	.word	0x20000068
 80034f4:	20000070 	.word	0x20000070

080034f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034fc:	b090      	sub	sp, #64	; 0x40
 80034fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	2300      	movs	r3, #0
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d00d      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x40>
 800351c:	2b08      	cmp	r3, #8
 800351e:	f200 80a1 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x16c>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x34>
 8003526:	2b04      	cmp	r3, #4
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x3a>
 800352a:	e09b      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_GetSysClockFreq+0x184>)
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003530:	e09b      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003532:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003536:	e098      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003538:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003542:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d028      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	2200      	movs	r2, #0
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	627a      	str	r2, [r7, #36]	; 0x24
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003560:	2100      	movs	r1, #0
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003564:	fb03 f201 	mul.w	r2, r3, r1
 8003568:	2300      	movs	r3, #0
 800356a:	fb00 f303 	mul.w	r3, r0, r3
 800356e:	4413      	add	r3, r2
 8003570:	4a43      	ldr	r2, [pc, #268]	; (8003680 <HAL_RCC_GetSysClockFreq+0x188>)
 8003572:	fba0 1202 	umull	r1, r2, r0, r2
 8003576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003578:	460a      	mov	r2, r1
 800357a:	62ba      	str	r2, [r7, #40]	; 0x28
 800357c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357e:	4413      	add	r3, r2
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	2200      	movs	r2, #0
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	61fa      	str	r2, [r7, #28]
 800358a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003592:	f7fc fe19 	bl	80001c8 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4613      	mov	r3, r2
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359e:	e053      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	2200      	movs	r2, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	617a      	str	r2, [r7, #20]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035b2:	f04f 0b00 	mov.w	fp, #0
 80035b6:	4652      	mov	r2, sl
 80035b8:	465b      	mov	r3, fp
 80035ba:	f04f 0000 	mov.w	r0, #0
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	0159      	lsls	r1, r3, #5
 80035c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c8:	0150      	lsls	r0, r2, #5
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	ebb2 080a 	subs.w	r8, r2, sl
 80035d2:	eb63 090b 	sbc.w	r9, r3, fp
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035ea:	ebb2 0408 	subs.w	r4, r2, r8
 80035ee:	eb63 0509 	sbc.w	r5, r3, r9
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	00eb      	lsls	r3, r5, #3
 80035fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003600:	00e2      	lsls	r2, r4, #3
 8003602:	4614      	mov	r4, r2
 8003604:	461d      	mov	r5, r3
 8003606:	eb14 030a 	adds.w	r3, r4, sl
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	eb45 030b 	adc.w	r3, r5, fp
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361e:	4629      	mov	r1, r5
 8003620:	028b      	lsls	r3, r1, #10
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003628:	4621      	mov	r1, r4
 800362a:	028a      	lsls	r2, r1, #10
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	2200      	movs	r2, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	60fa      	str	r2, [r7, #12]
 8003638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800363c:	f7fc fdc4 	bl	80001c8 <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_GetSysClockFreq+0x180>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	3301      	adds	r3, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003662:	e002      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetSysClockFreq+0x184>)
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800366c:	4618      	mov	r0, r3
 800366e:	3740      	adds	r7, #64	; 0x40
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	00f42400 	.word	0x00f42400
 8003680:	017d7840 	.word	0x017d7840

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000068 	.word	0x20000068

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a9b      	lsrs	r3, r3, #10
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	080058d8 	.word	0x080058d8

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c8:	f7ff ffdc 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0b5b      	lsrs	r3, r3, #13
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4903      	ldr	r1, [pc, #12]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	080058d8 	.word	0x080058d8

080036ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e041      	b.n	8003782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fc18 	bl	8001f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f000 fc7a 	bl	8004024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d001      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e04e      	b.n	8003842 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_TIM_Base_Start_IT+0xc4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d022      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x80>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d01d      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x80>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <HAL_TIM_Base_Start_IT+0xc8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d018      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x80>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_TIM_Base_Start_IT+0xcc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x80>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <HAL_TIM_Base_Start_IT+0xd0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x80>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_TIM_Base_Start_IT+0xd4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_TIM_Base_Start_IT+0xd8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_TIM_Base_Start_IT+0xdc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d111      	bne.n	8003830 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b06      	cmp	r3, #6
 800381c:	d010      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382e:	e007      	b.n	8003840 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40010000 	.word	0x40010000
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	40000c00 	.word	0x40000c00
 8003860:	40010400 	.word	0x40010400
 8003864:	40014000 	.word	0x40014000
 8003868:	40001800 	.word	0x40001800

0800386c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e041      	b.n	8003902 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f839 	bl	800390a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f000 fbba 	bl	8004024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_TIM_PWM_Start+0x24>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e022      	b.n	800398a <HAL_TIM_PWM_Start+0x6a>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d109      	bne.n	800395e <HAL_TIM_PWM_Start+0x3e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e015      	b.n	800398a <HAL_TIM_PWM_Start+0x6a>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d109      	bne.n	8003978 <HAL_TIM_PWM_Start+0x58>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e008      	b.n	800398a <HAL_TIM_PWM_Start+0x6a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07c      	b.n	8003a8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start+0x82>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	e013      	b.n	80039ca <HAL_TIM_PWM_Start+0xaa>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Start+0x92>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	e00b      	b.n	80039ca <HAL_TIM_PWM_Start+0xaa>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0xa2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	e003      	b.n	80039ca <HAL_TIM_PWM_Start+0xaa>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fe10 	bl	80045f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2d      	ldr	r2, [pc, #180]	; (8003a94 <HAL_TIM_PWM_Start+0x174>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_TIM_PWM_Start+0xcc>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <HAL_TIM_PWM_Start+0x178>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_PWM_Start+0xd0>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_TIM_PWM_Start+0xd2>
 80039f0:	2300      	movs	r3, #0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <HAL_TIM_PWM_Start+0x174>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d022      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x136>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d01d      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x136>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <HAL_TIM_PWM_Start+0x17c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x136>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_TIM_PWM_Start+0x180>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x136>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_TIM_PWM_Start+0x184>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x136>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_TIM_PWM_Start+0x178>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x136>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <HAL_TIM_PWM_Start+0x188>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x136>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_TIM_PWM_Start+0x18c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d010      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	e007      	b.n	8003a8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40010400 	.word	0x40010400
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40001800 	.word	0x40001800

08003ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0202 	mvn.w	r2, #2
 8003adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa77 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa69 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fa7a 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0204 	mvn.w	r2, #4
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa4d 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fa3f 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fa50 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0208 	mvn.w	r2, #8
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2204      	movs	r2, #4
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa23 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa15 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fa26 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b10      	cmp	r3, #16
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0210 	mvn.w	r2, #16
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f9f9 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9eb 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f9fc 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0201 	mvn.w	r2, #1
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fcd8 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b80      	cmp	r3, #128	; 0x80
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b80      	cmp	r3, #128	; 0x80
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fd78 	bl	8004750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f9c1 	bl	800400e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d10e      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d107      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0220 	mvn.w	r2, #32
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fd42 	bl	800473c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e0ae      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	f200 809f 	bhi.w	8003e2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003e2d 	.word	0x08003e2d
 8003cfc:	08003e2d 	.word	0x08003e2d
 8003d00:	08003e2d 	.word	0x08003e2d
 8003d04:	08003d69 	.word	0x08003d69
 8003d08:	08003e2d 	.word	0x08003e2d
 8003d0c:	08003e2d 	.word	0x08003e2d
 8003d10:	08003e2d 	.word	0x08003e2d
 8003d14:	08003dab 	.word	0x08003dab
 8003d18:	08003e2d 	.word	0x08003e2d
 8003d1c:	08003e2d 	.word	0x08003e2d
 8003d20:	08003e2d 	.word	0x08003e2d
 8003d24:	08003deb 	.word	0x08003deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fa18 	bl	8004164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6999      	ldr	r1, [r3, #24]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	619a      	str	r2, [r3, #24]
      break;
 8003d66:	e064      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fa68 	bl	8004244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6999      	ldr	r1, [r3, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
      break;
 8003da8:	e043      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fabd 	bl	8004330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0208 	orr.w	r2, r2, #8
 8003dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0204 	bic.w	r2, r2, #4
 8003dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	61da      	str	r2, [r3, #28]
      break;
 8003de8:	e023      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fb11 	bl	8004418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69d9      	ldr	r1, [r3, #28]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	021a      	lsls	r2, r3, #8
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	61da      	str	r2, [r3, #28]
      break;
 8003e2a:	e002      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_ConfigClockSource+0x1c>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0b4      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x186>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e98:	d03e      	beq.n	8003f18 <HAL_TIM_ConfigClockSource+0xd4>
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9e:	f200 8087 	bhi.w	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	f000 8086 	beq.w	8003fb6 <HAL_TIM_ConfigClockSource+0x172>
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d87f      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d01a      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0xa6>
 8003eb4:	2b70      	cmp	r3, #112	; 0x70
 8003eb6:	d87b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d050      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x11a>
 8003ebc:	2b60      	cmp	r3, #96	; 0x60
 8003ebe:	d877      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d03c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xfa>
 8003ec4:	2b50      	cmp	r3, #80	; 0x50
 8003ec6:	d873      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d058      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x13a>
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d86f      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d064      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b30      	cmp	r3, #48	; 0x30
 8003ed6:	d86b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d060      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d867      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d05c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d05a      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ee8:	e062      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f000 fb5d 	bl	80045b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	609a      	str	r2, [r3, #8]
      break;
 8003f16:	e04f      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6899      	ldr	r1, [r3, #8]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f000 fb46 	bl	80045b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f3a:	609a      	str	r2, [r3, #8]
      break;
 8003f3c:	e03c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 faba 	bl	80044c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2150      	movs	r1, #80	; 0x50
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fb13 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e02c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 fad9 	bl	8004522 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2160      	movs	r1, #96	; 0x60
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fb03 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e01c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 fa9a 	bl	80044c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2140      	movs	r1, #64	; 0x40
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 faf3 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e00c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f000 faea 	bl	8004582 <TIM_ITRx_SetConfig>
      break;
 8003fae:	e003      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb4:	e000      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a40      	ldr	r2, [pc, #256]	; (8004138 <TIM_Base_SetConfig+0x114>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d013      	beq.n	8004064 <TIM_Base_SetConfig+0x40>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004042:	d00f      	beq.n	8004064 <TIM_Base_SetConfig+0x40>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3d      	ldr	r2, [pc, #244]	; (800413c <TIM_Base_SetConfig+0x118>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00b      	beq.n	8004064 <TIM_Base_SetConfig+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a3c      	ldr	r2, [pc, #240]	; (8004140 <TIM_Base_SetConfig+0x11c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d007      	beq.n	8004064 <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a3b      	ldr	r2, [pc, #236]	; (8004144 <TIM_Base_SetConfig+0x120>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_Base_SetConfig+0x40>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3a      	ldr	r2, [pc, #232]	; (8004148 <TIM_Base_SetConfig+0x124>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d108      	bne.n	8004076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <TIM_Base_SetConfig+0x114>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02b      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004084:	d027      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2c      	ldr	r2, [pc, #176]	; (800413c <TIM_Base_SetConfig+0x118>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d023      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2b      	ldr	r2, [pc, #172]	; (8004140 <TIM_Base_SetConfig+0x11c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01f      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2a      	ldr	r2, [pc, #168]	; (8004144 <TIM_Base_SetConfig+0x120>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01b      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a29      	ldr	r2, [pc, #164]	; (8004148 <TIM_Base_SetConfig+0x124>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d017      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a28      	ldr	r2, [pc, #160]	; (800414c <TIM_Base_SetConfig+0x128>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a27      	ldr	r2, [pc, #156]	; (8004150 <TIM_Base_SetConfig+0x12c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00f      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a26      	ldr	r2, [pc, #152]	; (8004154 <TIM_Base_SetConfig+0x130>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00b      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a25      	ldr	r2, [pc, #148]	; (8004158 <TIM_Base_SetConfig+0x134>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d007      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a24      	ldr	r2, [pc, #144]	; (800415c <TIM_Base_SetConfig+0x138>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a23      	ldr	r2, [pc, #140]	; (8004160 <TIM_Base_SetConfig+0x13c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d108      	bne.n	80040e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <TIM_Base_SetConfig+0x114>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_Base_SetConfig+0xf8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <TIM_Base_SetConfig+0x124>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d103      	bne.n	8004124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	615a      	str	r2, [r3, #20]
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40010400 	.word	0x40010400
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800
 8004158:	40001800 	.word	0x40001800
 800415c:	40001c00 	.word	0x40001c00
 8004160:	40002000 	.word	0x40002000

08004164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0201 	bic.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f023 0302 	bic.w	r3, r3, #2
 80041ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a20      	ldr	r2, [pc, #128]	; (800423c <TIM_OC1_SetConfig+0xd8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_OC1_SetConfig+0x64>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a1f      	ldr	r2, [pc, #124]	; (8004240 <TIM_OC1_SetConfig+0xdc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d10c      	bne.n	80041e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0308 	bic.w	r3, r3, #8
 80041ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f023 0304 	bic.w	r3, r3, #4
 80041e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a15      	ldr	r2, [pc, #84]	; (800423c <TIM_OC1_SetConfig+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC1_SetConfig+0x8e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a14      	ldr	r2, [pc, #80]	; (8004240 <TIM_OC1_SetConfig+0xdc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d111      	bne.n	8004216 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40010000 	.word	0x40010000
 8004240:	40010400 	.word	0x40010400

08004244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0210 	bic.w	r2, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0320 	bic.w	r3, r3, #32
 800428e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a22      	ldr	r2, [pc, #136]	; (8004328 <TIM_OC2_SetConfig+0xe4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC2_SetConfig+0x68>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a21      	ldr	r2, [pc, #132]	; (800432c <TIM_OC2_SetConfig+0xe8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10d      	bne.n	80042c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <TIM_OC2_SetConfig+0xe4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_OC2_SetConfig+0x94>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <TIM_OC2_SetConfig+0xe8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d113      	bne.n	8004300 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40010400 	.word	0x40010400

08004330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a21      	ldr	r2, [pc, #132]	; (8004410 <TIM_OC3_SetConfig+0xe0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_OC3_SetConfig+0x66>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a20      	ldr	r2, [pc, #128]	; (8004414 <TIM_OC3_SetConfig+0xe4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10d      	bne.n	80043b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800439c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a16      	ldr	r2, [pc, #88]	; (8004410 <TIM_OC3_SetConfig+0xe0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_OC3_SetConfig+0x92>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a15      	ldr	r2, [pc, #84]	; (8004414 <TIM_OC3_SetConfig+0xe4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d113      	bne.n	80043ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40010000 	.word	0x40010000
 8004414:	40010400 	.word	0x40010400

08004418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	031b      	lsls	r3, r3, #12
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a12      	ldr	r2, [pc, #72]	; (80044bc <TIM_OC4_SetConfig+0xa4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_OC4_SetConfig+0x68>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <TIM_OC4_SetConfig+0xa8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d109      	bne.n	8004494 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40010400 	.word	0x40010400

080044c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0201 	bic.w	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 030a 	bic.w	r3, r3, #10
 8004500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f023 0210 	bic.w	r2, r3, #16
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800454c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	031b      	lsls	r3, r3, #12
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800455e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004582:	b480      	push	{r7}
 8004584:	b085      	sub	sp, #20
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	f043 0307 	orr.w	r3, r3, #7
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	431a      	orrs	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	609a      	str	r2, [r3, #8]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2201      	movs	r2, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	43db      	mvns	r3, r3
 800461a:	401a      	ands	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	431a      	orrs	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004658:	2302      	movs	r3, #2
 800465a:	e05a      	b.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a21      	ldr	r2, [pc, #132]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a8:	d01d      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1a      	ldr	r2, [pc, #104]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d10c      	bne.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40010000 	.word	0x40010000
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40010400 	.word	0x40010400
 8004734:	40014000 	.word	0x40014000
 8004738:	40001800 	.word	0x40001800

0800473c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e03f      	b.n	80047f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd fc5a 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	; 0x24
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fd7b 	bl	80052a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08a      	sub	sp, #40	; 0x28
 8004802:	af02      	add	r7, sp, #8
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b20      	cmp	r3, #32
 800481c:	d17c      	bne.n	8004918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_UART_Transmit+0x2c>
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e075      	b.n	800491a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UART_Transmit+0x3e>
 8004838:	2302      	movs	r3, #2
 800483a:	e06e      	b.n	800491a <HAL_UART_Transmit+0x11c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2221      	movs	r2, #33	; 0x21
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004852:	f7fd ff5b 	bl	800270c <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	88fa      	ldrh	r2, [r7, #6]
 800485c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d108      	bne.n	8004880 <HAL_UART_Transmit+0x82>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e003      	b.n	8004888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004890:	e02a      	b.n	80048e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2200      	movs	r2, #0
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 faf9 	bl	8004e94 <UART_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e036      	b.n	800491a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	3302      	adds	r3, #2
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	e007      	b.n	80048da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	3301      	adds	r3, #1
 80048d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1cf      	bne.n	8004892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	2140      	movs	r1, #64	; 0x40
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fac9 	bl	8004e94 <UART_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e006      	b.n	800491a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b0ba      	sub	sp, #232	; 0xe8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800494a:	2300      	movs	r3, #0
 800494c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004950:	2300      	movs	r3, #0
 8004952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800496a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_UART_IRQHandler+0x66>
 8004976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fbd3 	bl	800512e <UART_Receive_IT>
      return;
 8004988:	e256      	b.n	8004e38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800498a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80de 	beq.w	8004b50 <HAL_UART_IRQHandler+0x22c>
 8004994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80d1 	beq.w	8004b50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_UART_IRQHandler+0xae>
 80049ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f043 0201 	orr.w	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_UART_IRQHandler+0xd2>
 80049de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_UART_IRQHandler+0xf6>
 8004a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f043 0204 	orr.w	r2, r3, #4
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d011      	beq.n	8004a4a <HAL_UART_IRQHandler+0x126>
 8004a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d105      	bne.n	8004a3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0208 	orr.w	r2, r3, #8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 81ed 	beq.w	8004e2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_UART_IRQHandler+0x14e>
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fb5e 	bl	800512e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <HAL_UART_IRQHandler+0x17a>
 8004a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04f      	beq.n	8004b3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa66 	bl	8004f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d141      	bne.n	8004b36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1d9      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d013      	beq.n	8004b2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	4a7d      	ldr	r2, [pc, #500]	; (8004d00 <HAL_UART_IRQHandler+0x3dc>)
 8004b0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd ff87 	bl	8002a26 <HAL_DMA_Abort_IT>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b28:	4610      	mov	r0, r2
 8004b2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	e00e      	b.n	8004b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f99a 	bl	8004e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	e00a      	b.n	8004b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f996 	bl	8004e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3c:	e006      	b.n	8004b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f992 	bl	8004e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b4a:	e170      	b.n	8004e2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4c:	bf00      	nop
    return;
 8004b4e:	e16e      	b.n	8004e2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	f040 814a 	bne.w	8004dee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8143 	beq.w	8004dee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 813c 	beq.w	8004dee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	f040 80b4 	bne.w	8004d04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8140 	beq.w	8004e32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	f080 8139 	bcs.w	8004e32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd2:	f000 8088 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	330c      	adds	r3, #12
 8004bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1d9      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3314      	adds	r3, #20
 8004c28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3314      	adds	r3, #20
 8004c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e1      	bne.n	8004c22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3314      	adds	r3, #20
 8004c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e3      	bne.n	8004c5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e3      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fd fe30 	bl	8002946 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8c0 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cfc:	e099      	b.n	8004e32 <HAL_UART_IRQHandler+0x50e>
 8004cfe:	bf00      	nop
 8004d00:	08005037 	.word	0x08005037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 808b 	beq.w	8004e36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8086 	beq.w	8004e36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e3      	bne.n	8004d2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3314      	adds	r3, #20
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	623b      	str	r3, [r7, #32]
   return(result);
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d86:	633a      	str	r2, [r7, #48]	; 0x30
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e3      	bne.n	8004d62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0310 	bic.w	r3, r3, #16
 8004dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004dcc:	61fa      	str	r2, [r7, #28]
 8004dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	69b9      	ldr	r1, [r7, #24]
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e3      	bne.n	8004da8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f848 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dec:	e023      	b.n	8004e36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_UART_IRQHandler+0x4ea>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f929 	bl	800505e <UART_Transmit_IT>
    return;
 8004e0c:	e014      	b.n	8004e38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <HAL_UART_IRQHandler+0x514>
 8004e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f969 	bl	80050fe <UART_EndTransmit_IT>
    return;
 8004e2c:	e004      	b.n	8004e38 <HAL_UART_IRQHandler+0x514>
    return;
 8004e2e:	bf00      	nop
 8004e30:	e002      	b.n	8004e38 <HAL_UART_IRQHandler+0x514>
      return;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <HAL_UART_IRQHandler+0x514>
      return;
 8004e36:	bf00      	nop
  }
}
 8004e38:	37e8      	adds	r7, #232	; 0xe8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop

08004e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b090      	sub	sp, #64	; 0x40
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea4:	e050      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d04c      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb4:	f7fd fc2a 	bl	800270c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d241      	bcs.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ee4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ee6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3314      	adds	r3, #20
 8004efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	613b      	str	r3, [r7, #16]
   return(result);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f18:	623a      	str	r2, [r7, #32]
 8004f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	69f9      	ldr	r1, [r7, #28]
 8004f1e:	6a3a      	ldr	r2, [r7, #32]
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e00f      	b.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d09f      	beq.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3740      	adds	r7, #64	; 0x40
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b095      	sub	sp, #84	; 0x54
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f98:	643a      	str	r2, [r7, #64]	; 0x40
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e5      	bne.n	8004f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3314      	adds	r3, #20
 8004fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e5      	bne.n	8004fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d119      	bne.n	800501c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 0310 	bic.w	r3, r3, #16
 8004ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005008:	61ba      	str	r2, [r7, #24]
 800500a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6979      	ldr	r1, [r7, #20]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	613b      	str	r3, [r7, #16]
   return(result);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800502a:	bf00      	nop
 800502c:	3754      	adds	r7, #84	; 0x54
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7ff ff09 	bl	8004e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b21      	cmp	r3, #33	; 0x21
 8005070:	d13e      	bne.n	80050f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507a:	d114      	bne.n	80050a6 <UART_Transmit_IT+0x48>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d110      	bne.n	80050a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	1c9a      	adds	r2, r3, #2
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	621a      	str	r2, [r3, #32]
 80050a4:	e008      	b.n	80050b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	1c59      	adds	r1, r3, #1
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6211      	str	r1, [r2, #32]
 80050b0:	781a      	ldrb	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4619      	mov	r1, r3
 80050c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10f      	bne.n	80050ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fe8e 	bl	8004e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b08c      	sub	sp, #48	; 0x30
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b22      	cmp	r3, #34	; 0x22
 8005140:	f040 80ab 	bne.w	800529a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514c:	d117      	bne.n	800517e <UART_Receive_IT+0x50>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d113      	bne.n	800517e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	b29b      	uxth	r3, r3
 8005168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516c:	b29a      	uxth	r2, r3
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	1c9a      	adds	r2, r3, #2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28
 800517c:	e026      	b.n	80051cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005184:	2300      	movs	r3, #0
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005190:	d007      	beq.n	80051a2 <UART_Receive_IT+0x74>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <UART_Receive_IT+0x82>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e008      	b.n	80051c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	4619      	mov	r1, r3
 80051da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d15a      	bne.n	8005296 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0220 	bic.w	r2, r2, #32
 80051ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	2b01      	cmp	r3, #1
 800521e:	d135      	bne.n	800528c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	613b      	str	r3, [r7, #16]
   return(result);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f023 0310 	bic.w	r3, r3, #16
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005246:	623a      	str	r2, [r7, #32]
 8005248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	69f9      	ldr	r1, [r7, #28]
 800524c:	6a3a      	ldr	r2, [r7, #32]
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	61bb      	str	r3, [r7, #24]
   return(result);
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e5      	bne.n	8005226 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b10      	cmp	r3, #16
 8005266:	d10a      	bne.n	800527e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff fdf9 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
 800528a:	e002      	b.n	8005292 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fde1 	bl	8004e54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e002      	b.n	800529c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3730      	adds	r7, #48	; 0x30
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a8:	b0c0      	sub	sp, #256	; 0x100
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	68d9      	ldr	r1, [r3, #12]
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	ea40 0301 	orr.w	r3, r0, r1
 80052cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	431a      	orrs	r2, r3
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052fc:	f021 010c 	bic.w	r1, r1, #12
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800530a:	430b      	orrs	r3, r1
 800530c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	6999      	ldr	r1, [r3, #24]
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	ea40 0301 	orr.w	r3, r0, r1
 800532a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b8f      	ldr	r3, [pc, #572]	; (8005570 <UART_SetConfig+0x2cc>)
 8005334:	429a      	cmp	r2, r3
 8005336:	d005      	beq.n	8005344 <UART_SetConfig+0xa0>
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b8d      	ldr	r3, [pc, #564]	; (8005574 <UART_SetConfig+0x2d0>)
 8005340:	429a      	cmp	r2, r3
 8005342:	d104      	bne.n	800534e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005344:	f7fe f9be 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 8005348:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800534c:	e003      	b.n	8005356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800534e:	f7fe f9a5 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8005352:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005360:	f040 810c 	bne.w	800557c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005368:	2200      	movs	r2, #0
 800536a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800536e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005376:	4622      	mov	r2, r4
 8005378:	462b      	mov	r3, r5
 800537a:	1891      	adds	r1, r2, r2
 800537c:	65b9      	str	r1, [r7, #88]	; 0x58
 800537e:	415b      	adcs	r3, r3
 8005380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005386:	4621      	mov	r1, r4
 8005388:	eb12 0801 	adds.w	r8, r2, r1
 800538c:	4629      	mov	r1, r5
 800538e:	eb43 0901 	adc.w	r9, r3, r1
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800539e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053a6:	4690      	mov	r8, r2
 80053a8:	4699      	mov	r9, r3
 80053aa:	4623      	mov	r3, r4
 80053ac:	eb18 0303 	adds.w	r3, r8, r3
 80053b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053b4:	462b      	mov	r3, r5
 80053b6:	eb49 0303 	adc.w	r3, r9, r3
 80053ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053d2:	460b      	mov	r3, r1
 80053d4:	18db      	adds	r3, r3, r3
 80053d6:	653b      	str	r3, [r7, #80]	; 0x50
 80053d8:	4613      	mov	r3, r2
 80053da:	eb42 0303 	adc.w	r3, r2, r3
 80053de:	657b      	str	r3, [r7, #84]	; 0x54
 80053e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053e8:	f7fa feee 	bl	80001c8 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4b61      	ldr	r3, [pc, #388]	; (8005578 <UART_SetConfig+0x2d4>)
 80053f2:	fba3 2302 	umull	r2, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	011c      	lsls	r4, r3, #4
 80053fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005404:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800540c:	4642      	mov	r2, r8
 800540e:	464b      	mov	r3, r9
 8005410:	1891      	adds	r1, r2, r2
 8005412:	64b9      	str	r1, [r7, #72]	; 0x48
 8005414:	415b      	adcs	r3, r3
 8005416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800541c:	4641      	mov	r1, r8
 800541e:	eb12 0a01 	adds.w	sl, r2, r1
 8005422:	4649      	mov	r1, r9
 8005424:	eb43 0b01 	adc.w	fp, r3, r1
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800543c:	4692      	mov	sl, r2
 800543e:	469b      	mov	fp, r3
 8005440:	4643      	mov	r3, r8
 8005442:	eb1a 0303 	adds.w	r3, sl, r3
 8005446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800544a:	464b      	mov	r3, r9
 800544c:	eb4b 0303 	adc.w	r3, fp, r3
 8005450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005468:	460b      	mov	r3, r1
 800546a:	18db      	adds	r3, r3, r3
 800546c:	643b      	str	r3, [r7, #64]	; 0x40
 800546e:	4613      	mov	r3, r2
 8005470:	eb42 0303 	adc.w	r3, r2, r3
 8005474:	647b      	str	r3, [r7, #68]	; 0x44
 8005476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800547a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800547e:	f7fa fea3 	bl	80001c8 <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4611      	mov	r1, r2
 8005488:	4b3b      	ldr	r3, [pc, #236]	; (8005578 <UART_SetConfig+0x2d4>)
 800548a:	fba3 2301 	umull	r2, r3, r3, r1
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2264      	movs	r2, #100	; 0x64
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	1acb      	subs	r3, r1, r3
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800549e:	4b36      	ldr	r3, [pc, #216]	; (8005578 <UART_SetConfig+0x2d4>)
 80054a0:	fba3 2302 	umull	r2, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054ac:	441c      	add	r4, r3
 80054ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054c0:	4642      	mov	r2, r8
 80054c2:	464b      	mov	r3, r9
 80054c4:	1891      	adds	r1, r2, r2
 80054c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054c8:	415b      	adcs	r3, r3
 80054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054d0:	4641      	mov	r1, r8
 80054d2:	1851      	adds	r1, r2, r1
 80054d4:	6339      	str	r1, [r7, #48]	; 0x30
 80054d6:	4649      	mov	r1, r9
 80054d8:	414b      	adcs	r3, r1
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054e8:	4659      	mov	r1, fp
 80054ea:	00cb      	lsls	r3, r1, #3
 80054ec:	4651      	mov	r1, sl
 80054ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f2:	4651      	mov	r1, sl
 80054f4:	00ca      	lsls	r2, r1, #3
 80054f6:	4610      	mov	r0, r2
 80054f8:	4619      	mov	r1, r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	4642      	mov	r2, r8
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005504:	464b      	mov	r3, r9
 8005506:	460a      	mov	r2, r1
 8005508:	eb42 0303 	adc.w	r3, r2, r3
 800550c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800551c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005524:	460b      	mov	r3, r1
 8005526:	18db      	adds	r3, r3, r3
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
 800552a:	4613      	mov	r3, r2
 800552c:	eb42 0303 	adc.w	r3, r2, r3
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800553a:	f7fa fe45 	bl	80001c8 <__aeabi_uldivmod>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <UART_SetConfig+0x2d4>)
 8005544:	fba3 1302 	umull	r1, r3, r3, r2
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	2164      	movs	r1, #100	; 0x64
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	3332      	adds	r3, #50	; 0x32
 8005556:	4a08      	ldr	r2, [pc, #32]	; (8005578 <UART_SetConfig+0x2d4>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f003 0207 	and.w	r2, r3, #7
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4422      	add	r2, r4
 800556a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800556c:	e105      	b.n	800577a <UART_SetConfig+0x4d6>
 800556e:	bf00      	nop
 8005570:	40011000 	.word	0x40011000
 8005574:	40011400 	.word	0x40011400
 8005578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800557c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005580:	2200      	movs	r2, #0
 8005582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800558a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800558e:	4642      	mov	r2, r8
 8005590:	464b      	mov	r3, r9
 8005592:	1891      	adds	r1, r2, r2
 8005594:	6239      	str	r1, [r7, #32]
 8005596:	415b      	adcs	r3, r3
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
 800559a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800559e:	4641      	mov	r1, r8
 80055a0:	1854      	adds	r4, r2, r1
 80055a2:	4649      	mov	r1, r9
 80055a4:	eb43 0501 	adc.w	r5, r3, r1
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	00eb      	lsls	r3, r5, #3
 80055b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b6:	00e2      	lsls	r2, r4, #3
 80055b8:	4614      	mov	r4, r2
 80055ba:	461d      	mov	r5, r3
 80055bc:	4643      	mov	r3, r8
 80055be:	18e3      	adds	r3, r4, r3
 80055c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055c4:	464b      	mov	r3, r9
 80055c6:	eb45 0303 	adc.w	r3, r5, r3
 80055ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055ea:	4629      	mov	r1, r5
 80055ec:	008b      	lsls	r3, r1, #2
 80055ee:	4621      	mov	r1, r4
 80055f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f4:	4621      	mov	r1, r4
 80055f6:	008a      	lsls	r2, r1, #2
 80055f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055fc:	f7fa fde4 	bl	80001c8 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4b60      	ldr	r3, [pc, #384]	; (8005788 <UART_SetConfig+0x4e4>)
 8005606:	fba3 2302 	umull	r2, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	011c      	lsls	r4, r3, #4
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800561c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	1891      	adds	r1, r2, r2
 8005626:	61b9      	str	r1, [r7, #24]
 8005628:	415b      	adcs	r3, r3
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005630:	4641      	mov	r1, r8
 8005632:	1851      	adds	r1, r2, r1
 8005634:	6139      	str	r1, [r7, #16]
 8005636:	4649      	mov	r1, r9
 8005638:	414b      	adcs	r3, r1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005648:	4659      	mov	r1, fp
 800564a:	00cb      	lsls	r3, r1, #3
 800564c:	4651      	mov	r1, sl
 800564e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005652:	4651      	mov	r1, sl
 8005654:	00ca      	lsls	r2, r1, #3
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	4603      	mov	r3, r0
 800565c:	4642      	mov	r2, r8
 800565e:	189b      	adds	r3, r3, r2
 8005660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005664:	464b      	mov	r3, r9
 8005666:	460a      	mov	r2, r1
 8005668:	eb42 0303 	adc.w	r3, r2, r3
 800566c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	67bb      	str	r3, [r7, #120]	; 0x78
 800567a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005688:	4649      	mov	r1, r9
 800568a:	008b      	lsls	r3, r1, #2
 800568c:	4641      	mov	r1, r8
 800568e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005692:	4641      	mov	r1, r8
 8005694:	008a      	lsls	r2, r1, #2
 8005696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800569a:	f7fa fd95 	bl	80001c8 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b39      	ldr	r3, [pc, #228]	; (8005788 <UART_SetConfig+0x4e4>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	; 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	3332      	adds	r3, #50	; 0x32
 80056b6:	4a34      	ldr	r2, [pc, #208]	; (8005788 <UART_SetConfig+0x4e4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c2:	441c      	add	r4, r3
 80056c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c8:	2200      	movs	r2, #0
 80056ca:	673b      	str	r3, [r7, #112]	; 0x70
 80056cc:	677a      	str	r2, [r7, #116]	; 0x74
 80056ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056d2:	4642      	mov	r2, r8
 80056d4:	464b      	mov	r3, r9
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	415b      	adcs	r3, r3
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056e2:	4641      	mov	r1, r8
 80056e4:	1851      	adds	r1, r2, r1
 80056e6:	6039      	str	r1, [r7, #0]
 80056e8:	4649      	mov	r1, r9
 80056ea:	414b      	adcs	r3, r1
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056fa:	4659      	mov	r1, fp
 80056fc:	00cb      	lsls	r3, r1, #3
 80056fe:	4651      	mov	r1, sl
 8005700:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005704:	4651      	mov	r1, sl
 8005706:	00ca      	lsls	r2, r1, #3
 8005708:	4610      	mov	r0, r2
 800570a:	4619      	mov	r1, r3
 800570c:	4603      	mov	r3, r0
 800570e:	4642      	mov	r2, r8
 8005710:	189b      	adds	r3, r3, r2
 8005712:	66bb      	str	r3, [r7, #104]	; 0x68
 8005714:	464b      	mov	r3, r9
 8005716:	460a      	mov	r2, r1
 8005718:	eb42 0303 	adc.w	r3, r2, r3
 800571c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	663b      	str	r3, [r7, #96]	; 0x60
 8005728:	667a      	str	r2, [r7, #100]	; 0x64
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005736:	4649      	mov	r1, r9
 8005738:	008b      	lsls	r3, r1, #2
 800573a:	4641      	mov	r1, r8
 800573c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005740:	4641      	mov	r1, r8
 8005742:	008a      	lsls	r2, r1, #2
 8005744:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005748:	f7fa fd3e 	bl	80001c8 <__aeabi_uldivmod>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <UART_SetConfig+0x4e4>)
 8005752:	fba3 1302 	umull	r1, r3, r3, r2
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	2164      	movs	r1, #100	; 0x64
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	3332      	adds	r3, #50	; 0x32
 8005764:	4a08      	ldr	r2, [pc, #32]	; (8005788 <UART_SetConfig+0x4e4>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4422      	add	r2, r4
 8005778:	609a      	str	r2, [r3, #8]
}
 800577a:	bf00      	nop
 800577c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005780:	46bd      	mov	sp, r7
 8005782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005786:	bf00      	nop
 8005788:	51eb851f 	.word	0x51eb851f

0800578c <__libc_init_array>:
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	4d0d      	ldr	r5, [pc, #52]	; (80057c4 <__libc_init_array+0x38>)
 8005790:	4c0d      	ldr	r4, [pc, #52]	; (80057c8 <__libc_init_array+0x3c>)
 8005792:	1b64      	subs	r4, r4, r5
 8005794:	10a4      	asrs	r4, r4, #2
 8005796:	2600      	movs	r6, #0
 8005798:	42a6      	cmp	r6, r4
 800579a:	d109      	bne.n	80057b0 <__libc_init_array+0x24>
 800579c:	4d0b      	ldr	r5, [pc, #44]	; (80057cc <__libc_init_array+0x40>)
 800579e:	4c0c      	ldr	r4, [pc, #48]	; (80057d0 <__libc_init_array+0x44>)
 80057a0:	f000 f87c 	bl	800589c <_init>
 80057a4:	1b64      	subs	r4, r4, r5
 80057a6:	10a4      	asrs	r4, r4, #2
 80057a8:	2600      	movs	r6, #0
 80057aa:	42a6      	cmp	r6, r4
 80057ac:	d105      	bne.n	80057ba <__libc_init_array+0x2e>
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b4:	4798      	blx	r3
 80057b6:	3601      	adds	r6, #1
 80057b8:	e7ee      	b.n	8005798 <__libc_init_array+0xc>
 80057ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80057be:	4798      	blx	r3
 80057c0:	3601      	adds	r6, #1
 80057c2:	e7f2      	b.n	80057aa <__libc_init_array+0x1e>
 80057c4:	08005910 	.word	0x08005910
 80057c8:	08005910 	.word	0x08005910
 80057cc:	08005910 	.word	0x08005910
 80057d0:	08005914 	.word	0x08005914

080057d4 <__itoa>:
 80057d4:	1e93      	subs	r3, r2, #2
 80057d6:	2b22      	cmp	r3, #34	; 0x22
 80057d8:	b510      	push	{r4, lr}
 80057da:	460c      	mov	r4, r1
 80057dc:	d904      	bls.n	80057e8 <__itoa+0x14>
 80057de:	2300      	movs	r3, #0
 80057e0:	700b      	strb	r3, [r1, #0]
 80057e2:	461c      	mov	r4, r3
 80057e4:	4620      	mov	r0, r4
 80057e6:	bd10      	pop	{r4, pc}
 80057e8:	2a0a      	cmp	r2, #10
 80057ea:	d109      	bne.n	8005800 <__itoa+0x2c>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	da07      	bge.n	8005800 <__itoa+0x2c>
 80057f0:	232d      	movs	r3, #45	; 0x2d
 80057f2:	700b      	strb	r3, [r1, #0]
 80057f4:	4240      	negs	r0, r0
 80057f6:	2101      	movs	r1, #1
 80057f8:	4421      	add	r1, r4
 80057fa:	f000 f80d 	bl	8005818 <__utoa>
 80057fe:	e7f1      	b.n	80057e4 <__itoa+0x10>
 8005800:	2100      	movs	r1, #0
 8005802:	e7f9      	b.n	80057f8 <__itoa+0x24>

08005804 <itoa>:
 8005804:	f7ff bfe6 	b.w	80057d4 <__itoa>

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <__utoa>:
 8005818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581a:	4c1f      	ldr	r4, [pc, #124]	; (8005898 <__utoa+0x80>)
 800581c:	b08b      	sub	sp, #44	; 0x2c
 800581e:	4605      	mov	r5, r0
 8005820:	460b      	mov	r3, r1
 8005822:	466e      	mov	r6, sp
 8005824:	f104 0c20 	add.w	ip, r4, #32
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	6861      	ldr	r1, [r4, #4]
 800582c:	4637      	mov	r7, r6
 800582e:	c703      	stmia	r7!, {r0, r1}
 8005830:	3408      	adds	r4, #8
 8005832:	4564      	cmp	r4, ip
 8005834:	463e      	mov	r6, r7
 8005836:	d1f7      	bne.n	8005828 <__utoa+0x10>
 8005838:	7921      	ldrb	r1, [r4, #4]
 800583a:	7139      	strb	r1, [r7, #4]
 800583c:	1e91      	subs	r1, r2, #2
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	6038      	str	r0, [r7, #0]
 8005842:	2922      	cmp	r1, #34	; 0x22
 8005844:	f04f 0100 	mov.w	r1, #0
 8005848:	d904      	bls.n	8005854 <__utoa+0x3c>
 800584a:	7019      	strb	r1, [r3, #0]
 800584c:	460b      	mov	r3, r1
 800584e:	4618      	mov	r0, r3
 8005850:	b00b      	add	sp, #44	; 0x2c
 8005852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005854:	1e58      	subs	r0, r3, #1
 8005856:	4684      	mov	ip, r0
 8005858:	fbb5 f7f2 	udiv	r7, r5, r2
 800585c:	fb02 5617 	mls	r6, r2, r7, r5
 8005860:	3628      	adds	r6, #40	; 0x28
 8005862:	446e      	add	r6, sp
 8005864:	460c      	mov	r4, r1
 8005866:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800586a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800586e:	462e      	mov	r6, r5
 8005870:	42b2      	cmp	r2, r6
 8005872:	f101 0101 	add.w	r1, r1, #1
 8005876:	463d      	mov	r5, r7
 8005878:	d9ee      	bls.n	8005858 <__utoa+0x40>
 800587a:	2200      	movs	r2, #0
 800587c:	545a      	strb	r2, [r3, r1]
 800587e:	1919      	adds	r1, r3, r4
 8005880:	1aa5      	subs	r5, r4, r2
 8005882:	42aa      	cmp	r2, r5
 8005884:	dae3      	bge.n	800584e <__utoa+0x36>
 8005886:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800588a:	780e      	ldrb	r6, [r1, #0]
 800588c:	7006      	strb	r6, [r0, #0]
 800588e:	3201      	adds	r2, #1
 8005890:	f801 5901 	strb.w	r5, [r1], #-1
 8005894:	e7f4      	b.n	8005880 <__utoa+0x68>
 8005896:	bf00      	nop
 8005898:	080058e0 	.word	0x080058e0

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
