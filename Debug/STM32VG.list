
STM32VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ddc  08004ddc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de4  08004de4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000170  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f957  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023cd  00000000  00000000  0002fa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00031de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  00032c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002181f  00000000  00000000  00033968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112bb  00000000  00000000  00055187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caccc  00000000  00000000  00066442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013110e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003910  00000000  00000000  00131164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004dac 	.word	0x08004dac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08004dac 	.word	0x08004dac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <resetAllButton>:
int timerNormalState[3]= {0, 0, 0};
int eventButtonPressed[3]= {0, 0, 0};
int eventButtonDrop[3]= {0, 0, 0};

void resetAllButton()
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
	for (int i=0 ; i < 3; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e011      	b.n	80004f0 <resetAllButton+0x30>
	{
		eventButtonDrop[i]= 0;
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <resetAllButton+0x44>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		eventButtonPressed[i]= 0;
 80004d6:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <resetAllButton+0x48>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2100      	movs	r1, #0
 80004dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timerNormalState[i]= 0;
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <resetAllButton+0x4c>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2100      	movs	r1, #0
 80004e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0 ; i < 3; i++)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	ddea      	ble.n	80004cc <resetAllButton+0xc>
	}
}
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	200000bc 	.word	0x200000bc
 8000508:	200000b0 	.word	0x200000b0
 800050c:	200000a4 	.word	0x200000a4

08000510 <checkEventButton>:

int checkEventButton(int indexButton)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	switch (indexButton)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b02      	cmp	r3, #2
 800051c:	f000 80ab 	beq.w	8000676 <checkEventButton+0x166>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	f300 80ec 	bgt.w	8000700 <checkEventButton+0x1f0>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d003      	beq.n	8000536 <checkEventButton+0x26>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d05b      	beq.n	80005ec <checkEventButton+0xdc>
 8000534:	e0e4      	b.n	8000700 <checkEventButton+0x1f0>
	{
		case 0:
			switch (eventButtonPressed[indexButton])
 8000536:	4a76      	ldr	r2, [pc, #472]	; (8000710 <checkEventButton+0x200>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d852      	bhi.n	80005e8 <checkEventButton+0xd8>
 8000542:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <checkEventButton+0x38>)
 8000544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000548:	08000559 	.word	0x08000559
 800054c:	0800057d 	.word	0x0800057d
 8000550:	080005a1 	.word	0x080005a1
 8000554:	080005c5 	.word	0x080005c5
			{
			case 0:
				switch (eventButtonDrop[indexButton])
 8000558:	4a6e      	ldr	r2, [pc, #440]	; (8000714 <checkEventButton+0x204>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <checkEventButton+0x5a>
 8000564:	2b01      	cmp	r3, #1
 8000566:	d004      	beq.n	8000572 <checkEventButton+0x62>
				case 1:
					resetAllButton();
					return NOBUTTON;
					break;
				default:
					break;
 8000568:	e007      	b.n	800057a <checkEventButton+0x6a>
					resetAllButton();
 800056a:	f7ff ffa9 	bl	80004c0 <resetAllButton>
					return BUTTON1LongPress;
 800056e:	2305      	movs	r3, #5
 8000570:	e0ca      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000572:	f7ff ffa5 	bl	80004c0 <resetAllButton>
					return NOBUTTON;
 8000576:	230c      	movs	r3, #12
 8000578:	e0c6      	b.n	8000708 <checkEventButton+0x1f8>
				}
				break;
 800057a:	e036      	b.n	80005ea <checkEventButton+0xda>
			case 1:
				switch (eventButtonDrop[indexButton])
 800057c:	4a65      	ldr	r2, [pc, #404]	; (8000714 <checkEventButton+0x204>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <checkEventButton+0x7e>
 8000588:	2b01      	cmp	r3, #1
 800058a:	d004      	beq.n	8000596 <checkEventButton+0x86>
				case 1:
					resetAllButton();
					return BUTTON1SinglePress;
					break;
				default:
					break;
 800058c:	e007      	b.n	800059e <checkEventButton+0x8e>
					resetAllButton();
 800058e:	f7ff ff97 	bl	80004c0 <resetAllButton>
					return BUTTON1LongPress;
 8000592:	2305      	movs	r3, #5
 8000594:	e0b8      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000596:	f7ff ff93 	bl	80004c0 <resetAllButton>
					return BUTTON1SinglePress;
 800059a:	2302      	movs	r3, #2
 800059c:	e0b4      	b.n	8000708 <checkEventButton+0x1f8>
				}
				break;
 800059e:	e024      	b.n	80005ea <checkEventButton+0xda>
			case 2:
				switch (eventButtonDrop[indexButton])
 80005a0:	4a5c      	ldr	r2, [pc, #368]	; (8000714 <checkEventButton+0x204>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d002      	beq.n	80005b2 <checkEventButton+0xa2>
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d004      	beq.n	80005ba <checkEventButton+0xaa>
				case 2:
					resetAllButton();
					return BUTTON1DoublePress;
					break;
				default:
					break;
 80005b0:	e007      	b.n	80005c2 <checkEventButton+0xb2>
					resetAllButton();
 80005b2:	f7ff ff85 	bl	80004c0 <resetAllButton>
					return BUTTON1DoublePress;
 80005b6:	2303      	movs	r3, #3
 80005b8:	e0a6      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80005ba:	f7ff ff81 	bl	80004c0 <resetAllButton>
					return BUTTON1DoublePress;
 80005be:	2303      	movs	r3, #3
 80005c0:	e0a2      	b.n	8000708 <checkEventButton+0x1f8>
				}
				break;
 80005c2:	e012      	b.n	80005ea <checkEventButton+0xda>
			case 3:
				switch (eventButtonDrop[indexButton])
 80005c4:	4a53      	ldr	r2, [pc, #332]	; (8000714 <checkEventButton+0x204>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d002      	beq.n	80005d6 <checkEventButton+0xc6>
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d004      	beq.n	80005de <checkEventButton+0xce>
				case 3:
					resetAllButton();
					return BUTTON1TriplePress;
					break;
				default:
					break;
 80005d4:	e007      	b.n	80005e6 <checkEventButton+0xd6>
					resetAllButton();
 80005d6:	f7ff ff73 	bl	80004c0 <resetAllButton>
					return BUTTON1TriplePress;
 80005da:	2304      	movs	r3, #4
 80005dc:	e094      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80005de:	f7ff ff6f 	bl	80004c0 <resetAllButton>
					return BUTTON1TriplePress;
 80005e2:	2304      	movs	r3, #4
 80005e4:	e090      	b.n	8000708 <checkEventButton+0x1f8>
				}
				break;
 80005e6:	e000      	b.n	80005ea <checkEventButton+0xda>
			default:
				break;
 80005e8:	bf00      	nop
			}
			break;
 80005ea:	e08d      	b.n	8000708 <checkEventButton+0x1f8>
		case 1:
			switch (eventButtonPressed[indexButton])
 80005ec:	4a48      	ldr	r2, [pc, #288]	; (8000710 <checkEventButton+0x200>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d02a      	beq.n	800064e <checkEventButton+0x13e>
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	dc3a      	bgt.n	8000672 <checkEventButton+0x162>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <checkEventButton+0xf6>
 8000600:	2b01      	cmp	r3, #1
 8000602:	d012      	beq.n	800062a <checkEventButton+0x11a>
				default:
					break;
				}
				break;
			default:
				break;
 8000604:	e035      	b.n	8000672 <checkEventButton+0x162>
				switch (eventButtonDrop[indexButton])
 8000606:	4a43      	ldr	r2, [pc, #268]	; (8000714 <checkEventButton+0x204>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <checkEventButton+0x108>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d004      	beq.n	8000620 <checkEventButton+0x110>
					break;
 8000616:	e007      	b.n	8000628 <checkEventButton+0x118>
					resetAllButton();
 8000618:	f7ff ff52 	bl	80004c0 <resetAllButton>
					return BUTTON2LongPress;
 800061c:	2308      	movs	r3, #8
 800061e:	e073      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000620:	f7ff ff4e 	bl	80004c0 <resetAllButton>
					return NOBUTTON;
 8000624:	230c      	movs	r3, #12
 8000626:	e06f      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 8000628:	e024      	b.n	8000674 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 800062a:	4a3a      	ldr	r2, [pc, #232]	; (8000714 <checkEventButton+0x204>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <checkEventButton+0x12c>
 8000636:	2b01      	cmp	r3, #1
 8000638:	d004      	beq.n	8000644 <checkEventButton+0x134>
					break;
 800063a:	e007      	b.n	800064c <checkEventButton+0x13c>
					resetAllButton();
 800063c:	f7ff ff40 	bl	80004c0 <resetAllButton>
					return BUTTON2LongPress;
 8000640:	2308      	movs	r3, #8
 8000642:	e061      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000644:	f7ff ff3c 	bl	80004c0 <resetAllButton>
					return BUTTON2SinglePress;
 8000648:	2306      	movs	r3, #6
 800064a:	e05d      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 800064c:	e012      	b.n	8000674 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 800064e:	4a31      	ldr	r2, [pc, #196]	; (8000714 <checkEventButton+0x204>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d002      	beq.n	8000660 <checkEventButton+0x150>
 800065a:	2b02      	cmp	r3, #2
 800065c:	d004      	beq.n	8000668 <checkEventButton+0x158>
					break;
 800065e:	e007      	b.n	8000670 <checkEventButton+0x160>
					resetAllButton();
 8000660:	f7ff ff2e 	bl	80004c0 <resetAllButton>
					return BUTTON2DoublePress;
 8000664:	2307      	movs	r3, #7
 8000666:	e04f      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 8000668:	f7ff ff2a 	bl	80004c0 <resetAllButton>
					return BUTTON2DoublePress;
 800066c:	2307      	movs	r3, #7
 800066e:	e04b      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 8000670:	e000      	b.n	8000674 <checkEventButton+0x164>
				break;
 8000672:	bf00      	nop
			}
			break;
 8000674:	e048      	b.n	8000708 <checkEventButton+0x1f8>
		case 2:
			switch (eventButtonPressed[indexButton])
 8000676:	4a26      	ldr	r2, [pc, #152]	; (8000710 <checkEventButton+0x200>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d02a      	beq.n	80006d8 <checkEventButton+0x1c8>
 8000682:	2b02      	cmp	r3, #2
 8000684:	dc3a      	bgt.n	80006fc <checkEventButton+0x1ec>
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <checkEventButton+0x180>
 800068a:	2b01      	cmp	r3, #1
 800068c:	d012      	beq.n	80006b4 <checkEventButton+0x1a4>
				default:
					break;
				}
				break;
			default:
				break;
 800068e:	e035      	b.n	80006fc <checkEventButton+0x1ec>
				switch (eventButtonDrop[indexButton])
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <checkEventButton+0x204>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <checkEventButton+0x192>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d004      	beq.n	80006aa <checkEventButton+0x19a>
					break;
 80006a0:	e007      	b.n	80006b2 <checkEventButton+0x1a2>
					resetAllButton();
 80006a2:	f7ff ff0d 	bl	80004c0 <resetAllButton>
					return BUTTON3LongPress;
 80006a6:	230b      	movs	r3, #11
 80006a8:	e02e      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80006aa:	f7ff ff09 	bl	80004c0 <resetAllButton>
					return NOBUTTON;
 80006ae:	230c      	movs	r3, #12
 80006b0:	e02a      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 80006b2:	e024      	b.n	80006fe <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <checkEventButton+0x204>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <checkEventButton+0x1b6>
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d004      	beq.n	80006ce <checkEventButton+0x1be>
					break;
 80006c4:	e007      	b.n	80006d6 <checkEventButton+0x1c6>
					resetAllButton();
 80006c6:	f7ff fefb 	bl	80004c0 <resetAllButton>
					return BUTTON3LongPress;
 80006ca:	230b      	movs	r3, #11
 80006cc:	e01c      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80006ce:	f7ff fef7 	bl	80004c0 <resetAllButton>
					return BUTTON3SinglePress;
 80006d2:	2309      	movs	r3, #9
 80006d4:	e018      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 80006d6:	e012      	b.n	80006fe <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <checkEventButton+0x204>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d002      	beq.n	80006ea <checkEventButton+0x1da>
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d004      	beq.n	80006f2 <checkEventButton+0x1e2>
					break;
 80006e8:	e007      	b.n	80006fa <checkEventButton+0x1ea>
					resetAllButton();
 80006ea:	f7ff fee9 	bl	80004c0 <resetAllButton>
					return BUTTON3DoublePress;
 80006ee:	230a      	movs	r3, #10
 80006f0:	e00a      	b.n	8000708 <checkEventButton+0x1f8>
					resetAllButton();
 80006f2:	f7ff fee5 	bl	80004c0 <resetAllButton>
					return BUTTON3DoublePress;
 80006f6:	230a      	movs	r3, #10
 80006f8:	e006      	b.n	8000708 <checkEventButton+0x1f8>
				break;
 80006fa:	e000      	b.n	80006fe <checkEventButton+0x1ee>
				break;
 80006fc:	bf00      	nop
			}
			break;
 80006fe:	e003      	b.n	8000708 <checkEventButton+0x1f8>
		default:
			resetAllButton();
 8000700:	f7ff fede 	bl	80004c0 <resetAllButton>
			return NOBUTTON;
 8000704:	230c      	movs	r3, #12
 8000706:	e7ff      	b.n	8000708 <checkEventButton+0x1f8>
			break;
	}
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000b0 	.word	0x200000b0
 8000714:	200000bc 	.word	0x200000bc

08000718 <getInputButton>:
int getInputButton()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	e0c1      	b.n	80008a8 <getInputButton+0x190>
	{
		state1Button[i]= state2Button[i];
 8000724:	4a65      	ldr	r2, [pc, #404]	; (80008bc <getInputButton+0x1a4>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072c:	4964      	ldr	r1, [pc, #400]	; (80008c0 <getInputButton+0x1a8>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 8000734:	4a63      	ldr	r2, [pc, #396]	; (80008c4 <getInputButton+0x1ac>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073c:	495f      	ldr	r1, [pc, #380]	; (80008bc <getInputButton+0x1a4>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000744:	4a60      	ldr	r2, [pc, #384]	; (80008c8 <getInputButton+0x1b0>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074c:	495f      	ldr	r1, [pc, #380]	; (80008cc <getInputButton+0x1b4>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f002 f8b2 	bl	80028c0 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	4619      	mov	r1, r3
 8000760:	4a58      	ldr	r2, [pc, #352]	; (80008c4 <getInputButton+0x1ac>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 8000768:	4a55      	ldr	r2, [pc, #340]	; (80008c0 <getInputButton+0x1a8>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000770:	4952      	ldr	r1, [pc, #328]	; (80008bc <getInputButton+0x1a4>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000778:	429a      	cmp	r2, r3
 800077a:	f040 8092 	bne.w	80008a2 <getInputButton+0x18a>
 800077e:	4a4f      	ldr	r2, [pc, #316]	; (80008bc <getInputButton+0x1a4>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000786:	494f      	ldr	r1, [pc, #316]	; (80008c4 <getInputButton+0x1ac>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800078e:	429a      	cmp	r2, r3
 8000790:	f040 8087 	bne.w	80008a2 <getInputButton+0x18a>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 8000794:	4a4e      	ldr	r2, [pc, #312]	; (80008d0 <getInputButton+0x1b8>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079c:	4948      	ldr	r1, [pc, #288]	; (80008c0 <getInputButton+0x1a8>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d031      	beq.n	800080c <getInputButton+0xf4>
			{
				switch (state0Button[i])
 80007a8:	4a49      	ldr	r2, [pc, #292]	; (80008d0 <getInputButton+0x1b8>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <getInputButton+0xa2>
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d014      	beq.n	80007e2 <getInputButton+0xca>
						state0Button[i]= PRESS_STATE;
						eventButtonPressed[i]+= 1;
						timerLongPress[i]= 300;
						break;
					default:
						break;
 80007b8:	e073      	b.n	80008a2 <getInputButton+0x18a>
						state0Button[i]= NORMAL_STATE;
 80007ba:	4a45      	ldr	r2, [pc, #276]	; (80008d0 <getInputButton+0x1b8>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2101      	movs	r1, #1
 80007c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonDrop[i]+= 1;
 80007c4:	4a43      	ldr	r2, [pc, #268]	; (80008d4 <getInputButton+0x1bc>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	4941      	ldr	r1, [pc, #260]	; (80008d4 <getInputButton+0x1bc>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerNormalState[i]= 20;
 80007d6:	4a40      	ldr	r2, [pc, #256]	; (80008d8 <getInputButton+0x1c0>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2114      	movs	r1, #20
 80007dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 80007e0:	e05f      	b.n	80008a2 <getInputButton+0x18a>
						state0Button[i]= PRESS_STATE;
 80007e2:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <getInputButton+0x1b8>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2100      	movs	r1, #0
 80007e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonPressed[i]+= 1;
 80007ec:	4a3b      	ldr	r2, [pc, #236]	; (80008dc <getInputButton+0x1c4>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	4939      	ldr	r1, [pc, #228]	; (80008dc <getInputButton+0x1c4>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerLongPress[i]= 300;
 80007fe:	4a38      	ldr	r2, [pc, #224]	; (80008e0 <getInputButton+0x1c8>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800080a:	e04a      	b.n	80008a2 <getInputButton+0x18a>

				}
			}
			else
			{
				if (state0Button[i]== NORMAL_STATE)
 800080c:	4a30      	ldr	r2, [pc, #192]	; (80008d0 <getInputButton+0x1b8>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d119      	bne.n	800084c <getInputButton+0x134>
				{
					if (timerNormalState[i] > 0)
 8000818:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <getInputButton+0x1c0>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dd3e      	ble.n	80008a2 <getInputButton+0x18a>
					{
						timerNormalState[i]--;
 8000824:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <getInputButton+0x1c0>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	492a      	ldr	r1, [pc, #168]	; (80008d8 <getInputButton+0x1c0>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerNormalState[i] <= 0)
 8000836:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <getInputButton+0x1c0>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	2b00      	cmp	r3, #0
 8000840:	dc2f      	bgt.n	80008a2 <getInputButton+0x18a>
						{
							return checkEventButton(i);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fe64 	bl	8000510 <checkEventButton>
 8000848:	4603      	mov	r3, r0
 800084a:	e032      	b.n	80008b2 <getInputButton+0x19a>
						}
					}
				}
				else   // state0Button[i]== PRESS_SATE;
				{
					if (timerLongPress[i] > 0)
 800084c:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <getInputButton+0x1c8>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dd24      	ble.n	80008a2 <getInputButton+0x18a>
					{
						timerLongPress[i]--;
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <getInputButton+0x1c8>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	491f      	ldr	r1, [pc, #124]	; (80008e0 <getInputButton+0x1c8>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerLongPress[i] <= 0)
 800086a:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <getInputButton+0x1c8>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	2b00      	cmp	r3, #0
 8000874:	dc15      	bgt.n	80008a2 <getInputButton+0x18a>
						{
							if (i== 0)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d105      	bne.n	8000888 <getInputButton+0x170>
								timerLongPress[i]= 300;
 800087c:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <getInputButton+0x1c8>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000884:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							if (i== 1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d104      	bne.n	8000898 <getInputButton+0x180>
								timerLongPress[i]= 20;
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <getInputButton+0x1c8>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2114      	movs	r1, #20
 8000894:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							return checkEventButton(i);		
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fe39 	bl	8000510 <checkEventButton>
 800089e:	4603      	mov	r3, r0
 80008a0:	e007      	b.n	80008b2 <getInputButton+0x19a>
	for (int i= 0; i < 3; i++)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	f77f af3a 	ble.w	8000724 <getInputButton+0xc>
					}
				}
			}
		}
	}
	return NOBUTTON;
 80008b0:	230c      	movs	r3, #12
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000002c 	.word	0x2000002c
 80008c0:	20000020 	.word	0x20000020
 80008c4:	20000038 	.word	0x20000038
 80008c8:	20000000 	.word	0x20000000
 80008cc:	2000000c 	.word	0x2000000c
 80008d0:	20000014 	.word	0x20000014
 80008d4:	200000bc 	.word	0x200000bc
 80008d8:	200000a4 	.word	0x200000a4
 80008dc:	200000b0 	.word	0x200000b0
 80008e0:	20000044 	.word	0x20000044

080008e4 <update7SEGBuffer>:

#include "deviceDriver7Segment.h"
#include "physical7Segment.h"

void update7SEGBuffer(int time, int index_traffic)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	switch (index_traffic)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d039      	beq.n	8000968 <update7SEGBuffer+0x84>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	dc3a      	bgt.n	8000970 <update7SEGBuffer+0x8c>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d003      	beq.n	8000908 <update7SEGBuffer+0x24>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d018      	beq.n	8000938 <update7SEGBuffer+0x54>
		break;
	case 3:
		led_buffer[4] = time;
		break;
	default:
		break;
 8000906:	e033      	b.n	8000970 <update7SEGBuffer+0x8c>
		led_buffer[0] = time / 10;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <update7SEGBuffer+0x9c>)
 800090c:	fb82 1203 	smull	r1, r2, r2, r3
 8000910:	1092      	asrs	r2, r2, #2
 8000912:	17db      	asrs	r3, r3, #31
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <update7SEGBuffer+0xa0>)
 8000918:	6013      	str	r3, [r2, #0]
		led_buffer[1] = time % 10;
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <update7SEGBuffer+0x9c>)
 800091e:	fb83 2301 	smull	r2, r3, r3, r1
 8000922:	109a      	asrs	r2, r3, #2
 8000924:	17cb      	asrs	r3, r1, #31
 8000926:	1ad2      	subs	r2, r2, r3
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	1aca      	subs	r2, r1, r3
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <update7SEGBuffer+0xa0>)
 8000934:	605a      	str	r2, [r3, #4]
		break;
 8000936:	e01c      	b.n	8000972 <update7SEGBuffer+0x8e>
		led_buffer[2] = time / 10;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <update7SEGBuffer+0x9c>)
 800093c:	fb82 1203 	smull	r1, r2, r2, r3
 8000940:	1092      	asrs	r2, r2, #2
 8000942:	17db      	asrs	r3, r3, #31
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <update7SEGBuffer+0xa0>)
 8000948:	6093      	str	r3, [r2, #8]
		led_buffer[3] = time % 10;
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <update7SEGBuffer+0x9c>)
 800094e:	fb83 2301 	smull	r2, r3, r3, r1
 8000952:	109a      	asrs	r2, r3, #2
 8000954:	17cb      	asrs	r3, r1, #31
 8000956:	1ad2      	subs	r2, r2, r3
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	1aca      	subs	r2, r1, r3
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <update7SEGBuffer+0xa0>)
 8000964:	60da      	str	r2, [r3, #12]
		break;
 8000966:	e004      	b.n	8000972 <update7SEGBuffer+0x8e>
		led_buffer[4] = time;
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <update7SEGBuffer+0xa0>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6113      	str	r3, [r2, #16]
		break;
 800096e:	e000      	b.n	8000972 <update7SEGBuffer+0x8e>
		break;
 8000970:	bf00      	nop
	}
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	66666667 	.word	0x66666667
 8000984:	20000050 	.word	0x20000050

08000988 <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 1);
 8000990:	2101      	movs	r1, #1
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffa6 	bl	80008e4 <update7SEGBuffer>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 2);
 80009a8:	2102      	movs	r1, #2
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff9a 	bl	80008e4 <update7SEGBuffer>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 3);
 80009c0:	2103      	movs	r1, #3
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff8e 	bl	80008e4 <update7SEGBuffer>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <displayAll7Seg>:

void displayAll7Seg()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	Scan7SEG();
 80009d4:	f000 fe86 	bl	80016e4 <Scan7SEG>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, YELLOWTUNINGMODE);
 80009e0:	2105      	movs	r1, #5
 80009e2:	2008      	movs	r0, #8
 80009e4:	f000 ff24 	bl	8001830 <controlSingleLed>
	controlSingleLed(TRAFFIC2, YELLOWTUNINGMODE);
 80009e8:	2105      	movs	r1, #5
 80009ea:	2009      	movs	r0, #9
 80009ec:	f000 ff20 	bl	8001830 <controlSingleLed>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <blinkingRED>:

void blinkingRED()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, REDTUNINGMODE);
 80009f8:	2103      	movs	r1, #3
 80009fa:	2008      	movs	r0, #8
 80009fc:	f000 ff18 	bl	8001830 <controlSingleLed>
	controlSingleLed(TRAFFIC2, REDTUNINGMODE);
 8000a00:	2103      	movs	r1, #3
 8000a02:	2009      	movs	r0, #9
 8000a04:	f000 ff14 	bl	8001830 <controlSingleLed>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <blinkingGREEN>:
void blinkingGREEN()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, GREENTUNINGMODE);
 8000a10:	2104      	movs	r1, #4
 8000a12:	2008      	movs	r0, #8
 8000a14:	f000 ff0c 	bl	8001830 <controlSingleLed>
	controlSingleLed(TRAFFIC2, GREENTUNINGMODE);
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2009      	movs	r0, #9
 8000a1c:	f000 ff08 	bl	8001830 <controlSingleLed>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <offAllSingLEDs>:
void offAllSingLEDs()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, OFF);
 8000a28:	2106      	movs	r1, #6
 8000a2a:	2008      	movs	r0, #8
 8000a2c:	f000 ff00 	bl	8001830 <controlSingleLed>
	controlSingleLed(TRAFFIC2, OFF);
 8000a30:	2106      	movs	r1, #6
 8000a32:	2009      	movs	r0, #9
 8000a34:	f000 fefc 	bl	8001830 <controlSingleLed>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <onAllSingLEDs>:
void onAllSingLEDs()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, ON);
 8000a40:	2107      	movs	r1, #7
 8000a42:	2008      	movs	r0, #8
 8000a44:	f000 fef4 	bl	8001830 <controlSingleLed>
	controlSingleLed(TRAFFIC2, ON);
 8000a48:	2107      	movs	r1, #7
 8000a4a:	2009      	movs	r0, #9
 8000a4c:	f000 fef0 	bl	8001830 <controlSingleLed>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <onSingleRedTraffic1>:
void onSingleRedTraffic1()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, REDNORMALMODE);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f000 fee8 	bl	8001830 <controlSingleLed>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <onSingleYellowTraffic1>:
void onSingleYellowTraffic1()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, YELLOWNORMALMODE);
 8000a68:	2102      	movs	r1, #2
 8000a6a:	2008      	movs	r0, #8
 8000a6c:	f000 fee0 	bl	8001830 <controlSingleLed>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, GREENNORMALMODE);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2008      	movs	r0, #8
 8000a7c:	f000 fed8 	bl	8001830 <controlSingleLed>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, REDNORMALMODE);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2009      	movs	r0, #9
 8000a8c:	f000 fed0 	bl	8001830 <controlSingleLed>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <onSingleYellowTraffic2>:
void onSingleYellowTraffic2()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, YELLOWNORMALMODE);
 8000a98:	2102      	movs	r1, #2
 8000a9a:	2009      	movs	r0, #9
 8000a9c:	f000 fec8 	bl	8001830 <controlSingleLed>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, GREENNORMALMODE);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	2009      	movs	r0, #9
 8000aac:	f000 fec0 	bl	8001830 <controlSingleLed>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <offSingleRedGreenWalk>:

void offSingleRedGreenWalk()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, OFFLEDWALK);
 8000ab8:	210a      	movs	r1, #10
 8000aba:	2008      	movs	r0, #8
 8000abc:	f000 feb8 	bl	8001830 <controlSingleLed>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <ledWalkOperation>:

int numberFreq;
int statusTraffic1Button3Pressed;

void ledWalkOperation()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    switch (statusTraffic1)
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <ledWalkOperation+0x7c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d024      	beq.n	8000b1a <ledWalkOperation+0x56>
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	dc31      	bgt.n	8000b38 <ledWalkOperation+0x74>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d002      	beq.n	8000ade <ledWalkOperation+0x1a>
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d00f      	beq.n	8000afc <ledWalkOperation+0x38>
				controlSingleLed(TRAFFIC1, ONREDOFFGREENWALK);
				break;
		}
        break;
    default:
        break;
 8000adc:	e02c      	b.n	8000b38 <ledWalkOperation+0x74>
    	switch (numberFreq)
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <ledWalkOperation+0x80>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d104      	bne.n	8000af0 <ledWalkOperation+0x2c>
				controlSingleLed(TRAFFIC1, OFFLEDWALK);
 8000ae6:	210a      	movs	r1, #10
 8000ae8:	2008      	movs	r0, #8
 8000aea:	f000 fea1 	bl	8001830 <controlSingleLed>
				break;
 8000aee:	e004      	b.n	8000afa <ledWalkOperation+0x36>
				controlSingleLed(TRAFFIC1, ONGREENOFFREDWALK);
 8000af0:	210b      	movs	r1, #11
 8000af2:	2008      	movs	r0, #8
 8000af4:	f000 fe9c 	bl	8001830 <controlSingleLed>
				break;
 8000af8:	bf00      	nop
        break;
 8000afa:	e01e      	b.n	8000b3a <ledWalkOperation+0x76>
    	switch (numberFreq)
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <ledWalkOperation+0x80>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d104      	bne.n	8000b0e <ledWalkOperation+0x4a>
				controlSingleLed(TRAFFIC1, OFFLEDWALK);
 8000b04:	210a      	movs	r1, #10
 8000b06:	2008      	movs	r0, #8
 8000b08:	f000 fe92 	bl	8001830 <controlSingleLed>
				break;
 8000b0c:	e004      	b.n	8000b18 <ledWalkOperation+0x54>
				controlSingleLed(TRAFFIC1, ONREDOFFGREENWALK);
 8000b0e:	210c      	movs	r1, #12
 8000b10:	2008      	movs	r0, #8
 8000b12:	f000 fe8d 	bl	8001830 <controlSingleLed>
				break;
 8000b16:	bf00      	nop
        break;
 8000b18:	e00f      	b.n	8000b3a <ledWalkOperation+0x76>
    	switch (numberFreq)
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <ledWalkOperation+0x80>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d104      	bne.n	8000b2c <ledWalkOperation+0x68>
				controlSingleLed(TRAFFIC1, OFFLEDWALK);
 8000b22:	210a      	movs	r1, #10
 8000b24:	2008      	movs	r0, #8
 8000b26:	f000 fe83 	bl	8001830 <controlSingleLed>
				break;
 8000b2a:	e004      	b.n	8000b36 <ledWalkOperation+0x72>
				controlSingleLed(TRAFFIC1, ONREDOFFGREENWALK);
 8000b2c:	210c      	movs	r1, #12
 8000b2e:	2008      	movs	r0, #8
 8000b30:	f000 fe7e 	bl	8001830 <controlSingleLed>
				break;
 8000b34:	bf00      	nop
        break;
 8000b36:	e000      	b.n	8000b3a <ledWalkOperation+0x76>
        break;
 8000b38:	bf00      	nop
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000d0 	.word	0x200000d0
 8000b44:	200000e4 	.word	0x200000e4

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f001 fb06 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f8be 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 fa06 	bl	8000f64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b58:	f000 f918 	bl	8000d8c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b5c:	f000 f962 	bl	8000e24 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b60:	f000 f9d6 	bl	8000f10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000b64:	4852      	ldr	r0, [pc, #328]	; (8000cb0 <main+0x168>)
 8000b66:	f002 fb8f 	bl	8003288 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 ffee 	bl	8001b4c <setTimer1>
  setTimer2(100);
 8000b70:	2064      	movs	r0, #100	; 0x64
 8000b72:	f000 ffff 	bl	8001b74 <setTimer2>
  setTimer3(50);
 8000b76:	2032      	movs	r0, #50	; 0x32
 8000b78:	f001 f810 	bl	8001b9c <setTimer3>
	while (1)
	{
		if (flag1== 1) // flag for getInputButton
 8000b7c:	4b4d      	ldr	r3, [pc, #308]	; (8000cb4 <main+0x16c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d173      	bne.n	8000c6c <main+0x124>
		{
			setTimer1(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 ffe1 	bl	8001b4c <setTimer1>
			switch (getInputButton())
 8000b8a:	f7ff fdc5 	bl	8000718 <getInputButton>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	3b02      	subs	r3, #2
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d86c      	bhi.n	8000c70 <main+0x128>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <main+0x54>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bbd 	.word	0x08000bbd
 8000ba0:	08000bc9 	.word	0x08000bc9
 8000ba4:	08000bd5 	.word	0x08000bd5
 8000ba8:	08000be1 	.word	0x08000be1
 8000bac:	08000bfd 	.word	0x08000bfd
 8000bb0:	08000c29 	.word	0x08000c29
 8000bb4:	08000c3b 	.word	0x08000c3b
 8000bb8:	08000c4d 	.word	0x08000c4d
			{
				case BUTTON1SinglePress:
					modeStatus= NORMALMODE;
 8000bbc:	4b3e      	ldr	r3, [pc, #248]	; (8000cb8 <main+0x170>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]
					beginNormalMode();
 8000bc2:	f000 fc83 	bl	80014cc <beginNormalMode>
					break;
 8000bc6:	e054      	b.n	8000c72 <main+0x12a>
				case BUTTON1DoublePress:
					modeStatus= MANUALMODE;
 8000bc8:	4b3b      	ldr	r3, [pc, #236]	; (8000cb8 <main+0x170>)
 8000bca:	2202      	movs	r2, #2
 8000bcc:	601a      	str	r2, [r3, #0]
					beginManualMode();
 8000bce:	f000 fadd 	bl	800118c <beginManualMode>
					break;
 8000bd2:	e04e      	b.n	8000c72 <main+0x12a>
				case BUTTON1TriplePress:
					modeStatus= TUNINGMODE;
 8000bd4:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <main+0x170>)
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	601a      	str	r2, [r3, #0]
					beginTuningMode();
 8000bda:	f001 f9bb 	bl	8001f54 <beginTuningMode>
					break;
 8000bde:	e048      	b.n	8000c72 <main+0x12a>
				case BUTTON1LongPress:
					switch (modeStatus)
 8000be0:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <main+0x170>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d002      	beq.n	8000bee <main+0xa6>
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d003      	beq.n	8000bf4 <main+0xac>
							break;
						case TUNINGMODE:
							runTuningMode();
							break;
						default:
							break;
 8000bec:	e005      	b.n	8000bfa <main+0xb2>
							runManualModeFunction();
 8000bee:	f000 fa73 	bl	80010d8 <runManualModeFunction>
							break;
 8000bf2:	e002      	b.n	8000bfa <main+0xb2>
							runTuningMode();
 8000bf4:	f001 f938 	bl	8001e68 <runTuningMode>
							break;
 8000bf8:	bf00      	nop
					}
					break;
 8000bfa:	e03a      	b.n	8000c72 <main+0x12a>
				case BUTTON2SinglePress:
					switch (modeStatus)
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <main+0x170>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d00c      	beq.n	8000c1e <main+0xd6>
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	dc0d      	bgt.n	8000c24 <main+0xdc>
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d002      	beq.n	8000c12 <main+0xca>
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d003      	beq.n	8000c18 <main+0xd0>
							break;
						case TUNINGMODE:
							modifyTuningMode();
							break;
						default:
							break;
 8000c10:	e008      	b.n	8000c24 <main+0xdc>
							beginNormalMode();
 8000c12:	f000 fc5b 	bl	80014cc <beginNormalMode>
							break;
 8000c16:	e006      	b.n	8000c26 <main+0xde>
							runManualModeFunction();
 8000c18:	f000 fa5e 	bl	80010d8 <runManualModeFunction>
							break;
 8000c1c:	e003      	b.n	8000c26 <main+0xde>
							modifyTuningMode();
 8000c1e:	f001 f9a3 	bl	8001f68 <modifyTuningMode>
							break;
 8000c22:	e000      	b.n	8000c26 <main+0xde>
							break;
 8000c24:	bf00      	nop
					}
					break;
 8000c26:	e024      	b.n	8000c72 <main+0x12a>
				case BUTTON2DoublePress:
					switch (modeStatus)
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <main+0x170>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d102      	bne.n	8000c36 <main+0xee>
					{
						case TUNINGMODE:
							saveTuningMode();
 8000c30:	f001 f9f8 	bl	8002024 <saveTuningMode>
							break;
 8000c34:	e000      	b.n	8000c38 <main+0xf0>
						default:
							break;
 8000c36:	bf00      	nop
					}
					break;
 8000c38:	e01b      	b.n	8000c72 <main+0x12a>
				case BUTTON2LongPress:
					switch (modeStatus)
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <main+0x170>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d102      	bne.n	8000c48 <main+0x100>
					{
						case TUNINGMODE:
							modifyTuningMode();
 8000c42:	f001 f991 	bl	8001f68 <modifyTuningMode>
							break;
 8000c46:	e000      	b.n	8000c4a <main+0x102>
						default:
							break;
 8000c48:	bf00      	nop
					}
					break;
 8000c4a:	e012      	b.n	8000c72 <main+0x12a>
				case BUTTON3SinglePress:
					switch (modeStatus)
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <main+0x170>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d109      	bne.n	8000c68 <main+0x120>
					{
						case NORMALMODE:
							numberFreq= 3;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <main+0x174>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	601a      	str	r2, [r3, #0]
							statusTraffic1Button3Pressed= statusTraffic1;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <main+0x178>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <main+0x17c>)
 8000c60:	6013      	str	r3, [r2, #0]
							ledWalkOperation();
 8000c62:	f7ff ff2f 	bl	8000ac4 <ledWalkOperation>
							break;
 8000c66:	e000      	b.n	8000c6a <main+0x122>
						default:
							break;
 8000c68:	bf00      	nop
					}
				default:
					break;
 8000c6a:	e001      	b.n	8000c70 <main+0x128>
			}
		}
 8000c6c:	bf00      	nop
 8000c6e:	e000      	b.n	8000c72 <main+0x12a>
					break;
 8000c70:	bf00      	nop
		if (flag2 == 1) // flag for normalMode
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <main+0x180>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d10a      	bne.n	8000c90 <main+0x148>
		{
			setTimer2(100);
 8000c7a:	2064      	movs	r0, #100	; 0x64
 8000c7c:	f000 ff7a 	bl	8001b74 <setTimer2>
			if (modeStatus == NORMALMODE)
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <main+0x170>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d103      	bne.n	8000c90 <main+0x148>
			{
				runNormalMode();
 8000c88:	f000 fa9c 	bl	80011c4 <runNormalMode>
				ledWalkOperation();
 8000c8c:	f7ff ff1a 	bl	8000ac4 <ledWalkOperation>
			}
		}
		if (flag3 == 1) // flag for animationTuningMode
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <main+0x184>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	f47f af71 	bne.w	8000b7c <main+0x34>
		{
			setTimer3(50);
 8000c9a:	2032      	movs	r0, #50	; 0x32
 8000c9c:	f000 ff7e 	bl	8001b9c <setTimer3>
			if (modeStatus== TUNINGMODE)
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <main+0x170>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	f47f af69 	bne.w	8000b7c <main+0x34>
			{
				animationTuningMode();
 8000caa:	f001 fa0d 	bl	80020c8 <animationTuningMode>
		if (flag1== 1) // flag for getInputButton
 8000cae:	e765      	b.n	8000b7c <main+0x34>
 8000cb0:	20000174 	.word	0x20000174
 8000cb4:	200001e4 	.word	0x200001e4
 8000cb8:	200000c8 	.word	0x200000c8
 8000cbc:	200000e4 	.word	0x200000e4
 8000cc0:	200000d0 	.word	0x200000d0
 8000cc4:	200000e0 	.word	0x200000e0
 8000cc8:	200001dc 	.word	0x200001dc
 8000ccc:	200001ec 	.word	0x200001ec

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b094      	sub	sp, #80	; 0x50
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2230      	movs	r2, #48	; 0x30
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 f85c 	bl	8004d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <SystemClock_Config+0xb4>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <SystemClock_Config+0xb4>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <SystemClock_Config+0xb4>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <SystemClock_Config+0xb8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <SystemClock_Config+0xb8>)
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <SystemClock_Config+0xb8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d30:	2301      	movs	r3, #1
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d34:	2310      	movs	r3, #16
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fe09 	bl	8002958 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d4c:	f000 f9b2 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 f86c 	bl	8002e48 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d76:	f000 f99d 	bl	80010b4 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3750      	adds	r7, #80	; 0x50
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000db2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000db6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dd2:	f002 fa09 	bl	80031e8 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ddc:	f000 f96a 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dee:	f002 fcdf 	bl	80037b0 <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 f95c 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000e0a:	f003 f8ab 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 f94e 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000174 	.word	0x20000174

08000e24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	; 0x38
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]
 8000e52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000e56:	4a2d      	ldr	r2, [pc, #180]	; (8000f0c <MX_TIM3_Init+0xe8>)
 8000e58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000e5c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000e6a:	2209      	movs	r2, #9
 8000e6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e7a:	4823      	ldr	r0, [pc, #140]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000e7c:	f002 f9b4 	bl	80031e8 <HAL_TIM_Base_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e86:	f000 f915 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e94:	4619      	mov	r1, r3
 8000e96:	481c      	ldr	r0, [pc, #112]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000e98:	f002 fc8a 	bl	80037b0 <HAL_TIM_ConfigClockSource>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ea2:	f000 f907 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ea6:	4818      	ldr	r0, [pc, #96]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000ea8:	f002 fa5e 	bl	8003368 <HAL_TIM_PWM_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000eb2:	f000 f8ff 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4810      	ldr	r0, [pc, #64]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000ec6:	f003 f84d 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ed0:	f000 f8f0 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed4:	2360      	movs	r3, #96	; 0x60
 8000ed6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000eec:	f002 fb9e 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ef6:	f000 f8dd 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <MX_TIM3_Init+0xe4>)
 8000efc:	f000 feda 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 8000f00:	bf00      	nop
 8000f02:	3738      	adds	r7, #56	; 0x38
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200000e8 	.word	0x200000e8
 8000f0c:	40000400 	.word	0x40000400

08000f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 96000;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <MX_USART1_UART_Init+0x50>)
 8000f1e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f34:	220c      	movs	r2, #12
 8000f36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_USART1_UART_Init+0x48>)
 8000f46:	f003 f89d 	bl	8004084 <HAL_UART_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000f50:	f000 f8b0 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000130 	.word	0x20000130
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	00017700 	.word	0x00017700

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a43      	ldr	r2, [pc, #268]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b41      	ldr	r3, [pc, #260]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a35      	ldr	r2, [pc, #212]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <MX_GPIO_Init+0x12c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segA_Pin|segB_Pin|segC_Pin|segD_Pin
 8000fce:	2200      	movs	r2, #0
 8000fd0:	217f      	movs	r1, #127	; 0x7f
 8000fd2:	4830      	ldr	r0, [pc, #192]	; (8001094 <MX_GPIO_Init+0x130>)
 8000fd4:	f001 fc8c 	bl	80028f0 <HAL_GPIO_WritePin>
                          |segE_Pin|segF_Pin|segG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000fd8:	2201      	movs	r2, #1
 8000fda:	213f      	movs	r1, #63	; 0x3f
 8000fdc:	482e      	ldr	r0, [pc, #184]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fde:	f001 fc87 	bl	80028f0 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, en2_Pin|en3_Pin|en4_Pin|en0_Pin
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000fe8:	482b      	ldr	r0, [pc, #172]	; (8001098 <MX_GPIO_Init+0x134>)
 8000fea:	f001 fc81 	bl	80028f0 <HAL_GPIO_WritePin>
                          |en1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WALKGREEN_Pin|WALKRED_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000ff4:	4829      	ldr	r0, [pc, #164]	; (800109c <MX_GPIO_Init+0x138>)
 8000ff6:	f001 fc7b 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
                           segE_Pin segF_Pin segG_Pin */
  GPIO_InitStruct.Pin = segA_Pin|segB_Pin|segC_Pin|segD_Pin
 8000ffa:	237f      	movs	r3, #127	; 0x7f
 8000ffc:	60fb      	str	r3, [r7, #12]
                          |segE_Pin|segF_Pin|segG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	4619      	mov	r1, r3
 8001010:	4820      	ldr	r0, [pc, #128]	; (8001094 <MX_GPIO_Init+0x130>)
 8001012:	f001 fab9 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8001016:	233f      	movs	r3, #63	; 0x3f
 8001018:	60fb      	str	r3, [r7, #12]
                          |GREEN2_Pin|YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4619      	mov	r1, r3
 800102c:	481a      	ldr	r0, [pc, #104]	; (8001098 <MX_GPIO_Init+0x134>)
 800102e:	f001 faab 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : en2_Pin en3_Pin en4_Pin en0_Pin
                           en1_Pin */
  GPIO_InitStruct.Pin = en2_Pin|en3_Pin|en4_Pin|en0_Pin
 8001032:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001036:	60fb      	str	r3, [r7, #12]
                          |en1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_GPIO_Init+0x134>)
 800104c:	f001 fa9c 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : WALKGREEN_Pin WALKRED_Pin */
  GPIO_InitStruct.Pin = WALKGREEN_Pin|WALKRED_Pin;
 8001050:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_GPIO_Init+0x138>)
 800106a:	f001 fa8d 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 800106e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	2301      	movs	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_GPIO_Init+0x130>)
 8001084:	f001 fa80 	bl	8002588 <HAL_GPIO_Init>

}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	40020c00 	.word	0x40020c00

080010a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	runTimer();
 80010a8:	f000 fcf8 	bl	8001a9c <runTimer>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <initStatusManualMode>:
#include "deviceDriver7Segment.h"

int statusManualMode= INITMODE;

void initStatusManualMode()
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	statusManualMode= INITMODE;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <initStatusManualMode+0x14>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	200000cc 	.word	0x200000cc

080010d8 <runManualModeFunction>:
void runManualModeFunction()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	switch (statusManualMode) 
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <runManualModeFunction+0xb0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d84e      	bhi.n	8001182 <runManualModeFunction+0xaa>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <runManualModeFunction+0x14>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	08001101 	.word	0x08001101
 80010f0:	0800111b 	.word	0x0800111b
 80010f4:	08001135 	.word	0x08001135
 80010f8:	0800114f 	.word	0x0800114f
 80010fc:	08001169 	.word	0x08001169
	{
		case INITMODE:
			statusManualMode= REDGREEN;
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <runManualModeFunction+0xb0>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8001106:	2002      	movs	r0, #2
 8001108:	f7ff fc56 	bl	80009b8 <update7SEGBufferMode>
			offAllSingLEDs();
 800110c:	f7ff fc8a 	bl	8000a24 <offAllSingLEDs>
			onSingleRedTraffic1();
 8001110:	f7ff fca0 	bl	8000a54 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8001114:	f7ff fcc6 	bl	8000aa4 <onSingleGreenTraffic2>
			break;
 8001118:	e034      	b.n	8001184 <runManualModeFunction+0xac>
		case REDGREEN:
			statusManualMode= REDYELLOW;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <runManualModeFunction+0xb0>)
 800111c:	2202      	movs	r2, #2
 800111e:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8001120:	2002      	movs	r0, #2
 8001122:	f7ff fc49 	bl	80009b8 <update7SEGBufferMode>
			offAllSingLEDs();
 8001126:	f7ff fc7d 	bl	8000a24 <offAllSingLEDs>
			onSingleRedTraffic1();
 800112a:	f7ff fc93 	bl	8000a54 <onSingleRedTraffic1>
			onSingleYellowTraffic2();
 800112e:	f7ff fcb1 	bl	8000a94 <onSingleYellowTraffic2>
			break;
 8001132:	e027      	b.n	8001184 <runManualModeFunction+0xac>
		case REDYELLOW:
			statusManualMode= GREENRED;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <runManualModeFunction+0xb0>)
 8001136:	2203      	movs	r2, #3
 8001138:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 800113a:	2002      	movs	r0, #2
 800113c:	f7ff fc3c 	bl	80009b8 <update7SEGBufferMode>
			offAllSingLEDs();
 8001140:	f7ff fc70 	bl	8000a24 <offAllSingLEDs>
			onSingleGreenTraffic1();
 8001144:	f7ff fc96 	bl	8000a74 <onSingleGreenTraffic1>
			onSingleRedTraffic2();
 8001148:	f7ff fc9c 	bl	8000a84 <onSingleRedTraffic2>
			break;
 800114c:	e01a      	b.n	8001184 <runManualModeFunction+0xac>
		case GREENRED:
			statusManualMode= YELLOWRED;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <runManualModeFunction+0xb0>)
 8001150:	2204      	movs	r2, #4
 8001152:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff fc2f 	bl	80009b8 <update7SEGBufferMode>
			offAllSingLEDs();
 800115a:	f7ff fc63 	bl	8000a24 <offAllSingLEDs>
			onSingleYellowTraffic1();
 800115e:	f7ff fc81 	bl	8000a64 <onSingleYellowTraffic1>
			onSingleRedTraffic2();
 8001162:	f7ff fc8f 	bl	8000a84 <onSingleRedTraffic2>
			break;
 8001166:	e00d      	b.n	8001184 <runManualModeFunction+0xac>
		case YELLOWRED:
			statusManualMode= REDGREEN;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <runManualModeFunction+0xb0>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 800116e:	2002      	movs	r0, #2
 8001170:	f7ff fc22 	bl	80009b8 <update7SEGBufferMode>
			offAllSingLEDs();
 8001174:	f7ff fc56 	bl	8000a24 <offAllSingLEDs>
			onSingleRedTraffic1();
 8001178:	f7ff fc6c 	bl	8000a54 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 800117c:	f7ff fc92 	bl	8000aa4 <onSingleGreenTraffic2>
			break;
 8001180:	e000      	b.n	8001184 <runManualModeFunction+0xac>
		default:
			break;
 8001182:	bf00      	nop
	}
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000cc 	.word	0x200000cc

0800118c <beginManualMode>:

void beginManualMode()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	offSingleRedGreenWalk();
 8001190:	f7ff fc90 	bl	8000ab4 <offSingleRedGreenWalk>
	initStatusManualMode();
 8001194:	f7ff ff94 	bl	80010c0 <initStatusManualMode>
	runManualModeFunction();
 8001198:	f7ff ff9e 	bl	80010d8 <runManualModeFunction>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <initStatusNormalMode>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void initStatusNormalMode()
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	statusTraffic1 = INIT;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <initStatusNormalMode+0x1c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	statusTraffic2 = INIT;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <initStatusNormalMode+0x20>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200000d0 	.word	0x200000d0
 80011c0:	200000d4 	.word	0x200000d4

080011c4 <runNormalMode>:
void runNormalMode()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 80011c8:	4b98      	ldr	r3, [pc, #608]	; (800142c <runNormalMode+0x268>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	f200 80bd 	bhi.w	800134c <runNormalMode+0x188>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <runNormalMode+0x14>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	080011e9 	.word	0x080011e9
 80011dc:	08001207 	.word	0x08001207
 80011e0:	08001275 	.word	0x08001275
 80011e4:	080012e1 	.word	0x080012e1
	{
	case INIT:
		counterLedRed1 = durationLedRed;
 80011e8:	4b91      	ldr	r3, [pc, #580]	; (8001430 <runNormalMode+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a91      	ldr	r2, [pc, #580]	; (8001434 <runNormalMode+0x270>)
 80011ee:	6013      	str	r3, [r2, #0]
		statusTraffic1 = REDNORMAL;
 80011f0:	4b8e      	ldr	r3, [pc, #568]	; (800142c <runNormalMode+0x268>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 80011f6:	f7ff fc2d 	bl	8000a54 <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 80011fa:	4b8e      	ldr	r3, [pc, #568]	; (8001434 <runNormalMode+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fbc2 	bl	8000988 <update7SEGBufferTraffic1>
		break;
 8001204:	e0a9      	b.n	800135a <runNormalMode+0x196>
	case REDNORMAL:
		if (counterLedRed1 > 0)
 8001206:	4b8b      	ldr	r3, [pc, #556]	; (8001434 <runNormalMode+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f340 80a0 	ble.w	8001350 <runNormalMode+0x18c>
		{
			counterLedRed1--;
 8001210:	4b88      	ldr	r3, [pc, #544]	; (8001434 <runNormalMode+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a87      	ldr	r2, [pc, #540]	; (8001434 <runNormalMode+0x270>)
 8001218:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 800121a:	4b86      	ldr	r3, [pc, #536]	; (8001434 <runNormalMode+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	dc20      	bgt.n	8001264 <runNormalMode+0xa0>
			{
				counterLedGreen1 = durationLedGreen;
 8001222:	4b85      	ldr	r3, [pc, #532]	; (8001438 <runNormalMode+0x274>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a85      	ldr	r2, [pc, #532]	; (800143c <runNormalMode+0x278>)
 8001228:	6013      	str	r3, [r2, #0]
				statusTraffic1 = GREENNORMAL;
 800122a:	4b80      	ldr	r3, [pc, #512]	; (800142c <runNormalMode+0x268>)
 800122c:	2202      	movs	r2, #2
 800122e:	601a      	str	r2, [r3, #0]
				if (statusTraffic1== statusTraffic1Button3Pressed)
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <runNormalMode+0x268>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b82      	ldr	r3, [pc, #520]	; (8001440 <runNormalMode+0x27c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d10b      	bne.n	8001254 <runNormalMode+0x90>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 800123c:	4b81      	ldr	r3, [pc, #516]	; (8001444 <runNormalMode+0x280>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	dd03      	ble.n	800124c <runNormalMode+0x88>
 8001244:	4b7f      	ldr	r3, [pc, #508]	; (8001444 <runNormalMode+0x280>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	e001      	b.n	8001250 <runNormalMode+0x8c>
 800124c:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <runNormalMode+0x280>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a7c      	ldr	r2, [pc, #496]	; (8001444 <runNormalMode+0x280>)
 8001252:	6013      	str	r3, [r2, #0]
				onSingleGreenTraffic1();
 8001254:	f7ff fc0e 	bl	8000a74 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8001258:	4b78      	ldr	r3, [pc, #480]	; (800143c <runNormalMode+0x278>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fb93 	bl	8000988 <update7SEGBufferTraffic1>
			{
				onSingleRedTraffic1();
				update7SEGBufferTraffic1(counterLedRed1);
			}
		}
		break;
 8001262:	e075      	b.n	8001350 <runNormalMode+0x18c>
				onSingleRedTraffic1();
 8001264:	f7ff fbf6 	bl	8000a54 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001268:	4b72      	ldr	r3, [pc, #456]	; (8001434 <runNormalMode+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb8b 	bl	8000988 <update7SEGBufferTraffic1>
		break;
 8001272:	e06d      	b.n	8001350 <runNormalMode+0x18c>
	case GREENNORMAL:
		if (counterLedGreen1 > 0)
 8001274:	4b71      	ldr	r3, [pc, #452]	; (800143c <runNormalMode+0x278>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dd6b      	ble.n	8001354 <runNormalMode+0x190>
		{
			counterLedGreen1--;
 800127c:	4b6f      	ldr	r3, [pc, #444]	; (800143c <runNormalMode+0x278>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3b01      	subs	r3, #1
 8001282:	4a6e      	ldr	r2, [pc, #440]	; (800143c <runNormalMode+0x278>)
 8001284:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 8001286:	4b6d      	ldr	r3, [pc, #436]	; (800143c <runNormalMode+0x278>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	dc20      	bgt.n	80012d0 <runNormalMode+0x10c>
			{
				counterLedYellow1 = durationLedYellow;
 800128e:	4b6e      	ldr	r3, [pc, #440]	; (8001448 <runNormalMode+0x284>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a6e      	ldr	r2, [pc, #440]	; (800144c <runNormalMode+0x288>)
 8001294:	6013      	str	r3, [r2, #0]
				statusTraffic1 = YELLOWNORMAL;
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <runNormalMode+0x268>)
 8001298:	2203      	movs	r2, #3
 800129a:	601a      	str	r2, [r3, #0]
				if (statusTraffic1== statusTraffic1Button3Pressed)
 800129c:	4b63      	ldr	r3, [pc, #396]	; (800142c <runNormalMode+0x268>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b67      	ldr	r3, [pc, #412]	; (8001440 <runNormalMode+0x27c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d10b      	bne.n	80012c0 <runNormalMode+0xfc>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <runNormalMode+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dd03      	ble.n	80012b8 <runNormalMode+0xf4>
 80012b0:	4b64      	ldr	r3, [pc, #400]	; (8001444 <runNormalMode+0x280>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	e001      	b.n	80012bc <runNormalMode+0xf8>
 80012b8:	4b62      	ldr	r3, [pc, #392]	; (8001444 <runNormalMode+0x280>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a61      	ldr	r2, [pc, #388]	; (8001444 <runNormalMode+0x280>)
 80012be:	6013      	str	r3, [r2, #0]
				onSingleYellowTraffic1();
 80012c0:	f7ff fbd0 	bl	8000a64 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 80012c4:	4b61      	ldr	r3, [pc, #388]	; (800144c <runNormalMode+0x288>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fb5d 	bl	8000988 <update7SEGBufferTraffic1>
			{
				onSingleGreenTraffic1();
				update7SEGBufferTraffic1(counterLedGreen1);
			}
		}
		break;
 80012ce:	e041      	b.n	8001354 <runNormalMode+0x190>
				onSingleGreenTraffic1();
 80012d0:	f7ff fbd0 	bl	8000a74 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 80012d4:	4b59      	ldr	r3, [pc, #356]	; (800143c <runNormalMode+0x278>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fb55 	bl	8000988 <update7SEGBufferTraffic1>
		break;
 80012de:	e039      	b.n	8001354 <runNormalMode+0x190>
	case YELLOWNORMAL:
		if (counterLedYellow1 > 0)
 80012e0:	4b5a      	ldr	r3, [pc, #360]	; (800144c <runNormalMode+0x288>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	dd37      	ble.n	8001358 <runNormalMode+0x194>
		{
			counterLedYellow1--;
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <runNormalMode+0x288>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a57      	ldr	r2, [pc, #348]	; (800144c <runNormalMode+0x288>)
 80012f0:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 80012f2:	4b56      	ldr	r3, [pc, #344]	; (800144c <runNormalMode+0x288>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dc20      	bgt.n	800133c <runNormalMode+0x178>
			{
				counterLedRed1 = durationLedRed;
 80012fa:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <runNormalMode+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a4d      	ldr	r2, [pc, #308]	; (8001434 <runNormalMode+0x270>)
 8001300:	6013      	str	r3, [r2, #0]
				statusTraffic1 = REDNORMAL;
 8001302:	4b4a      	ldr	r3, [pc, #296]	; (800142c <runNormalMode+0x268>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
				if (statusTraffic1== statusTraffic1Button3Pressed)
 8001308:	4b48      	ldr	r3, [pc, #288]	; (800142c <runNormalMode+0x268>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <runNormalMode+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d10b      	bne.n	800132c <runNormalMode+0x168>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001314:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <runNormalMode+0x280>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd03      	ble.n	8001324 <runNormalMode+0x160>
 800131c:	4b49      	ldr	r3, [pc, #292]	; (8001444 <runNormalMode+0x280>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	e001      	b.n	8001328 <runNormalMode+0x164>
 8001324:	4b47      	ldr	r3, [pc, #284]	; (8001444 <runNormalMode+0x280>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a46      	ldr	r2, [pc, #280]	; (8001444 <runNormalMode+0x280>)
 800132a:	6013      	str	r3, [r2, #0]
				onSingleRedTraffic1();
 800132c:	f7ff fb92 	bl	8000a54 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001330:	4b40      	ldr	r3, [pc, #256]	; (8001434 <runNormalMode+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fb27 	bl	8000988 <update7SEGBufferTraffic1>
			{
				onSingleYellowTraffic1();
				update7SEGBufferTraffic1(counterLedYellow1);
			}
		}
		break;
 800133a:	e00d      	b.n	8001358 <runNormalMode+0x194>
				onSingleYellowTraffic1();
 800133c:	f7ff fb92 	bl	8000a64 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8001340:	4b42      	ldr	r3, [pc, #264]	; (800144c <runNormalMode+0x288>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fb1f 	bl	8000988 <update7SEGBufferTraffic1>
		break;
 800134a:	e005      	b.n	8001358 <runNormalMode+0x194>
	default:
		break;
 800134c:	bf00      	nop
 800134e:	e004      	b.n	800135a <runNormalMode+0x196>
		break;
 8001350:	bf00      	nop
 8001352:	e002      	b.n	800135a <runNormalMode+0x196>
		break;
 8001354:	bf00      	nop
 8001356:	e000      	b.n	800135a <runNormalMode+0x196>
		break;
 8001358:	bf00      	nop
	}
	switch (statusTraffic2)
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <runNormalMode+0x28c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b03      	cmp	r3, #3
 8001360:	f200 80a2 	bhi.w	80014a8 <runNormalMode+0x2e4>
 8001364:	a201      	add	r2, pc, #4	; (adr r2, 800136c <runNormalMode+0x1a8>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	0800137d 	.word	0x0800137d
 8001370:	08001461 	.word	0x08001461
 8001374:	0800139b 	.word	0x0800139b
 8001378:	080013e5 	.word	0x080013e5
	{
	case INIT:
		statusTraffic2 = GREENNORMAL;
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <runNormalMode+0x28c>)
 800137e:	2202      	movs	r2, #2
 8001380:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <runNormalMode+0x274>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a33      	ldr	r2, [pc, #204]	; (8001454 <runNormalMode+0x290>)
 8001388:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 800138a:	f7ff fb8b 	bl	8000aa4 <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <runNormalMode+0x290>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb04 	bl	80009a0 <update7SEGBufferTraffic2>
		break;
 8001398:	e08d      	b.n	80014b6 <runNormalMode+0x2f2>
	case GREENNORMAL:
		if (counterLedGreen2 > 0)
 800139a:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <runNormalMode+0x290>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f340 8084 	ble.w	80014ac <runNormalMode+0x2e8>
		{
			counterLedGreen2--;
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <runNormalMode+0x290>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <runNormalMode+0x290>)
 80013ac:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <runNormalMode+0x290>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dc0e      	bgt.n	80013d4 <runNormalMode+0x210>
			{
				onSingleYellowTraffic2();
 80013b6:	f7ff fb6d 	bl	8000a94 <onSingleYellowTraffic2>
				counterLedYellow2 = durationLedYellow;
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <runNormalMode+0x284>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <runNormalMode+0x294>)
 80013c0:	6013      	str	r3, [r2, #0]
				statusTraffic2 = YELLOWNORMAL;
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <runNormalMode+0x28c>)
 80013c4:	2203      	movs	r2, #3
 80013c6:	601a      	str	r2, [r3, #0]
				update7SEGBufferTraffic2(counterLedYellow2);
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <runNormalMode+0x294>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fae7 	bl	80009a0 <update7SEGBufferTraffic2>
			{
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
			}
		}
		break;
 80013d2:	e06b      	b.n	80014ac <runNormalMode+0x2e8>
				onSingleGreenTraffic2();
 80013d4:	f7ff fb66 	bl	8000aa4 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <runNormalMode+0x290>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fadf 	bl	80009a0 <update7SEGBufferTraffic2>
		break;
 80013e2:	e063      	b.n	80014ac <runNormalMode+0x2e8>
	case YELLOWNORMAL:
		if (counterLedYellow2 > 0)
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <runNormalMode+0x294>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	dd61      	ble.n	80014b0 <runNormalMode+0x2ec>
		{
			counterLedYellow2--;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <runNormalMode+0x294>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4a19      	ldr	r2, [pc, #100]	; (8001458 <runNormalMode+0x294>)
 80013f4:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <runNormalMode+0x294>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc0e      	bgt.n	800141c <runNormalMode+0x258>
			{
				counterLedRed2 = durationLedRed;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <runNormalMode+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <runNormalMode+0x298>)
 8001404:	6013      	str	r3, [r2, #0]
				statusTraffic2 = REDNORMAL;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <runNormalMode+0x28c>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 800140c:	f7ff fb3a 	bl	8000a84 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <runNormalMode+0x298>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fac3 	bl	80009a0 <update7SEGBufferTraffic2>
			{
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
			}
		}
		break;
 800141a:	e049      	b.n	80014b0 <runNormalMode+0x2ec>
				onSingleYellowTraffic2();
 800141c:	f7ff fb3a 	bl	8000a94 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <runNormalMode+0x294>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fabb 	bl	80009a0 <update7SEGBufferTraffic2>
		break;
 800142a:	e041      	b.n	80014b0 <runNormalMode+0x2ec>
 800142c:	200000d0 	.word	0x200000d0
 8001430:	20000074 	.word	0x20000074
 8001434:	200001d0 	.word	0x200001d0
 8001438:	20000078 	.word	0x20000078
 800143c:	200001c0 	.word	0x200001c0
 8001440:	200000e0 	.word	0x200000e0
 8001444:	200000e4 	.word	0x200000e4
 8001448:	2000007c 	.word	0x2000007c
 800144c:	200001c4 	.word	0x200001c4
 8001450:	200000d4 	.word	0x200000d4
 8001454:	200001cc 	.word	0x200001cc
 8001458:	200001c8 	.word	0x200001c8
 800145c:	200001bc 	.word	0x200001bc
	case REDNORMAL:
		if (counterLedRed2 > 0)
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <runNormalMode+0x2f8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dd25      	ble.n	80014b4 <runNormalMode+0x2f0>
		{
			counterLedRed2--;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <runNormalMode+0x2f8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <runNormalMode+0x2f8>)
 8001470:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <runNormalMode+0x2f8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	dc0e      	bgt.n	8001498 <runNormalMode+0x2d4>
			{
				counterLedGreen2 = durationLedGreen;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <runNormalMode+0x2fc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <runNormalMode+0x300>)
 8001480:	6013      	str	r3, [r2, #0]
				statusTraffic2 = GREENNORMAL;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <runNormalMode+0x304>)
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 8001488:	f7ff fb0c 	bl	8000aa4 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <runNormalMode+0x300>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fa85 	bl	80009a0 <update7SEGBufferTraffic2>
			{
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
			}
		}
		break;
 8001496:	e00d      	b.n	80014b4 <runNormalMode+0x2f0>
				onSingleRedTraffic2();
 8001498:	f7ff faf4 	bl	8000a84 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <runNormalMode+0x2f8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fa7d 	bl	80009a0 <update7SEGBufferTraffic2>
		break;
 80014a6:	e005      	b.n	80014b4 <runNormalMode+0x2f0>
	default:
		break;
 80014a8:	bf00      	nop
 80014aa:	e004      	b.n	80014b6 <runNormalMode+0x2f2>
		break;
 80014ac:	bf00      	nop
 80014ae:	e002      	b.n	80014b6 <runNormalMode+0x2f2>
		break;
 80014b0:	bf00      	nop
 80014b2:	e000      	b.n	80014b6 <runNormalMode+0x2f2>
		break;
 80014b4:	bf00      	nop
	}
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001bc 	.word	0x200001bc
 80014c0:	20000078 	.word	0x20000078
 80014c4:	200001cc 	.word	0x200001cc
 80014c8:	200000d4 	.word	0x200000d4

080014cc <beginNormalMode>:

void beginNormalMode()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	offSingleRedGreenWalk();
 80014d0:	f7ff faf0 	bl	8000ab4 <offSingleRedGreenWalk>
	offAllSingLEDs();
 80014d4:	f7ff faa6 	bl	8000a24 <offAllSingLEDs>
	initStatusNormalMode();
 80014d8:	f7ff fe62 	bl	80011a0 <initStatusNormalMode>
	runNormalMode();
 80014dc:	f7ff fe72 	bl	80011c4 <runNormalMode>
	setTimer2(100);
 80014e0:	2064      	movs	r0, #100	; 0x64
 80014e2:	f000 fb47 	bl	8001b74 <setTimer2>
	update7SEGBufferMode(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff fa66 	bl	80009b8 <update7SEGBufferMode>
	displayAll7Seg();
 80014ec:	f7ff fa70 	bl	80009d0 <displayAll7Seg>
	setTimer4(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f000 fb67 	bl	8001bc4 <setTimer4>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <show7SEG>:
int status7SEG = INIT;
int led_buffer[5] = {1, 2, 3, 4, 1};

void show7SEG(GPIO_PinState A, GPIO_PinState B, GPIO_PinState C, GPIO_PinState D, GPIO_PinState E,
			  GPIO_PinState F, GPIO_PinState G)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4604      	mov	r4, r0
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4623      	mov	r3, r4
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	4603      	mov	r3, r0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	460b      	mov	r3, r1
 8001514:	717b      	strb	r3, [r7, #5]
 8001516:	4613      	mov	r3, r2
 8001518:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, A);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	461a      	mov	r2, r3
 800151e:	2101      	movs	r1, #1
 8001520:	4815      	ldr	r0, [pc, #84]	; (8001578 <show7SEG+0x7c>)
 8001522:	f001 f9e5 	bl	80028f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, B);
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	461a      	mov	r2, r3
 800152a:	2102      	movs	r1, #2
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <show7SEG+0x7c>)
 800152e:	f001 f9df 	bl	80028f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, C);
 8001532:	797b      	ldrb	r3, [r7, #5]
 8001534:	461a      	mov	r2, r3
 8001536:	2104      	movs	r1, #4
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <show7SEG+0x7c>)
 800153a:	f001 f9d9 	bl	80028f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, D);
 800153e:	793b      	ldrb	r3, [r7, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	2108      	movs	r1, #8
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <show7SEG+0x7c>)
 8001546:	f001 f9d3 	bl	80028f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, E);
 800154a:	7e3b      	ldrb	r3, [r7, #24]
 800154c:	461a      	mov	r2, r3
 800154e:	2110      	movs	r1, #16
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <show7SEG+0x7c>)
 8001552:	f001 f9cd 	bl	80028f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, F);
 8001556:	7f3b      	ldrb	r3, [r7, #28]
 8001558:	461a      	mov	r2, r3
 800155a:	2120      	movs	r1, #32
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <show7SEG+0x7c>)
 800155e:	f001 f9c7 	bl	80028f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, G);
 8001562:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001566:	461a      	mov	r2, r3
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <show7SEG+0x7c>)
 800156c:	f001 f9c0 	bl	80028f0 <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	40020000 	.word	0x40020000

0800157c <display>:

void display(int num)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af04      	add	r7, sp, #16
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b09      	cmp	r3, #9
 8001588:	f200 809a 	bhi.w	80016c0 <display+0x144>
 800158c:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <display+0x18>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015bd 	.word	0x080015bd
 8001598:	080015d7 	.word	0x080015d7
 800159c:	080015f1 	.word	0x080015f1
 80015a0:	0800160b 	.word	0x0800160b
 80015a4:	08001625 	.word	0x08001625
 80015a8:	0800163f 	.word	0x0800163f
 80015ac:	08001659 	.word	0x08001659
 80015b0:	08001673 	.word	0x08001673
 80015b4:	0800168d 	.word	0x0800168d
 80015b8:	080016a7 	.word	0x080016a7
	switch (num)
	{
	case 0:
		show7SEG(0, 0, 0, 0, 0, 0, 1);
 80015bc:	2301      	movs	r3, #1
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	2300      	movs	r3, #0
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	2300      	movs	r3, #0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff ff94 	bl	80014fc <show7SEG>
		break;
 80015d4:	e081      	b.n	80016da <display+0x15e>
	case 1:
		show7SEG(1, 0, 0, 1, 1, 1, 1);
 80015d6:	2301      	movs	r3, #1
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	2301      	movs	r3, #1
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	2301      	movs	r3, #1
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2301      	movs	r3, #1
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff ff87 	bl	80014fc <show7SEG>
		break;
 80015ee:	e074      	b.n	80016da <display+0x15e>
	case 2:
		show7SEG(0, 0, 1, 0, 0, 1, 0);
 80015f0:	2300      	movs	r3, #0
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2301      	movs	r3, #1
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2300      	movs	r3, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	2201      	movs	r2, #1
 8001600:	2100      	movs	r1, #0
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ff7a 	bl	80014fc <show7SEG>
		break;
 8001608:	e067      	b.n	80016da <display+0x15e>

	case 3:
		show7SEG(0, 0, 0, 0, 1, 1, 0);
 800160a:	2300      	movs	r3, #0
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2301      	movs	r3, #1
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2301      	movs	r3, #1
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff ff6d 	bl	80014fc <show7SEG>
		break;
 8001622:	e05a      	b.n	80016da <display+0x15e>
	case 4:
		show7SEG(1, 0, 0, 1, 1, 0, 0);
 8001624:	2300      	movs	r3, #0
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	2300      	movs	r3, #0
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2301      	movs	r3, #1
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff ff60 	bl	80014fc <show7SEG>
		break;
 800163c:	e04d      	b.n	80016da <display+0x15e>
	case 5:
		show7SEG(0, 1, 0, 0, 1, 0, 0);
 800163e:	2300      	movs	r3, #0
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	2300      	movs	r3, #0
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	2301      	movs	r3, #1
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	2200      	movs	r2, #0
 800164e:	2101      	movs	r1, #1
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff ff53 	bl	80014fc <show7SEG>
		break;
 8001656:	e040      	b.n	80016da <display+0x15e>
	case 6:
		show7SEG(0, 1, 0, 0, 0, 0, 0);
 8001658:	2300      	movs	r3, #0
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	2300      	movs	r3, #0
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	2300      	movs	r3, #0
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2200      	movs	r2, #0
 8001668:	2101      	movs	r1, #1
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff ff46 	bl	80014fc <show7SEG>
		break;
 8001670:	e033      	b.n	80016da <display+0x15e>
	case 7:
		show7SEG(0, 0, 0, 1, 1, 1, 1);
 8001672:	2301      	movs	r3, #1
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	2301      	movs	r3, #1
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	2301      	movs	r3, #1
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff ff39 	bl	80014fc <show7SEG>
		break;
 800168a:	e026      	b.n	80016da <display+0x15e>
	case 8:
		show7SEG(0, 0, 0, 0, 0, 0, 0);
 800168c:	2300      	movs	r3, #0
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	2300      	movs	r3, #0
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2300      	movs	r3, #0
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff ff2c 	bl	80014fc <show7SEG>
		break;
 80016a4:	e019      	b.n	80016da <display+0x15e>
	case 9:
		show7SEG(0, 0, 0, 0, 1, 0, 0);
 80016a6:	2300      	movs	r3, #0
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2301      	movs	r3, #1
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff ff1f 	bl	80014fc <show7SEG>
		break;
 80016be:	e00c      	b.n	80016da <display+0x15e>
	default:
		show7SEG(0, 0, 0, 0, 1, 0, 0);
 80016c0:	2300      	movs	r3, #0
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2300      	movs	r3, #0
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	2301      	movs	r3, #1
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff ff12 	bl	80014fc <show7SEG>
		break;
 80016d8:	bf00      	nop
	}
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop

080016e4 <Scan7SEG>:

void Scan7SEG()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	switch (status7SEG)
 80016e8:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <Scan7SEG+0x140>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	f200 8095 	bhi.w	800181c <Scan7SEG+0x138>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <Scan7SEG+0x14>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001711 	.word	0x08001711
 80016fc:	0800175f 	.word	0x0800175f
 8001700:	08001785 	.word	0x08001785
 8001704:	080017ab 	.word	0x080017ab
 8001708:	080017d1 	.word	0x080017d1
 800170c:	080017f7 	.word	0x080017f7
	{
	case INIT:
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001716:	4844      	ldr	r0, [pc, #272]	; (8001828 <Scan7SEG+0x144>)
 8001718:	f001 f8ea 	bl	80028f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001722:	4841      	ldr	r0, [pc, #260]	; (8001828 <Scan7SEG+0x144>)
 8001724:	f001 f8e4 	bl	80028f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172e:	483e      	ldr	r0, [pc, #248]	; (8001828 <Scan7SEG+0x144>)
 8001730:	f001 f8de 	bl	80028f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, 1);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	483b      	ldr	r0, [pc, #236]	; (8001828 <Scan7SEG+0x144>)
 800173c:	f001 f8d8 	bl	80028f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, 1);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	4838      	ldr	r0, [pc, #224]	; (8001828 <Scan7SEG+0x144>)
 8001748:	f001 f8d2 	bl	80028f0 <HAL_GPIO_WritePin>
		display(led_buffer[0]);
 800174c:	4b37      	ldr	r3, [pc, #220]	; (800182c <Scan7SEG+0x148>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff13 	bl	800157c <display>
		status7SEG = SEG7_1ON;
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <Scan7SEG+0x140>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
		break;
 800175c:	e05f      	b.n	800181e <Scan7SEG+0x13a>
	case SEG7_1ON:
		HAL_GPIO_TogglePin(en0_GPIO_Port, en0_Pin);
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001762:	4831      	ldr	r0, [pc, #196]	; (8001828 <Scan7SEG+0x144>)
 8001764:	f001 f8dd 	bl	8002922 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en1_GPIO_Port, en1_Pin);
 8001768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176c:	482e      	ldr	r0, [pc, #184]	; (8001828 <Scan7SEG+0x144>)
 800176e:	f001 f8d8 	bl	8002922 <HAL_GPIO_TogglePin>
		display(led_buffer[1]);
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <Scan7SEG+0x148>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff00 	bl	800157c <display>
		status7SEG = SEG7_2ON;
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <Scan7SEG+0x140>)
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
		break;
 8001782:	e04c      	b.n	800181e <Scan7SEG+0x13a>
	case SEG7_2ON:
		HAL_GPIO_TogglePin(en1_GPIO_Port, en1_Pin);
 8001784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001788:	4827      	ldr	r0, [pc, #156]	; (8001828 <Scan7SEG+0x144>)
 800178a:	f001 f8ca 	bl	8002922 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en2_GPIO_Port, en2_Pin);
 800178e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001792:	4825      	ldr	r0, [pc, #148]	; (8001828 <Scan7SEG+0x144>)
 8001794:	f001 f8c5 	bl	8002922 <HAL_GPIO_TogglePin>
		display(led_buffer[2]);
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <Scan7SEG+0x148>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff feed 	bl	800157c <display>
		status7SEG = SEG7_3ON;
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <Scan7SEG+0x140>)
 80017a4:	2203      	movs	r2, #3
 80017a6:	601a      	str	r2, [r3, #0]
		break;
 80017a8:	e039      	b.n	800181e <Scan7SEG+0x13a>
	case SEG7_3ON:
		HAL_GPIO_TogglePin(en2_GPIO_Port, en2_Pin);
 80017aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ae:	481e      	ldr	r0, [pc, #120]	; (8001828 <Scan7SEG+0x144>)
 80017b0:	f001 f8b7 	bl	8002922 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en3_GPIO_Port, en3_Pin);
 80017b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b8:	481b      	ldr	r0, [pc, #108]	; (8001828 <Scan7SEG+0x144>)
 80017ba:	f001 f8b2 	bl	8002922 <HAL_GPIO_TogglePin>
		status7SEG = SEG7_4ON;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <Scan7SEG+0x140>)
 80017c0:	2204      	movs	r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
		display(led_buffer[3]);
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <Scan7SEG+0x148>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fed7 	bl	800157c <display>
		break;
 80017ce:	e026      	b.n	800181e <Scan7SEG+0x13a>
	case SEG7_4ON:
		HAL_GPIO_TogglePin(en3_GPIO_Port, en3_Pin);
 80017d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d4:	4814      	ldr	r0, [pc, #80]	; (8001828 <Scan7SEG+0x144>)
 80017d6:	f001 f8a4 	bl	8002922 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en4_GPIO_Port, en4_Pin);
 80017da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017de:	4812      	ldr	r0, [pc, #72]	; (8001828 <Scan7SEG+0x144>)
 80017e0:	f001 f89f 	bl	8002922 <HAL_GPIO_TogglePin>
		status7SEG = SEG7_5ON;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <Scan7SEG+0x140>)
 80017e6:	2205      	movs	r2, #5
 80017e8:	601a      	str	r2, [r3, #0]
		display(led_buffer[4]);
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <Scan7SEG+0x148>)
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fec4 	bl	800157c <display>
		break;
 80017f4:	e013      	b.n	800181e <Scan7SEG+0x13a>
	case SEG7_5ON:
		HAL_GPIO_TogglePin(en4_GPIO_Port, en4_Pin);
 80017f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fa:	480b      	ldr	r0, [pc, #44]	; (8001828 <Scan7SEG+0x144>)
 80017fc:	f001 f891 	bl	8002922 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en0_GPIO_Port, en0_Pin);
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	4808      	ldr	r0, [pc, #32]	; (8001828 <Scan7SEG+0x144>)
 8001806:	f001 f88c 	bl	8002922 <HAL_GPIO_TogglePin>
		status7SEG = SEG7_1ON;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <Scan7SEG+0x140>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
		display(led_buffer[0]);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <Scan7SEG+0x148>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff feb1 	bl	800157c <display>
		break;
 800181a:	e000      	b.n	800181e <Scan7SEG+0x13a>
	default:
		break;
 800181c:	bf00      	nop
	}
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200000d8 	.word	0x200000d8
 8001828:	40020400 	.word	0x40020400
 800182c:	20000050 	.word	0x20000050

08001830 <controlSingleLed>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLed(int orderTraffic, int statusLed)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d004      	beq.n	800184a <controlSingleLed+0x1a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b09      	cmp	r3, #9
 8001844:	f000 80aa 	beq.w	800199c <controlSingleLed+0x16c>
		default:
			break;
		}
		break;
	default:
		break;
 8001848:	e11f      	b.n	8001a8a <controlSingleLed+0x25a>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b0c      	cmp	r3, #12
 800184e:	f200 80a3 	bhi.w	8001998 <controlSingleLed+0x168>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <controlSingleLed+0x28>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	0800188d 	.word	0x0800188d
 800185c:	080018ad 	.word	0x080018ad
 8001860:	080018cd 	.word	0x080018cd
 8001864:	080018ed 	.word	0x080018ed
 8001868:	08001901 	.word	0x08001901
 800186c:	080018f7 	.word	0x080018f7
 8001870:	0800190b 	.word	0x0800190b
 8001874:	0800192b 	.word	0x0800192b
 8001878:	08001999 	.word	0x08001999
 800187c:	08001999 	.word	0x08001999
 8001880:	08001965 	.word	0x08001965
 8001884:	0800194b 	.word	0x0800194b
 8001888:	0800197f 	.word	0x0800197f
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800188c:	2201      	movs	r2, #1
 800188e:	2101      	movs	r1, #1
 8001890:	4880      	ldr	r0, [pc, #512]	; (8001a94 <controlSingleLed+0x264>)
 8001892:	f001 f82d 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2104      	movs	r1, #4
 800189a:	487e      	ldr	r0, [pc, #504]	; (8001a94 <controlSingleLed+0x264>)
 800189c:	f001 f828 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2102      	movs	r1, #2
 80018a4:	487b      	ldr	r0, [pc, #492]	; (8001a94 <controlSingleLed+0x264>)
 80018a6:	f001 f823 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 80018aa:	e076      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2101      	movs	r1, #1
 80018b0:	4878      	ldr	r0, [pc, #480]	; (8001a94 <controlSingleLed+0x264>)
 80018b2:	f001 f81d 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2104      	movs	r1, #4
 80018ba:	4876      	ldr	r0, [pc, #472]	; (8001a94 <controlSingleLed+0x264>)
 80018bc:	f001 f818 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2102      	movs	r1, #2
 80018c4:	4873      	ldr	r0, [pc, #460]	; (8001a94 <controlSingleLed+0x264>)
 80018c6:	f001 f813 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 80018ca:	e066      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2101      	movs	r1, #1
 80018d0:	4870      	ldr	r0, [pc, #448]	; (8001a94 <controlSingleLed+0x264>)
 80018d2:	f001 f80d 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2104      	movs	r1, #4
 80018da:	486e      	ldr	r0, [pc, #440]	; (8001a94 <controlSingleLed+0x264>)
 80018dc:	f001 f808 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	486b      	ldr	r0, [pc, #428]	; (8001a94 <controlSingleLed+0x264>)
 80018e6:	f001 f803 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 80018ea:	e056      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80018ec:	2101      	movs	r1, #1
 80018ee:	4869      	ldr	r0, [pc, #420]	; (8001a94 <controlSingleLed+0x264>)
 80018f0:	f001 f817 	bl	8002922 <HAL_GPIO_TogglePin>
			break;
 80018f4:	e051      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80018f6:	2104      	movs	r1, #4
 80018f8:	4866      	ldr	r0, [pc, #408]	; (8001a94 <controlSingleLed+0x264>)
 80018fa:	f001 f812 	bl	8002922 <HAL_GPIO_TogglePin>
			break;
 80018fe:	e04c      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8001900:	2102      	movs	r1, #2
 8001902:	4864      	ldr	r0, [pc, #400]	; (8001a94 <controlSingleLed+0x264>)
 8001904:	f001 f80d 	bl	8002922 <HAL_GPIO_TogglePin>
			break;
 8001908:	e047      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2101      	movs	r1, #1
 800190e:	4861      	ldr	r0, [pc, #388]	; (8001a94 <controlSingleLed+0x264>)
 8001910:	f000 ffee 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	2104      	movs	r1, #4
 8001918:	485e      	ldr	r0, [pc, #376]	; (8001a94 <controlSingleLed+0x264>)
 800191a:	f000 ffe9 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2102      	movs	r1, #2
 8001922:	485c      	ldr	r0, [pc, #368]	; (8001a94 <controlSingleLed+0x264>)
 8001924:	f000 ffe4 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 8001928:	e037      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800192a:	2201      	movs	r2, #1
 800192c:	2101      	movs	r1, #1
 800192e:	4859      	ldr	r0, [pc, #356]	; (8001a94 <controlSingleLed+0x264>)
 8001930:	f000 ffde 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2104      	movs	r1, #4
 8001938:	4856      	ldr	r0, [pc, #344]	; (8001a94 <controlSingleLed+0x264>)
 800193a:	f000 ffd9 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2102      	movs	r1, #2
 8001942:	4854      	ldr	r0, [pc, #336]	; (8001a94 <controlSingleLed+0x264>)
 8001944:	f000 ffd4 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 8001948:	e027      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001950:	4851      	ldr	r0, [pc, #324]	; (8001a98 <controlSingleLed+0x268>)
 8001952:	f000 ffcd 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800195c:	484e      	ldr	r0, [pc, #312]	; (8001a98 <controlSingleLed+0x268>)
 800195e:	f000 ffc7 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 8001962:	e01a      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196a:	484b      	ldr	r0, [pc, #300]	; (8001a98 <controlSingleLed+0x268>)
 800196c:	f000 ffc0 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001976:	4848      	ldr	r0, [pc, #288]	; (8001a98 <controlSingleLed+0x268>)
 8001978:	f000 ffba 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 800197c:	e00d      	b.n	800199a <controlSingleLed+0x16a>
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001984:	4844      	ldr	r0, [pc, #272]	; (8001a98 <controlSingleLed+0x268>)
 8001986:	f000 ffb3 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, SET);
 800198a:	2201      	movs	r2, #1
 800198c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001990:	4841      	ldr	r0, [pc, #260]	; (8001a98 <controlSingleLed+0x268>)
 8001992:	f000 ffad 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 8001996:	e000      	b.n	800199a <controlSingleLed+0x16a>
			break;
 8001998:	bf00      	nop
		break;
 800199a:	e076      	b.n	8001a8a <controlSingleLed+0x25a>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b07      	cmp	r3, #7
 80019a0:	d871      	bhi.n	8001a86 <controlSingleLed+0x256>
 80019a2:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <controlSingleLed+0x178>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019c9 	.word	0x080019c9
 80019ac:	080019e9 	.word	0x080019e9
 80019b0:	08001a09 	.word	0x08001a09
 80019b4:	08001a29 	.word	0x08001a29
 80019b8:	08001a3d 	.word	0x08001a3d
 80019bc:	08001a33 	.word	0x08001a33
 80019c0:	08001a47 	.word	0x08001a47
 80019c4:	08001a67 	.word	0x08001a67
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	2108      	movs	r1, #8
 80019cc:	4831      	ldr	r0, [pc, #196]	; (8001a94 <controlSingleLed+0x264>)
 80019ce:	f000 ff8f 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2120      	movs	r1, #32
 80019d6:	482f      	ldr	r0, [pc, #188]	; (8001a94 <controlSingleLed+0x264>)
 80019d8:	f000 ff8a 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2110      	movs	r1, #16
 80019e0:	482c      	ldr	r0, [pc, #176]	; (8001a94 <controlSingleLed+0x264>)
 80019e2:	f000 ff85 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 80019e6:	e04f      	b.n	8001a88 <controlSingleLed+0x258>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2108      	movs	r1, #8
 80019ec:	4829      	ldr	r0, [pc, #164]	; (8001a94 <controlSingleLed+0x264>)
 80019ee:	f000 ff7f 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2120      	movs	r1, #32
 80019f6:	4827      	ldr	r0, [pc, #156]	; (8001a94 <controlSingleLed+0x264>)
 80019f8:	f000 ff7a 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2110      	movs	r1, #16
 8001a00:	4824      	ldr	r0, [pc, #144]	; (8001a94 <controlSingleLed+0x264>)
 8001a02:	f000 ff75 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 8001a06:	e03f      	b.n	8001a88 <controlSingleLed+0x258>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	4821      	ldr	r0, [pc, #132]	; (8001a94 <controlSingleLed+0x264>)
 8001a0e:	f000 ff6f 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2120      	movs	r1, #32
 8001a16:	481f      	ldr	r0, [pc, #124]	; (8001a94 <controlSingleLed+0x264>)
 8001a18:	f000 ff6a 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2110      	movs	r1, #16
 8001a20:	481c      	ldr	r0, [pc, #112]	; (8001a94 <controlSingleLed+0x264>)
 8001a22:	f000 ff65 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 8001a26:	e02f      	b.n	8001a88 <controlSingleLed+0x258>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8001a28:	2108      	movs	r1, #8
 8001a2a:	481a      	ldr	r0, [pc, #104]	; (8001a94 <controlSingleLed+0x264>)
 8001a2c:	f000 ff79 	bl	8002922 <HAL_GPIO_TogglePin>
			break;
 8001a30:	e02a      	b.n	8001a88 <controlSingleLed+0x258>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001a32:	2120      	movs	r1, #32
 8001a34:	4817      	ldr	r0, [pc, #92]	; (8001a94 <controlSingleLed+0x264>)
 8001a36:	f000 ff74 	bl	8002922 <HAL_GPIO_TogglePin>
			break;
 8001a3a:	e025      	b.n	8001a88 <controlSingleLed+0x258>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001a3c:	2110      	movs	r1, #16
 8001a3e:	4815      	ldr	r0, [pc, #84]	; (8001a94 <controlSingleLed+0x264>)
 8001a40:	f000 ff6f 	bl	8002922 <HAL_GPIO_TogglePin>
			break;
 8001a44:	e020      	b.n	8001a88 <controlSingleLed+0x258>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2108      	movs	r1, #8
 8001a4a:	4812      	ldr	r0, [pc, #72]	; (8001a94 <controlSingleLed+0x264>)
 8001a4c:	f000 ff50 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2120      	movs	r1, #32
 8001a54:	480f      	ldr	r0, [pc, #60]	; (8001a94 <controlSingleLed+0x264>)
 8001a56:	f000 ff4b 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <controlSingleLed+0x264>)
 8001a60:	f000 ff46 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 8001a64:	e010      	b.n	8001a88 <controlSingleLed+0x258>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	2108      	movs	r1, #8
 8001a6a:	480a      	ldr	r0, [pc, #40]	; (8001a94 <controlSingleLed+0x264>)
 8001a6c:	f000 ff40 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2120      	movs	r1, #32
 8001a74:	4807      	ldr	r0, [pc, #28]	; (8001a94 <controlSingleLed+0x264>)
 8001a76:	f000 ff3b 	bl	80028f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <controlSingleLed+0x264>)
 8001a80:	f000 ff36 	bl	80028f0 <HAL_GPIO_WritePin>
			break;
 8001a84:	e000      	b.n	8001a88 <controlSingleLed+0x258>
			break;
 8001a86:	bf00      	nop
		break;
 8001a88:	bf00      	nop
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020c00 	.word	0x40020c00

08001a9c <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <runTimer+0x90>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd0b      	ble.n	8001ac0 <runTimer+0x24>
	{
		counter1--;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <runTimer+0x90>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <runTimer+0x90>)
 8001ab0:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <runTimer+0x90>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	dc02      	bgt.n	8001ac0 <runTimer+0x24>
		{
			flag1 = 1;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <runTimer+0x94>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <runTimer+0x98>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dd0b      	ble.n	8001ae0 <runTimer+0x44>
	{
		counter2--;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <runTimer+0x98>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <runTimer+0x98>)
 8001ad0:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <runTimer+0x98>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dc02      	bgt.n	8001ae0 <runTimer+0x44>
		{
			flag2 = 1;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <runTimer+0x9c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <runTimer+0xa0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	dd0b      	ble.n	8001b00 <runTimer+0x64>
	{
		counter3--;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <runTimer+0xa0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <runTimer+0xa0>)
 8001af0:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <runTimer+0xa0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	dc02      	bgt.n	8001b00 <runTimer+0x64>
		{
			flag3 = 1;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <runTimer+0xa4>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <runTimer+0xa8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dd0b      	ble.n	8001b20 <runTimer+0x84>
	{
		counter4--;
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <runTimer+0xa8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <runTimer+0xa8>)
 8001b10:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <runTimer+0xa8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	dc02      	bgt.n	8001b20 <runTimer+0x84>
		{
			flag4 = 1;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <runTimer+0xac>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	200001d8 	.word	0x200001d8
 8001b30:	200001e4 	.word	0x200001e4
 8001b34:	200001f0 	.word	0x200001f0
 8001b38:	200001dc 	.word	0x200001dc
 8001b3c:	200001d4 	.word	0x200001d4
 8001b40:	200001ec 	.word	0x200001ec
 8001b44:	200001e8 	.word	0x200001e8
 8001b48:	200001e0 	.word	0x200001e0

08001b4c <setTimer1>:

void setTimer1(int duration)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	counter1 = duration;
 8001b54:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <setTimer1+0x20>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <setTimer1+0x24>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	200001d8 	.word	0x200001d8
 8001b70:	200001e4 	.word	0x200001e4

08001b74 <setTimer2>:

void setTimer2(int duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	counter2 = duration;
 8001b7c:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <setTimer2+0x20>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
	flag2 = 0;
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <setTimer2+0x24>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	200001f0 	.word	0x200001f0
 8001b98:	200001dc 	.word	0x200001dc

08001b9c <setTimer3>:

void setTimer3(int duration)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	counter3 = duration;
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <setTimer3+0x20>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
	flag3 = 0;
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <setTimer3+0x24>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	200001d4 	.word	0x200001d4
 8001bc0:	200001ec 	.word	0x200001ec

08001bc4 <setTimer4>:

void setTimer4(int duration)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	counter4 = duration;
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <setTimer4+0x20>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
	flag4 = 0;
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <setTimer4+0x24>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	200001e8 	.word	0x200001e8
 8001be8:	200001e0 	.word	0x200001e0

08001bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d116      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_TIM_Base_MspInit+0x70>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <HAL_TIM_Base_MspInit+0x70>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_TIM_Base_MspInit+0x70>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	201c      	movs	r0, #28
 8001c70:	f000 fbc1 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c74:	201c      	movs	r0, #28
 8001c76:	f000 fbda 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c7a:	e012      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_TIM_Base_MspInit+0x74>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10d      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_TIM_Base_MspInit+0x70>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_TIM_Base_MspInit+0x70>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_TIM_Base_MspInit+0x70>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_TIM_MspPostInit+0x68>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d11d      	bne.n	8001d12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_TIM_MspPostInit+0x6c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_TIM_MspPostInit+0x70>)
 8001d0e:	f000 fc3b 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_UART_MspInit+0x94>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d133      	bne.n	8001db2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_UART_MspInit+0x98>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d92:	2307      	movs	r3, #7
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <HAL_UART_MspInit+0x9c>)
 8001d9e:	f000 fbf3 	bl	8002588 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2025      	movs	r0, #37	; 0x25
 8001da8:	f000 fb25 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dac:	2025      	movs	r0, #37	; 0x25
 8001dae:	f000 fb3e 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40011000 	.word	0x40011000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020400 	.word	0x40020400

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 f9f4 	bl	8002200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <TIM2_IRQHandler+0x10>)
 8001e22:	f001 fafa 	bl	800341a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000174 	.word	0x20000174

08001e30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <USART1_IRQHandler+0x10>)
 8001e36:	f002 f973 	bl	8004120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000130 	.word	0x20000130

08001e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <SystemInit+0x20>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <SystemInit+0x20>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <runTuningMode>:
#define GREENTUNING 3

int statusTuningMode= INITMODE;

void runTuningMode()
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <runTuningMode+0xc4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d857      	bhi.n	8001f24 <runTuningMode+0xbc>
 8001e74:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <runTuningMode+0x14>)
 8001e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001eb3 	.word	0x08001eb3
 8001e84:	08001ed9 	.word	0x08001ed9
 8001e88:	08001eff 	.word	0x08001eff
    {
        case INITMODE:
            statusTuningMode= REDTUNING;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <runTuningMode+0xc4>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001e92:	f7fe fdc7 	bl	8000a24 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <runTuningMode+0xc8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fd74 	bl	8000988 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <runTuningMode+0xc8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fd7b 	bl	80009a0 <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001eaa:	2003      	movs	r0, #3
 8001eac:	f7fe fd84 	bl	80009b8 <update7SEGBufferMode>
            // displayAll7Seg();
            // setTimer4(10);
            break;
 8001eb0:	e039      	b.n	8001f26 <runTuningMode+0xbe>
        case REDTUNING:
            statusTuningMode= YELLOWTUNING;
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <runTuningMode+0xc4>)
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001eb8:	f7fe fdb4 	bl	8000a24 <offAllSingLEDs>
            // blinkingYELLOW();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedYellow);
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <runTuningMode+0xcc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fd61 	bl	8000988 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedYellow);
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <runTuningMode+0xcc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fd68 	bl	80009a0 <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f7fe fd71 	bl	80009b8 <update7SEGBufferMode>
//            displayAll7Seg();
//            setTimer4(10);
            break;
 8001ed6:	e026      	b.n	8001f26 <runTuningMode+0xbe>
        case YELLOWTUNING:
            statusTuningMode= GREENTUNING;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <runTuningMode+0xc4>)
 8001eda:	2203      	movs	r2, #3
 8001edc:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001ede:	f7fe fda1 	bl	8000a24 <offAllSingLEDs>
            // blinkingGREEN();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedGreen);
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <runTuningMode+0xd0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fd4e 	bl	8000988 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedGreen);
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <runTuningMode+0xd0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fd55 	bl	80009a0 <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f7fe fd5e 	bl	80009b8 <update7SEGBufferMode>
            // displayAll7Seg();
            // setTimer4(10);
            break;
 8001efc:	e013      	b.n	8001f26 <runTuningMode+0xbe>
        case GREENTUNING:
            statusTuningMode= REDTUNING;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <runTuningMode+0xc4>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001f04:	f7fe fd8e 	bl	8000a24 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <runTuningMode+0xc8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fd3b 	bl	8000988 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <runTuningMode+0xc8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fd42 	bl	80009a0 <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f7fe fd4b 	bl	80009b8 <update7SEGBufferMode>
            // displayAll7Seg();
            // setTimer4(10);
            break;
 8001f22:	e000      	b.n	8001f26 <runTuningMode+0xbe>
        default:
            break;
 8001f24:	bf00      	nop
    }
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200000dc 	.word	0x200000dc
 8001f30:	20000074 	.word	0x20000074
 8001f34:	2000007c 	.word	0x2000007c
 8001f38:	20000078 	.word	0x20000078

08001f3c <initStatusTuningMode>:

void initStatusTuningMode()
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
    statusTuningMode= INITMODE;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <initStatusTuningMode+0x14>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	200000dc 	.word	0x200000dc

08001f54 <beginTuningMode>:

void beginTuningMode()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
    offSingleRedGreenWalk();
 8001f58:	f7fe fdac 	bl	8000ab4 <offSingleRedGreenWalk>
    initStatusTuningMode();
 8001f5c:	f7ff ffee 	bl	8001f3c <initStatusTuningMode>
    runTuningMode();
 8001f60:	f7ff ff82 	bl	8001e68 <runTuningMode>
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <modifyTuningMode>:

void modifyTuningMode()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <modifyTuningMode+0xac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d034      	beq.n	8001fde <modifyTuningMode+0x76>
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	dc49      	bgt.n	800200c <modifyTuningMode+0xa4>
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d002      	beq.n	8001f82 <modifyTuningMode+0x1a>
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d017      	beq.n	8001fb0 <modifyTuningMode+0x48>
            }
            update7SEGBufferTraffic1(tempDurationLedGreen);
            update7SEGBufferTraffic2(tempDurationLedGreen);
            break;
        default:
            break;
 8001f80:	e044      	b.n	800200c <modifyTuningMode+0xa4>
            tempDurationLedRed++;
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <modifyTuningMode+0xb0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	4a23      	ldr	r2, [pc, #140]	; (8002018 <modifyTuningMode+0xb0>)
 8001f8a:	6013      	str	r3, [r2, #0]
            if (tempDurationLedRed > 99)
 8001f8c:	4b22      	ldr	r3, [pc, #136]	; (8002018 <modifyTuningMode+0xb0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b63      	cmp	r3, #99	; 0x63
 8001f92:	dd02      	ble.n	8001f9a <modifyTuningMode+0x32>
                tempDurationLedRed = 0;
 8001f94:	4b20      	ldr	r3, [pc, #128]	; (8002018 <modifyTuningMode+0xb0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedRed);
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <modifyTuningMode+0xb0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fcf2 	bl	8000988 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedRed);
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <modifyTuningMode+0xb0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fcf9 	bl	80009a0 <update7SEGBufferTraffic2>
            break;
 8001fae:	e02e      	b.n	800200e <modifyTuningMode+0xa6>
            tempDurationLedYellow++;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <modifyTuningMode+0xb4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a19      	ldr	r2, [pc, #100]	; (800201c <modifyTuningMode+0xb4>)
 8001fb8:	6013      	str	r3, [r2, #0]
            if (tempDurationLedYellow > 99)
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <modifyTuningMode+0xb4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b63      	cmp	r3, #99	; 0x63
 8001fc0:	dd02      	ble.n	8001fc8 <modifyTuningMode+0x60>
                tempDurationLedYellow = 0;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <modifyTuningMode+0xb4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedYellow);
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <modifyTuningMode+0xb4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fcdb 	bl	8000988 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedYellow);
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <modifyTuningMode+0xb4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fce2 	bl	80009a0 <update7SEGBufferTraffic2>
            break;
 8001fdc:	e017      	b.n	800200e <modifyTuningMode+0xa6>
            tempDurationLedGreen++;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <modifyTuningMode+0xb8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <modifyTuningMode+0xb8>)
 8001fe6:	6013      	str	r3, [r2, #0]
            if (tempDurationLedGreen > 99)
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <modifyTuningMode+0xb8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b63      	cmp	r3, #99	; 0x63
 8001fee:	dd02      	ble.n	8001ff6 <modifyTuningMode+0x8e>
                tempDurationLedGreen = 0;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <modifyTuningMode+0xb8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedGreen);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <modifyTuningMode+0xb8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fcc4 	bl	8000988 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedGreen);
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <modifyTuningMode+0xb8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fccb 	bl	80009a0 <update7SEGBufferTraffic2>
            break;
 800200a:	e000      	b.n	800200e <modifyTuningMode+0xa6>
            break;
 800200c:	bf00      	nop
    }
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200000dc 	.word	0x200000dc
 8002018:	20000068 	.word	0x20000068
 800201c:	20000070 	.word	0x20000070
 8002020:	2000006c 	.word	0x2000006c

08002024 <saveTuningMode>:

void saveTuningMode()
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 8002028:	4b20      	ldr	r3, [pc, #128]	; (80020ac <saveTuningMode+0x88>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <saveTuningMode+0x8c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	441a      	add	r2, r3
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <saveTuningMode+0x90>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d028      	beq.n	800208c <saveTuningMode+0x68>
    {
        switch (statusTuningMode)
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <saveTuningMode+0x94>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d117      	bne.n	8002072 <saveTuningMode+0x4e>
        {
            case GREENTUNING:
                update7SEGBufferTraffic1(88);
 8002042:	2058      	movs	r0, #88	; 0x58
 8002044:	f7fe fca0 	bl	8000988 <update7SEGBufferTraffic1>
                update7SEGBufferTraffic2(88);
 8002048:	2058      	movs	r0, #88	; 0x58
 800204a:	f7fe fca9 	bl	80009a0 <update7SEGBufferTraffic2>
                update7SEGBufferMode(8);
 800204e:	2008      	movs	r0, #8
 8002050:	f7fe fcb2 	bl	80009b8 <update7SEGBufferMode>
                onAllSingLEDs();
 8002054:	f7fe fcf2 	bl	8000a3c <onAllSingLEDs>
                tempDurationLedGreen = durationLedGreen;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <saveTuningMode+0x98>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <saveTuningMode+0x8c>)
 800205e:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <saveTuningMode+0x9c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <saveTuningMode+0x90>)
 8002066:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <saveTuningMode+0xa0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <saveTuningMode+0x88>)
 800206e:	6013      	str	r3, [r2, #0]
                break;
 8002070:	e019      	b.n	80020a6 <saveTuningMode+0x82>
            default:
                tempDurationLedGreen = durationLedGreen;
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <saveTuningMode+0x98>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <saveTuningMode+0x8c>)
 8002078:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <saveTuningMode+0x9c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <saveTuningMode+0x90>)
 8002080:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <saveTuningMode+0xa0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <saveTuningMode+0x88>)
 8002088:	6013      	str	r3, [r2, #0]
                break;
 800208a:	e00c      	b.n	80020a6 <saveTuningMode+0x82>
        }
    }
    else
    {
        durationLedGreen = tempDurationLedGreen;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <saveTuningMode+0x8c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <saveTuningMode+0x98>)
 8002092:	6013      	str	r3, [r2, #0]
        durationLedRed = tempDurationLedRed;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <saveTuningMode+0x90>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <saveTuningMode+0x9c>)
 800209a:	6013      	str	r3, [r2, #0]
        durationLedYellow = tempDurationLedYellow;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <saveTuningMode+0x88>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <saveTuningMode+0xa0>)
 80020a2:	6013      	str	r3, [r2, #0]
    }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000070 	.word	0x20000070
 80020b0:	2000006c 	.word	0x2000006c
 80020b4:	20000068 	.word	0x20000068
 80020b8:	200000dc 	.word	0x200000dc
 80020bc:	20000078 	.word	0x20000078
 80020c0:	20000074 	.word	0x20000074
 80020c4:	2000007c 	.word	0x2000007c

080020c8 <animationTuningMode>:

void animationTuningMode()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <animationTuningMode+0x3c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d814      	bhi.n	80020fe <animationTuningMode+0x36>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <animationTuningMode+0x14>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	080020ff 	.word	0x080020ff
 80020e0:	080020ed 	.word	0x080020ed
 80020e4:	080020f3 	.word	0x080020f3
 80020e8:	080020f9 	.word	0x080020f9
    {
    case INITMODE:
        break;
    case REDTUNING:
        blinkingRED();
 80020ec:	f7fe fc82 	bl	80009f4 <blinkingRED>
        break;
 80020f0:	e006      	b.n	8002100 <animationTuningMode+0x38>
    case YELLOWTUNING:
        blinkingYELLOW();
 80020f2:	f7fe fc73 	bl	80009dc <blinkingYELLOW>
        break;
 80020f6:	e003      	b.n	8002100 <animationTuningMode+0x38>
    case GREENTUNING:
        blinkingGREEN();
 80020f8:	f7fe fc88 	bl	8000a0c <blinkingGREEN>
        break;
 80020fc:	e000      	b.n	8002100 <animationTuningMode+0x38>
    default:
        break;
 80020fe:	bf00      	nop
    }
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200000dc 	.word	0x200000dc

08002108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800210c:	480d      	ldr	r0, [pc, #52]	; (8002144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800210e:	490e      	ldr	r1, [pc, #56]	; (8002148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002124:	4c0b      	ldr	r4, [pc, #44]	; (8002154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002132:	f7ff fe87 	bl	8001e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f002 fe0d 	bl	8004d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213a:	f7fe fd05 	bl	8000b48 <main>
  bx  lr    
 800213e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800214c:	08004dec 	.word	0x08004dec
  ldr r2, =_sbss
 8002150:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002154:	200001f8 	.word	0x200001f8

08002158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC_IRQHandler>
	...

0800215c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <HAL_Init+0x40>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_Init+0x40>)
 8002172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_Init+0x40>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002184:	2003      	movs	r0, #3
 8002186:	f000 f92b 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218a:	200f      	movs	r0, #15
 800218c:	f000 f808 	bl	80021a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002190:	f7ff fd2c 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x54>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x58>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f943 	bl	800244a <HAL_SYSTICK_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00e      	b.n	80021ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d80a      	bhi.n	80021ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f000 f90b 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_InitTick+0x5c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000064 	.word	0x20000064
 80021f8:	20000084 	.word	0x20000084
 80021fc:	20000080 	.word	0x20000080

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000084 	.word	0x20000084
 8002224:	200001f4 	.word	0x200001f4

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	200001f4 	.word	0x200001f4

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff29 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff3e 	bl	8002288 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff8e 	bl	8002334 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5d 	bl	80022e0 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff31 	bl	80022a4 <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff feda 	bl	8002228 <HAL_GetTick>
 8002474:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d008      	beq.n	8002494 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e052      	b.n	800253a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0216 	bic.w	r2, r2, #22
 80024a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <HAL_DMA_Abort+0x62>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0208 	bic.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e4:	e013      	b.n	800250e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e6:	f7ff fe9f 	bl	8002228 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d90c      	bls.n	800250e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e015      	b.n	800253a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e4      	bne.n	80024e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	223f      	movs	r2, #63	; 0x3f
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d004      	beq.n	8002560 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e00c      	b.n	800257a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2205      	movs	r2, #5
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e16b      	b.n	800287c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 815a 	bne.w	8002876 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d005      	beq.n	80025da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d130      	bne.n	800263c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 0201 	and.w	r2, r3, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b03      	cmp	r3, #3
 8002646:	d017      	beq.n	8002678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d123      	bne.n	80026cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80b4 	beq.w	8002876 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b60      	ldr	r3, [pc, #384]	; (8002894 <HAL_GPIO_Init+0x30c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a5f      	ldr	r2, [pc, #380]	; (8002894 <HAL_GPIO_Init+0x30c>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <HAL_GPIO_Init+0x30c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_GPIO_Init+0x310>)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_GPIO_Init+0x314>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02b      	beq.n	80027ae <HAL_GPIO_Init+0x226>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a51      	ldr	r2, [pc, #324]	; (80028a0 <HAL_GPIO_Init+0x318>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d025      	beq.n	80027aa <HAL_GPIO_Init+0x222>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a50      	ldr	r2, [pc, #320]	; (80028a4 <HAL_GPIO_Init+0x31c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01f      	beq.n	80027a6 <HAL_GPIO_Init+0x21e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4f      	ldr	r2, [pc, #316]	; (80028a8 <HAL_GPIO_Init+0x320>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x21a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4e      	ldr	r2, [pc, #312]	; (80028ac <HAL_GPIO_Init+0x324>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x216>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4d      	ldr	r2, [pc, #308]	; (80028b0 <HAL_GPIO_Init+0x328>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x212>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4c      	ldr	r2, [pc, #304]	; (80028b4 <HAL_GPIO_Init+0x32c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x20e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4b      	ldr	r2, [pc, #300]	; (80028b8 <HAL_GPIO_Init+0x330>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x20a>
 800278e:	2307      	movs	r3, #7
 8002790:	e00e      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 8002792:	2308      	movs	r3, #8
 8002794:	e00c      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 8002796:	2306      	movs	r3, #6
 8002798:	e00a      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 800279a:	2305      	movs	r3, #5
 800279c:	e008      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 800279e:	2304      	movs	r3, #4
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e004      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_GPIO_Init+0x228>
 80027ae:	2300      	movs	r3, #0
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	f002 0203 	and.w	r2, r2, #3
 80027b6:	0092      	lsls	r2, r2, #2
 80027b8:	4093      	lsls	r3, r2
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c0:	4935      	ldr	r1, [pc, #212]	; (8002898 <HAL_GPIO_Init+0x310>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_GPIO_Init+0x334>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f2:	4a32      	ldr	r2, [pc, #200]	; (80028bc <HAL_GPIO_Init+0x334>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027f8:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_GPIO_Init+0x334>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281c:	4a27      	ldr	r2, [pc, #156]	; (80028bc <HAL_GPIO_Init+0x334>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002822:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_GPIO_Init+0x334>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002846:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_GPIO_Init+0x334>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_GPIO_Init+0x334>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002870:	4a12      	ldr	r2, [pc, #72]	; (80028bc <HAL_GPIO_Init+0x334>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	f67f ae90 	bls.w	80025a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40013800 	.word	0x40013800
 800289c:	40020000 	.word	0x40020000
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40020800 	.word	0x40020800
 80028a8:	40020c00 	.word	0x40020c00
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40021400 	.word	0x40021400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40021c00 	.word	0x40021c00
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e001      	b.n	80028e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
 80028fc:	4613      	mov	r3, r2
 80028fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800290c:	e003      	b.n	8002916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	041a      	lsls	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	041a      	lsls	r2, r3, #16
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43d9      	mvns	r1, r3
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	400b      	ands	r3, r1
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	619a      	str	r2, [r3, #24]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e264      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d075      	beq.n	8002a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002976:	4ba3      	ldr	r3, [pc, #652]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d00c      	beq.n	800299c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002982:	4ba0      	ldr	r3, [pc, #640]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298a:	2b08      	cmp	r3, #8
 800298c:	d112      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298e:	4b9d      	ldr	r3, [pc, #628]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299a:	d10b      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	4b99      	ldr	r3, [pc, #612]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05b      	beq.n	8002a60 <HAL_RCC_OscConfig+0x108>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d157      	bne.n	8002a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e23f      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x74>
 80029be:	4b91      	ldr	r3, [pc, #580]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a90      	ldr	r2, [pc, #576]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b8b      	ldr	r3, [pc, #556]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a8a      	ldr	r2, [pc, #552]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a87      	ldr	r2, [pc, #540]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029f0:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a83      	ldr	r2, [pc, #524]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a80      	ldr	r2, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7ff fc0a 	bl	8002228 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff fc06 	bl	8002228 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e204      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xc0>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff fbf6 	bl	8002228 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a40:	f7ff fbf2 	bl	8002228 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1f0      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	4b6c      	ldr	r3, [pc, #432]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0xe8>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d063      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6e:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d11c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a86:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x152>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e1c4      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aaa:	4b56      	ldr	r3, [pc, #344]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4952      	ldr	r1, [pc, #328]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	e03a      	b.n	8002b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac8:	4b4f      	ldr	r3, [pc, #316]	; (8002c08 <HAL_RCC_OscConfig+0x2b0>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7ff fbab 	bl	8002228 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7ff fba7 	bl	8002228 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1a5      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4940      	ldr	r1, [pc, #256]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <HAL_RCC_OscConfig+0x2b0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7ff fb8a 	bl	8002228 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b18:	f7ff fb86 	bl	8002228 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e184      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d030      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d016      	beq.n	8002b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_RCC_OscConfig+0x2b4>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7ff fb6a 	bl	8002228 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b58:	f7ff fb66 	bl	8002228 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e164      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x200>
 8002b76:	e015      	b.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x2b4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff fb53 	bl	8002228 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b86:	f7ff fb4f 	bl	8002228 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e14d      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a0 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x2b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d121      	bne.n	8002c32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_RCC_OscConfig+0x2b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_RCC_OscConfig+0x2b8>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7ff fb15 	bl	8002228 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e011      	b.n	8002c26 <HAL_RCC_OscConfig+0x2ce>
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	42470000 	.word	0x42470000
 8002c0c:	42470e80 	.word	0x42470e80
 8002c10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7ff fb08 	bl	8002228 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e106      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b85      	ldr	r3, [pc, #532]	; (8002e3c <HAL_RCC_OscConfig+0x4e4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x2f0>
 8002c3a:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a80      	ldr	r2, [pc, #512]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
 8002c46:	e01c      	b.n	8002c82 <HAL_RCC_OscConfig+0x32a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x312>
 8002c50:	4b7b      	ldr	r3, [pc, #492]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a7a      	ldr	r2, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	4b78      	ldr	r3, [pc, #480]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a77      	ldr	r2, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	e00b      	b.n	8002c82 <HAL_RCC_OscConfig+0x32a>
 8002c6a:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a74      	ldr	r2, [pc, #464]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a71      	ldr	r2, [pc, #452]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7ff facd 	bl	8002228 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7ff fac9 	bl	8002228 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0c5      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ee      	beq.n	8002c92 <HAL_RCC_OscConfig+0x33a>
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fab7 	bl	8002228 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7ff fab3 	bl	8002228 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0af      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	4b5a      	ldr	r3, [pc, #360]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ee      	bne.n	8002cbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d105      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce6:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a55      	ldr	r2, [pc, #340]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 809b 	beq.w	8002e32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d05c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d141      	bne.n	8002d94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d10:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <HAL_RCC_OscConfig+0x4ec>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7ff fa87 	bl	8002228 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7ff fa83 	bl	8002228 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e081      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d30:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	019b      	lsls	r3, r3, #6
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	061b      	lsls	r3, r3, #24
 8002d60:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d66:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <HAL_RCC_OscConfig+0x4ec>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fa5c 	bl	8002228 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d74:	f7ff fa58 	bl	8002228 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e056      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x41c>
 8002d92:	e04e      	b.n	8002e32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d94:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_RCC_OscConfig+0x4ec>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7ff fa45 	bl	8002228 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da2:	f7ff fa41 	bl	8002228 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e03f      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x44a>
 8002dc0:	e037      	b.n	8002e32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e032      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_RCC_OscConfig+0x4e8>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d028      	beq.n	8002e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d121      	bne.n	8002e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d11a      	bne.n	8002e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dfe:	4013      	ands	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	40023800 	.word	0x40023800
 8002e44:	42470060 	.word	0x42470060

08002e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0cc      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b68      	ldr	r3, [pc, #416]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d90c      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b65      	ldr	r3, [pc, #404]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0b8      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e9c:	4b59      	ldr	r3, [pc, #356]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb4:	4b53      	ldr	r3, [pc, #332]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a52      	ldr	r2, [pc, #328]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b50      	ldr	r3, [pc, #320]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	494d      	ldr	r1, [pc, #308]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d044      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b47      	ldr	r3, [pc, #284]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e06f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e067      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4934      	ldr	r1, [pc, #208]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7ff f976 	bl	8002228 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7ff f972 	bl	8002228 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e04f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b25      	ldr	r3, [pc, #148]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d20c      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e032      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4916      	ldr	r1, [pc, #88]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	490e      	ldr	r1, [pc, #56]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fce:	f000 f821 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	490a      	ldr	r1, [pc, #40]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	5ccb      	ldrb	r3, [r1, r3]
 8002fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff f8d6 	bl	80021a0 <HAL_InitTick>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00
 8003004:	40023800 	.word	0x40023800
 8003008:	08004dc4 	.word	0x08004dc4
 800300c:	20000064 	.word	0x20000064
 8003010:	20000080 	.word	0x20000080

08003014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003014:	b5b0      	push	{r4, r5, r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800301a:	2100      	movs	r1, #0
 800301c:	6079      	str	r1, [r7, #4]
 800301e:	2100      	movs	r1, #0
 8003020:	60f9      	str	r1, [r7, #12]
 8003022:	2100      	movs	r1, #0
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003026:	2100      	movs	r1, #0
 8003028:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302a:	4952      	ldr	r1, [pc, #328]	; (8003174 <HAL_RCC_GetSysClockFreq+0x160>)
 800302c:	6889      	ldr	r1, [r1, #8]
 800302e:	f001 010c 	and.w	r1, r1, #12
 8003032:	2908      	cmp	r1, #8
 8003034:	d00d      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x3e>
 8003036:	2908      	cmp	r1, #8
 8003038:	f200 8094 	bhi.w	8003164 <HAL_RCC_GetSysClockFreq+0x150>
 800303c:	2900      	cmp	r1, #0
 800303e:	d002      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x32>
 8003040:	2904      	cmp	r1, #4
 8003042:	d003      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x38>
 8003044:	e08e      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_GetSysClockFreq+0x164>)
 8003048:	60bb      	str	r3, [r7, #8]
       break;
 800304a:	e08e      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304c:	4b4b      	ldr	r3, [pc, #300]	; (800317c <HAL_RCC_GetSysClockFreq+0x168>)
 800304e:	60bb      	str	r3, [r7, #8]
      break;
 8003050:	e08b      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003052:	4948      	ldr	r1, [pc, #288]	; (8003174 <HAL_RCC_GetSysClockFreq+0x160>)
 8003054:	6849      	ldr	r1, [r1, #4]
 8003056:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800305a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800305c:	4945      	ldr	r1, [pc, #276]	; (8003174 <HAL_RCC_GetSysClockFreq+0x160>)
 800305e:	6849      	ldr	r1, [r1, #4]
 8003060:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003064:	2900      	cmp	r1, #0
 8003066:	d024      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003068:	4942      	ldr	r1, [pc, #264]	; (8003174 <HAL_RCC_GetSysClockFreq+0x160>)
 800306a:	6849      	ldr	r1, [r1, #4]
 800306c:	0989      	lsrs	r1, r1, #6
 800306e:	4608      	mov	r0, r1
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003078:	f04f 0500 	mov.w	r5, #0
 800307c:	ea00 0204 	and.w	r2, r0, r4
 8003080:	ea01 0305 	and.w	r3, r1, r5
 8003084:	493d      	ldr	r1, [pc, #244]	; (800317c <HAL_RCC_GetSysClockFreq+0x168>)
 8003086:	fb01 f003 	mul.w	r0, r1, r3
 800308a:	2100      	movs	r1, #0
 800308c:	fb01 f102 	mul.w	r1, r1, r2
 8003090:	1844      	adds	r4, r0, r1
 8003092:	493a      	ldr	r1, [pc, #232]	; (800317c <HAL_RCC_GetSysClockFreq+0x168>)
 8003094:	fba2 0101 	umull	r0, r1, r2, r1
 8003098:	1863      	adds	r3, r4, r1
 800309a:	4619      	mov	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	461a      	mov	r2, r3
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	f7fd f890 	bl	80001c8 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4613      	mov	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	e04a      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b2:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_RCC_GetSysClockFreq+0x160>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	461a      	mov	r2, r3
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030c2:	f04f 0100 	mov.w	r1, #0
 80030c6:	ea02 0400 	and.w	r4, r2, r0
 80030ca:	ea03 0501 	and.w	r5, r3, r1
 80030ce:	4620      	mov	r0, r4
 80030d0:	4629      	mov	r1, r5
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	014b      	lsls	r3, r1, #5
 80030dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030e0:	0142      	lsls	r2, r0, #5
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	1b00      	subs	r0, r0, r4
 80030e8:	eb61 0105 	sbc.w	r1, r1, r5
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	018b      	lsls	r3, r1, #6
 80030f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030fa:	0182      	lsls	r2, r0, #6
 80030fc:	1a12      	subs	r2, r2, r0
 80030fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	00d9      	lsls	r1, r3, #3
 800310c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003110:	00d0      	lsls	r0, r2, #3
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	1912      	adds	r2, r2, r4
 8003118:	eb45 0303 	adc.w	r3, r5, r3
 800311c:	f04f 0000 	mov.w	r0, #0
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	0299      	lsls	r1, r3, #10
 8003126:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800312a:	0290      	lsls	r0, r2, #10
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	f7fd f844 	bl	80001c8 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_GetSysClockFreq+0x160>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	3301      	adds	r3, #1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	60bb      	str	r3, [r7, #8]
      break;
 8003162:	e002      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <HAL_RCC_GetSysClockFreq+0x164>)
 8003166:	60bb      	str	r3, [r7, #8]
      break;
 8003168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316a:	68bb      	ldr	r3, [r7, #8]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bdb0      	pop	{r4, r5, r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400
 800317c:	017d7840 	.word	0x017d7840

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000064 	.word	0x20000064

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08004dd4 	.word	0x08004dd4

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffdc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08004dd4 	.word	0x08004dd4

080031e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e041      	b.n	800327e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fd14 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 fbb2 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d001      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e04e      	b.n	800333e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <HAL_TIM_Base_Start_IT+0xc4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d022      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x80>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ca:	d01d      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <HAL_TIM_Base_Start_IT+0xc8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d018      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x80>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_TIM_Base_Start_IT+0xcc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x80>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <HAL_TIM_Base_Start_IT+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00e      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x80>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_TIM_Base_Start_IT+0xd4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x80>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_TIM_Base_Start_IT+0xd8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x80>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_TIM_Base_Start_IT+0xdc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d111      	bne.n	800332c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b06      	cmp	r3, #6
 8003318:	d010      	beq.n	800333c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	e007      	b.n	800333c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40010400 	.word	0x40010400
 8003360:	40014000 	.word	0x40014000
 8003364:	40001800 	.word	0x40001800

08003368 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e041      	b.n	80033fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f839 	bl	8003406 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 faf2 	bl	8003990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d122      	bne.n	8003476 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d11b      	bne.n	8003476 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f06f 0202 	mvn.w	r2, #2
 8003446:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fa78 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 8003462:	e005      	b.n	8003470 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa6a 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa7b 	bl	8003966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d122      	bne.n	80034ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d11b      	bne.n	80034ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0204 	mvn.w	r2, #4
 800349a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa4e 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 80034b6:	e005      	b.n	80034c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fa40 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa51 	bl	8003966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d122      	bne.n	800351e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d11b      	bne.n	800351e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0208 	mvn.w	r2, #8
 80034ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2204      	movs	r2, #4
 80034f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa24 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 800350a:	e005      	b.n	8003518 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fa16 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa27 	bl	8003966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d122      	bne.n	8003572 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b10      	cmp	r3, #16
 8003538:	d11b      	bne.n	8003572 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f06f 0210 	mvn.w	r2, #16
 8003542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2208      	movs	r2, #8
 8003548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f9fa 	bl	8003952 <HAL_TIM_IC_CaptureCallback>
 800355e:	e005      	b.n	800356c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f9ec 	bl	800393e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9fd 	bl	8003966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10e      	bne.n	800359e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0201 	mvn.w	r2, #1
 8003596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7fd fd81 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d10e      	bne.n	80035ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fd53 	bl	8004070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d10e      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d107      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f9c2 	bl	800397a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d10e      	bne.n	8003622 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b20      	cmp	r3, #32
 8003610:	d107      	bne.n	8003622 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f06f 0220 	mvn.w	r2, #32
 800361a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fd1d 	bl	800405c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003646:	2302      	movs	r3, #2
 8003648:	e0ae      	b.n	80037a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	f200 809f 	bhi.w	8003798 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003695 	.word	0x08003695
 8003664:	08003799 	.word	0x08003799
 8003668:	08003799 	.word	0x08003799
 800366c:	08003799 	.word	0x08003799
 8003670:	080036d5 	.word	0x080036d5
 8003674:	08003799 	.word	0x08003799
 8003678:	08003799 	.word	0x08003799
 800367c:	08003799 	.word	0x08003799
 8003680:	08003717 	.word	0x08003717
 8003684:	08003799 	.word	0x08003799
 8003688:	08003799 	.word	0x08003799
 800368c:	08003799 	.word	0x08003799
 8003690:	08003757 	.word	0x08003757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fa18 	bl	8003ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0208 	orr.w	r2, r2, #8
 80036ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0204 	bic.w	r2, r2, #4
 80036be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6999      	ldr	r1, [r3, #24]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	619a      	str	r2, [r3, #24]
      break;
 80036d2:	e064      	b.n	800379e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fa68 	bl	8003bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6999      	ldr	r1, [r3, #24]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	021a      	lsls	r2, r3, #8
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	619a      	str	r2, [r3, #24]
      break;
 8003714:	e043      	b.n	800379e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fabd 	bl	8003c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0208 	orr.w	r2, r2, #8
 8003730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0204 	bic.w	r2, r2, #4
 8003740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69d9      	ldr	r1, [r3, #28]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	61da      	str	r2, [r3, #28]
      break;
 8003754:	e023      	b.n	800379e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fb11 	bl	8003d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69d9      	ldr	r1, [r3, #28]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	021a      	lsls	r2, r3, #8
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	61da      	str	r2, [r3, #28]
      break;
 8003796:	e002      	b.n	800379e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	75fb      	strb	r3, [r7, #23]
      break;
 800379c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_TIM_ConfigClockSource+0x1c>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e0b4      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x186>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003804:	d03e      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0xd4>
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380a:	f200 8087 	bhi.w	800391c <HAL_TIM_ConfigClockSource+0x16c>
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	f000 8086 	beq.w	8003922 <HAL_TIM_ConfigClockSource+0x172>
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	d87f      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b70      	cmp	r3, #112	; 0x70
 800381e:	d01a      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0xa6>
 8003820:	2b70      	cmp	r3, #112	; 0x70
 8003822:	d87b      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b60      	cmp	r3, #96	; 0x60
 8003826:	d050      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x11a>
 8003828:	2b60      	cmp	r3, #96	; 0x60
 800382a:	d877      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x16c>
 800382c:	2b50      	cmp	r3, #80	; 0x50
 800382e:	d03c      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0xfa>
 8003830:	2b50      	cmp	r3, #80	; 0x50
 8003832:	d873      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d058      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x13a>
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d86f      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b30      	cmp	r3, #48	; 0x30
 800383e:	d064      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x15a>
 8003840:	2b30      	cmp	r3, #48	; 0x30
 8003842:	d86b      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d060      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x15a>
 8003848:	2b20      	cmp	r3, #32
 800384a:	d867      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d05c      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x15a>
 8003850:	2b10      	cmp	r3, #16
 8003852:	d05a      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x15a>
 8003854:	e062      	b.n	800391c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6899      	ldr	r1, [r3, #8]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f000 fb5d 	bl	8003f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	609a      	str	r2, [r3, #8]
      break;
 8003882:	e04f      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f000 fb46 	bl	8003f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038a6:	609a      	str	r2, [r3, #8]
      break;
 80038a8:	e03c      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f000 faba 	bl	8003e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2150      	movs	r1, #80	; 0x50
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fb13 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 80038c8:	e02c      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f000 fad9 	bl	8003e8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2160      	movs	r1, #96	; 0x60
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fb03 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 80038e8:	e01c      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f000 fa9a 	bl	8003e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2140      	movs	r1, #64	; 0x40
 8003902:	4618      	mov	r0, r3
 8003904:	f000 faf3 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003908:	e00c      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f000 faea 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 800391a:	e003      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	e000      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ae:	d00f      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <TIM_Base_SetConfig+0x118>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <TIM_Base_SetConfig+0x11c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3b      	ldr	r2, [pc, #236]	; (8003ab0 <TIM_Base_SetConfig+0x120>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02b      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d027      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <TIM_Base_SetConfig+0x118>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d023      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <TIM_Base_SetConfig+0x11c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01f      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <TIM_Base_SetConfig+0x120>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01b      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d017      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <TIM_Base_SetConfig+0x128>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a27      	ldr	r2, [pc, #156]	; (8003abc <TIM_Base_SetConfig+0x12c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00f      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <TIM_Base_SetConfig+0x130>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00b      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <TIM_Base_SetConfig+0x134>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <TIM_Base_SetConfig+0x138>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a23      	ldr	r2, [pc, #140]	; (8003acc <TIM_Base_SetConfig+0x13c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d108      	bne.n	8003a54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <TIM_Base_SetConfig+0x114>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0xf8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <TIM_Base_SetConfig+0x124>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d103      	bne.n	8003a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	615a      	str	r2, [r3, #20]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	40000c00 	.word	0x40000c00
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800
 8003ac4:	40001800 	.word	0x40001800
 8003ac8:	40001c00 	.word	0x40001c00
 8003acc:	40002000 	.word	0x40002000

08003ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f023 0302 	bic.w	r3, r3, #2
 8003b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <TIM_OC1_SetConfig+0xd8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_OC1_SetConfig+0x64>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <TIM_OC1_SetConfig+0xdc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10c      	bne.n	8003b4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0308 	bic.w	r3, r3, #8
 8003b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <TIM_OC1_SetConfig+0xd8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_OC1_SetConfig+0x8e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <TIM_OC1_SetConfig+0xdc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d111      	bne.n	8003b82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40010400 	.word	0x40010400

08003bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0210 	bic.w	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0320 	bic.w	r3, r3, #32
 8003bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <TIM_OC2_SetConfig+0xe4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_OC2_SetConfig+0x68>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <TIM_OC2_SetConfig+0xe8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10d      	bne.n	8003c34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <TIM_OC2_SetConfig+0xe4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC2_SetConfig+0x94>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <TIM_OC2_SetConfig+0xe8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d113      	bne.n	8003c6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40010000 	.word	0x40010000
 8003c98:	40010400 	.word	0x40010400

08003c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <TIM_OC3_SetConfig+0xe0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_OC3_SetConfig+0x66>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <TIM_OC3_SetConfig+0xe4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10d      	bne.n	8003d1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <TIM_OC3_SetConfig+0xe0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_OC3_SetConfig+0x92>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <TIM_OC3_SetConfig+0xe4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d113      	bne.n	8003d56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	621a      	str	r2, [r3, #32]
}
 8003d70:	bf00      	nop
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40010400 	.word	0x40010400

08003d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	031b      	lsls	r3, r3, #12
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <TIM_OC4_SetConfig+0xa4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC4_SetConfig+0x68>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <TIM_OC4_SetConfig+0xa8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d109      	bne.n	8003e00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	019b      	lsls	r3, r3, #6
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40010400 	.word	0x40010400

08003e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0201 	bic.w	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 030a 	bic.w	r3, r3, #10
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b087      	sub	sp, #28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	031b      	lsls	r3, r3, #12
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f043 0307 	orr.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e05a      	b.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d01d      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a17      	ldr	r2, [pc, #92]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a15      	ldr	r2, [pc, #84]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10c      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800400c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40001800 	.word	0x40001800

0800405c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e03f      	b.n	8004116 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fe3c 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	; 0x24
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fc7b 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0ba      	sub	sp, #232	; 0xe8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800415e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_UART_IRQHandler+0x66>
 8004172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb65 	bl	800484e <UART_Receive_IT>
      return;
 8004184:	e256      	b.n	8004634 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80de 	beq.w	800434c <HAL_UART_IRQHandler+0x22c>
 8004190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80d1 	beq.w	800434c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_UART_IRQHandler+0xae>
 80041b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f043 0201 	orr.w	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <HAL_UART_IRQHandler+0xd2>
 80041da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f043 0202 	orr.w	r2, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_UART_IRQHandler+0xf6>
 80041fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d011      	beq.n	8004246 <HAL_UART_IRQHandler+0x126>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800422e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f043 0208 	orr.w	r2, r3, #8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 81ed 	beq.w	800462a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_UART_IRQHandler+0x14e>
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 faf0 	bl	800484e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <HAL_UART_IRQHandler+0x17a>
 8004292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04f      	beq.n	800433a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f9f8 	bl	8004690 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d141      	bne.n	8004332 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1d9      	bne.n	80042ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	4a7d      	ldr	r2, [pc, #500]	; (80044fc <HAL_UART_IRQHandler+0x3dc>)
 8004308:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe f917 	bl	8002542 <HAL_DMA_Abort_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004324:	4610      	mov	r0, r2
 8004326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	e00e      	b.n	8004348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f99a 	bl	8004664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	e00a      	b.n	8004348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f996 	bl	8004664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e006      	b.n	8004348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f992 	bl	8004664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004346:	e170      	b.n	800462a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	bf00      	nop
    return;
 800434a:	e16e      	b.n	800462a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	2b01      	cmp	r3, #1
 8004352:	f040 814a 	bne.w	80045ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8143 	beq.w	80045ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 813c 	beq.w	80045ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	f040 80b4 	bne.w	8004500 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 8140 	beq.w	800462e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043b6:	429a      	cmp	r2, r3
 80043b8:	f080 8139 	bcs.w	800462e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ce:	f000 8088 	beq.w	80044e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800440a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1d9      	bne.n	80043d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800442e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004442:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004446:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800444a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e1      	bne.n	800441e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800446a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800446c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3314      	adds	r3, #20
 800447a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800447e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800448c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e3      	bne.n	800445a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b2:	f023 0310 	bic.w	r3, r3, #16
 80044b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80044c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e3      	bne.n	80044a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd ffc0 	bl	8002462 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f8c0 	bl	8004678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044f8:	e099      	b.n	800462e <HAL_UART_IRQHandler+0x50e>
 80044fa:	bf00      	nop
 80044fc:	08004757 	.word	0x08004757
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004508:	b29b      	uxth	r3, r3
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 808b 	beq.w	8004632 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800451c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8086 	beq.w	8004632 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800453c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800454a:	647a      	str	r2, [r7, #68]	; 0x44
 800454c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e3      	bne.n	8004526 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	623b      	str	r3, [r7, #32]
   return(result);
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3314      	adds	r3, #20
 800457e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004582:	633a      	str	r2, [r7, #48]	; 0x30
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e3      	bne.n	800455e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0310 	bic.w	r3, r3, #16
 80045ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045c8:	61fa      	str	r2, [r7, #28]
 80045ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	69b9      	ldr	r1, [r7, #24]
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	617b      	str	r3, [r7, #20]
   return(result);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e3      	bne.n	80045a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f848 	bl	8004678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045e8:	e023      	b.n	8004632 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_UART_IRQHandler+0x4ea>
 80045f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8bb 	bl	800477e <UART_Transmit_IT>
    return;
 8004608:	e014      	b.n	8004634 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <HAL_UART_IRQHandler+0x514>
 8004616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8fb 	bl	800481e <UART_EndTransmit_IT>
    return;
 8004628:	e004      	b.n	8004634 <HAL_UART_IRQHandler+0x514>
    return;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <HAL_UART_IRQHandler+0x514>
      return;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HAL_UART_IRQHandler+0x514>
      return;
 8004632:	bf00      	nop
  }
}
 8004634:	37e8      	adds	r7, #232	; 0xe8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop

0800463c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b095      	sub	sp, #84	; 0x54
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046b8:	643a      	str	r2, [r7, #64]	; 0x40
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e5      	bne.n	8004698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	61fb      	str	r3, [r7, #28]
   return(result);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e5      	bne.n	80046cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b01      	cmp	r3, #1
 8004706:	d119      	bne.n	800473c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	60bb      	str	r3, [r7, #8]
   return(result);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 0310 	bic.w	r3, r3, #16
 800471e:	647b      	str	r3, [r7, #68]	; 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004728:	61ba      	str	r2, [r7, #24]
 800472a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6979      	ldr	r1, [r7, #20]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	613b      	str	r3, [r7, #16]
   return(result);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e5      	bne.n	8004708 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
}
 800474a:	bf00      	nop
 800474c:	3754      	adds	r7, #84	; 0x54
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ff77 	bl	8004664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b21      	cmp	r3, #33	; 0x21
 8004790:	d13e      	bne.n	8004810 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d114      	bne.n	80047c6 <UART_Transmit_IT+0x48>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d110      	bne.n	80047c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]
 80047c4:	e008      	b.n	80047d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6211      	str	r1, [r2, #32]
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4619      	mov	r1, r3
 80047e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10f      	bne.n	800480c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	e000      	b.n	8004812 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004810:	2302      	movs	r3, #2
  }
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004834:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff fefc 	bl	800463c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b08c      	sub	sp, #48	; 0x30
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b22      	cmp	r3, #34	; 0x22
 8004860:	f040 80ab 	bne.w	80049ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d117      	bne.n	800489e <UART_Receive_IT+0x50>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d113      	bne.n	800489e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	b29a      	uxth	r2, r3
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	1c9a      	adds	r2, r3, #2
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
 800489c:	e026      	b.n	80048ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b0:	d007      	beq.n	80048c2 <UART_Receive_IT+0x74>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <UART_Receive_IT+0x82>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	e008      	b.n	80048e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4619      	mov	r1, r3
 80048fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d15a      	bne.n	80049b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0220 	bic.w	r2, r2, #32
 800490e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	2b01      	cmp	r3, #1
 800493e:	d135      	bne.n	80049ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	613b      	str	r3, [r7, #16]
   return(result);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f023 0310 	bic.w	r3, r3, #16
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004966:	623a      	str	r2, [r7, #32]
 8004968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	69f9      	ldr	r1, [r7, #28]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	61bb      	str	r3, [r7, #24]
   return(result);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e5      	bne.n	8004946 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b10      	cmp	r3, #16
 8004986:	d10a      	bne.n	800499e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fe67 	bl	8004678 <HAL_UARTEx_RxEventCallback>
 80049aa:	e002      	b.n	80049b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff fe4f 	bl	8004650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e002      	b.n	80049bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e000      	b.n	80049bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049ba:	2302      	movs	r3, #2
  }
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3730      	adds	r7, #48	; 0x30
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	b09f      	sub	sp, #124	; 0x7c
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049da:	68d9      	ldr	r1, [r3, #12]
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	ea40 0301 	orr.w	r3, r0, r1
 80049e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a08:	f021 010c 	bic.w	r1, r1, #12
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a12:	430b      	orrs	r3, r1
 8004a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a22:	6999      	ldr	r1, [r3, #24]
 8004a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	ea40 0301 	orr.w	r3, r0, r1
 8004a2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4bc5      	ldr	r3, [pc, #788]	; (8004d48 <UART_SetConfig+0x384>)
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d004      	beq.n	8004a42 <UART_SetConfig+0x7e>
 8004a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4bc3      	ldr	r3, [pc, #780]	; (8004d4c <UART_SetConfig+0x388>)
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d103      	bne.n	8004a4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a42:	f7fe fbbd 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8004a46:	6778      	str	r0, [r7, #116]	; 0x74
 8004a48:	e002      	b.n	8004a50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4a:	f7fe fba5 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8004a4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a58:	f040 80b6 	bne.w	8004bc8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a5e:	461c      	mov	r4, r3
 8004a60:	f04f 0500 	mov.w	r5, #0
 8004a64:	4622      	mov	r2, r4
 8004a66:	462b      	mov	r3, r5
 8004a68:	1891      	adds	r1, r2, r2
 8004a6a:	6439      	str	r1, [r7, #64]	; 0x40
 8004a6c:	415b      	adcs	r3, r3
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a74:	1912      	adds	r2, r2, r4
 8004a76:	eb45 0303 	adc.w	r3, r5, r3
 8004a7a:	f04f 0000 	mov.w	r0, #0
 8004a7e:	f04f 0100 	mov.w	r1, #0
 8004a82:	00d9      	lsls	r1, r3, #3
 8004a84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a88:	00d0      	lsls	r0, r2, #3
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	1911      	adds	r1, r2, r4
 8004a90:	6639      	str	r1, [r7, #96]	; 0x60
 8004a92:	416b      	adcs	r3, r5
 8004a94:	667b      	str	r3, [r7, #100]	; 0x64
 8004a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	1891      	adds	r1, r2, r2
 8004aa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004aa4:	415b      	adcs	r3, r3
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ab0:	f7fb fb8a 	bl	80001c8 <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4ba5      	ldr	r3, [pc, #660]	; (8004d50 <UART_SetConfig+0x38c>)
 8004aba:	fba3 2302 	umull	r2, r3, r3, r2
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	011e      	lsls	r6, r3, #4
 8004ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac4:	461c      	mov	r4, r3
 8004ac6:	f04f 0500 	mov.w	r5, #0
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ada:	1912      	adds	r2, r2, r4
 8004adc:	eb45 0303 	adc.w	r3, r5, r3
 8004ae0:	f04f 0000 	mov.w	r0, #0
 8004ae4:	f04f 0100 	mov.w	r1, #0
 8004ae8:	00d9      	lsls	r1, r3, #3
 8004aea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aee:	00d0      	lsls	r0, r2, #3
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	1911      	adds	r1, r2, r4
 8004af6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004af8:	416b      	adcs	r3, r5
 8004afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	461a      	mov	r2, r3
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	1891      	adds	r1, r2, r2
 8004b08:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b0a:	415b      	adcs	r3, r3
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004b16:	f7fb fb57 	bl	80001c8 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4b8c      	ldr	r3, [pc, #560]	; (8004d50 <UART_SetConfig+0x38c>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	3332      	adds	r3, #50	; 0x32
 8004b32:	4a87      	ldr	r2, [pc, #540]	; (8004d50 <UART_SetConfig+0x38c>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b40:	441e      	add	r6, r3
 8004b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b44:	4618      	mov	r0, r3
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	1894      	adds	r4, r2, r2
 8004b50:	623c      	str	r4, [r7, #32]
 8004b52:	415b      	adcs	r3, r3
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
 8004b56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b5a:	1812      	adds	r2, r2, r0
 8004b5c:	eb41 0303 	adc.w	r3, r1, r3
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	f04f 0500 	mov.w	r5, #0
 8004b68:	00dd      	lsls	r5, r3, #3
 8004b6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b6e:	00d4      	lsls	r4, r2, #3
 8004b70:	4622      	mov	r2, r4
 8004b72:	462b      	mov	r3, r5
 8004b74:	1814      	adds	r4, r2, r0
 8004b76:	653c      	str	r4, [r7, #80]	; 0x50
 8004b78:	414b      	adcs	r3, r1
 8004b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	461a      	mov	r2, r3
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	1891      	adds	r1, r2, r2
 8004b88:	61b9      	str	r1, [r7, #24]
 8004b8a:	415b      	adcs	r3, r3
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b96:	f7fb fb17 	bl	80001c8 <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <UART_SetConfig+0x38c>)
 8004ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	2164      	movs	r1, #100	; 0x64
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	3332      	adds	r3, #50	; 0x32
 8004bb2:	4a67      	ldr	r2, [pc, #412]	; (8004d50 <UART_SetConfig+0x38c>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f003 0207 	and.w	r2, r3, #7
 8004bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4432      	add	r2, r6
 8004bc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bc6:	e0b9      	b.n	8004d3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bca:	461c      	mov	r4, r3
 8004bcc:	f04f 0500 	mov.w	r5, #0
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	462b      	mov	r3, r5
 8004bd4:	1891      	adds	r1, r2, r2
 8004bd6:	6139      	str	r1, [r7, #16]
 8004bd8:	415b      	adcs	r3, r3
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004be0:	1912      	adds	r2, r2, r4
 8004be2:	eb45 0303 	adc.w	r3, r5, r3
 8004be6:	f04f 0000 	mov.w	r0, #0
 8004bea:	f04f 0100 	mov.w	r1, #0
 8004bee:	00d9      	lsls	r1, r3, #3
 8004bf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bf4:	00d0      	lsls	r0, r2, #3
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	eb12 0804 	adds.w	r8, r2, r4
 8004bfe:	eb43 0905 	adc.w	r9, r3, r5
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	008b      	lsls	r3, r1, #2
 8004c16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c1a:	0082      	lsls	r2, r0, #2
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb fad2 	bl	80001c8 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4b49      	ldr	r3, [pc, #292]	; (8004d50 <UART_SetConfig+0x38c>)
 8004c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	011e      	lsls	r6, r3, #4
 8004c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c34:	4618      	mov	r0, r3
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	1894      	adds	r4, r2, r2
 8004c40:	60bc      	str	r4, [r7, #8]
 8004c42:	415b      	adcs	r3, r3
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c4a:	1812      	adds	r2, r2, r0
 8004c4c:	eb41 0303 	adc.w	r3, r1, r3
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	f04f 0500 	mov.w	r5, #0
 8004c58:	00dd      	lsls	r5, r3, #3
 8004c5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c5e:	00d4      	lsls	r4, r2, #3
 8004c60:	4622      	mov	r2, r4
 8004c62:	462b      	mov	r3, r5
 8004c64:	1814      	adds	r4, r2, r0
 8004c66:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c68:	414b      	adcs	r3, r1
 8004c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f04f 0100 	mov.w	r1, #0
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	008b      	lsls	r3, r1, #2
 8004c80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c84:	0082      	lsls	r2, r0, #2
 8004c86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c8a:	f7fb fa9d 	bl	80001c8 <__aeabi_uldivmod>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <UART_SetConfig+0x38c>)
 8004c94:	fba3 1302 	umull	r1, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	2164      	movs	r1, #100	; 0x64
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	3332      	adds	r3, #50	; 0x32
 8004ca6:	4a2a      	ldr	r2, [pc, #168]	; (8004d50 <UART_SetConfig+0x38c>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb2:	441e      	add	r6, r3
 8004cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	1894      	adds	r4, r2, r2
 8004cc2:	603c      	str	r4, [r7, #0]
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	607b      	str	r3, [r7, #4]
 8004cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ccc:	1812      	adds	r2, r2, r0
 8004cce:	eb41 0303 	adc.w	r3, r1, r3
 8004cd2:	f04f 0400 	mov.w	r4, #0
 8004cd6:	f04f 0500 	mov.w	r5, #0
 8004cda:	00dd      	lsls	r5, r3, #3
 8004cdc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ce0:	00d4      	lsls	r4, r2, #3
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	eb12 0a00 	adds.w	sl, r2, r0
 8004cea:	eb43 0b01 	adc.w	fp, r3, r1
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f04f 0100 	mov.w	r1, #0
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	008b      	lsls	r3, r1, #2
 8004d02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d06:	0082      	lsls	r2, r0, #2
 8004d08:	4650      	mov	r0, sl
 8004d0a:	4659      	mov	r1, fp
 8004d0c:	f7fb fa5c 	bl	80001c8 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <UART_SetConfig+0x38c>)
 8004d16:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2164      	movs	r1, #100	; 0x64
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	3332      	adds	r3, #50	; 0x32
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <UART_SetConfig+0x38c>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	f003 020f 	and.w	r2, r3, #15
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4432      	add	r2, r6
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	377c      	adds	r7, #124	; 0x7c
 8004d40:	46bd      	mov	sp, r7
 8004d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d46:	bf00      	nop
 8004d48:	40011000 	.word	0x40011000
 8004d4c:	40011400 	.word	0x40011400
 8004d50:	51eb851f 	.word	0x51eb851f

08004d54 <__libc_init_array>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	4d0d      	ldr	r5, [pc, #52]	; (8004d8c <__libc_init_array+0x38>)
 8004d58:	4c0d      	ldr	r4, [pc, #52]	; (8004d90 <__libc_init_array+0x3c>)
 8004d5a:	1b64      	subs	r4, r4, r5
 8004d5c:	10a4      	asrs	r4, r4, #2
 8004d5e:	2600      	movs	r6, #0
 8004d60:	42a6      	cmp	r6, r4
 8004d62:	d109      	bne.n	8004d78 <__libc_init_array+0x24>
 8004d64:	4d0b      	ldr	r5, [pc, #44]	; (8004d94 <__libc_init_array+0x40>)
 8004d66:	4c0c      	ldr	r4, [pc, #48]	; (8004d98 <__libc_init_array+0x44>)
 8004d68:	f000 f820 	bl	8004dac <_init>
 8004d6c:	1b64      	subs	r4, r4, r5
 8004d6e:	10a4      	asrs	r4, r4, #2
 8004d70:	2600      	movs	r6, #0
 8004d72:	42a6      	cmp	r6, r4
 8004d74:	d105      	bne.n	8004d82 <__libc_init_array+0x2e>
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7c:	4798      	blx	r3
 8004d7e:	3601      	adds	r6, #1
 8004d80:	e7ee      	b.n	8004d60 <__libc_init_array+0xc>
 8004d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d86:	4798      	blx	r3
 8004d88:	3601      	adds	r6, #1
 8004d8a:	e7f2      	b.n	8004d72 <__libc_init_array+0x1e>
 8004d8c:	08004de4 	.word	0x08004de4
 8004d90:	08004de4 	.word	0x08004de4
 8004d94:	08004de4 	.word	0x08004de4
 8004d98:	08004de8 	.word	0x08004de8

08004d9c <memset>:
 8004d9c:	4402      	add	r2, r0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d100      	bne.n	8004da6 <memset+0xa>
 8004da4:	4770      	bx	lr
 8004da6:	f803 1b01 	strb.w	r1, [r3], #1
 8004daa:	e7f9      	b.n	8004da0 <memset+0x4>

08004dac <_init>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr

08004db8 <_fini>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr
