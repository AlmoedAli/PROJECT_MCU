
ex_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f1c  08002f1c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002f1c  08002f1c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f1c  08002f1c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000088  08002fac  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002fac  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f20  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8d  00000000  00000000  00029fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002c8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001757c  00000000  00000000  0002d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1db  00000000  00000000  00044834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008587d  00000000  00000000  00050a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d628c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b5c  00000000  00000000  000d62e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ee4 	.word	0x08002ee4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002ee4 	.word	0x08002ee4

0800014c <resetAllButton>:
int timerNormalState[3]= {0, 0, 0};
int eventButtonPressed[3]= {0, 0, 0};
int eventButtonDrop[3]= {0, 0, 0};

void resetAllButton()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i=0 ; i < 3; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e011      	b.n	800017c <resetAllButton+0x30>
	{
		eventButtonDrop[i]= 0;
 8000158:	4a0d      	ldr	r2, [pc, #52]	; (8000190 <resetAllButton+0x44>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		eventButtonPressed[i]= 0;
 8000162:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <resetAllButton+0x48>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2100      	movs	r1, #0
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timerNormalState[i]= 0;
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <resetAllButton+0x4c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2100      	movs	r1, #0
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0 ; i < 3; i++)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b02      	cmp	r3, #2
 8000180:	ddea      	ble.n	8000158 <resetAllButton+0xc>
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200000bc 	.word	0x200000bc
 8000194:	200000b0 	.word	0x200000b0
 8000198:	200000a4 	.word	0x200000a4

0800019c <checkEventButton>:

int checkEventButton(int indexButton)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	switch (indexButton)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	d04a      	beq.n	8000240 <checkEventButton+0xa4>
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b02      	cmp	r3, #2
 80001ae:	dc4a      	bgt.n	8000246 <checkEventButton+0xaa>
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d003      	beq.n	80001be <checkEventButton+0x22>
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d024      	beq.n	8000206 <checkEventButton+0x6a>
 80001bc:	e043      	b.n	8000246 <checkEventButton+0xaa>
	{
		case 0:
			switch (eventButtonDrop[indexButton])
 80001be:	4a25      	ldr	r2, [pc, #148]	; (8000254 <checkEventButton+0xb8>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c6:	2b03      	cmp	r3, #3
 80001c8:	d81a      	bhi.n	8000200 <checkEventButton+0x64>
 80001ca:	a201      	add	r2, pc, #4	; (adr r2, 80001d0 <checkEventButton+0x34>)
 80001cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d0:	080001e1 	.word	0x080001e1
 80001d4:	080001e9 	.word	0x080001e9
 80001d8:	080001f1 	.word	0x080001f1
 80001dc:	080001f9 	.word	0x080001f9
			{
				case 0:
					resetAllButton();
 80001e0:	f7ff ffb4 	bl	800014c <resetAllButton>
					return BUTTON1LongPress;
 80001e4:	2305      	movs	r3, #5
 80001e6:	e031      	b.n	800024c <checkEventButton+0xb0>
					break;
				case 1:
					resetAllButton();
 80001e8:	f7ff ffb0 	bl	800014c <resetAllButton>
					return BUTTON1SinglePress;
 80001ec:	2302      	movs	r3, #2
 80001ee:	e02d      	b.n	800024c <checkEventButton+0xb0>
					break;
				case 2:
					resetAllButton();
 80001f0:	f7ff ffac 	bl	800014c <resetAllButton>
					return BUTTON1DoublePress;
 80001f4:	2303      	movs	r3, #3
 80001f6:	e029      	b.n	800024c <checkEventButton+0xb0>
					break;
				case 3:
					resetAllButton();
 80001f8:	f7ff ffa8 	bl	800014c <resetAllButton>
					return BUTTON1TriplePress;
 80001fc:	2304      	movs	r3, #4
 80001fe:	e025      	b.n	800024c <checkEventButton+0xb0>
					break;
				default:
					resetAllButton();
 8000200:	f7ff ffa4 	bl	800014c <resetAllButton>
					break;
 8000204:	bf00      	nop
			}
		case 1:
			switch (eventButtonDrop[indexButton])
 8000206:	4a13      	ldr	r2, [pc, #76]	; (8000254 <checkEventButton+0xb8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800020e:	2b02      	cmp	r3, #2
 8000210:	d00e      	beq.n	8000230 <checkEventButton+0x94>
 8000212:	2b02      	cmp	r3, #2
 8000214:	dc10      	bgt.n	8000238 <checkEventButton+0x9c>
 8000216:	2b00      	cmp	r3, #0
 8000218:	d002      	beq.n	8000220 <checkEventButton+0x84>
 800021a:	2b01      	cmp	r3, #1
 800021c:	d004      	beq.n	8000228 <checkEventButton+0x8c>
 800021e:	e00b      	b.n	8000238 <checkEventButton+0x9c>
			{
				case 0:
					resetAllButton();
 8000220:	f7ff ff94 	bl	800014c <resetAllButton>
					return BUTTON2LongPress;
 8000224:	2307      	movs	r3, #7
 8000226:	e011      	b.n	800024c <checkEventButton+0xb0>
					break;
				case 1:
					resetAllButton();
 8000228:	f7ff ff90 	bl	800014c <resetAllButton>
					return BUTTON2SinglePress;
 800022c:	2306      	movs	r3, #6
 800022e:	e00d      	b.n	800024c <checkEventButton+0xb0>
					break;
				case 2:
					resetAllButton();
 8000230:	f7ff ff8c 	bl	800014c <resetAllButton>
					return BUTTON2DoublePress;
 8000234:	2308      	movs	r3, #8
 8000236:	e009      	b.n	800024c <checkEventButton+0xb0>
					break;
				default:
					resetAllButton();
 8000238:	f7ff ff88 	bl	800014c <resetAllButton>
					break;
 800023c:	bf00      	nop
			}
			break;
 800023e:	e005      	b.n	800024c <checkEventButton+0xb0>
		case 2:
			resetAllButton();
 8000240:	f7ff ff84 	bl	800014c <resetAllButton>
			break;
 8000244:	e002      	b.n	800024c <checkEventButton+0xb0>
		default:
			resetAllButton();
 8000246:	f7ff ff81 	bl	800014c <resetAllButton>
			break;
 800024a:	bf00      	nop
	}
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200000bc 	.word	0x200000bc

08000258 <getInputButton>:
int getInputButton()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e0b7      	b.n	80003d4 <getInputButton+0x17c>
	{
		state1Button[i]= state2Button[i];
 8000264:	4a5f      	ldr	r2, [pc, #380]	; (80003e4 <getInputButton+0x18c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	495e      	ldr	r1, [pc, #376]	; (80003e8 <getInputButton+0x190>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 8000274:	4a5d      	ldr	r2, [pc, #372]	; (80003ec <getInputButton+0x194>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027c:	4959      	ldr	r1, [pc, #356]	; (80003e4 <getInputButton+0x18c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000284:	4a5a      	ldr	r2, [pc, #360]	; (80003f0 <getInputButton+0x198>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4959      	ldr	r1, [pc, #356]	; (80003f4 <getInputButton+0x19c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000294:	4619      	mov	r1, r3
 8000296:	4610      	mov	r0, r2
 8000298:	f001 fde4 	bl	8001e64 <HAL_GPIO_ReadPin>
 800029c:	4603      	mov	r3, r0
 800029e:	4619      	mov	r1, r3
 80002a0:	4a52      	ldr	r2, [pc, #328]	; (80003ec <getInputButton+0x194>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 80002a8:	4a4f      	ldr	r2, [pc, #316]	; (80003e8 <getInputButton+0x190>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b0:	494c      	ldr	r1, [pc, #304]	; (80003e4 <getInputButton+0x18c>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f040 8088 	bne.w	80003ce <getInputButton+0x176>
 80002be:	4a49      	ldr	r2, [pc, #292]	; (80003e4 <getInputButton+0x18c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c6:	4949      	ldr	r1, [pc, #292]	; (80003ec <getInputButton+0x194>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d17d      	bne.n	80003ce <getInputButton+0x176>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 80002d2:	4a49      	ldr	r2, [pc, #292]	; (80003f8 <getInputButton+0x1a0>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002da:	4943      	ldr	r1, [pc, #268]	; (80003e8 <getInputButton+0x190>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d031      	beq.n	800034a <getInputButton+0xf2>
			{
				switch (state0Button[i])
 80002e6:	4a44      	ldr	r2, [pc, #272]	; (80003f8 <getInputButton+0x1a0>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <getInputButton+0xa0>
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d014      	beq.n	8000320 <getInputButton+0xc8>
						state0Button[i]= PRESS_STATE;
						eventButtonPressed[i]+= 1;
						timerLongPress[i]= 300;
						break;
					default:
						break;
 80002f6:	e06a      	b.n	80003ce <getInputButton+0x176>
						state0Button[i]= NORMAL_STATE;
 80002f8:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <getInputButton+0x1a0>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2101      	movs	r1, #1
 80002fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonDrop[i]+= 1;
 8000302:	4a3e      	ldr	r2, [pc, #248]	; (80003fc <getInputButton+0x1a4>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	493b      	ldr	r1, [pc, #236]	; (80003fc <getInputButton+0x1a4>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerNormalState[i]= 20;
 8000314:	4a3a      	ldr	r2, [pc, #232]	; (8000400 <getInputButton+0x1a8>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2114      	movs	r1, #20
 800031a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800031e:	e056      	b.n	80003ce <getInputButton+0x176>
						state0Button[i]= PRESS_STATE;
 8000320:	4a35      	ldr	r2, [pc, #212]	; (80003f8 <getInputButton+0x1a0>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2100      	movs	r1, #0
 8000326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonPressed[i]+= 1;
 800032a:	4a36      	ldr	r2, [pc, #216]	; (8000404 <getInputButton+0x1ac>)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	4933      	ldr	r1, [pc, #204]	; (8000404 <getInputButton+0x1ac>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerLongPress[i]= 300;
 800033c:	4a32      	ldr	r2, [pc, #200]	; (8000408 <getInputButton+0x1b0>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000344:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8000348:	e041      	b.n	80003ce <getInputButton+0x176>

				}
			}
			else
			{
				if (state0Button[i]== NORMAL_STATE)
 800034a:	4a2b      	ldr	r2, [pc, #172]	; (80003f8 <getInputButton+0x1a0>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d119      	bne.n	800038a <getInputButton+0x132>
				{
					if (timerNormalState[i] > 0)
 8000356:	4a2a      	ldr	r2, [pc, #168]	; (8000400 <getInputButton+0x1a8>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035e:	2b00      	cmp	r3, #0
 8000360:	dd35      	ble.n	80003ce <getInputButton+0x176>
					{
						timerNormalState[i]--;
 8000362:	4a27      	ldr	r2, [pc, #156]	; (8000400 <getInputButton+0x1a8>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	4924      	ldr	r1, [pc, #144]	; (8000400 <getInputButton+0x1a8>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerNormalState[i] <= 0)
 8000374:	4a22      	ldr	r2, [pc, #136]	; (8000400 <getInputButton+0x1a8>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037c:	2b00      	cmp	r3, #0
 800037e:	dc26      	bgt.n	80003ce <getInputButton+0x176>
						{
							return checkEventButton(i);
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f7ff ff0b 	bl	800019c <checkEventButton>
 8000386:	4603      	mov	r3, r0
 8000388:	e028      	b.n	80003dc <getInputButton+0x184>
						}
					}
				}
				else   // state0Button[i]== PRESS_SATE;
				{
					if (timerLongPress[i] > 0)
 800038a:	4a1f      	ldr	r2, [pc, #124]	; (8000408 <getInputButton+0x1b0>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000392:	2b00      	cmp	r3, #0
 8000394:	dd1b      	ble.n	80003ce <getInputButton+0x176>
					{
						timerLongPress[i]--;
 8000396:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <getInputButton+0x1b0>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039e:	1e5a      	subs	r2, r3, #1
 80003a0:	4919      	ldr	r1, [pc, #100]	; (8000408 <getInputButton+0x1b0>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerLongPress[i] <= 0)
 80003a8:	4a17      	ldr	r2, [pc, #92]	; (8000408 <getInputButton+0x1b0>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	dc0c      	bgt.n	80003ce <getInputButton+0x176>
						{
							if (i== 1)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d104      	bne.n	80003c4 <getInputButton+0x16c>
								timerLongPress[i]= 20;
 80003ba:	4a13      	ldr	r2, [pc, #76]	; (8000408 <getInputButton+0x1b0>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2114      	movs	r1, #20
 80003c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							return checkEventButton(i);		
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff fee9 	bl	800019c <checkEventButton>
 80003ca:	4603      	mov	r3, r0
 80003cc:	e006      	b.n	80003dc <getInputButton+0x184>
	for (int i= 0; i < 3; i++)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	f77f af44 	ble.w	8000264 <getInputButton+0xc>
					}
				}
			}
		}
	}
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000002c 	.word	0x2000002c
 80003e8:	20000020 	.word	0x20000020
 80003ec:	20000038 	.word	0x20000038
 80003f0:	20000000 	.word	0x20000000
 80003f4:	2000000c 	.word	0x2000000c
 80003f8:	20000014 	.word	0x20000014
 80003fc:	200000bc 	.word	0x200000bc
 8000400:	200000a4 	.word	0x200000a4
 8000404:	200000b0 	.word	0x200000b0
 8000408:	20000044 	.word	0x20000044

0800040c <update7SEGBuffer>:

#include "deviceDriver7Segment.h"
#include "physical7Segment.h"

void update7SEGBuffer(int time, int index_traffic)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
	switch (index_traffic)
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	2b03      	cmp	r3, #3
 800041a:	d039      	beq.n	8000490 <update7SEGBuffer+0x84>
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	2b03      	cmp	r3, #3
 8000420:	dc3a      	bgt.n	8000498 <update7SEGBuffer+0x8c>
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d003      	beq.n	8000430 <update7SEGBuffer+0x24>
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d018      	beq.n	8000460 <update7SEGBuffer+0x54>
		break;
	case 3:
		led_buffer[4] = time;
		break;
	default:
		break;
 800042e:	e033      	b.n	8000498 <update7SEGBuffer+0x8c>
		led_buffer[0] = time / 10;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <update7SEGBuffer+0x98>)
 8000434:	fb82 1203 	smull	r1, r2, r2, r3
 8000438:	1092      	asrs	r2, r2, #2
 800043a:	17db      	asrs	r3, r3, #31
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <update7SEGBuffer+0x9c>)
 8000440:	6013      	str	r3, [r2, #0]
		led_buffer[1] = time % 10;
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <update7SEGBuffer+0x98>)
 8000446:	fb83 2301 	smull	r2, r3, r3, r1
 800044a:	109a      	asrs	r2, r3, #2
 800044c:	17cb      	asrs	r3, r1, #31
 800044e:	1ad2      	subs	r2, r2, r3
 8000450:	4613      	mov	r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	1aca      	subs	r2, r1, r3
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <update7SEGBuffer+0x9c>)
 800045c:	605a      	str	r2, [r3, #4]
		break;
 800045e:	e01c      	b.n	800049a <update7SEGBuffer+0x8e>
		led_buffer[2] = time / 10;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <update7SEGBuffer+0x98>)
 8000464:	fb82 1203 	smull	r1, r2, r2, r3
 8000468:	1092      	asrs	r2, r2, #2
 800046a:	17db      	asrs	r3, r3, #31
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <update7SEGBuffer+0x9c>)
 8000470:	6093      	str	r3, [r2, #8]
		led_buffer[3] = time % 10;
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <update7SEGBuffer+0x98>)
 8000476:	fb83 2301 	smull	r2, r3, r3, r1
 800047a:	109a      	asrs	r2, r3, #2
 800047c:	17cb      	asrs	r3, r1, #31
 800047e:	1ad2      	subs	r2, r2, r3
 8000480:	4613      	mov	r3, r2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	1aca      	subs	r2, r1, r3
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <update7SEGBuffer+0x9c>)
 800048c:	60da      	str	r2, [r3, #12]
		break;
 800048e:	e004      	b.n	800049a <update7SEGBuffer+0x8e>
		led_buffer[4] = time;
 8000490:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <update7SEGBuffer+0x9c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6113      	str	r3, [r2, #16]
		break;
 8000496:	e000      	b.n	800049a <update7SEGBuffer+0x8e>
		break;
 8000498:	bf00      	nop
	}
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	66666667 	.word	0x66666667
 80004a8:	20000050 	.word	0x20000050

080004ac <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 1);
 80004b4:	2101      	movs	r1, #1
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff ffa8 	bl	800040c <update7SEGBuffer>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 2);
 80004cc:	2102      	movs	r1, #2
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff ff9c 	bl	800040c <update7SEGBuffer>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 3);
 80004e4:	2103      	movs	r1, #3
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f7ff ff90 	bl	800040c <update7SEGBuffer>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <displayAll7Seg>:

void displayAll7Seg()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	Scan7SEG();
 80004f8:	f000 fd56 	bl	8000fa8 <Scan7SEG>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, YELLOWTUNINGMODE);
 8000504:	2105      	movs	r1, #5
 8000506:	2008      	movs	r0, #8
 8000508:	f000 fdee 	bl	80010e8 <controlSingleLed>
	controlSingleLed(TRAFFIC2, YELLOWTUNINGMODE);
 800050c:	2105      	movs	r1, #5
 800050e:	2009      	movs	r0, #9
 8000510:	f000 fdea 	bl	80010e8 <controlSingleLed>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <blinkingRED>:

void blinkingRED()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, REDTUNINGMODE);
 800051c:	2103      	movs	r1, #3
 800051e:	2008      	movs	r0, #8
 8000520:	f000 fde2 	bl	80010e8 <controlSingleLed>
	controlSingleLed(TRAFFIC2, REDTUNINGMODE);
 8000524:	2103      	movs	r1, #3
 8000526:	2009      	movs	r0, #9
 8000528:	f000 fdde 	bl	80010e8 <controlSingleLed>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <blinkingGREEN>:
void blinkingGREEN()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, GREENTUNINGMODE);
 8000534:	2104      	movs	r1, #4
 8000536:	2008      	movs	r0, #8
 8000538:	f000 fdd6 	bl	80010e8 <controlSingleLed>
	controlSingleLed(TRAFFIC2, GREENTUNINGMODE);
 800053c:	2104      	movs	r1, #4
 800053e:	2009      	movs	r0, #9
 8000540:	f000 fdd2 	bl	80010e8 <controlSingleLed>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <offAllSingLEDs>:
void offAllSingLEDs()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, OFF);
 800054c:	2106      	movs	r1, #6
 800054e:	2008      	movs	r0, #8
 8000550:	f000 fdca 	bl	80010e8 <controlSingleLed>
	controlSingleLed(TRAFFIC2, OFF);
 8000554:	2106      	movs	r1, #6
 8000556:	2009      	movs	r0, #9
 8000558:	f000 fdc6 	bl	80010e8 <controlSingleLed>
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <onAllSingLEDs>:
void onAllSingLEDs()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, ON);
 8000564:	2107      	movs	r1, #7
 8000566:	2008      	movs	r0, #8
 8000568:	f000 fdbe 	bl	80010e8 <controlSingleLed>
	controlSingleLed(TRAFFIC2, ON);
 800056c:	2107      	movs	r1, #7
 800056e:	2009      	movs	r0, #9
 8000570:	f000 fdba 	bl	80010e8 <controlSingleLed>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <onSingleRedTraffic1>:
void onSingleRedTraffic1()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, REDNORMALMODE);
 800057c:	2100      	movs	r1, #0
 800057e:	2008      	movs	r0, #8
 8000580:	f000 fdb2 	bl	80010e8 <controlSingleLed>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <onSingleYellowTraffic1>:
void onSingleYellowTraffic1()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, YELLOWNORMALMODE);
 800058c:	2102      	movs	r1, #2
 800058e:	2008      	movs	r0, #8
 8000590:	f000 fdaa 	bl	80010e8 <controlSingleLed>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, GREENNORMALMODE);
 800059c:	2101      	movs	r1, #1
 800059e:	2008      	movs	r0, #8
 80005a0:	f000 fda2 	bl	80010e8 <controlSingleLed>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, REDNORMALMODE);
 80005ac:	2100      	movs	r1, #0
 80005ae:	2009      	movs	r0, #9
 80005b0:	f000 fd9a 	bl	80010e8 <controlSingleLed>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <onSingleYellowTraffic2>:
void onSingleYellowTraffic2()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, YELLOWNORMALMODE);
 80005bc:	2102      	movs	r1, #2
 80005be:	2009      	movs	r0, #9
 80005c0:	f000 fd92 	bl	80010e8 <controlSingleLed>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, GREENNORMALMODE);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2009      	movs	r0, #9
 80005d0:	f000 fd8a 	bl	80010e8 <controlSingleLed>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005dc:	f001 f958 	bl	8001890 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e0:	f000 f91e 	bl	8000820 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e4:	f000 f9a4 	bl	8000930 <MX_GPIO_Init>
	MX_TIM2_Init();
 80005e8:	f000 f956 	bl	8000898 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80005ec:	4886      	ldr	r0, [pc, #536]	; (8000808 <main+0x230>)
 80005ee:	f002 f8b9 	bl	8002764 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	setTimer4(20);
 80005f2:	2014      	movs	r0, #20
 80005f4:	f000 ff0c 	bl	8001410 <setTimer4>
	setTimer1(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fecd 	bl	8001398 <setTimer1>
	while (1)
	{
		if (flag1== 1) // flag for getInputButton
 80005fe:	4b83      	ldr	r3, [pc, #524]	; (800080c <main+0x234>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	f040 80d8 	bne.w	80007b8 <main+0x1e0>
		{
			setTimer1(10);
 8000608:	200a      	movs	r0, #10
 800060a:	f000 fec5 	bl	8001398 <setTimer1>
			switch (getInputButton())
 800060e:	f7ff fe23 	bl	8000258 <getInputButton>
 8000612:	4603      	mov	r3, r0
 8000614:	3b02      	subs	r3, #2
 8000616:	2b06      	cmp	r3, #6
 8000618:	f200 80d0 	bhi.w	80007bc <main+0x1e4>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <main+0x4c>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000641 	.word	0x08000641
 8000628:	08000695 	.word	0x08000695
 800062c:	080006e9 	.word	0x080006e9
 8000630:	0800073d 	.word	0x0800073d
 8000634:	08000769 	.word	0x08000769
 8000638:	080007a7 	.word	0x080007a7
 800063c:	08000795 	.word	0x08000795
			{
				case BUTTON1SinglePress:
					switch (modeStatus)
 8000640:	4b73      	ldr	r3, [pc, #460]	; (8000810 <main+0x238>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b03      	cmp	r3, #3
 8000646:	d823      	bhi.n	8000690 <main+0xb8>
 8000648:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <main+0x78>)
 800064a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064e:	bf00      	nop
 8000650:	08000661 	.word	0x08000661
 8000654:	0800066d 	.word	0x0800066d
 8000658:	08000679 	.word	0x08000679
 800065c:	08000685 	.word	0x08000685
					{
						case INITMODE:
							modeStatus= NORMALMODE;
 8000660:	4b6b      	ldr	r3, [pc, #428]	; (8000810 <main+0x238>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
							beginNormalMode();
 8000666:	f000 fb95 	bl	8000d94 <beginNormalMode>
							break;
 800066a:	e012      	b.n	8000692 <main+0xba>
						case NORMALMODE:
							modeStatus= NORMALMODE;
 800066c:	4b68      	ldr	r3, [pc, #416]	; (8000810 <main+0x238>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
							beginNormalMode();
 8000672:	f000 fb8f 	bl	8000d94 <beginNormalMode>
							break;
 8000676:	e00c      	b.n	8000692 <main+0xba>
						case MANUALMODE:
							modeStatus= NORMALMODE;
 8000678:	4b65      	ldr	r3, [pc, #404]	; (8000810 <main+0x238>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
							beginNormalMode();
 800067e:	f000 fb89 	bl	8000d94 <beginNormalMode>
							break;
 8000682:	e006      	b.n	8000692 <main+0xba>
						case TUNINGMODE:
							modeStatus= NORMALMODE;
 8000684:	4b62      	ldr	r3, [pc, #392]	; (8000810 <main+0x238>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]
							beginNormalMode();
 800068a:	f000 fb83 	bl	8000d94 <beginNormalMode>
							break;
 800068e:	e000      	b.n	8000692 <main+0xba>
						default:
							break;
 8000690:	bf00      	nop
					}
					break;
 8000692:	e094      	b.n	80007be <main+0x1e6>
				case BUTTON1DoublePress:
					switch (modeStatus)
 8000694:	4b5e      	ldr	r3, [pc, #376]	; (8000810 <main+0x238>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b03      	cmp	r3, #3
 800069a:	d823      	bhi.n	80006e4 <main+0x10c>
 800069c:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <main+0xcc>)
 800069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a2:	bf00      	nop
 80006a4:	080006b5 	.word	0x080006b5
 80006a8:	080006c1 	.word	0x080006c1
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006d9 	.word	0x080006d9
					{
						case INITMODE:
							modeStatus= MANUALMODE;
 80006b4:	4b56      	ldr	r3, [pc, #344]	; (8000810 <main+0x238>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	601a      	str	r2, [r3, #0]
							beginManualMode();
 80006ba:	f000 fa15 	bl	8000ae8 <beginManualMode>
							break;
 80006be:	e012      	b.n	80006e6 <main+0x10e>
						case NORMALMODE:
							modeStatus= MANUALMODE;
 80006c0:	4b53      	ldr	r3, [pc, #332]	; (8000810 <main+0x238>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	601a      	str	r2, [r3, #0]
							beginManualMode();
 80006c6:	f000 fa0f 	bl	8000ae8 <beginManualMode>
							break;
 80006ca:	e00c      	b.n	80006e6 <main+0x10e>
						case MANUALMODE:
							modeStatus= MANUALMODE;
 80006cc:	4b50      	ldr	r3, [pc, #320]	; (8000810 <main+0x238>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	601a      	str	r2, [r3, #0]
							beginManualMode();
 80006d2:	f000 fa09 	bl	8000ae8 <beginManualMode>
							break;
 80006d6:	e006      	b.n	80006e6 <main+0x10e>
						case TUNINGMODE:
							modeStatus= MANUALMODE;
 80006d8:	4b4d      	ldr	r3, [pc, #308]	; (8000810 <main+0x238>)
 80006da:	2202      	movs	r2, #2
 80006dc:	601a      	str	r2, [r3, #0]
							beginManualMode();
 80006de:	f000 fa03 	bl	8000ae8 <beginManualMode>
							break;
 80006e2:	e000      	b.n	80006e6 <main+0x10e>
						default:
							break;
 80006e4:	bf00      	nop
					}
					break;
 80006e6:	e06a      	b.n	80007be <main+0x1e6>
				case BUTTON1TriplePress:
					switch (modeStatus)
 80006e8:	4b49      	ldr	r3, [pc, #292]	; (8000810 <main+0x238>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d823      	bhi.n	8000738 <main+0x160>
 80006f0:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <main+0x120>)
 80006f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f6:	bf00      	nop
 80006f8:	08000709 	.word	0x08000709
 80006fc:	08000715 	.word	0x08000715
 8000700:	08000721 	.word	0x08000721
 8000704:	0800072d 	.word	0x0800072d
					{
						case INITMODE:
							modeStatus= TUNINGMODE;
 8000708:	4b41      	ldr	r3, [pc, #260]	; (8000810 <main+0x238>)
 800070a:	2203      	movs	r2, #3
 800070c:	601a      	str	r2, [r3, #0]
							beginTuningMode();
 800070e:	f000 ffbf 	bl	8001690 <beginTuningMode>
							break;
 8000712:	e012      	b.n	800073a <main+0x162>
						case NORMALMODE:
							modeStatus= TUNINGMODE;
 8000714:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <main+0x238>)
 8000716:	2203      	movs	r2, #3
 8000718:	601a      	str	r2, [r3, #0]
							beginTuningMode();
 800071a:	f000 ffb9 	bl	8001690 <beginTuningMode>
							break;
 800071e:	e00c      	b.n	800073a <main+0x162>
						case MANUALMODE:
							modeStatus= TUNINGMODE;
 8000720:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <main+0x238>)
 8000722:	2203      	movs	r2, #3
 8000724:	601a      	str	r2, [r3, #0]
							beginTuningMode();
 8000726:	f000 ffb3 	bl	8001690 <beginTuningMode>
							break;
 800072a:	e006      	b.n	800073a <main+0x162>
						case TUNINGMODE:
							modeStatus= TUNINGMODE;
 800072c:	4b38      	ldr	r3, [pc, #224]	; (8000810 <main+0x238>)
 800072e:	2203      	movs	r2, #3
 8000730:	601a      	str	r2, [r3, #0]
							beginTuningMode();
 8000732:	f000 ffad 	bl	8001690 <beginTuningMode>
							break;
 8000736:	e000      	b.n	800073a <main+0x162>
						default:
							break;
 8000738:	bf00      	nop
					}
					break;
 800073a:	e040      	b.n	80007be <main+0x1e6>
				case BUTTON1LongPress:
					switch (modeStatus)
 800073c:	4b34      	ldr	r3, [pc, #208]	; (8000810 <main+0x238>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d00c      	beq.n	800075e <main+0x186>
 8000744:	2b03      	cmp	r3, #3
 8000746:	dc0d      	bgt.n	8000764 <main+0x18c>
 8000748:	2b01      	cmp	r3, #1
 800074a:	d002      	beq.n	8000752 <main+0x17a>
 800074c:	2b02      	cmp	r3, #2
 800074e:	d003      	beq.n	8000758 <main+0x180>
							break;
						case TUNINGMODE:
							runTuningMode();
							break;
						default:
							break;
 8000750:	e008      	b.n	8000764 <main+0x18c>
							beginNormalMode();
 8000752:	f000 fb1f 	bl	8000d94 <beginNormalMode>
							break;
 8000756:	e006      	b.n	8000766 <main+0x18e>
							runManualModeFunction();
 8000758:	f000 f96c 	bl	8000a34 <runManualModeFunction>
							break;
 800075c:	e003      	b.n	8000766 <main+0x18e>
							runTuningMode();
 800075e:	f000 fef9 	bl	8001554 <runTuningMode>
							break;
 8000762:	e000      	b.n	8000766 <main+0x18e>
							break;
 8000764:	bf00      	nop
					}
					break;
 8000766:	e02a      	b.n	80007be <main+0x1e6>
				case BUTTON2SinglePress:
					switch (modeStatus)
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <main+0x238>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d00c      	beq.n	800078a <main+0x1b2>
 8000770:	2b03      	cmp	r3, #3
 8000772:	dc0d      	bgt.n	8000790 <main+0x1b8>
 8000774:	2b01      	cmp	r3, #1
 8000776:	d002      	beq.n	800077e <main+0x1a6>
 8000778:	2b02      	cmp	r3, #2
 800077a:	d003      	beq.n	8000784 <main+0x1ac>
							break;
						case TUNINGMODE:
							modifyTuningMode();
							break;
						default:
							break;
 800077c:	e008      	b.n	8000790 <main+0x1b8>
							beginNormalMode();
 800077e:	f000 fb09 	bl	8000d94 <beginNormalMode>
							break;
 8000782:	e006      	b.n	8000792 <main+0x1ba>
							runManualModeFunction();
 8000784:	f000 f956 	bl	8000a34 <runManualModeFunction>
							break;
 8000788:	e003      	b.n	8000792 <main+0x1ba>
							modifyTuningMode();
 800078a:	f000 ff89 	bl	80016a0 <modifyTuningMode>
							break;
 800078e:	e000      	b.n	8000792 <main+0x1ba>
							break;
 8000790:	bf00      	nop
					}
					break;
 8000792:	e014      	b.n	80007be <main+0x1e6>
				case BUTTON2DoublePress:
					switch (modeStatus)
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <main+0x238>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d102      	bne.n	80007a2 <main+0x1ca>
					{
						case TUNINGMODE:
							saveTuningMode();
 800079c:	f000 ffde 	bl	800175c <saveTuningMode>
							break;					
 80007a0:	e000      	b.n	80007a4 <main+0x1cc>
						default:
							break;
 80007a2:	bf00      	nop
					}
					break;
 80007a4:	e00b      	b.n	80007be <main+0x1e6>
				case BUTTON2LongPress:
					switch (modeStatus)
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <main+0x238>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d102      	bne.n	80007b4 <main+0x1dc>
					{
						case TUNINGMODE:
							modifyTuningMode();
 80007ae:	f000 ff77 	bl	80016a0 <modifyTuningMode>
							break;
 80007b2:	e000      	b.n	80007b6 <main+0x1de>
						default:
							break;
 80007b4:	bf00      	nop
					}
					break;
 80007b6:	e002      	b.n	80007be <main+0x1e6>
				default:
					break;
			}
		}
 80007b8:	bf00      	nop
 80007ba:	e000      	b.n	80007be <main+0x1e6>
					break;
 80007bc:	bf00      	nop
		if (flag2 == 1) // flag for normalMode
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <main+0x23c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d108      	bne.n	80007d8 <main+0x200>
		{
			setTimer2(100);
 80007c6:	2064      	movs	r0, #100	; 0x64
 80007c8:	f000 fdfa 	bl	80013c0 <setTimer2>
			if (modeStatus == NORMALMODE)
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <main+0x238>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d101      	bne.n	80007d8 <main+0x200>
			{
				runNormalMode();
 80007d4:	f000 f9a0 	bl	8000b18 <runNormalMode>
			}
		}
		if (flag3 == 1) // flag for animationTuningMode
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <main+0x240>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d108      	bne.n	80007f2 <main+0x21a>
		{
			setTimer3(50);
 80007e0:	2032      	movs	r0, #50	; 0x32
 80007e2:	f000 fe01 	bl	80013e8 <setTimer3>
			if (modeStatus== TUNINGMODE)
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <main+0x238>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	d101      	bne.n	80007f2 <main+0x21a>
			{
				animationTuningMode();
 80007ee:	f001 f809 	bl	8001804 <animationTuningMode>
			}
		}
		if (flag4 == 1)  // flag for scan7Seg
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <main+0x244>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	f47f af01 	bne.w	80005fe <main+0x26>
		{
			displayAll7Seg();
 80007fc:	f7ff fe7a 	bl	80004f4 <displayAll7Seg>
			setTimer4(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fe05 	bl	8001410 <setTimer4>
		if (flag1== 1) // flag for getInputButton
 8000806:	e6fa      	b.n	80005fe <main+0x26>
 8000808:	200000e0 	.word	0x200000e0
 800080c:	20000150 	.word	0x20000150
 8000810:	200000c8 	.word	0x200000c8
 8000814:	20000148 	.word	0x20000148
 8000818:	20000158 	.word	0x20000158
 800081c:	2000014c 	.word	0x2000014c

08000820 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b090      	sub	sp, #64	; 0x40
 8000824:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0318 	add.w	r3, r7, #24
 800082a:	2228      	movs	r2, #40	; 0x28
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fb50 	bl	8002ed4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000846:	2301      	movs	r3, #1
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084a:	2310      	movs	r3, #16
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084e:	2300      	movs	r3, #0
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	4618      	mov	r0, r3
 8000858:	f001 fb4c 	bl	8001ef4 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000862:	f000 f8d5 	bl	8000a10 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000866:	230f      	movs	r3, #15
 8000868:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fdb8 	bl	80023f4 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800088a:	f000 f8c1 	bl	8000a10 <Error_Handler>
	}
}
 800088e:	bf00      	nop
 8000890:	3740      	adds	r7, #64	; 0x40
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_TIM2_Init+0x94>)
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_TIM2_Init+0x94>)
 80008be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008c2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_TIM2_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_TIM2_Init+0x94>)
 80008cc:	2209      	movs	r2, #9
 80008ce:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_TIM2_Init+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_TIM2_Init+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <MX_TIM2_Init+0x94>)
 80008de:	f001 fef1 	bl	80026c4 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80008e8:	f000 f892 	bl	8000a10 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_TIM2_Init+0x94>)
 80008fa:	f002 f887 	bl	8002a0c <HAL_TIM_ConfigClockSource>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000904:	f000 f884 	bl	8000a10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_TIM2_Init+0x94>)
 8000916:	f002 fa4f 	bl	8002db8 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000920:	f000 f876 	bl	8000a10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000e0 	.word	0x200000e0

08000930 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000962:	f043 0308 	orr.w	r3, r3, #8
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0308 	and.w	r3, r3, #8
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, segA_Pin | segB_Pin | segC_Pin | segD_Pin | segE_Pin | segF_Pin | segG_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	217f      	movs	r1, #127	; 0x7f
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <MX_GPIO_Init+0xc4>)
 800097a:	f001 fa8a 	bl	8001e92 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RED1_Pin | GREEN1_Pin | YELLOW1_Pin | RED2_Pin | GREEN2_Pin | YELLOW2_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	213f      	movs	r1, #63	; 0x3f
 8000982:	481d      	ldr	r0, [pc, #116]	; (80009f8 <MX_GPIO_Init+0xc8>)
 8000984:	f001 fa85 	bl	8001e92 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, en4_Pin | en0_Pin | en1_Pin | en2_Pin | en3_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 800098e:	481a      	ldr	r0, [pc, #104]	; (80009f8 <MX_GPIO_Init+0xc8>)
 8000990:	f001 fa7f 	bl	8001e92 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
							 segE_Pin segF_Pin segG_Pin */
	GPIO_InitStruct.Pin = segA_Pin | segB_Pin | segC_Pin | segD_Pin | segE_Pin | segF_Pin | segG_Pin;
 8000994:	237f      	movs	r3, #127	; 0x7f
 8000996:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4619      	mov	r1, r3
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_GPIO_Init+0xc4>)
 80009ac:	f001 f8e0 	bl	8001b70 <HAL_GPIO_Init>

	/*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin en4_Pin
							 RED2_Pin GREEN2_Pin YELLOW2_Pin en0_Pin
							 en1_Pin en2_Pin en3_Pin */
	GPIO_InitStruct.Pin = RED1_Pin | GREEN1_Pin | YELLOW1_Pin | en4_Pin | RED2_Pin | GREEN2_Pin | YELLOW2_Pin | en0_Pin | en1_Pin | en2_Pin | en3_Pin;
 80009b0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009b4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	4619      	mov	r1, r3
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <MX_GPIO_Init+0xc8>)
 80009ca:	f001 f8d1 	bl	8001b70 <HAL_GPIO_Init>

	/*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
	GPIO_InitStruct.Pin = button1_Pin | button2_Pin | button3_Pin;
 80009ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	4619      	mov	r1, r3
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xc4>)
 80009e4:	f001 f8c4 	bl	8001b70 <HAL_GPIO_Init>
}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800
 80009f8:	40010c00 	.word	0x40010c00

080009fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	runTimer();
 8000a04:	f000 fc72 	bl	80012ec <runTimer>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <initStatusManualMode>:
#define YELLOWRED 4

int statusManualMode= INITMODE;

void initStatusManualMode()
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	statusManualMode= INITMODE;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <initStatusManualMode+0x14>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200000cc 	.word	0x200000cc

08000a34 <runManualModeFunction>:
void runManualModeFunction()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	switch (statusManualMode) 
 8000a38:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <runManualModeFunction+0xb0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d84e      	bhi.n	8000ade <runManualModeFunction+0xaa>
 8000a40:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <runManualModeFunction+0x14>)
 8000a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a46:	bf00      	nop
 8000a48:	08000a5d 	.word	0x08000a5d
 8000a4c:	08000a77 	.word	0x08000a77
 8000a50:	08000a91 	.word	0x08000a91
 8000a54:	08000aab 	.word	0x08000aab
 8000a58:	08000ac5 	.word	0x08000ac5
	{
		case INITMODE:
			statusManualMode= REDGREEN;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <runManualModeFunction+0xb0>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff fd3a 	bl	80004dc <update7SEGBufferMode>
			offAllSingLEDs();
 8000a68:	f7ff fd6e 	bl	8000548 <offAllSingLEDs>
			onSingleRedTraffic1();
 8000a6c:	f7ff fd84 	bl	8000578 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8000a70:	f7ff fdaa 	bl	80005c8 <onSingleGreenTraffic2>
			break;
 8000a74:	e034      	b.n	8000ae0 <runManualModeFunction+0xac>
		case REDGREEN:
			statusManualMode= REDYELLOW;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <runManualModeFunction+0xb0>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff fd2d 	bl	80004dc <update7SEGBufferMode>
			offAllSingLEDs();
 8000a82:	f7ff fd61 	bl	8000548 <offAllSingLEDs>
			onSingleRedTraffic1();
 8000a86:	f7ff fd77 	bl	8000578 <onSingleRedTraffic1>
			onSingleYellowTraffic2();
 8000a8a:	f7ff fd95 	bl	80005b8 <onSingleYellowTraffic2>
			break;
 8000a8e:	e027      	b.n	8000ae0 <runManualModeFunction+0xac>
		case REDYELLOW:
			statusManualMode= GREENRED;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <runManualModeFunction+0xb0>)
 8000a92:	2203      	movs	r2, #3
 8000a94:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8000a96:	2002      	movs	r0, #2
 8000a98:	f7ff fd20 	bl	80004dc <update7SEGBufferMode>
			offAllSingLEDs();
 8000a9c:	f7ff fd54 	bl	8000548 <offAllSingLEDs>
			onSingleGreenTraffic1();
 8000aa0:	f7ff fd7a 	bl	8000598 <onSingleGreenTraffic1>
			onSingleYellowTraffic2();
 8000aa4:	f7ff fd88 	bl	80005b8 <onSingleYellowTraffic2>
			break;
 8000aa8:	e01a      	b.n	8000ae0 <runManualModeFunction+0xac>
		case GREENRED:
			statusManualMode= YELLOWRED;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <runManualModeFunction+0xb0>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff fd13 	bl	80004dc <update7SEGBufferMode>
			offAllSingLEDs();
 8000ab6:	f7ff fd47 	bl	8000548 <offAllSingLEDs>
			onSingleYellowTraffic1();
 8000aba:	f7ff fd65 	bl	8000588 <onSingleYellowTraffic1>
			onSingleRedTraffic2();
 8000abe:	f7ff fd73 	bl	80005a8 <onSingleRedTraffic2>
			break;
 8000ac2:	e00d      	b.n	8000ae0 <runManualModeFunction+0xac>
		case YELLOWRED:
			statusManualMode= REDGREEN;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <runManualModeFunction+0xb0>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff fd06 	bl	80004dc <update7SEGBufferMode>
			offAllSingLEDs();
 8000ad0:	f7ff fd3a 	bl	8000548 <offAllSingLEDs>
			onSingleRedTraffic1();
 8000ad4:	f7ff fd50 	bl	8000578 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8000ad8:	f7ff fd76 	bl	80005c8 <onSingleGreenTraffic2>
			break;
 8000adc:	e000      	b.n	8000ae0 <runManualModeFunction+0xac>
		default:
			break;
 8000ade:	bf00      	nop
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000cc 	.word	0x200000cc

08000ae8 <beginManualMode>:

void beginManualMode()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	initStatusManualMode();
 8000aec:	f7ff ff96 	bl	8000a1c <initStatusManualMode>
	runManualModeFunction();
 8000af0:	f7ff ffa0 	bl	8000a34 <runManualModeFunction>
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <initStatusNormalMode>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void initStatusNormalMode()
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
	statusTraffic1 = INIT1;
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <initStatusNormalMode+0x18>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
	statusTraffic2 = INIT2;
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <initStatusNormalMode+0x1c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	200000d0 	.word	0x200000d0
 8000b14:	200000d4 	.word	0x200000d4

08000b18 <runNormalMode>:
void runNormalMode()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 8000b1c:	4b92      	ldr	r3, [pc, #584]	; (8000d68 <runNormalMode+0x250>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	f200 8086 	bhi.w	8000c32 <runNormalMode+0x11a>
 8000b26:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <runNormalMode+0x14>)
 8000b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2c:	08000b3d 	.word	0x08000b3d
 8000b30:	08000b5b 	.word	0x08000b5b
 8000b34:	08000ba3 	.word	0x08000ba3
 8000b38:	08000beb 	.word	0x08000beb
	{
	case INIT1:
		counterLedRed1 = durationLedRed;
 8000b3c:	4b8b      	ldr	r3, [pc, #556]	; (8000d6c <runNormalMode+0x254>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a8b      	ldr	r2, [pc, #556]	; (8000d70 <runNormalMode+0x258>)
 8000b42:	6013      	str	r3, [r2, #0]
		statusTraffic1 = STATUS1_1;
 8000b44:	4b88      	ldr	r3, [pc, #544]	; (8000d68 <runNormalMode+0x250>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 8000b4a:	f7ff fd15 	bl	8000578 <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <runNormalMode+0x258>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fcaa 	bl	80004ac <update7SEGBufferTraffic1>
		break;
 8000b58:	e072      	b.n	8000c40 <runNormalMode+0x128>
	case STATUS1_1:
		if (counterLedRed1 > 0)
 8000b5a:	4b85      	ldr	r3, [pc, #532]	; (8000d70 <runNormalMode+0x258>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	dd69      	ble.n	8000c36 <runNormalMode+0x11e>
		{
			counterLedRed1--;
 8000b62:	4b83      	ldr	r3, [pc, #524]	; (8000d70 <runNormalMode+0x258>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	4a81      	ldr	r2, [pc, #516]	; (8000d70 <runNormalMode+0x258>)
 8000b6a:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 8000b6c:	4b80      	ldr	r3, [pc, #512]	; (8000d70 <runNormalMode+0x258>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dc0e      	bgt.n	8000b92 <runNormalMode+0x7a>
			{
				counterLedGreen1 = durationLedGreen;
 8000b74:	4b7f      	ldr	r3, [pc, #508]	; (8000d74 <runNormalMode+0x25c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a7f      	ldr	r2, [pc, #508]	; (8000d78 <runNormalMode+0x260>)
 8000b7a:	6013      	str	r3, [r2, #0]
				statusTraffic1 = STATUS1_2;
 8000b7c:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <runNormalMode+0x250>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic1();
 8000b82:	f7ff fd09 	bl	8000598 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8000b86:	4b7c      	ldr	r3, [pc, #496]	; (8000d78 <runNormalMode+0x260>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fc8e 	bl	80004ac <update7SEGBufferTraffic1>
			{
				onSingleRedTraffic1();
				update7SEGBufferTraffic1(counterLedRed1);
			}
		}
		break;
 8000b90:	e051      	b.n	8000c36 <runNormalMode+0x11e>
				onSingleRedTraffic1();
 8000b92:	f7ff fcf1 	bl	8000578 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8000b96:	4b76      	ldr	r3, [pc, #472]	; (8000d70 <runNormalMode+0x258>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fc86 	bl	80004ac <update7SEGBufferTraffic1>
		break;
 8000ba0:	e049      	b.n	8000c36 <runNormalMode+0x11e>
	case STATUS1_2:
		if (counterLedGreen1 > 0)
 8000ba2:	4b75      	ldr	r3, [pc, #468]	; (8000d78 <runNormalMode+0x260>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	dd47      	ble.n	8000c3a <runNormalMode+0x122>
		{
			counterLedGreen1--;
 8000baa:	4b73      	ldr	r3, [pc, #460]	; (8000d78 <runNormalMode+0x260>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	4a71      	ldr	r2, [pc, #452]	; (8000d78 <runNormalMode+0x260>)
 8000bb2:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 8000bb4:	4b70      	ldr	r3, [pc, #448]	; (8000d78 <runNormalMode+0x260>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	dc0e      	bgt.n	8000bda <runNormalMode+0xc2>
			{
				counterLedYellow1 = durationLedYellow;
 8000bbc:	4b6f      	ldr	r3, [pc, #444]	; (8000d7c <runNormalMode+0x264>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <runNormalMode+0x268>)
 8000bc2:	6013      	str	r3, [r2, #0]
				statusTraffic1 = STATUS1_3;
 8000bc4:	4b68      	ldr	r3, [pc, #416]	; (8000d68 <runNormalMode+0x250>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	601a      	str	r2, [r3, #0]
				onSingleYellowTraffic1();
 8000bca:	f7ff fcdd 	bl	8000588 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8000bce:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <runNormalMode+0x268>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fc6a 	bl	80004ac <update7SEGBufferTraffic1>
			{
				onSingleGreenTraffic1();
				update7SEGBufferTraffic1(counterLedGreen1);
			}
		}
		break;
 8000bd8:	e02f      	b.n	8000c3a <runNormalMode+0x122>
				onSingleGreenTraffic1();
 8000bda:	f7ff fcdd 	bl	8000598 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8000bde:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <runNormalMode+0x260>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc62 	bl	80004ac <update7SEGBufferTraffic1>
		break;
 8000be8:	e027      	b.n	8000c3a <runNormalMode+0x122>
	case STATUS1_3:
		if (counterLedYellow1 > 0)
 8000bea:	4b65      	ldr	r3, [pc, #404]	; (8000d80 <runNormalMode+0x268>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd25      	ble.n	8000c3e <runNormalMode+0x126>
		{
			counterLedYellow1--;
 8000bf2:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <runNormalMode+0x268>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	4a61      	ldr	r2, [pc, #388]	; (8000d80 <runNormalMode+0x268>)
 8000bfa:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 8000bfc:	4b60      	ldr	r3, [pc, #384]	; (8000d80 <runNormalMode+0x268>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dc0e      	bgt.n	8000c22 <runNormalMode+0x10a>
			{
				counterLedRed1 = durationLedRed;
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <runNormalMode+0x254>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a59      	ldr	r2, [pc, #356]	; (8000d70 <runNormalMode+0x258>)
 8000c0a:	6013      	str	r3, [r2, #0]
				statusTraffic1 = STATUS1_1;
 8000c0c:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <runNormalMode+0x250>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic1();
 8000c12:	f7ff fcb1 	bl	8000578 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8000c16:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <runNormalMode+0x258>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fc46 	bl	80004ac <update7SEGBufferTraffic1>
			{
				onSingleYellowTraffic1();
				update7SEGBufferTraffic1(counterLedYellow1);
			}
		}
		break;
 8000c20:	e00d      	b.n	8000c3e <runNormalMode+0x126>
				onSingleYellowTraffic1();
 8000c22:	f7ff fcb1 	bl	8000588 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8000c26:	4b56      	ldr	r3, [pc, #344]	; (8000d80 <runNormalMode+0x268>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fc3e 	bl	80004ac <update7SEGBufferTraffic1>
		break;
 8000c30:	e005      	b.n	8000c3e <runNormalMode+0x126>
	default:
		break;
 8000c32:	bf00      	nop
 8000c34:	e004      	b.n	8000c40 <runNormalMode+0x128>
		break;
 8000c36:	bf00      	nop
 8000c38:	e002      	b.n	8000c40 <runNormalMode+0x128>
		break;
 8000c3a:	bf00      	nop
 8000c3c:	e000      	b.n	8000c40 <runNormalMode+0x128>
		break;
 8000c3e:	bf00      	nop
	}
	switch (statusTraffic2)
 8000c40:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <runNormalMode+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	f200 8086 	bhi.w	8000d56 <runNormalMode+0x23e>
 8000c4a:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <runNormalMode+0x138>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c61 	.word	0x08000c61
 8000c54:	08000c7f 	.word	0x08000c7f
 8000c58:	08000cc7 	.word	0x08000cc7
 8000c5c:	08000d0f 	.word	0x08000d0f
	{
	case INIT2:
		statusTraffic2 = STATUS2_1;
 8000c60:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <runNormalMode+0x26c>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <runNormalMode+0x25c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a47      	ldr	r2, [pc, #284]	; (8000d88 <runNormalMode+0x270>)
 8000c6c:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 8000c6e:	f7ff fcab 	bl	80005c8 <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 8000c72:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <runNormalMode+0x270>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fc24 	bl	80004c4 <update7SEGBufferTraffic2>
		break;
 8000c7c:	e072      	b.n	8000d64 <runNormalMode+0x24c>
	case STATUS2_1:
		if (counterLedGreen2 > 0)
 8000c7e:	4b42      	ldr	r3, [pc, #264]	; (8000d88 <runNormalMode+0x270>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	dd69      	ble.n	8000d5a <runNormalMode+0x242>
		{
			counterLedGreen2--;
 8000c86:	4b40      	ldr	r3, [pc, #256]	; (8000d88 <runNormalMode+0x270>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a3e      	ldr	r2, [pc, #248]	; (8000d88 <runNormalMode+0x270>)
 8000c8e:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 8000c90:	4b3d      	ldr	r3, [pc, #244]	; (8000d88 <runNormalMode+0x270>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dc0e      	bgt.n	8000cb6 <runNormalMode+0x19e>
			{
				onSingleYellowTraffic2();
 8000c98:	f7ff fc8e 	bl	80005b8 <onSingleYellowTraffic2>
				counterLedYellow2 = durationLedYellow;
 8000c9c:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <runNormalMode+0x264>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a3a      	ldr	r2, [pc, #232]	; (8000d8c <runNormalMode+0x274>)
 8000ca2:	6013      	str	r3, [r2, #0]
				statusTraffic2 = STATUS2_2;
 8000ca4:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <runNormalMode+0x26c>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	601a      	str	r2, [r3, #0]
				update7SEGBufferTraffic2(counterLedYellow2);
 8000caa:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <runNormalMode+0x274>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fc08 	bl	80004c4 <update7SEGBufferTraffic2>
			{
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
			}
		}
		break;
 8000cb4:	e051      	b.n	8000d5a <runNormalMode+0x242>
				onSingleGreenTraffic2();
 8000cb6:	f7ff fc87 	bl	80005c8 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 8000cba:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <runNormalMode+0x270>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fc00 	bl	80004c4 <update7SEGBufferTraffic2>
		break;
 8000cc4:	e049      	b.n	8000d5a <runNormalMode+0x242>
	case STATUS2_2:
		if (counterLedYellow2 > 0)
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <runNormalMode+0x274>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	dd47      	ble.n	8000d5e <runNormalMode+0x246>
		{
			counterLedYellow2--;
 8000cce:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <runNormalMode+0x274>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4a2d      	ldr	r2, [pc, #180]	; (8000d8c <runNormalMode+0x274>)
 8000cd6:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <runNormalMode+0x274>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	dc0e      	bgt.n	8000cfe <runNormalMode+0x1e6>
			{
				counterLedRed2 = durationLedRed;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <runNormalMode+0x254>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a2a      	ldr	r2, [pc, #168]	; (8000d90 <runNormalMode+0x278>)
 8000ce6:	6013      	str	r3, [r2, #0]
				statusTraffic2 = STATUS2_3;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <runNormalMode+0x26c>)
 8000cea:	2203      	movs	r2, #3
 8000cec:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 8000cee:	f7ff fc5b 	bl	80005a8 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8000cf2:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <runNormalMode+0x278>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fbe4 	bl	80004c4 <update7SEGBufferTraffic2>
			{
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
			}
		}
		break;
 8000cfc:	e02f      	b.n	8000d5e <runNormalMode+0x246>
				onSingleYellowTraffic2();
 8000cfe:	f7ff fc5b 	bl	80005b8 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <runNormalMode+0x274>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fbdc 	bl	80004c4 <update7SEGBufferTraffic2>
		break;
 8000d0c:	e027      	b.n	8000d5e <runNormalMode+0x246>
	case STATUS2_3:
		if (counterLedRed2 > 0)
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <runNormalMode+0x278>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd25      	ble.n	8000d62 <runNormalMode+0x24a>
		{
			counterLedRed2--;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <runNormalMode+0x278>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <runNormalMode+0x278>)
 8000d1e:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <runNormalMode+0x278>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dc0e      	bgt.n	8000d46 <runNormalMode+0x22e>
			{
				counterLedGreen2 = durationLedGreen;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <runNormalMode+0x25c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <runNormalMode+0x270>)
 8000d2e:	6013      	str	r3, [r2, #0]
				statusTraffic2 = STATUS2_1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <runNormalMode+0x26c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 8000d36:	f7ff fc47 	bl	80005c8 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <runNormalMode+0x270>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fbc0 	bl	80004c4 <update7SEGBufferTraffic2>
			{
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
			}
		}
		break;
 8000d44:	e00d      	b.n	8000d62 <runNormalMode+0x24a>
				onSingleRedTraffic2();
 8000d46:	f7ff fc2f 	bl	80005a8 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <runNormalMode+0x278>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fbb8 	bl	80004c4 <update7SEGBufferTraffic2>
		break;
 8000d54:	e005      	b.n	8000d62 <runNormalMode+0x24a>
	default:
		break;
 8000d56:	bf00      	nop
 8000d58:	e004      	b.n	8000d64 <runNormalMode+0x24c>
		break;
 8000d5a:	bf00      	nop
 8000d5c:	e002      	b.n	8000d64 <runNormalMode+0x24c>
		break;
 8000d5e:	bf00      	nop
 8000d60:	e000      	b.n	8000d64 <runNormalMode+0x24c>
		break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200000d0 	.word	0x200000d0
 8000d6c:	20000074 	.word	0x20000074
 8000d70:	2000013c 	.word	0x2000013c
 8000d74:	20000078 	.word	0x20000078
 8000d78:	2000012c 	.word	0x2000012c
 8000d7c:	2000007c 	.word	0x2000007c
 8000d80:	20000130 	.word	0x20000130
 8000d84:	200000d4 	.word	0x200000d4
 8000d88:	20000138 	.word	0x20000138
 8000d8c:	20000134 	.word	0x20000134
 8000d90:	20000128 	.word	0x20000128

08000d94 <beginNormalMode>:

void beginNormalMode()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	offAllSingLEDs();
 8000d98:	f7ff fbd6 	bl	8000548 <offAllSingLEDs>
	initStatusNormalMode();
 8000d9c:	f7ff feac 	bl	8000af8 <initStatusNormalMode>
	runNormalMode();
 8000da0:	f7ff feba 	bl	8000b18 <runNormalMode>
	setTimer2(100);
 8000da4:	2064      	movs	r0, #100	; 0x64
 8000da6:	f000 fb0b 	bl	80013c0 <setTimer2>
	update7SEGBufferMode(1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff fb96 	bl	80004dc <update7SEGBufferMode>
	displayAll7Seg();
 8000db0:	f7ff fba0 	bl	80004f4 <displayAll7Seg>
	setTimer4(10);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f000 fb2b 	bl	8001410 <setTimer4>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <show7SEG>:
int status7SEG = INIT;
int led_buffer[5] = {1, 2, 3, 4, 1};

void show7SEG(GPIO_PinState A, GPIO_PinState B, GPIO_PinState C, GPIO_PinState D, GPIO_PinState E,
			  GPIO_PinState F, GPIO_PinState G)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	4611      	mov	r1, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4623      	mov	r3, r4
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71bb      	strb	r3, [r7, #6]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	717b      	strb	r3, [r7, #5]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, A);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	461a      	mov	r2, r3
 8000de2:	2101      	movs	r1, #1
 8000de4:	4815      	ldr	r0, [pc, #84]	; (8000e3c <show7SEG+0x7c>)
 8000de6:	f001 f854 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, B);
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	461a      	mov	r2, r3
 8000dee:	2102      	movs	r1, #2
 8000df0:	4812      	ldr	r0, [pc, #72]	; (8000e3c <show7SEG+0x7c>)
 8000df2:	f001 f84e 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, C);
 8000df6:	797b      	ldrb	r3, [r7, #5]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <show7SEG+0x7c>)
 8000dfe:	f001 f848 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, D);
 8000e02:	793b      	ldrb	r3, [r7, #4]
 8000e04:	461a      	mov	r2, r3
 8000e06:	2108      	movs	r1, #8
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <show7SEG+0x7c>)
 8000e0a:	f001 f842 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, E);
 8000e0e:	7e3b      	ldrb	r3, [r7, #24]
 8000e10:	461a      	mov	r2, r3
 8000e12:	2110      	movs	r1, #16
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <show7SEG+0x7c>)
 8000e16:	f001 f83c 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, F);
 8000e1a:	7f3b      	ldrb	r3, [r7, #28]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2120      	movs	r1, #32
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <show7SEG+0x7c>)
 8000e22:	f001 f836 	bl	8001e92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, G);
 8000e26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	4803      	ldr	r0, [pc, #12]	; (8000e3c <show7SEG+0x7c>)
 8000e30:	f001 f82f 	bl	8001e92 <HAL_GPIO_WritePin>
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	40010800 	.word	0x40010800

08000e40 <display>:

void display(int num)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af04      	add	r7, sp, #16
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b09      	cmp	r3, #9
 8000e4c:	f200 809a 	bhi.w	8000f84 <display+0x144>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <display+0x18>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e81 	.word	0x08000e81
 8000e5c:	08000e9b 	.word	0x08000e9b
 8000e60:	08000eb5 	.word	0x08000eb5
 8000e64:	08000ecf 	.word	0x08000ecf
 8000e68:	08000ee9 	.word	0x08000ee9
 8000e6c:	08000f03 	.word	0x08000f03
 8000e70:	08000f1d 	.word	0x08000f1d
 8000e74:	08000f37 	.word	0x08000f37
 8000e78:	08000f51 	.word	0x08000f51
 8000e7c:	08000f6b 	.word	0x08000f6b
	switch (num)
	{
	case 0:
		show7SEG(0, 0, 0, 0, 0, 0, 1);
 8000e80:	2301      	movs	r3, #1
 8000e82:	9302      	str	r3, [sp, #8]
 8000e84:	2300      	movs	r3, #0
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ff94 	bl	8000dc0 <show7SEG>
		break;
 8000e98:	e081      	b.n	8000f9e <display+0x15e>
	case 1:
		show7SEG(1, 0, 0, 1, 1, 1, 1);
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff ff87 	bl	8000dc0 <show7SEG>
		break;
 8000eb2:	e074      	b.n	8000f9e <display+0x15e>
	case 2:
		show7SEG(0, 0, 1, 0, 0, 1, 0);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ff7a 	bl	8000dc0 <show7SEG>
		break;
 8000ecc:	e067      	b.n	8000f9e <display+0x15e>

	case 3:
		show7SEG(0, 0, 0, 0, 1, 1, 0);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2300      	movs	r3, #0
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff ff6d 	bl	8000dc0 <show7SEG>
		break;
 8000ee6:	e05a      	b.n	8000f9e <display+0x15e>
	case 4:
		show7SEG(1, 0, 0, 1, 1, 0, 0);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	2300      	movs	r3, #0
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2001      	movs	r0, #1
 8000efc:	f7ff ff60 	bl	8000dc0 <show7SEG>
		break;
 8000f00:	e04d      	b.n	8000f9e <display+0x15e>
	case 5:
		show7SEG(0, 1, 0, 0, 1, 0, 0);
 8000f02:	2300      	movs	r3, #0
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2200      	movs	r2, #0
 8000f12:	2101      	movs	r1, #1
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff ff53 	bl	8000dc0 <show7SEG>
		break;
 8000f1a:	e040      	b.n	8000f9e <display+0x15e>
	case 6:
		show7SEG(0, 1, 0, 0, 0, 0, 0);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2300      	movs	r3, #0
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff ff46 	bl	8000dc0 <show7SEG>
		break;
 8000f34:	e033      	b.n	8000f9e <display+0x15e>
	case 7:
		show7SEG(0, 0, 0, 1, 1, 1, 1);
 8000f36:	2301      	movs	r3, #1
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff ff39 	bl	8000dc0 <show7SEG>
		break;
 8000f4e:	e026      	b.n	8000f9e <display+0x15e>
	case 8:
		show7SEG(0, 0, 0, 0, 0, 0, 0);
 8000f50:	2300      	movs	r3, #0
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2300      	movs	r3, #0
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff ff2c 	bl	8000dc0 <show7SEG>
		break;
 8000f68:	e019      	b.n	8000f9e <display+0x15e>
	case 9:
		show7SEG(0, 0, 0, 0, 1, 0, 0);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff ff1f 	bl	8000dc0 <show7SEG>
		break;
 8000f82:	e00c      	b.n	8000f9e <display+0x15e>
	default:
		show7SEG(0, 0, 0, 0, 1, 0, 0);
 8000f84:	2300      	movs	r3, #0
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff ff12 	bl	8000dc0 <show7SEG>
		break;
 8000f9c:	bf00      	nop
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop

08000fa8 <Scan7SEG>:

void Scan7SEG()
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	switch (status7SEG)
 8000fac:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <Scan7SEG+0x134>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b05      	cmp	r3, #5
 8000fb2:	f200 808f 	bhi.w	80010d4 <Scan7SEG+0x12c>
 8000fb6:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <Scan7SEG+0x14>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08000fd5 	.word	0x08000fd5
 8000fc0:	0800101f 	.word	0x0800101f
 8000fc4:	08001041 	.word	0x08001041
 8000fc8:	08001065 	.word	0x08001065
 8000fcc:	0800108b 	.word	0x0800108b
 8000fd0:	080010b1 	.word	0x080010b1
	{
	case INIT:
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	4841      	ldr	r0, [pc, #260]	; (80010e0 <Scan7SEG+0x138>)
 8000fda:	f000 ff5a 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	483f      	ldr	r0, [pc, #252]	; (80010e0 <Scan7SEG+0x138>)
 8000fe4:	f000 ff55 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	483c      	ldr	r0, [pc, #240]	; (80010e0 <Scan7SEG+0x138>)
 8000ff0:	f000 ff4f 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, 1);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	4839      	ldr	r0, [pc, #228]	; (80010e0 <Scan7SEG+0x138>)
 8000ffc:	f000 ff49 	bl	8001e92 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4836      	ldr	r0, [pc, #216]	; (80010e0 <Scan7SEG+0x138>)
 8001008:	f000 ff43 	bl	8001e92 <HAL_GPIO_WritePin>
		display(led_buffer[0]);
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <Scan7SEG+0x13c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff15 	bl	8000e40 <display>
		status7SEG = SEG7_1ON;
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <Scan7SEG+0x134>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
		break;
 800101c:	e05b      	b.n	80010d6 <Scan7SEG+0x12e>
	case SEG7_1ON:
		HAL_GPIO_TogglePin(en0_GPIO_Port, en0_Pin);
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	482f      	ldr	r0, [pc, #188]	; (80010e0 <Scan7SEG+0x138>)
 8001022:	f000 ff4e 	bl	8001ec2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en1_GPIO_Port, en1_Pin);
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	482d      	ldr	r0, [pc, #180]	; (80010e0 <Scan7SEG+0x138>)
 800102a:	f000 ff4a 	bl	8001ec2 <HAL_GPIO_TogglePin>
		display(led_buffer[1]);
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <Scan7SEG+0x13c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff04 	bl	8000e40 <display>
		status7SEG = SEG7_2ON;
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <Scan7SEG+0x134>)
 800103a:	2202      	movs	r2, #2
 800103c:	601a      	str	r2, [r3, #0]
		break;
 800103e:	e04a      	b.n	80010d6 <Scan7SEG+0x12e>
	case SEG7_2ON:
		HAL_GPIO_TogglePin(en1_GPIO_Port, en1_Pin);
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	4827      	ldr	r0, [pc, #156]	; (80010e0 <Scan7SEG+0x138>)
 8001044:	f000 ff3d 	bl	8001ec2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en2_GPIO_Port, en2_Pin);
 8001048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104c:	4824      	ldr	r0, [pc, #144]	; (80010e0 <Scan7SEG+0x138>)
 800104e:	f000 ff38 	bl	8001ec2 <HAL_GPIO_TogglePin>
		display(led_buffer[2]);
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <Scan7SEG+0x13c>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fef2 	bl	8000e40 <display>
		status7SEG = SEG7_3ON;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <Scan7SEG+0x134>)
 800105e:	2203      	movs	r2, #3
 8001060:	601a      	str	r2, [r3, #0]
		break;
 8001062:	e038      	b.n	80010d6 <Scan7SEG+0x12e>
	case SEG7_3ON:
		HAL_GPIO_TogglePin(en2_GPIO_Port, en2_Pin);
 8001064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001068:	481d      	ldr	r0, [pc, #116]	; (80010e0 <Scan7SEG+0x138>)
 800106a:	f000 ff2a 	bl	8001ec2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en3_GPIO_Port, en3_Pin);
 800106e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <Scan7SEG+0x138>)
 8001074:	f000 ff25 	bl	8001ec2 <HAL_GPIO_TogglePin>
		status7SEG = SEG7_4ON;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <Scan7SEG+0x134>)
 800107a:	2204      	movs	r2, #4
 800107c:	601a      	str	r2, [r3, #0]
		display(led_buffer[3]);
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <Scan7SEG+0x13c>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fedc 	bl	8000e40 <display>
		break;
 8001088:	e025      	b.n	80010d6 <Scan7SEG+0x12e>
	case SEG7_4ON:
		HAL_GPIO_TogglePin(en3_GPIO_Port, en3_Pin);
 800108a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108e:	4814      	ldr	r0, [pc, #80]	; (80010e0 <Scan7SEG+0x138>)
 8001090:	f000 ff17 	bl	8001ec2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en4_GPIO_Port, en4_Pin);
 8001094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <Scan7SEG+0x138>)
 800109a:	f000 ff12 	bl	8001ec2 <HAL_GPIO_TogglePin>
		status7SEG = SEG7_5ON;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <Scan7SEG+0x134>)
 80010a0:	2205      	movs	r2, #5
 80010a2:	601a      	str	r2, [r3, #0]
		display(led_buffer[4]);
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <Scan7SEG+0x13c>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fec9 	bl	8000e40 <display>
		break;
 80010ae:	e012      	b.n	80010d6 <Scan7SEG+0x12e>
	case SEG7_5ON:
		HAL_GPIO_TogglePin(en4_GPIO_Port, en4_Pin);
 80010b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <Scan7SEG+0x138>)
 80010b6:	f000 ff04 	bl	8001ec2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(en0_GPIO_Port, en0_Pin);
 80010ba:	2140      	movs	r1, #64	; 0x40
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <Scan7SEG+0x138>)
 80010be:	f000 ff00 	bl	8001ec2 <HAL_GPIO_TogglePin>
		status7SEG = SEG7_1ON;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Scan7SEG+0x134>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
		display(led_buffer[0]);
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <Scan7SEG+0x13c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff feb7 	bl	8000e40 <display>
		break;
 80010d2:	e000      	b.n	80010d6 <Scan7SEG+0x12e>
	default:
		break;
 80010d4:	bf00      	nop
	}
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000d8 	.word	0x200000d8
 80010e0:	40010c00 	.word	0x40010c00
 80010e4:	20000050 	.word	0x20000050

080010e8 <controlSingleLed>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLed(int orderTraffic, int statusLed)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d003      	beq.n	8001100 <controlSingleLed+0x18>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b09      	cmp	r3, #9
 80010fc:	d077      	beq.n	80011ee <controlSingleLed+0x106>
		default:
			break;
		}
		break;
	default:
		break;
 80010fe:	e0ee      	b.n	80012de <controlSingleLed+0x1f6>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2b07      	cmp	r3, #7
 8001104:	d871      	bhi.n	80011ea <controlSingleLed+0x102>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <controlSingleLed+0x24>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800112d 	.word	0x0800112d
 8001110:	0800114d 	.word	0x0800114d
 8001114:	0800116d 	.word	0x0800116d
 8001118:	0800118d 	.word	0x0800118d
 800111c:	080011a1 	.word	0x080011a1
 8001120:	08001197 	.word	0x08001197
 8001124:	080011ab 	.word	0x080011ab
 8001128:	080011cb 	.word	0x080011cb
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800112c:	2201      	movs	r2, #1
 800112e:	2101      	movs	r1, #1
 8001130:	486d      	ldr	r0, [pc, #436]	; (80012e8 <controlSingleLed+0x200>)
 8001132:	f000 feae 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2104      	movs	r1, #4
 800113a:	486b      	ldr	r0, [pc, #428]	; (80012e8 <controlSingleLed+0x200>)
 800113c:	f000 fea9 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	4868      	ldr	r0, [pc, #416]	; (80012e8 <controlSingleLed+0x200>)
 8001146:	f000 fea4 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 800114a:	e04f      	b.n	80011ec <controlSingleLed+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2101      	movs	r1, #1
 8001150:	4865      	ldr	r0, [pc, #404]	; (80012e8 <controlSingleLed+0x200>)
 8001152:	f000 fe9e 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2104      	movs	r1, #4
 800115a:	4863      	ldr	r0, [pc, #396]	; (80012e8 <controlSingleLed+0x200>)
 800115c:	f000 fe99 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4860      	ldr	r0, [pc, #384]	; (80012e8 <controlSingleLed+0x200>)
 8001166:	f000 fe94 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 800116a:	e03f      	b.n	80011ec <controlSingleLed+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2101      	movs	r1, #1
 8001170:	485d      	ldr	r0, [pc, #372]	; (80012e8 <controlSingleLed+0x200>)
 8001172:	f000 fe8e 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2104      	movs	r1, #4
 800117a:	485b      	ldr	r0, [pc, #364]	; (80012e8 <controlSingleLed+0x200>)
 800117c:	f000 fe89 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	4858      	ldr	r0, [pc, #352]	; (80012e8 <controlSingleLed+0x200>)
 8001186:	f000 fe84 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 800118a:	e02f      	b.n	80011ec <controlSingleLed+0x104>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 800118c:	2101      	movs	r1, #1
 800118e:	4856      	ldr	r0, [pc, #344]	; (80012e8 <controlSingleLed+0x200>)
 8001190:	f000 fe97 	bl	8001ec2 <HAL_GPIO_TogglePin>
			break;
 8001194:	e02a      	b.n	80011ec <controlSingleLed+0x104>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001196:	2104      	movs	r1, #4
 8001198:	4853      	ldr	r0, [pc, #332]	; (80012e8 <controlSingleLed+0x200>)
 800119a:	f000 fe92 	bl	8001ec2 <HAL_GPIO_TogglePin>
			break;
 800119e:	e025      	b.n	80011ec <controlSingleLed+0x104>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80011a0:	2102      	movs	r1, #2
 80011a2:	4851      	ldr	r0, [pc, #324]	; (80012e8 <controlSingleLed+0x200>)
 80011a4:	f000 fe8d 	bl	8001ec2 <HAL_GPIO_TogglePin>
			break;
 80011a8:	e020      	b.n	80011ec <controlSingleLed+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2101      	movs	r1, #1
 80011ae:	484e      	ldr	r0, [pc, #312]	; (80012e8 <controlSingleLed+0x200>)
 80011b0:	f000 fe6f 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2104      	movs	r1, #4
 80011b8:	484b      	ldr	r0, [pc, #300]	; (80012e8 <controlSingleLed+0x200>)
 80011ba:	f000 fe6a 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2102      	movs	r1, #2
 80011c2:	4849      	ldr	r0, [pc, #292]	; (80012e8 <controlSingleLed+0x200>)
 80011c4:	f000 fe65 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 80011c8:	e010      	b.n	80011ec <controlSingleLed+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2101      	movs	r1, #1
 80011ce:	4846      	ldr	r0, [pc, #280]	; (80012e8 <controlSingleLed+0x200>)
 80011d0:	f000 fe5f 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2104      	movs	r1, #4
 80011d8:	4843      	ldr	r0, [pc, #268]	; (80012e8 <controlSingleLed+0x200>)
 80011da:	f000 fe5a 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2102      	movs	r1, #2
 80011e2:	4841      	ldr	r0, [pc, #260]	; (80012e8 <controlSingleLed+0x200>)
 80011e4:	f000 fe55 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 80011e8:	e000      	b.n	80011ec <controlSingleLed+0x104>
			break;
 80011ea:	bf00      	nop
		break;
 80011ec:	e077      	b.n	80012de <controlSingleLed+0x1f6>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d872      	bhi.n	80012da <controlSingleLed+0x1f2>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <controlSingleLed+0x114>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800121d 	.word	0x0800121d
 8001200:	0800123d 	.word	0x0800123d
 8001204:	0800125d 	.word	0x0800125d
 8001208:	0800127d 	.word	0x0800127d
 800120c:	08001291 	.word	0x08001291
 8001210:	08001287 	.word	0x08001287
 8001214:	0800129b 	.word	0x0800129b
 8001218:	080012bb 	.word	0x080012bb
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2108      	movs	r1, #8
 8001220:	4831      	ldr	r0, [pc, #196]	; (80012e8 <controlSingleLed+0x200>)
 8001222:	f000 fe36 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2120      	movs	r1, #32
 800122a:	482f      	ldr	r0, [pc, #188]	; (80012e8 <controlSingleLed+0x200>)
 800122c:	f000 fe31 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2110      	movs	r1, #16
 8001234:	482c      	ldr	r0, [pc, #176]	; (80012e8 <controlSingleLed+0x200>)
 8001236:	f000 fe2c 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 800123a:	e04f      	b.n	80012dc <controlSingleLed+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2108      	movs	r1, #8
 8001240:	4829      	ldr	r0, [pc, #164]	; (80012e8 <controlSingleLed+0x200>)
 8001242:	f000 fe26 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2120      	movs	r1, #32
 800124a:	4827      	ldr	r0, [pc, #156]	; (80012e8 <controlSingleLed+0x200>)
 800124c:	f000 fe21 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2110      	movs	r1, #16
 8001254:	4824      	ldr	r0, [pc, #144]	; (80012e8 <controlSingleLed+0x200>)
 8001256:	f000 fe1c 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 800125a:	e03f      	b.n	80012dc <controlSingleLed+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2108      	movs	r1, #8
 8001260:	4821      	ldr	r0, [pc, #132]	; (80012e8 <controlSingleLed+0x200>)
 8001262:	f000 fe16 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2120      	movs	r1, #32
 800126a:	481f      	ldr	r0, [pc, #124]	; (80012e8 <controlSingleLed+0x200>)
 800126c:	f000 fe11 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2110      	movs	r1, #16
 8001274:	481c      	ldr	r0, [pc, #112]	; (80012e8 <controlSingleLed+0x200>)
 8001276:	f000 fe0c 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 800127a:	e02f      	b.n	80012dc <controlSingleLed+0x1f4>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 800127c:	2108      	movs	r1, #8
 800127e:	481a      	ldr	r0, [pc, #104]	; (80012e8 <controlSingleLed+0x200>)
 8001280:	f000 fe1f 	bl	8001ec2 <HAL_GPIO_TogglePin>
			break;
 8001284:	e02a      	b.n	80012dc <controlSingleLed+0x1f4>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001286:	2120      	movs	r1, #32
 8001288:	4817      	ldr	r0, [pc, #92]	; (80012e8 <controlSingleLed+0x200>)
 800128a:	f000 fe1a 	bl	8001ec2 <HAL_GPIO_TogglePin>
			break;
 800128e:	e025      	b.n	80012dc <controlSingleLed+0x1f4>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001290:	2110      	movs	r1, #16
 8001292:	4815      	ldr	r0, [pc, #84]	; (80012e8 <controlSingleLed+0x200>)
 8001294:	f000 fe15 	bl	8001ec2 <HAL_GPIO_TogglePin>
			break;
 8001298:	e020      	b.n	80012dc <controlSingleLed+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2108      	movs	r1, #8
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <controlSingleLed+0x200>)
 80012a0:	f000 fdf7 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2120      	movs	r1, #32
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <controlSingleLed+0x200>)
 80012aa:	f000 fdf2 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2110      	movs	r1, #16
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <controlSingleLed+0x200>)
 80012b4:	f000 fded 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 80012b8:	e010      	b.n	80012dc <controlSingleLed+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2108      	movs	r1, #8
 80012be:	480a      	ldr	r0, [pc, #40]	; (80012e8 <controlSingleLed+0x200>)
 80012c0:	f000 fde7 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2120      	movs	r1, #32
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <controlSingleLed+0x200>)
 80012ca:	f000 fde2 	bl	8001e92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2110      	movs	r1, #16
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <controlSingleLed+0x200>)
 80012d4:	f000 fddd 	bl	8001e92 <HAL_GPIO_WritePin>
			break;
 80012d8:	e000      	b.n	80012dc <controlSingleLed+0x1f4>
			break;
 80012da:	bf00      	nop
		break;
 80012dc:	bf00      	nop
	}
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40010c00 	.word	0x40010c00

080012ec <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <runTimer+0x8c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	dd0b      	ble.n	8001310 <runTimer+0x24>
	{
		counter1--;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <runTimer+0x8c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <runTimer+0x8c>)
 8001300:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <runTimer+0x8c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	dc02      	bgt.n	8001310 <runTimer+0x24>
		{
			flag1 = 1;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <runTimer+0x90>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <runTimer+0x94>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd0b      	ble.n	8001330 <runTimer+0x44>
	{
		counter2--;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <runTimer+0x94>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <runTimer+0x94>)
 8001320:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <runTimer+0x94>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	dc02      	bgt.n	8001330 <runTimer+0x44>
		{
			flag2 = 1;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <runTimer+0x98>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <runTimer+0x9c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	dd0b      	ble.n	8001350 <runTimer+0x64>
	{
		counter3--;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <runTimer+0x9c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <runTimer+0x9c>)
 8001340:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <runTimer+0x9c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dc02      	bgt.n	8001350 <runTimer+0x64>
		{
			flag3 = 1;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <runTimer+0xa0>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <runTimer+0xa4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dd0b      	ble.n	8001370 <runTimer+0x84>
	{
		counter4--;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <runTimer+0xa4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <runTimer+0xa4>)
 8001360:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <runTimer+0xa4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	dc02      	bgt.n	8001370 <runTimer+0x84>
		{
			flag4 = 1;
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <runTimer+0xa8>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000144 	.word	0x20000144
 800137c:	20000150 	.word	0x20000150
 8001380:	2000015c 	.word	0x2000015c
 8001384:	20000148 	.word	0x20000148
 8001388:	20000140 	.word	0x20000140
 800138c:	20000158 	.word	0x20000158
 8001390:	20000154 	.word	0x20000154
 8001394:	2000014c 	.word	0x2000014c

08001398 <setTimer1>:

void setTimer1(int duration)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	counter1 = duration;
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <setTimer1+0x20>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <setTimer1+0x24>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000144 	.word	0x20000144
 80013bc:	20000150 	.word	0x20000150

080013c0 <setTimer2>:

void setTimer2(int duration)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	counter2 = duration;
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <setTimer2+0x20>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
	flag2 = 0;
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <setTimer2+0x24>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000015c 	.word	0x2000015c
 80013e4:	20000148 	.word	0x20000148

080013e8 <setTimer3>:

void setTimer3(int duration)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	counter3 = duration;
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <setTimer3+0x20>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
	flag3 = 0;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <setTimer3+0x24>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000140 	.word	0x20000140
 800140c:	20000158 	.word	0x20000158

08001410 <setTimer4>:

void setTimer4(int duration)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	counter4 = duration;
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <setTimer4+0x20>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
	flag4 = 0;
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <setTimer4+0x24>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000154 	.word	0x20000154
 8001434:	2000014c 	.word	0x2000014c

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_MspInit+0x5c>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_MspInit+0x5c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_MspInit+0x5c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_MspInit+0x5c>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_MspInit+0x5c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_MspInit+0x5c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_MspInit+0x60>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_MspInit+0x60>)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000
 8001498:	40010000 	.word	0x40010000

0800149c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ac:	d113      	bne.n	80014d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_TIM_Base_MspInit+0x44>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_TIM_Base_MspInit+0x44>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_TIM_Base_MspInit+0x44>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2101      	movs	r1, #1
 80014ca:	201c      	movs	r0, #28
 80014cc:	f000 fb19 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d0:	201c      	movs	r0, #28
 80014d2:	f000 fb32 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152a:	f000 f9f7 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <TIM2_IRQHandler+0x10>)
 800153a:	f001 f95f 	bl	80027fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200000e0 	.word	0x200000e0

08001548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <runTuningMode>:
#define GREEN 3

int statusTuningMode= INITMODE;

void runTuningMode()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <runTuningMode+0x114>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d87f      	bhi.n	8001660 <runTuningMode+0x10c>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <runTuningMode+0x14>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001579 	.word	0x08001579
 800156c:	080015b3 	.word	0x080015b3
 8001570:	080015ed 	.word	0x080015ed
 8001574:	08001627 	.word	0x08001627
    {
        case INITMODE:
            statusTuningMode= RED;
 8001578:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <runTuningMode+0x114>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 800157e:	f7fe ffe3 	bl	8000548 <offAllSingLEDs>
            blinkingRED();
 8001582:	f7fe ffc9 	bl	8000518 <blinkingRED>
            setTimer3(50);
 8001586:	2032      	movs	r0, #50	; 0x32
 8001588:	f7ff ff2e 	bl	80013e8 <setTimer3>
            update7SEGBufferTraffic1(durationLedRed);
 800158c:	4b37      	ldr	r3, [pc, #220]	; (800166c <runTuningMode+0x118>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ff8b 	bl	80004ac <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001596:	4b35      	ldr	r3, [pc, #212]	; (800166c <runTuningMode+0x118>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff92 	bl	80004c4 <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f7fe ff9b 	bl	80004dc <update7SEGBufferMode>
            displayAll7Seg();
 80015a6:	f7fe ffa5 	bl	80004f4 <displayAll7Seg>
            setTimer4(10);
 80015aa:	200a      	movs	r0, #10
 80015ac:	f7ff ff30 	bl	8001410 <setTimer4>
            break;
 80015b0:	e057      	b.n	8001662 <runTuningMode+0x10e>
        case RED:
            statusTuningMode= YELLOW;
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <runTuningMode+0x114>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 80015b8:	f7fe ffc6 	bl	8000548 <offAllSingLEDs>
            blinkingYELLOW();
 80015bc:	f7fe ffa0 	bl	8000500 <blinkingYELLOW>
            setTimer3(50);
 80015c0:	2032      	movs	r0, #50	; 0x32
 80015c2:	f7ff ff11 	bl	80013e8 <setTimer3>
            update7SEGBufferTraffic1(durationLedYellow);
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <runTuningMode+0x11c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff6e 	bl	80004ac <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedYellow);
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <runTuningMode+0x11c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff75 	bl	80004c4 <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 80015da:	2003      	movs	r0, #3
 80015dc:	f7fe ff7e 	bl	80004dc <update7SEGBufferMode>
            displayAll7Seg();
 80015e0:	f7fe ff88 	bl	80004f4 <displayAll7Seg>
            setTimer4(10);
 80015e4:	200a      	movs	r0, #10
 80015e6:	f7ff ff13 	bl	8001410 <setTimer4>
            break;
 80015ea:	e03a      	b.n	8001662 <runTuningMode+0x10e>
        case YELLOW:
            statusTuningMode= GREEN;
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <runTuningMode+0x114>)
 80015ee:	2203      	movs	r2, #3
 80015f0:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 80015f2:	f7fe ffa9 	bl	8000548 <offAllSingLEDs>
            blinkingGREEN();
 80015f6:	f7fe ff9b 	bl	8000530 <blinkingGREEN>
            setTimer3(50);
 80015fa:	2032      	movs	r0, #50	; 0x32
 80015fc:	f7ff fef4 	bl	80013e8 <setTimer3>
            update7SEGBufferTraffic1(durationLedGreen);
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <runTuningMode+0x120>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff51 	bl	80004ac <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedGreen);
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <runTuningMode+0x120>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff58 	bl	80004c4 <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 8001614:	2003      	movs	r0, #3
 8001616:	f7fe ff61 	bl	80004dc <update7SEGBufferMode>
            displayAll7Seg();
 800161a:	f7fe ff6b 	bl	80004f4 <displayAll7Seg>
            setTimer4(10);
 800161e:	200a      	movs	r0, #10
 8001620:	f7ff fef6 	bl	8001410 <setTimer4>
            break;
 8001624:	e01d      	b.n	8001662 <runTuningMode+0x10e>
        case GREEN:
            statusTuningMode= RED;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <runTuningMode+0x114>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 800162c:	f7fe ff8c 	bl	8000548 <offAllSingLEDs>
            blinkingRED();
 8001630:	f7fe ff72 	bl	8000518 <blinkingRED>
            setTimer3(50);
 8001634:	2032      	movs	r0, #50	; 0x32
 8001636:	f7ff fed7 	bl	80013e8 <setTimer3>
            update7SEGBufferTraffic1(durationLedRed);
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <runTuningMode+0x118>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff34 	bl	80004ac <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <runTuningMode+0x118>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff3b 	bl	80004c4 <update7SEGBufferTraffic2>
            update7SEGBufferMode(3);
 800164e:	2003      	movs	r0, #3
 8001650:	f7fe ff44 	bl	80004dc <update7SEGBufferMode>
            displayAll7Seg();
 8001654:	f7fe ff4e 	bl	80004f4 <displayAll7Seg>
            setTimer4(10);
 8001658:	200a      	movs	r0, #10
 800165a:	f7ff fed9 	bl	8001410 <setTimer4>
            break;
 800165e:	e000      	b.n	8001662 <runTuningMode+0x10e>
        default:
            break;
 8001660:	bf00      	nop
    }
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000dc 	.word	0x200000dc
 800166c:	20000074 	.word	0x20000074
 8001670:	2000007c 	.word	0x2000007c
 8001674:	20000078 	.word	0x20000078

08001678 <initStatusTuningMode>:

void initStatusTuningMode()
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
    statusTuningMode= INITMODE;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <initStatusTuningMode+0x14>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200000dc 	.word	0x200000dc

08001690 <beginTuningMode>:

void beginTuningMode()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    initStatusTuningMode();
 8001694:	f7ff fff0 	bl	8001678 <initStatusTuningMode>
    runTuningMode();
 8001698:	f7ff ff5c 	bl	8001554 <runTuningMode>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <modifyTuningMode>:

void modifyTuningMode()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <modifyTuningMode+0xac>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d034      	beq.n	8001716 <modifyTuningMode+0x76>
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	dc49      	bgt.n	8001744 <modifyTuningMode+0xa4>
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d002      	beq.n	80016ba <modifyTuningMode+0x1a>
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d017      	beq.n	80016e8 <modifyTuningMode+0x48>
            }
            update7SEGBufferTraffic1(tempDurationLedGreen);
            update7SEGBufferTraffic2(tempDurationLedGreen);
            break;
        default:
            break;
 80016b8:	e044      	b.n	8001744 <modifyTuningMode+0xa4>
            tempDurationLedRed++;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <modifyTuningMode+0xb0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <modifyTuningMode+0xb0>)
 80016c2:	6013      	str	r3, [r2, #0]
            if (tempDurationLedRed > 99)
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <modifyTuningMode+0xb0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b63      	cmp	r3, #99	; 0x63
 80016ca:	dd02      	ble.n	80016d2 <modifyTuningMode+0x32>
                tempDurationLedRed = 0;
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <modifyTuningMode+0xb0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedRed);
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <modifyTuningMode+0xb0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fee8 	bl	80004ac <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedRed);
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <modifyTuningMode+0xb0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe feef 	bl	80004c4 <update7SEGBufferTraffic2>
            break;
 80016e6:	e02e      	b.n	8001746 <modifyTuningMode+0xa6>
            tempDurationLedYellow++;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <modifyTuningMode+0xb4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a19      	ldr	r2, [pc, #100]	; (8001754 <modifyTuningMode+0xb4>)
 80016f0:	6013      	str	r3, [r2, #0]
            if (tempDurationLedYellow > 99)
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <modifyTuningMode+0xb4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b63      	cmp	r3, #99	; 0x63
 80016f8:	dd02      	ble.n	8001700 <modifyTuningMode+0x60>
                tempDurationLedYellow = 0;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <modifyTuningMode+0xb4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedYellow);
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <modifyTuningMode+0xb4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fed1 	bl	80004ac <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedYellow);
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <modifyTuningMode+0xb4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fed8 	bl	80004c4 <update7SEGBufferTraffic2>
            break;
 8001714:	e017      	b.n	8001746 <modifyTuningMode+0xa6>
            tempDurationLedGreen++;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <modifyTuningMode+0xb8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <modifyTuningMode+0xb8>)
 800171e:	6013      	str	r3, [r2, #0]
            if (tempDurationLedGreen > 99)
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <modifyTuningMode+0xb8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b63      	cmp	r3, #99	; 0x63
 8001726:	dd02      	ble.n	800172e <modifyTuningMode+0x8e>
                tempDurationLedGreen = 0;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <modifyTuningMode+0xb8>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedGreen);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <modifyTuningMode+0xb8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe feba 	bl	80004ac <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedGreen);
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <modifyTuningMode+0xb8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fec1 	bl	80004c4 <update7SEGBufferTraffic2>
            break;
 8001742:	e000      	b.n	8001746 <modifyTuningMode+0xa6>
            break;
 8001744:	bf00      	nop
    }
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000dc 	.word	0x200000dc
 8001750:	20000068 	.word	0x20000068
 8001754:	20000070 	.word	0x20000070
 8001758:	2000006c 	.word	0x2000006c

0800175c <saveTuningMode>:

void saveTuningMode()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
    if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <saveTuningMode+0x8c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <saveTuningMode+0x90>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	441a      	add	r2, r3
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <saveTuningMode+0x94>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d028      	beq.n	80017c4 <saveTuningMode+0x68>
    {
        switch (statusTuningMode)
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <saveTuningMode+0x98>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d117      	bne.n	80017aa <saveTuningMode+0x4e>
        {
            case GREEN:
                update7SEGBufferTraffic1(88);
 800177a:	2058      	movs	r0, #88	; 0x58
 800177c:	f7fe fe96 	bl	80004ac <update7SEGBufferTraffic1>
                update7SEGBufferTraffic2(88);
 8001780:	2058      	movs	r0, #88	; 0x58
 8001782:	f7fe fe9f 	bl	80004c4 <update7SEGBufferTraffic2>
                update7SEGBufferMode(8);
 8001786:	2008      	movs	r0, #8
 8001788:	f7fe fea8 	bl	80004dc <update7SEGBufferMode>
                onAllSingLEDs();
 800178c:	f7fe fee8 	bl	8000560 <onAllSingLEDs>
                tempDurationLedGreen = durationLedGreen;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <saveTuningMode+0x9c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a15      	ldr	r2, [pc, #84]	; (80017ec <saveTuningMode+0x90>)
 8001796:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <saveTuningMode+0xa0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <saveTuningMode+0x94>)
 800179e:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <saveTuningMode+0xa4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <saveTuningMode+0x8c>)
 80017a6:	6013      	str	r3, [r2, #0]
                break;
 80017a8:	e01b      	b.n	80017e2 <saveTuningMode+0x86>
            default:
                tempDurationLedGreen = durationLedGreen;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <saveTuningMode+0x9c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <saveTuningMode+0x90>)
 80017b0:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <saveTuningMode+0xa0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <saveTuningMode+0x94>)
 80017b8:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <saveTuningMode+0xa4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <saveTuningMode+0x8c>)
 80017c0:	6013      	str	r3, [r2, #0]
                break;
 80017c2:	e00e      	b.n	80017e2 <saveTuningMode+0x86>
        }
    }
    else
    {
        durationLedGreen = tempDurationLedGreen;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <saveTuningMode+0x90>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <saveTuningMode+0x9c>)
 80017ca:	6013      	str	r3, [r2, #0]
        durationLedRed = tempDurationLedRed;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <saveTuningMode+0x94>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <saveTuningMode+0xa0>)
 80017d2:	6013      	str	r3, [r2, #0]
        durationLedYellow = tempDurationLedYellow;
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <saveTuningMode+0x8c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a09      	ldr	r2, [pc, #36]	; (8001800 <saveTuningMode+0xa4>)
 80017da:	6013      	str	r3, [r2, #0]
        initStatusNormalMode();
 80017dc:	f7ff f98c 	bl	8000af8 <initStatusNormalMode>
    }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000070 	.word	0x20000070
 80017ec:	2000006c 	.word	0x2000006c
 80017f0:	20000068 	.word	0x20000068
 80017f4:	200000dc 	.word	0x200000dc
 80017f8:	20000078 	.word	0x20000078
 80017fc:	20000074 	.word	0x20000074
 8001800:	2000007c 	.word	0x2000007c

08001804 <animationTuningMode>:

void animationTuningMode()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <animationTuningMode+0x3c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d814      	bhi.n	800183a <animationTuningMode+0x36>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <animationTuningMode+0x14>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	0800183b 	.word	0x0800183b
 800181c:	08001829 	.word	0x08001829
 8001820:	0800182f 	.word	0x0800182f
 8001824:	08001835 	.word	0x08001835
    {
    case INITMODE:

        break;
    case RED:
        blinkingRED();
 8001828:	f7fe fe76 	bl	8000518 <blinkingRED>
        break;
 800182c:	e006      	b.n	800183c <animationTuningMode+0x38>
    case YELLOW:
        blinkingYELLOW();
 800182e:	f7fe fe67 	bl	8000500 <blinkingYELLOW>
        break;
 8001832:	e003      	b.n	800183c <animationTuningMode+0x38>
    case GREEN:
        blinkingGREEN();
 8001834:	f7fe fe7c 	bl	8000530 <blinkingGREEN>
        break;
 8001838:	e000      	b.n	800183c <animationTuningMode+0x38>
    default:
        break;
 800183a:	bf00      	nop
    }
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200000dc 	.word	0x200000dc

08001844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800186a:	f7ff fe6d 	bl	8001548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f001 fb0d 	bl	8002e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7fe feb1 	bl	80005d8 <main>
  bx lr
 8001876:	4770      	bx	lr
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001880:	08002f24 	.word	0x08002f24
  ldr r2, =_sbss
 8001884:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001888:	20000164 	.word	0x20000164

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x28>)
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f923 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fdc4 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f93b 	bl	8001b56 <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 f903 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000064 	.word	0x20000064
 8001914:	20000084 	.word	0x20000084
 8001918:	20000080 	.word	0x20000080

0800191c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_IncTick+0x1c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x20>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_IncTick+0x20>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000084 	.word	0x20000084
 800193c:	20000160 	.word	0x20000160

08001940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_GetTick+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	20000160 	.word	0x20000160

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <__NVIC_EnableIRQ+0x34>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff90 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff2d 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff42 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff90 	bl	8001a44 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5f 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff35 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e148      	b.n	8001e16 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b84:	2201      	movs	r2, #1
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8137 	bne.w	8001e10 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4aa3      	ldr	r2, [pc, #652]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d05e      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bac:	4aa1      	ldr	r2, [pc, #644]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d875      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bb2:	4aa1      	ldr	r2, [pc, #644]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d058      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bb8:	4a9f      	ldr	r2, [pc, #636]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d86f      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bbe:	4a9f      	ldr	r2, [pc, #636]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d052      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bc4:	4a9d      	ldr	r2, [pc, #628]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d869      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bca:	4a9d      	ldr	r2, [pc, #628]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04c      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bd0:	4a9b      	ldr	r2, [pc, #620]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d863      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bd6:	4a9b      	ldr	r2, [pc, #620]	; (8001e44 <HAL_GPIO_Init+0x2d4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d046      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bdc:	4a99      	ldr	r2, [pc, #612]	; (8001e44 <HAL_GPIO_Init+0x2d4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d85d      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	d82a      	bhi.n	8001c3c <HAL_GPIO_Init+0xcc>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d859      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <HAL_GPIO_Init+0x80>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c45 	.word	0x08001c45
 8001bf8:	08001c57 	.word	0x08001c57
 8001bfc:	08001c99 	.word	0x08001c99
 8001c00:	08001c9f 	.word	0x08001c9f
 8001c04:	08001c9f 	.word	0x08001c9f
 8001c08:	08001c9f 	.word	0x08001c9f
 8001c0c:	08001c9f 	.word	0x08001c9f
 8001c10:	08001c9f 	.word	0x08001c9f
 8001c14:	08001c9f 	.word	0x08001c9f
 8001c18:	08001c9f 	.word	0x08001c9f
 8001c1c:	08001c9f 	.word	0x08001c9f
 8001c20:	08001c9f 	.word	0x08001c9f
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c9f 	.word	0x08001c9f
 8001c2c:	08001c9f 	.word	0x08001c9f
 8001c30:	08001c9f 	.word	0x08001c9f
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	4a82      	ldr	r2, [pc, #520]	; (8001e48 <HAL_GPIO_Init+0x2d8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c42:	e02c      	b.n	8001c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e029      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e024      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e01f      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	330c      	adds	r3, #12
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e01a      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c72:	2304      	movs	r3, #4
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e013      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c80:	2308      	movs	r3, #8
 8001c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	611a      	str	r2, [r3, #16]
          break;
 8001c8a:	e009      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	615a      	str	r2, [r3, #20]
          break;
 8001c96:	e003      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          break;
 8001c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d801      	bhi.n	8001caa <HAL_GPIO_Init+0x13a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_Init+0x13e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d802      	bhi.n	8001cbc <HAL_GPIO_Init+0x14c>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x152>
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3b08      	subs	r3, #8
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	210f      	movs	r1, #15
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	6a39      	ldr	r1, [r7, #32]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8090 	beq.w	8001e10 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf0:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a55      	ldr	r2, [pc, #340]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d08:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <HAL_GPIO_Init+0x2e0>)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a49      	ldr	r2, [pc, #292]	; (8001e54 <HAL_GPIO_Init+0x2e4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00d      	beq.n	8001d50 <HAL_GPIO_Init+0x1e0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a48      	ldr	r2, [pc, #288]	; (8001e58 <HAL_GPIO_Init+0x2e8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d007      	beq.n	8001d4c <HAL_GPIO_Init+0x1dc>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a47      	ldr	r2, [pc, #284]	; (8001e5c <HAL_GPIO_Init+0x2ec>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_GPIO_Init+0x1d8>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e004      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d50:	2300      	movs	r3, #0
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d62:	493b      	ldr	r1, [pc, #236]	; (8001e50 <HAL_GPIO_Init+0x2e0>)
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7c:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4937      	ldr	r1, [pc, #220]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d8a:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4933      	ldr	r1, [pc, #204]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	492d      	ldr	r1, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001db2:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4929      	ldr	r1, [pc, #164]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4923      	ldr	r1, [pc, #140]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	491f      	ldr	r1, [pc, #124]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	4919      	ldr	r1, [pc, #100]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4915      	ldr	r1, [pc, #84]	; (8001e60 <HAL_GPIO_Init+0x2f0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3301      	adds	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f aeaf 	bne.w	8001b84 <HAL_GPIO_Init+0x14>
  }
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	372c      	adds	r7, #44	; 0x2c
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	10320000 	.word	0x10320000
 8001e38:	10310000 	.word	0x10310000
 8001e3c:	10220000 	.word	0x10220000
 8001e40:	10210000 	.word	0x10210000
 8001e44:	10120000 	.word	0x10120000
 8001e48:	10110000 	.word	0x10110000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea2:	787b      	ldrb	r3, [r7, #1]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea8:	887a      	ldrh	r2, [r7, #2]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eae:	e003      	b.n	8001eb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed4:	887a      	ldrh	r2, [r7, #2]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	041a      	lsls	r2, r3, #16
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	400b      	ands	r3, r1
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	611a      	str	r2, [r3, #16]
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e26c      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b92      	ldr	r3, [pc, #584]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f20:	4b8f      	ldr	r3, [pc, #572]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
 8001f2c:	4b8c      	ldr	r3, [pc, #560]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d10b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	4b89      	ldr	r3, [pc, #548]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06c      	beq.n	8002020 <HAL_RCC_OscConfig+0x12c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d168      	bne.n	8002020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e246      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x76>
 8001f5c:	4b80      	ldr	r3, [pc, #512]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a7f      	ldr	r2, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b78      	ldr	r3, [pc, #480]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a77      	ldr	r2, [pc, #476]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xbc>
 8001f96:	4b72      	ldr	r3, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a71      	ldr	r2, [pc, #452]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001fb0:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fcb6 	bl	8001940 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fcb2 	bl	8001940 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1fa      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe4>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fca2 	bl	8001940 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff fc9e 	bl	8001940 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1e6      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x10c>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1ba      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4939      	ldr	r1, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_OscConfig+0x270>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff fc57 	bl	8001940 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff fc53 	bl	8001940 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e19b      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_RCC_OscConfig+0x270>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fc36 	bl	8001940 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc32 	bl	8001940 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e17a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03a      	beq.n	8002178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_RCC_OscConfig+0x274>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7ff fc16 	bl	8001940 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff fc12 	bl	8001940 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e15a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_RCC_OscConfig+0x26c>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f000 faa6 	bl	8002688 <RCC_Delay>
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_RCC_OscConfig+0x274>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7ff fbfc 	bl	8001940 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214a:	e00f      	b.n	800216c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7ff fbf8 	bl	8001940 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d908      	bls.n	800216c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e140      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	42420000 	.word	0x42420000
 8002168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e9      	bne.n	800214c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a6 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b94      	ldr	r3, [pc, #592]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a93      	ldr	r2, [pc, #588]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b8e      	ldr	r3, [pc, #568]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a8a      	ldr	r2, [pc, #552]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fbb9 	bl	8001940 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7ff fbb5 	bl	8001940 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0fd      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x312>
 80021f8:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a7a      	ldr	r2, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x334>
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a75      	ldr	r2, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a72      	ldr	r2, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x356>
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a6c      	ldr	r2, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a66      	ldr	r2, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a63      	ldr	r2, [pc, #396]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff fb69 	bl	8001940 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff fb65 	bl	8001940 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0ab      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x37e>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7ff fb53 	bl	8001940 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7ff fb4f 	bl	8001940 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e095      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8081 	beq.w	80023de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d061      	beq.n	80023ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d146      	bne.n	800237e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fb23 	bl	8001940 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff fb1f 	bl	8001940 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e067      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d108      	bne.n	8002338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	492d      	ldr	r1, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a19      	ldr	r1, [r3, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	430b      	orrs	r3, r1
 800234a:	4927      	ldr	r1, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff faf3 	bl	8001940 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7ff faef 	bl	8001940 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e037      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x46a>
 800237c:	e02f      	b.n	80023de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fadc 	bl	8001940 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff fad8 	bl	8001940 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e020      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x498>
 80023aa:	e018      	b.n	80023de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e013      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42420060 	.word	0x42420060

080023f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0d0      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4965      	ldr	r1, [pc, #404]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d040      	beq.n	8002514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e073      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06b      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d2:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f023 0203 	bic.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4936      	ldr	r1, [pc, #216]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e4:	f7ff fa2c 	bl	8001940 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7ff fa28 	bl	8001940 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e053      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 020c 	and.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	429a      	cmp	r2, r3
 8002512:	d1eb      	bne.n	80024ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d210      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	4922      	ldr	r1, [pc, #136]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f821 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002586:	4602      	mov	r2, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	490a      	ldr	r1, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1cc>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f98a 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08002f0c 	.word	0x08002f0c
 80025c0:	20000064 	.word	0x20000064
 80025c4:	20000080 	.word	0x20000080

080025c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d0:	1d3c      	adds	r4, r7, #4
 80025d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025d8:	f240 2301 	movw	r3, #513	; 0x201
 80025dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d002      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x40>
 8002602:	2b08      	cmp	r3, #8
 8002604:	d003      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x46>
 8002606:	e02d      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260a:	623b      	str	r3, [r7, #32]
      break;
 800260c:	e02d      	b.n	800266a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	0c9b      	lsrs	r3, r3, #18
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800261a:	4413      	add	r3, r2
 800261c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002620:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_RCC_GetSysClockFreq+0xb4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0c5b      	lsrs	r3, r3, #17
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263a:	4413      	add	r3, r2
 800263c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002640:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002646:	fb02 f203 	mul.w	r2, r2, r3
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e004      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	623b      	str	r3, [r7, #32]
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002666:	623b      	str	r3, [r7, #32]
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	6a3b      	ldr	r3, [r7, #32]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bc90      	pop	{r4, r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	08002efc 	.word	0x08002efc
 800267c:	40021000 	.word	0x40021000
 8002680:	007a1200 	.word	0x007a1200
 8002684:	003d0900 	.word	0x003d0900

08002688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <RCC_Delay+0x34>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <RCC_Delay+0x38>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0a5b      	lsrs	r3, r3, #9
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026a4:	bf00      	nop
  }
  while (Delay --);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	60fa      	str	r2, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f9      	bne.n	80026a4 <RCC_Delay+0x1c>
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	20000064 	.word	0x20000064
 80026c0:	10624dd3 	.word	0x10624dd3

080026c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e041      	b.n	800275a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fed6 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f000 fa6a 	bl	8002bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d001      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e035      	b.n	80027e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <HAL_TIM_Base_Start_IT+0x90>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_TIM_Base_Start_IT+0x4e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d004      	beq.n	80027b2 <HAL_TIM_Base_Start_IT+0x4e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_TIM_Base_Start_IT+0x94>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d111      	bne.n	80027d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d010      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d4:	e007      	b.n	80027e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40000400 	.word	0x40000400

080027fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d122      	bne.n	8002858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	d11b      	bne.n	8002858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0202 	mvn.w	r2, #2
 8002828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f9b1 	bl	8002ba6 <HAL_TIM_IC_CaptureCallback>
 8002844:	e005      	b.n	8002852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f9a4 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f9b3 	bl	8002bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b04      	cmp	r3, #4
 8002864:	d122      	bne.n	80028ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b04      	cmp	r3, #4
 8002872:	d11b      	bne.n	80028ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0204 	mvn.w	r2, #4
 800287c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f987 	bl	8002ba6 <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f97a 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f989 	bl	8002bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d122      	bne.n	8002900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d11b      	bne.n	8002900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0208 	mvn.w	r2, #8
 80028d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2204      	movs	r2, #4
 80028d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f95d 	bl	8002ba6 <HAL_TIM_IC_CaptureCallback>
 80028ec:	e005      	b.n	80028fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f950 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f95f 	bl	8002bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b10      	cmp	r3, #16
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0210 	mvn.w	r2, #16
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2208      	movs	r2, #8
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f933 	bl	8002ba6 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f926 	bl	8002b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f935 	bl	8002bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0201 	mvn.w	r2, #1
 8002978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe f83e 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d10e      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d107      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa67 	bl	8002e7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d10e      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d107      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8f9 	bl	8002bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d10e      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d107      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0220 	mvn.w	r2, #32
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fa32 	bl	8002e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIM_ConfigClockSource+0x18>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0b3      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x180>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5c:	d03e      	beq.n	8002adc <HAL_TIM_ConfigClockSource+0xd0>
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a62:	f200 8087 	bhi.w	8002b74 <HAL_TIM_ConfigClockSource+0x168>
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	f000 8085 	beq.w	8002b78 <HAL_TIM_ConfigClockSource+0x16c>
 8002a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a72:	d87f      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x168>
 8002a74:	2b70      	cmp	r3, #112	; 0x70
 8002a76:	d01a      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0xa2>
 8002a78:	2b70      	cmp	r3, #112	; 0x70
 8002a7a:	d87b      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x168>
 8002a7c:	2b60      	cmp	r3, #96	; 0x60
 8002a7e:	d050      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x116>
 8002a80:	2b60      	cmp	r3, #96	; 0x60
 8002a82:	d877      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x168>
 8002a84:	2b50      	cmp	r3, #80	; 0x50
 8002a86:	d03c      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0xf6>
 8002a88:	2b50      	cmp	r3, #80	; 0x50
 8002a8a:	d873      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x168>
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d058      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x136>
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d86f      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x168>
 8002a94:	2b30      	cmp	r3, #48	; 0x30
 8002a96:	d064      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x156>
 8002a98:	2b30      	cmp	r3, #48	; 0x30
 8002a9a:	d86b      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x168>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d060      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x156>
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d867      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x168>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d05c      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x156>
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d05a      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002aac:	e062      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f000 f95c 	bl	8002d7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ad0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	609a      	str	r2, [r3, #8]
      break;
 8002ada:	e04e      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f000 f945 	bl	8002d7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002afe:	609a      	str	r2, [r3, #8]
      break;
 8002b00:	e03b      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f000 f8bc 	bl	8002c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2150      	movs	r1, #80	; 0x50
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f913 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 8002b20:	e02b      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f000 f8da 	bl	8002ce8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2160      	movs	r1, #96	; 0x60
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f903 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 8002b40:	e01b      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f000 f89c 	bl	8002c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2140      	movs	r1, #64	; 0x40
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f8f3 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 8002b60:	e00b      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f000 f8ea 	bl	8002d46 <TIM_ITRx_SetConfig>
        break;
 8002b72:	e002      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b74:	bf00      	nop
 8002b76:	e000      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <TIM_Base_SetConfig+0xa8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <TIM_Base_SetConfig+0x28>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfa:	d003      	beq.n	8002c04 <TIM_Base_SetConfig+0x28>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <TIM_Base_SetConfig+0xac>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d108      	bne.n	8002c16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <TIM_Base_SetConfig+0xa8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <TIM_Base_SetConfig+0x52>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d003      	beq.n	8002c2e <TIM_Base_SetConfig+0x52>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <TIM_Base_SetConfig+0xac>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d108      	bne.n	8002c40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <TIM_Base_SetConfig+0xa8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d103      	bne.n	8002c74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	615a      	str	r2, [r3, #20]
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40000400 	.word	0x40000400

08002c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f023 0201 	bic.w	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f023 030a 	bic.w	r3, r3, #10
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 0210 	bic.w	r2, r3, #16
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	031b      	lsls	r3, r3, #12
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	621a      	str	r2, [r3, #32]
}
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f043 0307 	orr.w	r3, r3, #7
 8002d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b087      	sub	sp, #28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	021a      	lsls	r2, r3, #8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	609a      	str	r2, [r3, #8]
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e041      	b.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1c:	d004      	beq.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d10c      	bne.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40000400 	.word	0x40000400

08002e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	2600      	movs	r6, #0
 8002e90:	4d0c      	ldr	r5, [pc, #48]	; (8002ec4 <__libc_init_array+0x38>)
 8002e92:	4c0d      	ldr	r4, [pc, #52]	; (8002ec8 <__libc_init_array+0x3c>)
 8002e94:	1b64      	subs	r4, r4, r5
 8002e96:	10a4      	asrs	r4, r4, #2
 8002e98:	42a6      	cmp	r6, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	f000 f822 	bl	8002ee4 <_init>
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	4d0a      	ldr	r5, [pc, #40]	; (8002ecc <__libc_init_array+0x40>)
 8002ea4:	4c0a      	ldr	r4, [pc, #40]	; (8002ed0 <__libc_init_array+0x44>)
 8002ea6:	1b64      	subs	r4, r4, r5
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	42a6      	cmp	r6, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb4:	4798      	blx	r3
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebe:	4798      	blx	r3
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	08002f1c 	.word	0x08002f1c
 8002ec8:	08002f1c 	.word	0x08002f1c
 8002ecc:	08002f1c 	.word	0x08002f1c
 8002ed0:	08002f20 	.word	0x08002f20

08002ed4 <memset>:
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4402      	add	r2, r0
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d100      	bne.n	8002ede <memset+0xa>
 8002edc:	4770      	bx	lr
 8002ede:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee2:	e7f9      	b.n	8002ed8 <memset+0x4>

08002ee4 <_init>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr

08002ef0 <_fini>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr
