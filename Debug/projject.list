
projject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e90  08004e90  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004e90  08004e90  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e90  08004e90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000078  08004f10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08004f10  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec33  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002735  00000000  00000000  0002ecd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00031410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  000322c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001898c  00000000  00000000  00033038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001393a  00000000  00000000  0004b9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a159  00000000  00000000  0005f2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9457  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  000e94a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004dec 	.word	0x08004dec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004dec 	.word	0x08004dec

0800014c <resetAllButton>:
int eventButtonDrop[3]= {0, 0, 0};

int modeStatus = INITMODES;

void resetAllButton()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    for (int i= 0; i < 3; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e011      	b.n	800017c <resetAllButton+0x30>
    {
    	eventButtonPressed[i]= 0;
 8000158:	4a0d      	ldr	r2, [pc, #52]	; (8000190 <resetAllButton+0x44>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	eventButtonDrop[i]= 0;
 8000162:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <resetAllButton+0x48>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2100      	movs	r1, #0
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	timerNormalState[i]= 0;
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <resetAllButton+0x4c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2100      	movs	r1, #0
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i= 0; i < 3; i++)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b02      	cmp	r3, #2
 8000180:	ddea      	ble.n	8000158 <resetAllButton+0xc>
    }
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200000a0 	.word	0x200000a0
 8000194:	200000ac 	.word	0x200000ac
 8000198:	20000094 	.word	0x20000094

0800019c <implementButton>:

void implementButton(int indexButton)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	switch (indexButton)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	f000 80dd 	beq.w	8000366 <implementButton+0x1ca>
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	f300 8110 	bgt.w	80003d4 <implementButton+0x238>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d003      	beq.n	80001c2 <implementButton+0x26>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d072      	beq.n	80002a6 <implementButton+0x10a>
			default:
				break;
			}
			break;
		default:
			break;
 80001c0:	e108      	b.n	80003d4 <implementButton+0x238>
			switch (eventButtonPressed[indexButton])
 80001c2:	4a88      	ldr	r2, [pc, #544]	; (80003e4 <implementButton+0x248>)
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ca:	2b03      	cmp	r3, #3
 80001cc:	d863      	bhi.n	8000296 <implementButton+0xfa>
 80001ce:	a201      	add	r2, pc, #4	; (adr r2, 80001d4 <implementButton+0x38>)
 80001d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d4:	080001e5 	.word	0x080001e5
 80001d8:	0800020f 	.word	0x0800020f
 80001dc:	0800024f 	.word	0x0800024f
 80001e0:	08000273 	.word	0x08000273
				if (eventButtonDrop[indexButton]== 0)
 80001e4:	4a80      	ldr	r2, [pc, #512]	; (80003e8 <implementButton+0x24c>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10c      	bne.n	800020a <implementButton+0x6e>
					switch (modeStatus)
 80001f0:	4b7e      	ldr	r3, [pc, #504]	; (80003ec <implementButton+0x250>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b04      	cmp	r3, #4
 80001f6:	d002      	beq.n	80001fe <implementButton+0x62>
 80001f8:	2b05      	cmp	r3, #5
 80001fa:	d003      	beq.n	8000204 <implementButton+0x68>
							break;
 80001fc:	e006      	b.n	800020c <implementButton+0x70>
							runManualModeFunction();
 80001fe:	f000 fcab 	bl	8000b58 <runManualModeFunction>
							break;
 8000202:	e003      	b.n	800020c <implementButton+0x70>
							runTuningMode();
 8000204:	f001 fd4e 	bl	8001ca4 <runTuningMode>
							break;
 8000208:	e000      	b.n	800020c <implementButton+0x70>
				}
 800020a:	bf00      	nop
				break;
 800020c:	e04a      	b.n	80002a4 <implementButton+0x108>
				if (eventButtonDrop[indexButton]== 0)
 800020e:	4a76      	ldr	r2, [pc, #472]	; (80003e8 <implementButton+0x24c>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d10c      	bne.n	8000234 <implementButton+0x98>
					switch (modeStatus)
 800021a:	4b74      	ldr	r3, [pc, #464]	; (80003ec <implementButton+0x250>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b04      	cmp	r3, #4
 8000220:	d002      	beq.n	8000228 <implementButton+0x8c>
 8000222:	2b05      	cmp	r3, #5
 8000224:	d003      	beq.n	800022e <implementButton+0x92>
							break;
 8000226:	e011      	b.n	800024c <implementButton+0xb0>
							runManualModeFunction();
 8000228:	f000 fc96 	bl	8000b58 <runManualModeFunction>
							break;
 800022c:	e00e      	b.n	800024c <implementButton+0xb0>
							runTuningMode();
 800022e:	f001 fd39 	bl	8001ca4 <runTuningMode>
							break;
 8000232:	e00b      	b.n	800024c <implementButton+0xb0>
					if (eventButtonDrop[indexButton]== 1)
 8000234:	4a6c      	ldr	r2, [pc, #432]	; (80003e8 <implementButton+0x24c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d12c      	bne.n	800029a <implementButton+0xfe>
						modeStatus= NORMALMODE;
 8000240:	4b6a      	ldr	r3, [pc, #424]	; (80003ec <implementButton+0x250>)
 8000242:	2203      	movs	r2, #3
 8000244:	601a      	str	r2, [r3, #0]
						beginNormalMode();
 8000246:	f000 ff55 	bl	80010f4 <beginNormalMode>
				break;
 800024a:	e026      	b.n	800029a <implementButton+0xfe>
 800024c:	e025      	b.n	800029a <implementButton+0xfe>
				if (eventButtonDrop[indexButton]== 1 || eventButtonDrop[indexButton]== 2)
 800024e:	4a66      	ldr	r2, [pc, #408]	; (80003e8 <implementButton+0x24c>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d005      	beq.n	8000266 <implementButton+0xca>
 800025a:	4a63      	ldr	r2, [pc, #396]	; (80003e8 <implementButton+0x24c>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d11b      	bne.n	800029e <implementButton+0x102>
					modeStatus= MANUALMODE;
 8000266:	4b61      	ldr	r3, [pc, #388]	; (80003ec <implementButton+0x250>)
 8000268:	2204      	movs	r2, #4
 800026a:	601a      	str	r2, [r3, #0]
					beginManualMode();
 800026c:	f000 fd5c 	bl	8000d28 <beginManualMode>
				break;
 8000270:	e015      	b.n	800029e <implementButton+0x102>
				if (eventButtonDrop[indexButton]== 2 || eventButtonDrop[indexButton]== 3)
 8000272:	4a5d      	ldr	r2, [pc, #372]	; (80003e8 <implementButton+0x24c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027a:	2b02      	cmp	r3, #2
 800027c:	d005      	beq.n	800028a <implementButton+0xee>
 800027e:	4a5a      	ldr	r2, [pc, #360]	; (80003e8 <implementButton+0x24c>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000286:	2b03      	cmp	r3, #3
 8000288:	d10b      	bne.n	80002a2 <implementButton+0x106>
					modeStatus= TUNINGMODE;
 800028a:	4b58      	ldr	r3, [pc, #352]	; (80003ec <implementButton+0x250>)
 800028c:	2205      	movs	r2, #5
 800028e:	601a      	str	r2, [r3, #0]
					beginTuningMode();
 8000290:	f001 fd94 	bl	8001dbc <beginTuningMode>
				break;
 8000294:	e005      	b.n	80002a2 <implementButton+0x106>
				break;
 8000296:	bf00      	nop
 8000298:	e09d      	b.n	80003d6 <implementButton+0x23a>
				break;
 800029a:	bf00      	nop
 800029c:	e09b      	b.n	80003d6 <implementButton+0x23a>
				break;
 800029e:	bf00      	nop
 80002a0:	e099      	b.n	80003d6 <implementButton+0x23a>
				break;
 80002a2:	bf00      	nop
			break;
 80002a4:	e097      	b.n	80003d6 <implementButton+0x23a>
			switch (eventButtonPressed[indexButton])
 80002a6:	4a4f      	ldr	r2, [pc, #316]	; (80003e4 <implementButton+0x248>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d03e      	beq.n	8000330 <implementButton+0x194>
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	dc4f      	bgt.n	8000356 <implementButton+0x1ba>
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d002      	beq.n	80002c0 <implementButton+0x124>
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d00d      	beq.n	80002da <implementButton+0x13e>
				break;
 80002be:	e04a      	b.n	8000356 <implementButton+0x1ba>
				if (eventButtonDrop[indexButton]== 0)
 80002c0:	4a49      	ldr	r2, [pc, #292]	; (80003e8 <implementButton+0x24c>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <implementButton+0x1be>
					if (modeStatus== TUNINGMODE)
 80002cc:	4b47      	ldr	r3, [pc, #284]	; (80003ec <implementButton+0x250>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b05      	cmp	r3, #5
 80002d2:	d142      	bne.n	800035a <implementButton+0x1be>
						modifyTuningMode();
 80002d4:	f001 fd88 	bl	8001de8 <modifyTuningMode>
				break;
 80002d8:	e03f      	b.n	800035a <implementButton+0x1be>
				if (eventButtonDrop[indexButton]== 0)
 80002da:	4a43      	ldr	r2, [pc, #268]	; (80003e8 <implementButton+0x24c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d106      	bne.n	80002f4 <implementButton+0x158>
					if (modeStatus== TUNINGMODE)
 80002e6:	4b41      	ldr	r3, [pc, #260]	; (80003ec <implementButton+0x250>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b05      	cmp	r3, #5
 80002ec:	d137      	bne.n	800035e <implementButton+0x1c2>
						modifyTuningMode();
 80002ee:	f001 fd7b 	bl	8001de8 <modifyTuningMode>
				break;
 80002f2:	e034      	b.n	800035e <implementButton+0x1c2>
					if (eventButtonDrop[indexButton]== 1)
 80002f4:	4a3c      	ldr	r2, [pc, #240]	; (80003e8 <implementButton+0x24c>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d113      	bne.n	8000328 <implementButton+0x18c>
						switch (modeStatus)
 8000300:	4b3a      	ldr	r3, [pc, #232]	; (80003ec <implementButton+0x250>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b05      	cmp	r3, #5
 8000306:	d00c      	beq.n	8000322 <implementButton+0x186>
 8000308:	2b05      	cmp	r3, #5
 800030a:	dc0f      	bgt.n	800032c <implementButton+0x190>
 800030c:	2b03      	cmp	r3, #3
 800030e:	d002      	beq.n	8000316 <implementButton+0x17a>
 8000310:	2b04      	cmp	r3, #4
 8000312:	d003      	beq.n	800031c <implementButton+0x180>
								break;
 8000314:	e00a      	b.n	800032c <implementButton+0x190>
								beginNormalMode();
 8000316:	f000 feed 	bl	80010f4 <beginNormalMode>
								break;
 800031a:	e008      	b.n	800032e <implementButton+0x192>
								runManualModeFunction();
 800031c:	f000 fc1c 	bl	8000b58 <runManualModeFunction>
								break;
 8000320:	e005      	b.n	800032e <implementButton+0x192>
								modifyTuningMode();
 8000322:	f001 fd61 	bl	8001de8 <modifyTuningMode>
								break;
 8000326:	e002      	b.n	800032e <implementButton+0x192>
					}
 8000328:	bf00      	nop
 800032a:	e018      	b.n	800035e <implementButton+0x1c2>
								break;
 800032c:	bf00      	nop
				break;
 800032e:	e016      	b.n	800035e <implementButton+0x1c2>
				if (eventButtonDrop[indexButton]== 1 || eventButtonDrop[indexButton]== 2)
 8000330:	4a2d      	ldr	r2, [pc, #180]	; (80003e8 <implementButton+0x24c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d005      	beq.n	8000348 <implementButton+0x1ac>
 800033c:	4a2a      	ldr	r2, [pc, #168]	; (80003e8 <implementButton+0x24c>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b02      	cmp	r3, #2
 8000346:	d10c      	bne.n	8000362 <implementButton+0x1c6>
					if (modeStatus== TUNINGMODE)
 8000348:	4b28      	ldr	r3, [pc, #160]	; (80003ec <implementButton+0x250>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b05      	cmp	r3, #5
 800034e:	d108      	bne.n	8000362 <implementButton+0x1c6>
						saveTuningMode();
 8000350:	f001 fdac 	bl	8001eac <saveTuningMode>
				break;
 8000354:	e005      	b.n	8000362 <implementButton+0x1c6>
				break;
 8000356:	bf00      	nop
 8000358:	e03d      	b.n	80003d6 <implementButton+0x23a>
				break;
 800035a:	bf00      	nop
 800035c:	e03b      	b.n	80003d6 <implementButton+0x23a>
				break;
 800035e:	bf00      	nop
 8000360:	e039      	b.n	80003d6 <implementButton+0x23a>
				break;
 8000362:	bf00      	nop
			break;
 8000364:	e037      	b.n	80003d6 <implementButton+0x23a>
			switch (eventButtonPressed[indexButton])
 8000366:	4a1f      	ldr	r2, [pc, #124]	; (80003e4 <implementButton+0x248>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d002      	beq.n	8000378 <implementButton+0x1dc>
 8000372:	2b02      	cmp	r3, #2
 8000374:	d019      	beq.n	80003aa <implementButton+0x20e>
				break;
 8000376:	e02c      	b.n	80003d2 <implementButton+0x236>
				if (eventButtonDrop[indexButton]== 1)
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <implementButton+0x24c>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d110      	bne.n	80003a6 <implementButton+0x20a>
					switch (modeStatus)
 8000384:	4b19      	ldr	r3, [pc, #100]	; (80003ec <implementButton+0x250>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d002      	beq.n	8000392 <implementButton+0x1f6>
 800038c:	2b04      	cmp	r3, #4
 800038e:	d005      	beq.n	800039c <implementButton+0x200>
							break;
 8000390:	e00a      	b.n	80003a8 <implementButton+0x20c>
							beginWalkNormalMode();
 8000392:	f000 fec5 	bl	8001120 <beginWalkNormalMode>
							ledWalkOperationNormalMode();
 8000396:	f000 f9d9 	bl	800074c <ledWalkOperationNormalMode>
							break;
 800039a:	e005      	b.n	80003a8 <implementButton+0x20c>
							beginWalkManualMode();
 800039c:	f000 fcd8 	bl	8000d50 <beginWalkManualMode>
							ledWalkOperationManualMode();
 80003a0:	f000 fa16 	bl	80007d0 <ledWalkOperationManualMode>
							break;
 80003a4:	e000      	b.n	80003a8 <implementButton+0x20c>
				}
 80003a6:	bf00      	nop
				break;
 80003a8:	e013      	b.n	80003d2 <implementButton+0x236>
				if (eventButtonDrop[indexButton]== 1 || eventButtonDrop[indexButton]== 2)
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <implementButton+0x24c>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d005      	beq.n	80003c2 <implementButton+0x226>
 80003b6:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <implementButton+0x24c>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d106      	bne.n	80003d0 <implementButton+0x234>
					modeStatus= INITMODES;
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <implementButton+0x250>)
 80003c4:	2202      	movs	r2, #2
 80003c6:	601a      	str	r2, [r3, #0]
					offAllSingLEDs();
 80003c8:	f000 f962 	bl	8000690 <offAllSingLEDs>
					offSingleRedGreenWalk();
 80003cc:	f000 f9a8 	bl	8000720 <offSingleRedGreenWalk>
				break;
 80003d0:	bf00      	nop
			break;
 80003d2:	e000      	b.n	80003d6 <implementButton+0x23a>
			break;
 80003d4:	bf00      	nop
	}
	resetAllButton();
 80003d6:	f7ff feb9 	bl	800014c <resetAllButton>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200000a0 	.word	0x200000a0
 80003e8:	200000ac 	.word	0x200000ac
 80003ec:	20000050 	.word	0x20000050

080003f0 <getInputButton>:

void getInputButton()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	e0be      	b.n	800057a <getInputButton+0x18a>
	{
		state1Button[i]= state2Button[i];
 80003fc:	4a63      	ldr	r2, [pc, #396]	; (800058c <getInputButton+0x19c>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000404:	4962      	ldr	r1, [pc, #392]	; (8000590 <getInputButton+0x1a0>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 800040c:	4a61      	ldr	r2, [pc, #388]	; (8000594 <getInputButton+0x1a4>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000414:	495d      	ldr	r1, [pc, #372]	; (800058c <getInputButton+0x19c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800041c:	4a5e      	ldr	r2, [pc, #376]	; (8000598 <getInputButton+0x1a8>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000424:	495d      	ldr	r1, [pc, #372]	; (800059c <getInputButton+0x1ac>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800042c:	4619      	mov	r1, r3
 800042e:	4610      	mov	r0, r2
 8000430:	f002 fa72 	bl	8002918 <HAL_GPIO_ReadPin>
 8000434:	4603      	mov	r3, r0
 8000436:	4619      	mov	r1, r3
 8000438:	4a56      	ldr	r2, [pc, #344]	; (8000594 <getInputButton+0x1a4>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 8000440:	4a53      	ldr	r2, [pc, #332]	; (8000590 <getInputButton+0x1a0>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000448:	4950      	ldr	r1, [pc, #320]	; (800058c <getInputButton+0x19c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000450:	429a      	cmp	r2, r3
 8000452:	f040 808f 	bne.w	8000574 <getInputButton+0x184>
 8000456:	4a4d      	ldr	r2, [pc, #308]	; (800058c <getInputButton+0x19c>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800045e:	494d      	ldr	r1, [pc, #308]	; (8000594 <getInputButton+0x1a4>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000466:	429a      	cmp	r2, r3
 8000468:	f040 8084 	bne.w	8000574 <getInputButton+0x184>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 800046c:	4a4c      	ldr	r2, [pc, #304]	; (80005a0 <getInputButton+0x1b0>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000474:	4946      	ldr	r1, [pc, #280]	; (8000590 <getInputButton+0x1a0>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800047c:	429a      	cmp	r2, r3
 800047e:	d031      	beq.n	80004e4 <getInputButton+0xf4>
			{
				switch (state0Button[i])
 8000480:	4a47      	ldr	r2, [pc, #284]	; (80005a0 <getInputButton+0x1b0>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d002      	beq.n	8000492 <getInputButton+0xa2>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d014      	beq.n	80004ba <getInputButton+0xca>
						state0Button[i]= PRESS_STATE;
						eventButtonPressed[i]+= 1;
						timerLongPress[i]= 300;
						break;
					default:
						break;
 8000490:	e070      	b.n	8000574 <getInputButton+0x184>
						state0Button[i]= NORMAL_STATE;
 8000492:	4a43      	ldr	r2, [pc, #268]	; (80005a0 <getInputButton+0x1b0>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2101      	movs	r1, #1
 8000498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonDrop[i]+= 1;
 800049c:	4a41      	ldr	r2, [pc, #260]	; (80005a4 <getInputButton+0x1b4>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	493f      	ldr	r1, [pc, #252]	; (80005a4 <getInputButton+0x1b4>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerNormalState[i]= 15;
 80004ae:	4a3e      	ldr	r2, [pc, #248]	; (80005a8 <getInputButton+0x1b8>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	210f      	movs	r1, #15
 80004b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 80004b8:	e05c      	b.n	8000574 <getInputButton+0x184>
						state0Button[i]= PRESS_STATE;
 80004ba:	4a39      	ldr	r2, [pc, #228]	; (80005a0 <getInputButton+0x1b0>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2100      	movs	r1, #0
 80004c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonPressed[i]+= 1;
 80004c4:	4a39      	ldr	r2, [pc, #228]	; (80005ac <getInputButton+0x1bc>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	4937      	ldr	r1, [pc, #220]	; (80005ac <getInputButton+0x1bc>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerLongPress[i]= 300;
 80004d6:	4a36      	ldr	r2, [pc, #216]	; (80005b0 <getInputButton+0x1c0>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80004de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 80004e2:	e047      	b.n	8000574 <getInputButton+0x184>
				}
			}
			else
			{
				if (state0Button[i]== NORMAL_STATE)
 80004e4:	4a2e      	ldr	r2, [pc, #184]	; (80005a0 <getInputButton+0x1b0>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d118      	bne.n	8000522 <getInputButton+0x132>
				{
					if (timerNormalState[i] > 0)
 80004f0:	4a2d      	ldr	r2, [pc, #180]	; (80005a8 <getInputButton+0x1b8>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dd3b      	ble.n	8000574 <getInputButton+0x184>
					{
						timerNormalState[i]--;
 80004fc:	4a2a      	ldr	r2, [pc, #168]	; (80005a8 <getInputButton+0x1b8>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000504:	1e5a      	subs	r2, r3, #1
 8000506:	4928      	ldr	r1, [pc, #160]	; (80005a8 <getInputButton+0x1b8>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerNormalState[i] <= 0)
 800050e:	4a26      	ldr	r2, [pc, #152]	; (80005a8 <getInputButton+0x1b8>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000516:	2b00      	cmp	r3, #0
 8000518:	dc2c      	bgt.n	8000574 <getInputButton+0x184>
						{
							implementButton(i);
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f7ff fe3e 	bl	800019c <implementButton>
 8000520:	e028      	b.n	8000574 <getInputButton+0x184>
						}
					}
				}
				else   // state0Button[i]== PRESS_SATE;
				{
					if (timerLongPress[i] > 0)
 8000522:	4a23      	ldr	r2, [pc, #140]	; (80005b0 <getInputButton+0x1c0>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052a:	2b00      	cmp	r3, #0
 800052c:	dd22      	ble.n	8000574 <getInputButton+0x184>
					{
						timerLongPress[i]--;
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <getInputButton+0x1c0>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000536:	1e5a      	subs	r2, r3, #1
 8000538:	491d      	ldr	r1, [pc, #116]	; (80005b0 <getInputButton+0x1c0>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerLongPress[i] <= 0)
 8000540:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <getInputButton+0x1c0>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000548:	2b00      	cmp	r3, #0
 800054a:	dc13      	bgt.n	8000574 <getInputButton+0x184>
						{
							if (i== 0)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d105      	bne.n	800055e <getInputButton+0x16e>
								timerLongPress[i]= 300;
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <getInputButton+0x1c0>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800055a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							if (i== 1)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d104      	bne.n	800056e <getInputButton+0x17e>
								timerLongPress[i]= 20;
 8000564:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <getInputButton+0x1c0>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2114      	movs	r1, #20
 800056a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							implementButton(i);
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff fe14 	bl	800019c <implementButton>
	for (int i= 0; i < 3; i++)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b02      	cmp	r3, #2
 800057e:	f77f af3d 	ble.w	80003fc <getInputButton+0xc>
					}
				}
			}
		}
	}
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000002c 	.word	0x2000002c
 8000590:	20000020 	.word	0x20000020
 8000594:	20000038 	.word	0x20000038
 8000598:	20000000 	.word	0x20000000
 800059c:	2000000c 	.word	0x2000000c
 80005a0:	20000014 	.word	0x20000014
 80005a4:	200000ac 	.word	0x200000ac
 80005a8:	20000094 	.word	0x20000094
 80005ac:	200000a0 	.word	0x200000a0
 80005b0:	20000044 	.word	0x20000044

080005b4 <update7SEGBuffer>:
int durationLedGreen = 3;
int durationLedYellow = 2;

int led_buffer[3]= {0, 0, 0};
void update7SEGBuffer(int time, int signalUpdate)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	switch (signalUpdate)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d011      	beq.n	80005e8 <update7SEGBuffer+0x34>
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	dc12      	bgt.n	80005f0 <update7SEGBuffer+0x3c>
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <update7SEGBuffer+0x24>
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d004      	beq.n	80005e0 <update7SEGBuffer+0x2c>
		break;
	case UPDATEMODE:
		led_buffer[2] = time;
		break;
	default:
		break;
 80005d6:	e00b      	b.n	80005f0 <update7SEGBuffer+0x3c>
		led_buffer[0] = time;
 80005d8:	4a08      	ldr	r2, [pc, #32]	; (80005fc <update7SEGBuffer+0x48>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
		break;
 80005de:	e008      	b.n	80005f2 <update7SEGBuffer+0x3e>
		led_buffer[1] = time;
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <update7SEGBuffer+0x48>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6053      	str	r3, [r2, #4]
		break;
 80005e6:	e004      	b.n	80005f2 <update7SEGBuffer+0x3e>
		led_buffer[2] = time;
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <update7SEGBuffer+0x48>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6093      	str	r3, [r2, #8]
		break;
 80005ee:	e000      	b.n	80005f2 <update7SEGBuffer+0x3e>
		break;
 80005f0:	bf00      	nop
	}
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	200000b8 	.word	0x200000b8

08000600 <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC1);
 8000608:	2100      	movs	r1, #0
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ffd2 	bl	80005b4 <update7SEGBuffer>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC2);
 8000620:	2101      	movs	r1, #1
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ffc6 	bl	80005b4 <update7SEGBuffer>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATEMODE);
 8000638:	2102      	movs	r1, #2
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ffba 	bl	80005b4 <update7SEGBuffer>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWTUNING);
 800064c:	2105      	movs	r1, #5
 800064e:	2008      	movs	r0, #8
 8000650:	f000 fd7a 	bl	8001148 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, YELLOWTUNING);
 8000654:	2105      	movs	r1, #5
 8000656:	2009      	movs	r0, #9
 8000658:	f000 fd76 	bl	8001148 <controlSingleLedTraffic>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <blinkingRED>:

void blinkingRED()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDTUNING);
 8000664:	2103      	movs	r1, #3
 8000666:	2008      	movs	r0, #8
 8000668:	f000 fd6e 	bl	8001148 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, REDTUNING);
 800066c:	2103      	movs	r1, #3
 800066e:	2009      	movs	r0, #9
 8000670:	f000 fd6a 	bl	8001148 <controlSingleLedTraffic>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <blinkingGREEN>:

void blinkingGREEN()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENTUNING);
 800067c:	2104      	movs	r1, #4
 800067e:	2008      	movs	r0, #8
 8000680:	f000 fd62 	bl	8001148 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, GREENTUNING);
 8000684:	2104      	movs	r1, #4
 8000686:	2009      	movs	r0, #9
 8000688:	f000 fd5e 	bl	8001148 <controlSingleLedTraffic>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <offAllSingLEDs>:

void offAllSingLEDs()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, OFF);
 8000694:	2106      	movs	r1, #6
 8000696:	2008      	movs	r0, #8
 8000698:	f000 fd56 	bl	8001148 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, OFF);
 800069c:	2106      	movs	r1, #6
 800069e:	2009      	movs	r0, #9
 80006a0:	f000 fd52 	bl	8001148 <controlSingleLedTraffic>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <onAllSingLEDs>:

void onAllSingLEDs()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, ON);
 80006ac:	2107      	movs	r1, #7
 80006ae:	2008      	movs	r0, #8
 80006b0:	f000 fd4a 	bl	8001148 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, ON);
 80006b4:	2107      	movs	r1, #7
 80006b6:	2009      	movs	r0, #9
 80006b8:	f000 fd46 	bl	8001148 <controlSingleLedTraffic>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <onSingleRedTraffic1>:

void onSingleRedTraffic1()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDNORMAL);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2008      	movs	r0, #8
 80006c8:	f000 fd3e 	bl	8001148 <controlSingleLedTraffic>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <onSingleYellowTraffic1>:

void onSingleYellowTraffic1()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWNORMAL);
 80006d4:	2102      	movs	r1, #2
 80006d6:	2008      	movs	r0, #8
 80006d8:	f000 fd36 	bl	8001148 <controlSingleLedTraffic>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENNORMAL);
 80006e4:	2101      	movs	r1, #1
 80006e6:	2008      	movs	r0, #8
 80006e8:	f000 fd2e 	bl	8001148 <controlSingleLedTraffic>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, REDNORMAL);
 80006f4:	2100      	movs	r1, #0
 80006f6:	2009      	movs	r0, #9
 80006f8:	f000 fd26 	bl	8001148 <controlSingleLedTraffic>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <onSingleYellowTraffic2>:

void onSingleYellowTraffic2()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, YELLOWNORMAL);
 8000704:	2102      	movs	r1, #2
 8000706:	2009      	movs	r0, #9
 8000708:	f000 fd1e 	bl	8001148 <controlSingleLedTraffic>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, GREENNORMAL);
 8000714:	2101      	movs	r1, #1
 8000716:	2009      	movs	r0, #9
 8000718:	f000 fd16 	bl	8001148 <controlSingleLedTraffic>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <offSingleRedGreenWalk>:

void offSingleRedGreenWalk()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	controlSingleLedWalk(OFFLEDWALK);
 8000724:	200a      	movs	r0, #10
 8000726:	f000 fdf1 	bl	800130c <controlSingleLedWalk>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <onGreenOffRedWalk>:
void onGreenOffRedWalk()
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONGREENOFFREDWALK);
 8000732:	200b      	movs	r0, #11
 8000734:	f000 fdea 	bl	800130c <controlSingleLedWalk>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <onRedOffGreenWalk>:
void onRedOffGreenWalk()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONREDOFFGREENWALK);
 8000740:	200c      	movs	r0, #12
 8000742:	f000 fde3 	bl	800130c <controlSingleLedWalk>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <ledWalkOperationNormalMode>:

int numberFreq;
int statusLedWalkButton3Press;

void ledWalkOperationNormalMode()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    switch (statusTraffic1)
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <ledWalkOperationNormalMode+0x78>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d026      	beq.n	80007a6 <ledWalkOperationNormalMode+0x5a>
 8000758:	2b03      	cmp	r3, #3
 800075a:	dc2e      	bgt.n	80007ba <ledWalkOperationNormalMode+0x6e>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d002      	beq.n	8000766 <ledWalkOperationNormalMode+0x1a>
 8000760:	2b02      	cmp	r3, #2
 8000762:	d012      	beq.n	800078a <ledWalkOperationNormalMode+0x3e>
			offSingleRedGreenWalk();
		else	
			onRedOffGreenWalk();
        break;
    default:
        break;
 8000764:	e029      	b.n	80007ba <ledWalkOperationNormalMode+0x6e>
		if (numberFreq <= 0)
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <ledWalkOperationNormalMode+0x7c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	dc04      	bgt.n	8000778 <ledWalkOperationNormalMode+0x2c>
			buzzerOff();
 800076e:	f000 fecd 	bl	800150c <buzzerOff>
			offSingleRedGreenWalk();
 8000772:	f7ff ffd5 	bl	8000720 <offSingleRedGreenWalk>
        break;
 8000776:	e022      	b.n	80007be <ledWalkOperationNormalMode+0x72>
			onGreenOffRedWalk();
 8000778:	f7ff ffd9 	bl	800072e <onGreenOffRedWalk>
			if (counterLedRed1 <= 3)
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <ledWalkOperationNormalMode+0x80>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b03      	cmp	r3, #3
 8000782:	dc1c      	bgt.n	80007be <ledWalkOperationNormalMode+0x72>
				buzzerBegin();
 8000784:	f000 feb6 	bl	80014f4 <buzzerBegin>
        break;
 8000788:	e019      	b.n	80007be <ledWalkOperationNormalMode+0x72>
		if (numberFreq <= 0)
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <ledWalkOperationNormalMode+0x7c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	dc04      	bgt.n	800079c <ledWalkOperationNormalMode+0x50>
			offSingleRedGreenWalk();
 8000792:	f7ff ffc5 	bl	8000720 <offSingleRedGreenWalk>
			buzzerOff();
 8000796:	f000 feb9 	bl	800150c <buzzerOff>
        break;
 800079a:	e011      	b.n	80007c0 <ledWalkOperationNormalMode+0x74>
			onRedOffGreenWalk();
 800079c:	f7ff ffce 	bl	800073c <onRedOffGreenWalk>
			buzzerOff();
 80007a0:	f000 feb4 	bl	800150c <buzzerOff>
        break;
 80007a4:	e00c      	b.n	80007c0 <ledWalkOperationNormalMode+0x74>
		if (numberFreq <= 0)
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <ledWalkOperationNormalMode+0x7c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dc02      	bgt.n	80007b4 <ledWalkOperationNormalMode+0x68>
			offSingleRedGreenWalk();
 80007ae:	f7ff ffb7 	bl	8000720 <offSingleRedGreenWalk>
        break;
 80007b2:	e005      	b.n	80007c0 <ledWalkOperationNormalMode+0x74>
			onRedOffGreenWalk();
 80007b4:	f7ff ffc2 	bl	800073c <onRedOffGreenWalk>
        break;
 80007b8:	e002      	b.n	80007c0 <ledWalkOperationNormalMode+0x74>
        break;
 80007ba:	bf00      	nop
 80007bc:	e000      	b.n	80007c0 <ledWalkOperationNormalMode+0x74>
        break;
 80007be:	bf00      	nop
    }
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000118 	.word	0x20000118
 80007c8:	200000c4 	.word	0x200000c4
 80007cc:	20000120 	.word	0x20000120

080007d0 <ledWalkOperationManualMode>:

void ledWalkOperationManualMode()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	switch (statusManualMode)
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <ledWalkOperationManualMode+0x7c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3b01      	subs	r3, #1
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d832      	bhi.n	8000844 <ledWalkOperationManualMode+0x74>
 80007de:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <ledWalkOperationManualMode+0x14>)
 80007e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e4:	080007f5 	.word	0x080007f5
 80007e8:	08000831 	.word	0x08000831
 80007ec:	0800081d 	.word	0x0800081d
 80007f0:	08000809 	.word	0x08000809
	{
	case REDGREENMANUAL:
		if (numberFreq <= 0)
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <ledWalkOperationManualMode+0x80>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc02      	bgt.n	8000802 <ledWalkOperationManualMode+0x32>
			offSingleRedGreenWalk();
 80007fc:	f7ff ff90 	bl	8000720 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 8000800:	e021      	b.n	8000846 <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000802:	f7ff ff94 	bl	800072e <onGreenOffRedWalk>
		break;
 8000806:	e01e      	b.n	8000846 <ledWalkOperationManualMode+0x76>
	case YELLOWREDMANUAL:
		if (numberFreq <= 0)
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <ledWalkOperationManualMode+0x80>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dc02      	bgt.n	8000816 <ledWalkOperationManualMode+0x46>
			offSingleRedGreenWalk();
 8000810:	f7ff ff86 	bl	8000720 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 8000814:	e017      	b.n	8000846 <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 8000816:	f7ff ff8a 	bl	800072e <onGreenOffRedWalk>
		break;
 800081a:	e014      	b.n	8000846 <ledWalkOperationManualMode+0x76>
	case GREENREDMANUAL:
		if (numberFreq <= 0)
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <ledWalkOperationManualMode+0x80>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dc02      	bgt.n	800082a <ledWalkOperationManualMode+0x5a>
			offSingleRedGreenWalk();
 8000824:	f7ff ff7c 	bl	8000720 <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 8000828:	e00d      	b.n	8000846 <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 800082a:	f7ff ff87 	bl	800073c <onRedOffGreenWalk>
		break;
 800082e:	e00a      	b.n	8000846 <ledWalkOperationManualMode+0x76>
	case REDYELLOWMANUAL:
		if (numberFreq <= 0)
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <ledWalkOperationManualMode+0x80>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dc02      	bgt.n	800083e <ledWalkOperationManualMode+0x6e>
			offSingleRedGreenWalk();
 8000838:	f7ff ff72 	bl	8000720 <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();

		break;
 800083c:	e003      	b.n	8000846 <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 800083e:	f7ff ff76 	bl	800072e <onGreenOffRedWalk>
		break;
 8000842:	e000      	b.n	8000846 <ledWalkOperationManualMode+0x76>
	default:
		break;
 8000844:	bf00      	nop
	}
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000114 	.word	0x20000114
 8000850:	200000c4 	.word	0x200000c4

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f001 fcb8 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f83c 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f000 f8c2 	bl	80009e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000864:	f000 f874 	bl	8000950 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000868:	f000 fd88 	bl	800137c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800086c:	f001 fbb6 	bl	8001fdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <main+0x6c>)
 8000872:	f002 fcf9 	bl	8003268 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000876:	f001 f879 	bl	800196c <SCH_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800087a:	2100      	movs	r1, #0
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <main+0x70>)
 800087e:	f002 fd9d 	bl	80033bc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(task1, 1000, 1000, 1);
 8000882:	2301      	movs	r3, #1
 8000884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800088c:	480e      	ldr	r0, [pc, #56]	; (80008c8 <main+0x74>)
 800088e:	f000 fe6b 	bl	8001568 <SCH_Add_Task>
  SCH_Add_Task(task2, 500, 500, 2);
 8000892:	2302      	movs	r3, #2
 8000894:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000898:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <main+0x78>)
 800089e:	f000 fe63 	bl	8001568 <SCH_Add_Task>
  SCH_Add_Task(task3, 10, 10, 3);
 80008a2:	2303      	movs	r3, #3
 80008a4:	220a      	movs	r2, #10
 80008a6:	210a      	movs	r1, #10
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <main+0x7c>)
 80008aa:	f000 fe5d 	bl	8001568 <SCH_Add_Task>
  SCH_Add_Task(task4, 200, 200, 4);
 80008ae:	2304      	movs	r3, #4
 80008b0:	22c8      	movs	r2, #200	; 0xc8
 80008b2:	21c8      	movs	r1, #200	; 0xc8
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <main+0x80>)
 80008b6:	f000 fe57 	bl	8001568 <SCH_Add_Task>
//  char *tx_data = "Hello, UART!\r\n";
	while (1)
	{
		SCH_Dispatch_Tasks();
 80008ba:	f001 f82d 	bl	8001918 <SCH_Dispatch_Tasks>
 80008be:	e7fc      	b.n	80008ba <main+0x66>
 80008c0:	200000cc 	.word	0x200000cc
 80008c4:	20000138 	.word	0x20000138
 80008c8:	080019f9 	.word	0x080019f9
 80008cc:	08001a15 	.word	0x08001a15
 80008d0:	08001a2d 	.word	0x08001a2d
 80008d4:	08001a39 	.word	0x08001a39

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b090      	sub	sp, #64	; 0x40
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2228      	movs	r2, #40	; 0x28
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 fa36 	bl	8004d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	2301      	movs	r3, #1
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2310      	movs	r3, #16
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4618      	mov	r0, r3
 8000910:	f002 f84a 	bl	80029a8 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800091a:	f000 f90b 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fab8 	bl	8002eac <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000942:	f000 f8f7 	bl	8000b34 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3740      	adds	r7, #64	; 0x40
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_TIM2_Init+0x94>)
 800096e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM2_Init+0x94>)
 8000976:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800097a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM2_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_TIM2_Init+0x94>)
 8000984:	2209      	movs	r2, #9
 8000986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_TIM2_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_TIM2_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_TIM2_Init+0x94>)
 8000996:	f002 fc17 	bl	80031c8 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009a0:	f000 f8c8 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_TIM2_Init+0x94>)
 80009b2:	f002 ff6f 	bl	8003894 <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009bc:	f000 f8ba 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_TIM2_Init+0x94>)
 80009ce:	f003 faf1 	bl	8003fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f8ac 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000cc 	.word	0x200000cc

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x124>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a42      	ldr	r2, [pc, #264]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a14:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0310 	and.w	r3, r3, #16
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a36      	ldr	r2, [pc, #216]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a32:	f043 0320 	orr.w	r3, r3, #32
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0320 	and.w	r3, r3, #32
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a30      	ldr	r2, [pc, #192]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN2_Pin|RED1_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000a62:	482b      	ldr	r0, [pc, #172]	; (8000b10 <MX_GPIO_Init+0x128>)
 8000a64:	f001 ff6f 	bl	8002946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4829      	ldr	r0, [pc, #164]	; (8000b14 <MX_GPIO_Init+0x12c>)
 8000a6e:	f001 ff6a 	bl	8002946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREENWALK_Pin|REDWALK_Pin|RED2_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2170      	movs	r1, #112	; 0x70
 8000a76:	4828      	ldr	r0, [pc, #160]	; (8000b18 <MX_GPIO_Init+0x130>)
 8000a78:	f001 ff65 	bl	8002946 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN2_Pin RED1_Pin */
  GPIO_InitStruct.Pin = GREEN2_Pin|RED1_Pin;
 8000a7c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	481e      	ldr	r0, [pc, #120]	; (8000b10 <MX_GPIO_Init+0x128>)
 8000a96:	f001 fdbb 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN1_Pin */
  GPIO_InitStruct.Pin = GREEN1_Pin;
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN1_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_GPIO_Init+0x12c>)
 8000ab2:	f001 fdad 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : button2_Pin button1_Pin */
  GPIO_InitStruct.Pin = button2_Pin|button1_Pin;
 8000ab6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4812      	ldr	r0, [pc, #72]	; (8000b14 <MX_GPIO_Init+0x12c>)
 8000acc:	f001 fda0 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <MX_GPIO_Init+0x134>)
 8000ae4:	f001 fd94 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREENWALK_Pin REDWALK_Pin RED2_Pin */
  GPIO_InitStruct.Pin = GREENWALK_Pin|REDWALK_Pin|RED2_Pin;
 8000ae8:	2370      	movs	r3, #112	; 0x70
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_GPIO_Init+0x130>)
 8000b00:	f001 fd86 	bl	8002610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800
 8000b14:	40011000 	.word	0x40011000
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40011400 	.word	0x40011400

08000b20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000b28:	f000 fd02 	bl	8001530 <SCH_Update>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <initStatusManualMode>:
#include "uart.h"

int statusManualMode= INITMANUAL;

void initStatusManualMode()
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
	statusManualMode= INITMANUAL;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <initStatusManualMode+0x14>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000114 	.word	0x20000114

08000b58 <runManualModeFunction>:
void runManualModeFunction()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	switch (statusManualMode) 
 8000b5c:	4b6c      	ldr	r3, [pc, #432]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	f200 80cd 	bhi.w	8000d00 <runManualModeFunction+0x1a8>
 8000b66:	a201      	add	r2, pc, #4	; (adr r2, 8000b6c <runManualModeFunction+0x14>)
 8000b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6c:	08000b81 	.word	0x08000b81
 8000b70:	08000baf 	.word	0x08000baf
 8000b74:	08000bff 	.word	0x08000bff
 8000b78:	08000c55 	.word	0x08000c55
 8000b7c:	08000cab 	.word	0x08000cab
	{
		case INITMANUAL:
			statusManualMode= REDGREENMANUAL;
 8000b80:	4b63      	ldr	r3, [pc, #396]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8000b86:	2002      	movs	r0, #2
 8000b88:	f7ff fd52 	bl	8000630 <update7SEGBufferMode>
			offAllSingLEDs();
 8000b8c:	f7ff fd80 	bl	8000690 <offAllSingLEDs>
			onSingleRedTraffic1();
 8000b90:	f7ff fd96 	bl	80006c0 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8000b94:	f7ff fdbc 	bl	8000710 <onSingleGreenTraffic2>
			update7SEGBufferTraffic1(durationLedRed);
 8000b98:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <runManualModeFunction+0x1bc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fd2f 	bl	8000600 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedGreen);
 8000ba2:	4b5d      	ldr	r3, [pc, #372]	; (8000d18 <runManualModeFunction+0x1c0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fd36 	bl	8000618 <update7SEGBufferTraffic2>
			break;
 8000bac:	e0a9      	b.n	8000d02 <runManualModeFunction+0x1aa>
		case REDGREENMANUAL:
			statusManualMode= REDYELLOWMANUAL;
 8000bae:	4b58      	ldr	r3, [pc, #352]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000bb4:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b58      	ldr	r3, [pc, #352]	; (8000d1c <runManualModeFunction+0x1c4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d10b      	bne.n	8000bd8 <runManualModeFunction+0x80>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000bc0:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dd03      	ble.n	8000bd0 <runManualModeFunction+0x78>
 8000bc8:	4b55      	ldr	r3, [pc, #340]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	e001      	b.n	8000bd4 <runManualModeFunction+0x7c>
 8000bd0:	4b53      	ldr	r3, [pc, #332]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a52      	ldr	r2, [pc, #328]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000bd6:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000bd8:	f7ff fdfa 	bl	80007d0 <ledWalkOperationManualMode>
			offAllSingLEDs();
 8000bdc:	f7ff fd58 	bl	8000690 <offAllSingLEDs>
			onSingleRedTraffic1();
 8000be0:	f7ff fd6e 	bl	80006c0 <onSingleRedTraffic1>
			onSingleYellowTraffic2();
 8000be4:	f7ff fd8c 	bl	8000700 <onSingleYellowTraffic2>
			update7SEGBufferTraffic1(durationLedRed);
 8000be8:	4b4a      	ldr	r3, [pc, #296]	; (8000d14 <runManualModeFunction+0x1bc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fd07 	bl	8000600 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedYellow);
 8000bf2:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <runManualModeFunction+0x1cc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fd0e 	bl	8000618 <update7SEGBufferTraffic2>
			break;
 8000bfc:	e081      	b.n	8000d02 <runManualModeFunction+0x1aa>
		case REDYELLOWMANUAL:
			statusManualMode= GREENREDMANUAL;
 8000bfe:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000c00:	2203      	movs	r2, #3
 8000c02:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000c04:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <runManualModeFunction+0x1c4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d10b      	bne.n	8000c28 <runManualModeFunction+0xd0>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000c10:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	dd03      	ble.n	8000c20 <runManualModeFunction+0xc8>
 8000c18:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	e001      	b.n	8000c24 <runManualModeFunction+0xcc>
 8000c20:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a3e      	ldr	r2, [pc, #248]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000c26:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000c28:	f7ff fdd2 	bl	80007d0 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fcff 	bl	8000630 <update7SEGBufferMode>
			offAllSingLEDs();
 8000c32:	f7ff fd2d 	bl	8000690 <offAllSingLEDs>
			onSingleGreenTraffic1();
 8000c36:	f7ff fd53 	bl	80006e0 <onSingleGreenTraffic1>
			onSingleRedTraffic2();
 8000c3a:	f7ff fd59 	bl	80006f0 <onSingleRedTraffic2>
			update7SEGBufferTraffic1(durationLedGreen);
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <runManualModeFunction+0x1c0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fcdc 	bl	8000600 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedRed);
 8000c48:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <runManualModeFunction+0x1bc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fce3 	bl	8000618 <update7SEGBufferTraffic2>
			break;
 8000c52:	e056      	b.n	8000d02 <runManualModeFunction+0x1aa>
		case GREENREDMANUAL:
			statusManualMode= YELLOWREDMANUAL;
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <runManualModeFunction+0x1c4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d10b      	bne.n	8000c7e <runManualModeFunction+0x126>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	dd03      	ble.n	8000c76 <runManualModeFunction+0x11e>
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	e001      	b.n	8000c7a <runManualModeFunction+0x122>
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000c7c:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000c7e:	f7ff fda7 	bl	80007d0 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8000c82:	2002      	movs	r0, #2
 8000c84:	f7ff fcd4 	bl	8000630 <update7SEGBufferMode>
			offAllSingLEDs();
 8000c88:	f7ff fd02 	bl	8000690 <offAllSingLEDs>
			onSingleYellowTraffic1();
 8000c8c:	f7ff fd20 	bl	80006d0 <onSingleYellowTraffic1>
			onSingleRedTraffic2();
 8000c90:	f7ff fd2e 	bl	80006f0 <onSingleRedTraffic2>
			update7SEGBufferTraffic1(durationLedYellow);
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <runManualModeFunction+0x1cc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fcb1 	bl	8000600 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedRed);
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <runManualModeFunction+0x1bc>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fcb8 	bl	8000618 <update7SEGBufferTraffic2>
			break;
 8000ca8:	e02b      	b.n	8000d02 <runManualModeFunction+0x1aa>
		case YELLOWREDMANUAL:
			statusManualMode= REDGREENMANUAL;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <runManualModeFunction+0x1b8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <runManualModeFunction+0x1c4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d10b      	bne.n	8000cd4 <runManualModeFunction+0x17c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dd03      	ble.n	8000ccc <runManualModeFunction+0x174>
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e001      	b.n	8000cd0 <runManualModeFunction+0x178>
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <runManualModeFunction+0x1c8>)
 8000cd2:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000cd4:	f7ff fd7c 	bl	80007d0 <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f7ff fca9 	bl	8000630 <update7SEGBufferMode>
			offAllSingLEDs();
 8000cde:	f7ff fcd7 	bl	8000690 <offAllSingLEDs>
			onSingleRedTraffic1();
 8000ce2:	f7ff fced 	bl	80006c0 <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8000ce6:	f7ff fd13 	bl	8000710 <onSingleGreenTraffic2>
			update7SEGBufferTraffic1(durationLedRed);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <runManualModeFunction+0x1bc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc86 	bl	8000600 <update7SEGBufferTraffic1>
			update7SEGBufferTraffic2(durationLedGreen);
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <runManualModeFunction+0x1c0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fc8d 	bl	8000618 <update7SEGBufferTraffic2>
			break;
 8000cfe:	e000      	b.n	8000d02 <runManualModeFunction+0x1aa>
		default:
			break;
 8000d00:	bf00      	nop
	}
	printTerminalInfoModeTraffic1();
 8000d02:	f001 f9cf 	bl	80020a4 <printTerminalInfoModeTraffic1>
	printTerminalInfoTraffic2();
 8000d06:	f001 f993 	bl	8002030 <printTerminalInfoTraffic2>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000114 	.word	0x20000114
 8000d14:	20000060 	.word	0x20000060
 8000d18:	20000064 	.word	0x20000064
 8000d1c:	200000c8 	.word	0x200000c8
 8000d20:	200000c4 	.word	0x200000c4
 8000d24:	20000068 	.word	0x20000068

08000d28 <beginManualMode>:

void beginManualMode()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <beginManualMode+0x24>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
	buzzerOff();
 8000d32:	f000 fbeb 	bl	800150c <buzzerOff>
	offSingleRedGreenWalk();
 8000d36:	f7ff fcf3 	bl	8000720 <offSingleRedGreenWalk>
	update7SEGBufferMode(2);
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f7ff fc78 	bl	8000630 <update7SEGBufferMode>
	initStatusManualMode();
 8000d40:	f7ff fefe 	bl	8000b40 <initStatusManualMode>
	runManualModeFunction();
 8000d44:	f7ff ff08 	bl	8000b58 <runManualModeFunction>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000c4 	.word	0x200000c4

08000d50 <beginWalkManualMode>:

void beginWalkManualMode()
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	numberFreq= 2;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <beginWalkManualMode+0x1c>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusManualMode;
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <beginWalkManualMode+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <beginWalkManualMode+0x24>)
 8000d60:	6013      	str	r3, [r2, #0]
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200000c4 	.word	0x200000c4
 8000d70:	20000114 	.word	0x20000114
 8000d74:	200000c8 	.word	0x200000c8

08000d78 <initStatusNormalMode>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void initStatusNormalMode()
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	statusTraffic1 = INITNORMAL;
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <initStatusNormalMode+0x18>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
	statusTraffic2 = INITNORMAL;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <initStatusNormalMode+0x1c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000118 	.word	0x20000118
 8000d94:	2000011c 	.word	0x2000011c

08000d98 <runNormalMode>:
void runNormalMode()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 8000d9c:	4b96      	ldr	r3, [pc, #600]	; (8000ff8 <runNormalMode+0x260>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	f200 80d7 	bhi.w	8000f54 <runNormalMode+0x1bc>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <runNormalMode+0x14>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000ddf 	.word	0x08000ddf
 8000db4:	08000e65 	.word	0x08000e65
 8000db8:	08000edd 	.word	0x08000edd
	{
	case INITNORMAL:
		counterLedRed1 = durationLedRed;
 8000dbc:	4b8f      	ldr	r3, [pc, #572]	; (8000ffc <runNormalMode+0x264>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a8f      	ldr	r2, [pc, #572]	; (8001000 <runNormalMode+0x268>)
 8000dc2:	6013      	str	r3, [r2, #0]
		statusTraffic1 = REDNORMAL;
 8000dc4:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <runNormalMode+0x260>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 8000dca:	f7ff fc79 	bl	80006c0 <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 8000dce:	4b8c      	ldr	r3, [pc, #560]	; (8001000 <runNormalMode+0x268>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fc14 	bl	8000600 <update7SEGBufferTraffic1>
		printTerminalInfoModeTraffic1();
 8000dd8:	f001 f964 	bl	80020a4 <printTerminalInfoModeTraffic1>
		break;
 8000ddc:	e0c1      	b.n	8000f62 <runNormalMode+0x1ca>
	case REDNORMAL:
		if (counterLedRed1 > 0)
 8000dde:	4b88      	ldr	r3, [pc, #544]	; (8001000 <runNormalMode+0x268>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f340 80b8 	ble.w	8000f58 <runNormalMode+0x1c0>
		{
			counterLedRed1--;
 8000de8:	4b85      	ldr	r3, [pc, #532]	; (8001000 <runNormalMode+0x268>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	4a84      	ldr	r2, [pc, #528]	; (8001000 <runNormalMode+0x268>)
 8000df0:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 8000df2:	4b83      	ldr	r3, [pc, #524]	; (8001000 <runNormalMode+0x268>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	dc24      	bgt.n	8000e44 <runNormalMode+0xac>
			{
				counterLedGreen1 = durationLedGreen;
 8000dfa:	4b82      	ldr	r3, [pc, #520]	; (8001004 <runNormalMode+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a82      	ldr	r2, [pc, #520]	; (8001008 <runNormalMode+0x270>)
 8000e00:	6013      	str	r3, [r2, #0]
				statusTraffic1 = GREENNORMAL;
 8000e02:	4b7d      	ldr	r3, [pc, #500]	; (8000ff8 <runNormalMode+0x260>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8000e08:	4b80      	ldr	r3, [pc, #512]	; (800100c <runNormalMode+0x274>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b7a      	ldr	r3, [pc, #488]	; (8000ff8 <runNormalMode+0x260>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d10b      	bne.n	8000e2c <runNormalMode+0x94>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8000e14:	4b7e      	ldr	r3, [pc, #504]	; (8001010 <runNormalMode+0x278>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd03      	ble.n	8000e24 <runNormalMode+0x8c>
 8000e1c:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <runNormalMode+0x278>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	e001      	b.n	8000e28 <runNormalMode+0x90>
 8000e24:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <runNormalMode+0x278>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a79      	ldr	r2, [pc, #484]	; (8001010 <runNormalMode+0x278>)
 8000e2a:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8000e2c:	f7ff fc8e 	bl	800074c <ledWalkOperationNormalMode>
				onSingleGreenTraffic1();
 8000e30:	f7ff fc56 	bl	80006e0 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8000e34:	4b74      	ldr	r3, [pc, #464]	; (8001008 <runNormalMode+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fbe1 	bl	8000600 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 8000e3e:	f001 f931 	bl	80020a4 <printTerminalInfoModeTraffic1>
				onSingleRedTraffic1();
				update7SEGBufferTraffic1(counterLedRed1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 8000e42:	e089      	b.n	8000f58 <runNormalMode+0x1c0>
				if (counterLedRed1== 3)
 8000e44:	4b6e      	ldr	r3, [pc, #440]	; (8001000 <runNormalMode+0x268>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d101      	bne.n	8000e50 <runNormalMode+0xb8>
					buzzerSetup();
 8000e4c:	f000 fb0e 	bl	800146c <buzzerSetup>
				onSingleRedTraffic1();
 8000e50:	f7ff fc36 	bl	80006c0 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8000e54:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <runNormalMode+0x268>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fbd1 	bl	8000600 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 8000e5e:	f001 f921 	bl	80020a4 <printTerminalInfoModeTraffic1>
		break;
 8000e62:	e079      	b.n	8000f58 <runNormalMode+0x1c0>
	case GREENNORMAL:
		if (counterLedGreen1 > 0)
 8000e64:	4b68      	ldr	r3, [pc, #416]	; (8001008 <runNormalMode+0x270>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd77      	ble.n	8000f5c <runNormalMode+0x1c4>
		{
			counterLedGreen1--;
 8000e6c:	4b66      	ldr	r3, [pc, #408]	; (8001008 <runNormalMode+0x270>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	4a65      	ldr	r2, [pc, #404]	; (8001008 <runNormalMode+0x270>)
 8000e74:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 8000e76:	4b64      	ldr	r3, [pc, #400]	; (8001008 <runNormalMode+0x270>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dc24      	bgt.n	8000ec8 <runNormalMode+0x130>
			{
				counterLedYellow1 = durationLedYellow;
 8000e7e:	4b65      	ldr	r3, [pc, #404]	; (8001014 <runNormalMode+0x27c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a65      	ldr	r2, [pc, #404]	; (8001018 <runNormalMode+0x280>)
 8000e84:	6013      	str	r3, [r2, #0]
				statusTraffic1 = YELLOWNORMAL;
 8000e86:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <runNormalMode+0x260>)
 8000e88:	2203      	movs	r2, #3
 8000e8a:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8000e8c:	4b5f      	ldr	r3, [pc, #380]	; (800100c <runNormalMode+0x274>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b59      	ldr	r3, [pc, #356]	; (8000ff8 <runNormalMode+0x260>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d10b      	bne.n	8000eb0 <runNormalMode+0x118>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8000e98:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <runNormalMode+0x278>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	dd03      	ble.n	8000ea8 <runNormalMode+0x110>
 8000ea0:	4b5b      	ldr	r3, [pc, #364]	; (8001010 <runNormalMode+0x278>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	e001      	b.n	8000eac <runNormalMode+0x114>
 8000ea8:	4b59      	ldr	r3, [pc, #356]	; (8001010 <runNormalMode+0x278>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a58      	ldr	r2, [pc, #352]	; (8001010 <runNormalMode+0x278>)
 8000eae:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8000eb0:	f7ff fc4c 	bl	800074c <ledWalkOperationNormalMode>
				onSingleYellowTraffic1();
 8000eb4:	f7ff fc0c 	bl	80006d0 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8000eb8:	4b57      	ldr	r3, [pc, #348]	; (8001018 <runNormalMode+0x280>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fb9f 	bl	8000600 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 8000ec2:	f001 f8ef 	bl	80020a4 <printTerminalInfoModeTraffic1>
				onSingleGreenTraffic1();
				update7SEGBufferTraffic1(counterLedGreen1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 8000ec6:	e049      	b.n	8000f5c <runNormalMode+0x1c4>
				onSingleGreenTraffic1();
 8000ec8:	f7ff fc0a 	bl	80006e0 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <runNormalMode+0x270>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fb95 	bl	8000600 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 8000ed6:	f001 f8e5 	bl	80020a4 <printTerminalInfoModeTraffic1>
		break;
 8000eda:	e03f      	b.n	8000f5c <runNormalMode+0x1c4>
	case YELLOWNORMAL:
		if (counterLedYellow1 > 0)
 8000edc:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <runNormalMode+0x280>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dd3d      	ble.n	8000f60 <runNormalMode+0x1c8>
		{
			counterLedYellow1--;
 8000ee4:	4b4c      	ldr	r3, [pc, #304]	; (8001018 <runNormalMode+0x280>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	4a4b      	ldr	r2, [pc, #300]	; (8001018 <runNormalMode+0x280>)
 8000eec:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 8000eee:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <runNormalMode+0x280>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	dc24      	bgt.n	8000f40 <runNormalMode+0x1a8>
			{
				counterLedRed1 = durationLedRed;
 8000ef6:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <runNormalMode+0x264>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a41      	ldr	r2, [pc, #260]	; (8001000 <runNormalMode+0x268>)
 8000efc:	6013      	str	r3, [r2, #0]
				statusTraffic1 = REDNORMAL;
 8000efe:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <runNormalMode+0x260>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8000f04:	4b41      	ldr	r3, [pc, #260]	; (800100c <runNormalMode+0x274>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <runNormalMode+0x260>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d10b      	bne.n	8000f28 <runNormalMode+0x190>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <runNormalMode+0x278>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd03      	ble.n	8000f20 <runNormalMode+0x188>
 8000f18:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <runNormalMode+0x278>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e001      	b.n	8000f24 <runNormalMode+0x18c>
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <runNormalMode+0x278>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a3a      	ldr	r2, [pc, #232]	; (8001010 <runNormalMode+0x278>)
 8000f26:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8000f28:	f7ff fc10 	bl	800074c <ledWalkOperationNormalMode>
				onSingleRedTraffic1();
 8000f2c:	f7ff fbc8 	bl	80006c0 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8000f30:	4b33      	ldr	r3, [pc, #204]	; (8001000 <runNormalMode+0x268>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb63 	bl	8000600 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 8000f3a:	f001 f8b3 	bl	80020a4 <printTerminalInfoModeTraffic1>
				onSingleYellowTraffic1();
				update7SEGBufferTraffic1(counterLedYellow1);
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 8000f3e:	e00f      	b.n	8000f60 <runNormalMode+0x1c8>
				onSingleYellowTraffic1();
 8000f40:	f7ff fbc6 	bl	80006d0 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <runNormalMode+0x280>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fb59 	bl	8000600 <update7SEGBufferTraffic1>
				printTerminalInfoModeTraffic1();
 8000f4e:	f001 f8a9 	bl	80020a4 <printTerminalInfoModeTraffic1>
		break;
 8000f52:	e005      	b.n	8000f60 <runNormalMode+0x1c8>
	default:
		break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <runNormalMode+0x1ca>
		break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <runNormalMode+0x1ca>
		break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <runNormalMode+0x1ca>
		break;
 8000f60:	bf00      	nop
	}
	switch (statusTraffic2)
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <runNormalMode+0x284>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	f200 80ae 	bhi.w	80010c8 <runNormalMode+0x330>
 8000f6c:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <runNormalMode+0x1dc>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000f85 	.word	0x08000f85
 8000f78:	08001079 	.word	0x08001079
 8000f7c:	08000fa7 	.word	0x08000fa7
 8000f80:	08001029 	.word	0x08001029
	{
	case INITNORMAL:
		statusTraffic2 = GREENNORMAL;
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <runNormalMode+0x284>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <runNormalMode+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <runNormalMode+0x288>)
 8000f90:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 8000f92:	f7ff fbbd 	bl	8000710 <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <runNormalMode+0x288>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fb3c 	bl	8000618 <update7SEGBufferTraffic2>
		printTerminalInfoTraffic2();
 8000fa0:	f001 f846 	bl	8002030 <printTerminalInfoTraffic2>
		break;
 8000fa4:	e097      	b.n	80010d6 <runNormalMode+0x33e>
	case GREENNORMAL:
		if (counterLedGreen2 > 0)
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <runNormalMode+0x288>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f340 808e 	ble.w	80010cc <runNormalMode+0x334>
		{
			counterLedGreen2--;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <runNormalMode+0x288>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <runNormalMode+0x288>)
 8000fb8:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <runNormalMode+0x288>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dc10      	bgt.n	8000fe4 <runNormalMode+0x24c>
			{
				counterLedYellow2 = durationLedYellow;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <runNormalMode+0x27c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <runNormalMode+0x28c>)
 8000fc8:	6013      	str	r3, [r2, #0]
				statusTraffic2 = YELLOWNORMAL;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <runNormalMode+0x284>)
 8000fcc:	2203      	movs	r2, #3
 8000fce:	601a      	str	r2, [r3, #0]
				onSingleYellowTraffic2();
 8000fd0:	f7ff fb96 	bl	8000700 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <runNormalMode+0x28c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fb1d 	bl	8000618 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8000fde:	f001 f827 	bl	8002030 <printTerminalInfoTraffic2>
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 8000fe2:	e073      	b.n	80010cc <runNormalMode+0x334>
				onSingleGreenTraffic2();
 8000fe4:	f7ff fb94 	bl	8000710 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <runNormalMode+0x288>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fb13 	bl	8000618 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8000ff2:	f001 f81d 	bl	8002030 <printTerminalInfoTraffic2>
		break;
 8000ff6:	e069      	b.n	80010cc <runNormalMode+0x334>
 8000ff8:	20000118 	.word	0x20000118
 8000ffc:	20000060 	.word	0x20000060
 8001000:	20000120 	.word	0x20000120
 8001004:	20000064 	.word	0x20000064
 8001008:	20000128 	.word	0x20000128
 800100c:	200000c8 	.word	0x200000c8
 8001010:	200000c4 	.word	0x200000c4
 8001014:	20000068 	.word	0x20000068
 8001018:	20000130 	.word	0x20000130
 800101c:	2000011c 	.word	0x2000011c
 8001020:	2000012c 	.word	0x2000012c
 8001024:	20000134 	.word	0x20000134
	case YELLOWNORMAL:
		if (counterLedYellow2 > 0)
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <runNormalMode+0x344>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	dd4f      	ble.n	80010d0 <runNormalMode+0x338>
		{
			counterLedYellow2--;
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <runNormalMode+0x344>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	4a29      	ldr	r2, [pc, #164]	; (80010dc <runNormalMode+0x344>)
 8001038:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <runNormalMode+0x344>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dc10      	bgt.n	8001064 <runNormalMode+0x2cc>
			{
				counterLedRed2 = durationLedRed;
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <runNormalMode+0x348>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <runNormalMode+0x34c>)
 8001048:	6013      	str	r3, [r2, #0]
				statusTraffic2 = REDNORMAL;
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <runNormalMode+0x350>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 8001050:	f7ff fb4e 	bl	80006f0 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <runNormalMode+0x34c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fadd 	bl	8000618 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 800105e:	f000 ffe7 	bl	8002030 <printTerminalInfoTraffic2>
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 8001062:	e035      	b.n	80010d0 <runNormalMode+0x338>
				onSingleYellowTraffic2();
 8001064:	f7ff fb4c 	bl	8000700 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <runNormalMode+0x344>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fad3 	bl	8000618 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001072:	f000 ffdd 	bl	8002030 <printTerminalInfoTraffic2>
		break;
 8001076:	e02b      	b.n	80010d0 <runNormalMode+0x338>
	case REDNORMAL:
		if (counterLedRed2 > 0)
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <runNormalMode+0x34c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	dd29      	ble.n	80010d4 <runNormalMode+0x33c>
		{
			counterLedRed2--;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <runNormalMode+0x34c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <runNormalMode+0x34c>)
 8001088:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <runNormalMode+0x34c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dc10      	bgt.n	80010b4 <runNormalMode+0x31c>
			{
				counterLedGreen2 = durationLedGreen;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <runNormalMode+0x354>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <runNormalMode+0x358>)
 8001098:	6013      	str	r3, [r2, #0]
				statusTraffic2 = GREENNORMAL;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <runNormalMode+0x350>)
 800109c:	2202      	movs	r2, #2
 800109e:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 80010a0:	f7ff fb36 	bl	8000710 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <runNormalMode+0x358>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fab5 	bl	8000618 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80010ae:	f000 ffbf 	bl	8002030 <printTerminalInfoTraffic2>
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 80010b2:	e00f      	b.n	80010d4 <runNormalMode+0x33c>
				onSingleRedTraffic2();
 80010b4:	f7ff fb1c 	bl	80006f0 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <runNormalMode+0x34c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff faab 	bl	8000618 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80010c2:	f000 ffb5 	bl	8002030 <printTerminalInfoTraffic2>
		break;
 80010c6:	e005      	b.n	80010d4 <runNormalMode+0x33c>
	default:
		break;
 80010c8:	bf00      	nop
 80010ca:	e004      	b.n	80010d6 <runNormalMode+0x33e>
		break;
 80010cc:	bf00      	nop
 80010ce:	e002      	b.n	80010d6 <runNormalMode+0x33e>
		break;
 80010d0:	bf00      	nop
 80010d2:	e000      	b.n	80010d6 <runNormalMode+0x33e>
		break;
 80010d4:	bf00      	nop
	}
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000134 	.word	0x20000134
 80010e0:	20000060 	.word	0x20000060
 80010e4:	20000124 	.word	0x20000124
 80010e8:	2000011c 	.word	0x2000011c
 80010ec:	20000064 	.word	0x20000064
 80010f0:	2000012c 	.word	0x2000012c

080010f4 <beginNormalMode>:

void beginNormalMode()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	numberFreq= 0;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <beginNormalMode+0x28>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
	buzzerOff();
 80010fe:	f000 fa05 	bl	800150c <buzzerOff>
	offSingleRedGreenWalk();
 8001102:	f7ff fb0d 	bl	8000720 <offSingleRedGreenWalk>
	offAllSingLEDs();
 8001106:	f7ff fac3 	bl	8000690 <offAllSingLEDs>
	update7SEGBufferMode(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff fa90 	bl	8000630 <update7SEGBufferMode>
	initStatusNormalMode();
 8001110:	f7ff fe32 	bl	8000d78 <initStatusNormalMode>
	runNormalMode();
 8001114:	f7ff fe40 	bl	8000d98 <runNormalMode>
////	setTimer2(100);
//	SCH_Delete_ID(1);
//	SCH_Add_Task(task1, 1000, 1000, 1);
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200000c4 	.word	0x200000c4

08001120 <beginWalkNormalMode>:

void beginWalkNormalMode()
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	numberFreq= 2;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <beginWalkNormalMode+0x1c>)
 8001126:	2202      	movs	r2, #2
 8001128:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusTraffic1;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <beginWalkNormalMode+0x20>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <beginWalkNormalMode+0x24>)
 8001130:	6013      	str	r3, [r2, #0]
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200000c4 	.word	0x200000c4
 8001140:	20000118 	.word	0x20000118
 8001144:	200000c8 	.word	0x200000c8

08001148 <controlSingleLedTraffic>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLedTraffic(int orderTraffic, int statusLed)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b08      	cmp	r3, #8
 8001156:	d003      	beq.n	8001160 <controlSingleLedTraffic+0x18>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b09      	cmp	r3, #9
 800115c:	d069      	beq.n	8001232 <controlSingleLedTraffic+0xea>
		default:
			break;
		}
		break;
	default:
		break;
 800115e:	e0cb      	b.n	80012f8 <controlSingleLedTraffic+0x1b0>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d863      	bhi.n	800122e <controlSingleLedTraffic+0xe6>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <controlSingleLedTraffic+0x24>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	0800118d 	.word	0x0800118d
 8001170:	080011a5 	.word	0x080011a5
 8001174:	080011bd 	.word	0x080011bd
 8001178:	080011d5 	.word	0x080011d5
 800117c:	080011f5 	.word	0x080011f5
 8001180:	080011e1 	.word	0x080011e1
 8001184:	080011ff 	.word	0x080011ff
 8001188:	08001217 	.word	0x08001217
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001192:	485b      	ldr	r0, [pc, #364]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 8001194:	f001 fbd7 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	4859      	ldr	r0, [pc, #356]	; (8001304 <controlSingleLedTraffic+0x1bc>)
 800119e:	f001 fbd2 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 80011a2:	e045      	b.n	8001230 <controlSingleLedTraffic+0xe8>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011aa:	4855      	ldr	r0, [pc, #340]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 80011ac:	f001 fbcb 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	4853      	ldr	r0, [pc, #332]	; (8001304 <controlSingleLedTraffic+0x1bc>)
 80011b6:	f001 fbc6 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 80011ba:	e039      	b.n	8001230 <controlSingleLedTraffic+0xe8>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	484f      	ldr	r0, [pc, #316]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 80011c4:	f001 fbbf 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	484d      	ldr	r0, [pc, #308]	; (8001304 <controlSingleLedTraffic+0x1bc>)
 80011ce:	f001 fbba 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 80011d2:	e02d      	b.n	8001230 <controlSingleLedTraffic+0xe8>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80011d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d8:	4849      	ldr	r0, [pc, #292]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 80011da:	f001 fbcc 	bl	8002976 <HAL_GPIO_TogglePin>
			break;
 80011de:	e027      	b.n	8001230 <controlSingleLedTraffic+0xe8>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80011e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e4:	4846      	ldr	r0, [pc, #280]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 80011e6:	f001 fbc6 	bl	8002976 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	4845      	ldr	r0, [pc, #276]	; (8001304 <controlSingleLedTraffic+0x1bc>)
 80011ee:	f001 fbc2 	bl	8002976 <HAL_GPIO_TogglePin>
			break;
 80011f2:	e01d      	b.n	8001230 <controlSingleLedTraffic+0xe8>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	4843      	ldr	r0, [pc, #268]	; (8001304 <controlSingleLedTraffic+0x1bc>)
 80011f8:	f001 fbbd 	bl	8002976 <HAL_GPIO_TogglePin>
			break;
 80011fc:	e018      	b.n	8001230 <controlSingleLedTraffic+0xe8>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	483e      	ldr	r0, [pc, #248]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 8001206:	f001 fb9e 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	483d      	ldr	r0, [pc, #244]	; (8001304 <controlSingleLedTraffic+0x1bc>)
 8001210:	f001 fb99 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 8001214:	e00c      	b.n	8001230 <controlSingleLedTraffic+0xe8>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	4838      	ldr	r0, [pc, #224]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 800121e:	f001 fb92 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	4837      	ldr	r0, [pc, #220]	; (8001304 <controlSingleLedTraffic+0x1bc>)
 8001228:	f001 fb8d 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 800122c:	e000      	b.n	8001230 <controlSingleLedTraffic+0xe8>
			break;
 800122e:	bf00      	nop
		break;
 8001230:	e062      	b.n	80012f8 <controlSingleLedTraffic+0x1b0>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b07      	cmp	r3, #7
 8001236:	d85d      	bhi.n	80012f4 <controlSingleLedTraffic+0x1ac>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <controlSingleLedTraffic+0xf8>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001261 	.word	0x08001261
 8001244:	08001277 	.word	0x08001277
 8001248:	0800128d 	.word	0x0800128d
 800124c:	080012a3 	.word	0x080012a3
 8001250:	080012bf 	.word	0x080012bf
 8001254:	080012ad 	.word	0x080012ad
 8001258:	080012c9 	.word	0x080012c9
 800125c:	080012df 	.word	0x080012df
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001260:	2201      	movs	r2, #1
 8001262:	2140      	movs	r1, #64	; 0x40
 8001264:	4828      	ldr	r0, [pc, #160]	; (8001308 <controlSingleLedTraffic+0x1c0>)
 8001266:	f001 fb6e 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	4824      	ldr	r0, [pc, #144]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 8001270:	f001 fb69 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 8001274:	e03f      	b.n	80012f6 <controlSingleLedTraffic+0x1ae>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2140      	movs	r1, #64	; 0x40
 800127a:	4823      	ldr	r0, [pc, #140]	; (8001308 <controlSingleLedTraffic+0x1c0>)
 800127c:	f001 fb63 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	481e      	ldr	r0, [pc, #120]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 8001286:	f001 fb5e 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 800128a:	e034      	b.n	80012f6 <controlSingleLedTraffic+0x1ae>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	481d      	ldr	r0, [pc, #116]	; (8001308 <controlSingleLedTraffic+0x1c0>)
 8001292:	f001 fb58 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	4819      	ldr	r0, [pc, #100]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 800129c:	f001 fb53 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 80012a0:	e029      	b.n	80012f6 <controlSingleLedTraffic+0x1ae>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80012a2:	2140      	movs	r1, #64	; 0x40
 80012a4:	4818      	ldr	r0, [pc, #96]	; (8001308 <controlSingleLedTraffic+0x1c0>)
 80012a6:	f001 fb66 	bl	8002976 <HAL_GPIO_TogglePin>
			break;
 80012aa:	e024      	b.n	80012f6 <controlSingleLedTraffic+0x1ae>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80012ac:	2140      	movs	r1, #64	; 0x40
 80012ae:	4816      	ldr	r0, [pc, #88]	; (8001308 <controlSingleLedTraffic+0x1c0>)
 80012b0:	f001 fb61 	bl	8002976 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	4812      	ldr	r0, [pc, #72]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 80012b8:	f001 fb5d 	bl	8002976 <HAL_GPIO_TogglePin>
			break;
 80012bc:	e01b      	b.n	80012f6 <controlSingleLedTraffic+0x1ae>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	480f      	ldr	r0, [pc, #60]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 80012c2:	f001 fb58 	bl	8002976 <HAL_GPIO_TogglePin>
			break;
 80012c6:	e016      	b.n	80012f6 <controlSingleLedTraffic+0x1ae>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <controlSingleLedTraffic+0x1c0>)
 80012ce:	f001 fb3a 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	480a      	ldr	r0, [pc, #40]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 80012d8:	f001 fb35 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 80012dc:	e00b      	b.n	80012f6 <controlSingleLedTraffic+0x1ae>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <controlSingleLedTraffic+0x1c0>)
 80012e4:	f001 fb2f 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <controlSingleLedTraffic+0x1b8>)
 80012ee:	f001 fb2a 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 80012f2:	e000      	b.n	80012f6 <controlSingleLedTraffic+0x1ae>
			break;
 80012f4:	bf00      	nop
		break;
 80012f6:	bf00      	nop
	}
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40010800 	.word	0x40010800
 8001304:	40011000 	.word	0x40011000
 8001308:	40010c00 	.word	0x40010c00

0800130c <controlSingleLedWalk>:

void controlSingleLedWalk(int statusLed)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	switch (statusLed)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b0c      	cmp	r3, #12
 8001318:	d01e      	beq.n	8001358 <controlSingleLedWalk+0x4c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0c      	cmp	r3, #12
 800131e:	dc26      	bgt.n	800136e <controlSingleLedWalk+0x62>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b0a      	cmp	r3, #10
 8001324:	d00d      	beq.n	8001342 <controlSingleLedWalk+0x36>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0b      	cmp	r3, #11
 800132a:	d120      	bne.n	800136e <controlSingleLedWalk+0x62>
	{
		case ONGREENOFFREDWALK:
			HAL_GPIO_WritePin(REDWALK_GPIO_Port, REDWALK_Pin, RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2120      	movs	r1, #32
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <controlSingleLedWalk+0x6c>)
 8001332:	f001 fb08 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREENWALK_GPIO_Port, GREENWALK_Pin, SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2110      	movs	r1, #16
 800133a:	480f      	ldr	r0, [pc, #60]	; (8001378 <controlSingleLedWalk+0x6c>)
 800133c:	f001 fb03 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 8001340:	e016      	b.n	8001370 <controlSingleLedWalk+0x64>
		case OFFLEDWALK:
			HAL_GPIO_WritePin(REDWALK_GPIO_Port, REDWALK_Pin, RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2120      	movs	r1, #32
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <controlSingleLedWalk+0x6c>)
 8001348:	f001 fafd 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREENWALK_GPIO_Port, GREENWALK_Pin, RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2110      	movs	r1, #16
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <controlSingleLedWalk+0x6c>)
 8001352:	f001 faf8 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 8001356:	e00b      	b.n	8001370 <controlSingleLedWalk+0x64>
		case ONREDOFFGREENWALK:
			HAL_GPIO_WritePin(REDWALK_GPIO_Port, REDWALK_Pin, SET);
 8001358:	2201      	movs	r2, #1
 800135a:	2120      	movs	r1, #32
 800135c:	4806      	ldr	r0, [pc, #24]	; (8001378 <controlSingleLedWalk+0x6c>)
 800135e:	f001 faf2 	bl	8002946 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREENWALK_GPIO_Port, GREENWALK_Pin, RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2110      	movs	r1, #16
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <controlSingleLedWalk+0x6c>)
 8001368:	f001 faed 	bl	8002946 <HAL_GPIO_WritePin>
			break;
 800136c:	e000      	b.n	8001370 <controlSingleLedWalk+0x64>
		default:
			break;
 800136e:	bf00      	nop
	}
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40010c00 	.word	0x40010c00

0800137c <MX_TIM3_Init>:
int flagBuzzer = 0;
int pre = 0;
int com = 0;

void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013ae:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <MX_TIM3_Init+0xec>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013b4:	f240 128f 	movw	r2, #399	; 0x18f
 80013b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013d4:	4823      	ldr	r0, [pc, #140]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013d6:	f001 fef7 	bl	80031c8 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013e0:	f7ff fba8 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	4619      	mov	r1, r3
 80013f0:	481c      	ldr	r0, [pc, #112]	; (8001464 <MX_TIM3_Init+0xe8>)
 80013f2:	f002 fa4f 	bl	8003894 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013fc:	f7ff fb9a 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001400:	4818      	ldr	r0, [pc, #96]	; (8001464 <MX_TIM3_Init+0xe8>)
 8001402:	f001 ff83 	bl	800330c <HAL_TIM_PWM_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800140c:	f7ff fb92 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001418:	f107 0320 	add.w	r3, r7, #32
 800141c:	4619      	mov	r1, r3
 800141e:	4811      	ldr	r0, [pc, #68]	; (8001464 <MX_TIM3_Init+0xe8>)
 8001420:	f002 fdc8 	bl	8003fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800142a:	f7ff fb83 	bl	8000b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142e:	2360      	movs	r3, #96	; 0x60
 8001430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8001432:	f241 3388 	movw	r3, #5000	; 0x1388
 8001436:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	4619      	mov	r1, r3
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM3_Init+0xe8>)
 8001448:	f002 f962 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001452:	f7ff fb6f 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001456:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM3_Init+0xe8>)
 8001458:	f000 fb5e 	bl	8001b18 <HAL_TIM_MspPostInit>

}
 800145c:	bf00      	nop
 800145e:	3738      	adds	r7, #56	; 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000138 	.word	0x20000138
 8001468:	40000400 	.word	0x40000400

0800146c <buzzerSetup>:

void buzzerSetup()
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	pre = 399;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <buzzerSetup+0x1c>)
 8001472:	f240 128f 	movw	r2, #399	; 0x18f
 8001476:	601a      	str	r2, [r3, #0]
	com = 400;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <buzzerSetup+0x20>)
 800147a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000184 	.word	0x20000184
 800148c:	20000188 	.word	0x20000188

08001490 <buzzerRun>:

void buzzerRun()
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	if(flagBuzzer == 1)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <buzzerRun+0x54>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d109      	bne.n	80014b0 <buzzerRun+0x20>
	{
		__HAL_TIM_SET_PRESCALER(&htim3, pre);
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <buzzerRun+0x58>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <buzzerRun+0x5c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, com);
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <buzzerRun+0x60>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <buzzerRun+0x5c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(com < 9000)
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <buzzerRun+0x60>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f242 3227 	movw	r2, #8999	; 0x2327
 80014b8:	4293      	cmp	r3, r2
 80014ba:	dc05      	bgt.n	80014c8 <buzzerRun+0x38>
		com = com + 400;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <buzzerRun+0x60>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <buzzerRun+0x60>)
 80014c6:	6013      	str	r3, [r2, #0]
	if(pre > 0)
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <buzzerRun+0x58>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dd04      	ble.n	80014da <buzzerRun+0x4a>
		pre-= 25;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <buzzerRun+0x58>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3b19      	subs	r3, #25
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <buzzerRun+0x58>)
 80014d8:	6013      	str	r3, [r2, #0]
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000180 	.word	0x20000180
 80014e8:	20000184 	.word	0x20000184
 80014ec:	20000138 	.word	0x20000138
 80014f0:	20000188 	.word	0x20000188

080014f4 <buzzerBegin>:

void buzzerBegin()
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
	flagBuzzer = 1;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <buzzerBegin+0x14>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000180 	.word	0x20000180

0800150c <buzzerOff>:


void buzzerOff()
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	flagBuzzer=0;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <buzzerOff+0x1c>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <buzzerOff+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000180 	.word	0x20000180
 800152c:	20000138 	.word	0x20000138

08001530 <SCH_Update>:
uint8_t nTask = 0;
sTask SCH_tasks_G[SCH_MAX_TASKS];

// Ham giam dan thoi gian delay va set RunMe len de execute
void SCH_Update()
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  if (SCH_tasks_G[0].pTask)
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <SCH_Update+0x34>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00f      	beq.n	800155c <SCH_Update+0x2c>
  {
    if (SCH_tasks_G[0].Delay == 0)
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <SCH_Update+0x34>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d106      	bne.n	8001552 <SCH_Update+0x22>
    {
      SCH_tasks_G[0].RunMe += 1;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <SCH_Update+0x34>)
 8001546:	7b1b      	ldrb	r3, [r3, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SCH_Update+0x34>)
 800154e:	731a      	strb	r2, [r3, #12]
    else
    {
      SCH_tasks_G[0].Delay--;
    }
  }
}
 8001550:	e004      	b.n	800155c <SCH_Update+0x2c>
      SCH_tasks_G[0].Delay--;
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SCH_Update+0x34>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	4a02      	ldr	r2, [pc, #8]	; (8001564 <SCH_Update+0x34>)
 800155a:	6053      	str	r3, [r2, #4]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	2000018c 	.word	0x2000018c

08001568 <SCH_Add_Task>:

// Ham them task vao mang
void SCH_Add_Task(void(*pFunction), const uint32_t Delay, const uint32_t Period, uint8_t taskID)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	70fb      	strb	r3, [r7, #3]
  int index = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  int total_delay = Delay / 10;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	4a80      	ldr	r2, [pc, #512]	; (8001780 <SCH_Add_Task+0x218>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	61bb      	str	r3, [r7, #24]

  for (int i = 0; i < SCH_MAX_TASKS; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e02b      	b.n	80015e4 <SCH_Add_Task+0x7c>
  {
    if (SCH_tasks_G[i].pTask)
 800158c:	497d      	ldr	r1, [pc, #500]	; (8001784 <SCH_Add_Task+0x21c>)
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01b      	beq.n	80015d8 <SCH_Add_Task+0x70>
    {
      if (SCH_tasks_G[i].Delay <= total_delay)
 80015a0:	4978      	ldr	r1, [pc, #480]	; (8001784 <SCH_Add_Task+0x21c>)
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3304      	adds	r3, #4
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d80c      	bhi.n	80015d2 <SCH_Add_Task+0x6a>
      {
        total_delay = total_delay - SCH_tasks_G[i].Delay;
 80015b8:	69b9      	ldr	r1, [r7, #24]
 80015ba:	4872      	ldr	r0, [pc, #456]	; (8001784 <SCH_Add_Task+0x21c>)
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4403      	add	r3, r0
 80015c8:	3304      	adds	r3, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1acb      	subs	r3, r1, r3
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	e005      	b.n	80015de <SCH_Add_Task+0x76>
      }
      else
      {
        index = i;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	61fb      	str	r3, [r7, #28]
        break;
 80015d6:	e008      	b.n	80015ea <SCH_Add_Task+0x82>
      }
    }
    else
    {
      index = i;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	61fb      	str	r3, [r7, #28]
      break;
 80015dc:	e005      	b.n	80015ea <SCH_Add_Task+0x82>
  for (int i = 0; i < SCH_MAX_TASKS; i++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b27      	cmp	r3, #39	; 0x27
 80015e8:	ddd0      	ble.n	800158c <SCH_Add_Task+0x24>
    }
  }
  for (int i = SCH_MAX_TASKS; i > index; i--)
 80015ea:	2328      	movs	r3, #40	; 0x28
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	e06b      	b.n	80016c8 <SCH_Add_Task+0x160>
  {
    if (SCH_tasks_G[i - 1].pTask)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	4963      	ldr	r1, [pc, #396]	; (8001784 <SCH_Add_Task+0x21c>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d05d      	beq.n	80016c2 <SCH_Add_Task+0x15a>
    {
      SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1e5a      	subs	r2, r3, #1
 800160a:	495e      	ldr	r1, [pc, #376]	; (8001784 <SCH_Add_Task+0x21c>)
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	485a      	ldr	r0, [pc, #360]	; (8001784 <SCH_Add_Task+0x21c>)
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4403      	add	r3, r0
 8001626:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	4955      	ldr	r1, [pc, #340]	; (8001784 <SCH_Add_Task+0x21c>)
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3304      	adds	r3, #4
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	4851      	ldr	r0, [pc, #324]	; (8001784 <SCH_Add_Task+0x21c>)
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4403      	add	r3, r0
 800164a:	3304      	adds	r3, #4
 800164c:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	494c      	ldr	r1, [pc, #304]	; (8001784 <SCH_Add_Task+0x21c>)
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3308      	adds	r3, #8
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	4848      	ldr	r0, [pc, #288]	; (8001784 <SCH_Add_Task+0x21c>)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4403      	add	r3, r0
 8001670:	3308      	adds	r3, #8
 8001672:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1e5a      	subs	r2, r3, #1
 8001678:	4942      	ldr	r1, [pc, #264]	; (8001784 <SCH_Add_Task+0x21c>)
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	330c      	adds	r3, #12
 8001686:	7818      	ldrb	r0, [r3, #0]
 8001688:	493e      	ldr	r1, [pc, #248]	; (8001784 <SCH_Add_Task+0x21c>)
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	330c      	adds	r3, #12
 8001698:	4602      	mov	r2, r0
 800169a:	701a      	strb	r2, [r3, #0]
      SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1e5a      	subs	r2, r3, #1
 80016a0:	4938      	ldr	r1, [pc, #224]	; (8001784 <SCH_Add_Task+0x21c>)
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3310      	adds	r3, #16
 80016ae:	6819      	ldr	r1, [r3, #0]
 80016b0:	4834      	ldr	r0, [pc, #208]	; (8001784 <SCH_Add_Task+0x21c>)
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4403      	add	r3, r0
 80016be:	3310      	adds	r3, #16
 80016c0:	6019      	str	r1, [r3, #0]
  for (int i = SCH_MAX_TASKS; i > index; i--)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dc8f      	bgt.n	80015f0 <SCH_Add_Task+0x88>
    }
  }
  SCH_tasks_G[index].pTask = pFunction;
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	482c      	ldr	r0, [pc, #176]	; (8001784 <SCH_Add_Task+0x21c>)
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4403      	add	r3, r0
 80016e0:	6019      	str	r1, [r3, #0]
  SCH_tasks_G[index].Delay = total_delay;
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	4827      	ldr	r0, [pc, #156]	; (8001784 <SCH_Add_Task+0x21c>)
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4403      	add	r3, r0
 80016f2:	3304      	adds	r3, #4
 80016f4:	6019      	str	r1, [r3, #0]
  SCH_tasks_G[index].Period = Period;
 80016f6:	4923      	ldr	r1, [pc, #140]	; (8001784 <SCH_Add_Task+0x21c>)
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3308      	adds	r3, #8
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].RunMe = 0;
 800170a:	491e      	ldr	r1, [pc, #120]	; (8001784 <SCH_Add_Task+0x21c>)
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	330c      	adds	r3, #12
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
  SCH_tasks_G[index].TaskID = taskID;
 800171e:	78f9      	ldrb	r1, [r7, #3]
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <SCH_Add_Task+0x21c>)
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4403      	add	r3, r0
 800172e:	3310      	adds	r3, #16
 8001730:	6019      	str	r1, [r3, #0]
  if (SCH_tasks_G[index + 1].pTask)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4913      	ldr	r1, [pc, #76]	; (8001784 <SCH_Add_Task+0x21c>)
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d015      	beq.n	8001774 <SCH_Add_Task+0x20c>
  {
    SCH_tasks_G[index + 1].Delay = SCH_tasks_G[index + 1].Delay - total_delay;
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	490d      	ldr	r1, [pc, #52]	; (8001784 <SCH_Add_Task+0x21c>)
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	3304      	adds	r3, #4
 800175a:	6819      	ldr	r1, [r3, #0]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	3201      	adds	r2, #1
 8001762:	1ac9      	subs	r1, r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <SCH_Add_Task+0x21c>)
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4403      	add	r3, r0
 8001770:	3304      	adds	r3, #4
 8001772:	6019      	str	r1, [r3, #0]
  }
}
 8001774:	bf00      	nop
 8001776:	3724      	adds	r7, #36	; 0x24
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	cccccccd 	.word	0xcccccccd
 8001784:	2000018c 	.word	0x2000018c

08001788 <SCH_Delete>:

void SCH_Delete(uint8_t index)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  SCH_tasks_G[index].Delay = 0;
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	491a      	ldr	r1, [pc, #104]	; (8001800 <SCH_Delete+0x78>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	3304      	adds	r3, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].Period = 0;
 80017a6:	79fa      	ldrb	r2, [r7, #7]
 80017a8:	4915      	ldr	r1, [pc, #84]	; (8001800 <SCH_Delete+0x78>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	3308      	adds	r3, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].RunMe = 0;
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	4910      	ldr	r1, [pc, #64]	; (8001800 <SCH_Delete+0x78>)
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	330c      	adds	r3, #12
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
  SCH_tasks_G[index].pTask = 0x0000;
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	490b      	ldr	r1, [pc, #44]	; (8001800 <SCH_Delete+0x78>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
  SCH_tasks_G[index].TaskID = 0;
 80017e0:	79fa      	ldrb	r2, [r7, #7]
 80017e2:	4907      	ldr	r1, [pc, #28]	; (8001800 <SCH_Delete+0x78>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3310      	adds	r3, #16
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000018c 	.word	0x2000018c

08001804 <SCH_Delete_Task>:
	SCH_Delete(final);
}

// Xoa task dau tien
void SCH_Delete_Task(uint8_t index)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  int final = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  SCH_Delete(index);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ffb7 	bl	8001788 <SCH_Delete>
  for (int i = index; i < SCH_MAX_TASKS; i++)
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	e06d      	b.n	80018fc <SCH_Delete_Task+0xf8>
  {
    SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	493b      	ldr	r1, [pc, #236]	; (8001914 <SCH_Delete_Task+0x110>)
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	4838      	ldr	r0, [pc, #224]	; (8001914 <SCH_Delete_Task+0x110>)
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4403      	add	r3, r0
 8001840:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	4933      	ldr	r1, [pc, #204]	; (8001914 <SCH_Delete_Task+0x110>)
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3304      	adds	r3, #4
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	482f      	ldr	r0, [pc, #188]	; (8001914 <SCH_Delete_Task+0x110>)
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4403      	add	r3, r0
 8001864:	3304      	adds	r3, #4
 8001866:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	4929      	ldr	r1, [pc, #164]	; (8001914 <SCH_Delete_Task+0x110>)
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	3308      	adds	r3, #8
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	4825      	ldr	r0, [pc, #148]	; (8001914 <SCH_Delete_Task+0x110>)
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4403      	add	r3, r0
 800188a:	3308      	adds	r3, #8
 800188c:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	4920      	ldr	r1, [pc, #128]	; (8001914 <SCH_Delete_Task+0x110>)
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	330c      	adds	r3, #12
 80018a0:	7818      	ldrb	r0, [r3, #0]
 80018a2:	491c      	ldr	r1, [pc, #112]	; (8001914 <SCH_Delete_Task+0x110>)
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	330c      	adds	r3, #12
 80018b2:	4602      	mov	r2, r0
 80018b4:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[i].TaskID = SCH_tasks_G[i + 1].TaskID;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	4916      	ldr	r1, [pc, #88]	; (8001914 <SCH_Delete_Task+0x110>)
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3310      	adds	r3, #16
 80018c8:	6819      	ldr	r1, [r3, #0]
 80018ca:	4812      	ldr	r0, [pc, #72]	; (8001914 <SCH_Delete_Task+0x110>)
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4403      	add	r3, r0
 80018d8:	3310      	adds	r3, #16
 80018da:	6019      	str	r1, [r3, #0]
    if (SCH_tasks_G[i].pTask == 0x0000)
 80018dc:	490d      	ldr	r1, [pc, #52]	; (8001914 <SCH_Delete_Task+0x110>)
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <SCH_Delete_Task+0xf2>
    {
      final = i;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60fb      	str	r3, [r7, #12]
      break;
 80018f4:	e005      	b.n	8001902 <SCH_Delete_Task+0xfe>
  for (int i = index; i < SCH_MAX_TASKS; i++)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3301      	adds	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b27      	cmp	r3, #39	; 0x27
 8001900:	dd8e      	ble.n	8001820 <SCH_Delete_Task+0x1c>
    }
  }
  SCH_Delete(final);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff3e 	bl	8001788 <SCH_Delete>
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000018c 	.word	0x2000018c

08001918 <SCH_Dispatch_Tasks>:

// Ham check xem task0 da can execute chua
void SCH_Dispatch_Tasks(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  if (SCH_tasks_G[0].pTask)
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01e      	beq.n	8001962 <SCH_Dispatch_Tasks+0x4a>
  {
    if (SCH_tasks_G[0].RunMe > 0)
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 8001926:	7b1b      	ldrb	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01a      	beq.n	8001962 <SCH_Dispatch_Tasks+0x4a>
    {
      (*SCH_tasks_G[0].pTask)();
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4798      	blx	r3
      SCH_tasks_G[0].RunMe--;
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 8001934:	7b1b      	ldrb	r3, [r3, #12]
 8001936:	3b01      	subs	r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 800193c:	731a      	strb	r2, [r3, #12]

      if (SCH_tasks_G[0].Period)
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00a      	beq.n	800195c <SCH_Dispatch_Tasks+0x44>
      {
        SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].Period,
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 800194c:	6899      	ldr	r1, [r3, #8]
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 8001950:	689a      	ldr	r2, [r3, #8]
        		SCH_tasks_G[0].Period, SCH_tasks_G[0].TaskID);
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SCH_Dispatch_Tasks+0x50>)
 8001954:	691b      	ldr	r3, [r3, #16]
        SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].Period,
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f7ff fe06 	bl	8001568 <SCH_Add_Task>
      }
      SCH_Delete_Task(0);
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ff51 	bl	8001804 <SCH_Delete_Task>
    }
  }
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000018c 	.word	0x2000018c

0800196c <SCH_Init>:
// Ham xoa tat ca cac task trong array, khien array nhu vua duoc khoi tao
void SCH_Init(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
  uint8_t i;
  for (i = 0; i < SCH_MAX_TASKS; i++)
 8001972:	2300      	movs	r3, #0
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	e033      	b.n	80019e0 <SCH_Init+0x74>
  {
    SCH_tasks_G[i].Delay = 0;
 8001978:	79fa      	ldrb	r2, [r7, #7]
 800197a:	491e      	ldr	r1, [pc, #120]	; (80019f4 <SCH_Init+0x88>)
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	3304      	adds	r3, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].Period = 0;
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	4919      	ldr	r1, [pc, #100]	; (80019f4 <SCH_Init+0x88>)
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	3308      	adds	r3, #8
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].RunMe = 0;
 80019a0:	79fa      	ldrb	r2, [r7, #7]
 80019a2:	4914      	ldr	r1, [pc, #80]	; (80019f4 <SCH_Init+0x88>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	330c      	adds	r3, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[i].pTask = 0x0000;
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	490f      	ldr	r1, [pc, #60]	; (80019f4 <SCH_Init+0x88>)
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].TaskID = 0;
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	490a      	ldr	r1, [pc, #40]	; (80019f4 <SCH_Init+0x88>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	3310      	adds	r3, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < SCH_MAX_TASKS; i++)
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	3301      	adds	r3, #1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b27      	cmp	r3, #39	; 0x27
 80019e4:	d9c8      	bls.n	8001978 <SCH_Init+0xc>
  }
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000018c 	.word	0x2000018c

080019f8 <task1>:

//function for run normal mode every 1s
void task1()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  if (modeStatus == NORMALMODE)
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <task1+0x18>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d103      	bne.n	8001a0c <task1+0x14>
  {
    runNormalMode();
 8001a04:	f7ff f9c8 	bl	8000d98 <runNormalMode>
    ledWalkOperationNormalMode();
 8001a08:	f7fe fea0 	bl	800074c <ledWalkOperationNormalMode>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000050 	.word	0x20000050

08001a14 <task2>:

//function for run tuning mode every 0.5s
void task2()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  if (modeStatus == TUNINGMODE)
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <task2+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d101      	bne.n	8001a24 <task2+0x10>
  {
    animationTuningMode();
 8001a20:	f000 fabc 	bl	8001f9c <animationTuningMode>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000050 	.word	0x20000050

08001a2c <task3>:

//function for get button every 10ms
void task3()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	getInputButton();
 8001a30:	f7fe fcde 	bl	80003f0 <getInputButton>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <task4>:

void task4()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	buzzerRun();
 8001a3c:	f7ff fd28 	bl	8001490 <buzzerRun>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_MspInit+0x60>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_MspInit+0x60>)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d114      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_TIM_Base_MspInit+0x68>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <HAL_TIM_Base_MspInit+0x68>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_TIM_Base_MspInit+0x68>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	201c      	movs	r0, #28
 8001ad8:	f000 fcb1 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001adc:	201c      	movs	r0, #28
 8001ade:	f000 fcca 	bl	8002476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ae2:	e010      	b.n	8001b06 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0x6c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10b      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_TIM_Base_MspInit+0x68>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_TIM_Base_MspInit+0x68>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	61d3      	str	r3, [r2, #28]
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_TIM_Base_MspInit+0x68>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40000400 	.word	0x40000400

08001b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_TIM_MspPostInit+0x58>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d117      	bne.n	8001b68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_TIM_MspPostInit+0x5c>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_TIM_MspPostInit+0x5c>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_TIM_MspPostInit+0x5c>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b50:	2340      	movs	r3, #64	; 0x40
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_TIM_MspPostInit+0x60>)
 8001b64:	f000 fd54 	bl	8002610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010800 	.word	0x40010800

08001b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_UART_MspInit+0x98>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d137      	bne.n	8001c0c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_UART_MspInit+0x9c>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_UART_MspInit+0x9c>)
 8001ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba6:	61d3      	str	r3, [r2, #28]
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_UART_MspInit+0x9c>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_UART_MspInit+0x9c>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_UART_MspInit+0x9c>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_UART_MspInit+0x9c>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480f      	ldr	r0, [pc, #60]	; (8001c1c <HAL_UART_MspInit+0xa0>)
 8001be0:	f000 fd16 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001be4:	2308      	movs	r3, #8
 8001be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4809      	ldr	r0, [pc, #36]	; (8001c1c <HAL_UART_MspInit+0xa0>)
 8001bf8:	f000 fd0a 	bl	8002610 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2026      	movs	r0, #38	; 0x26
 8001c02:	f000 fc1c 	bl	800243e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c06:	2026      	movs	r0, #38	; 0x26
 8001c08:	f000 fc35 	bl	8002476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40004400 	.word	0x40004400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <NMI_Handler+0x4>

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <MemManage_Handler+0x4>

08001c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c66:	f000 faf7 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM2_IRQHandler+0x10>)
 8001c76:	f001 fc43 	bl	8003500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200000cc 	.word	0x200000cc

08001c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <USART2_IRQHandler+0x10>)
 8001c8a:	f002 fad7 	bl	800423c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200004b0 	.word	0x200004b0

08001c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <runTuningMode>:
#define GREENTUNING 3

int statusTuningMode= INITMODE;

void runTuningMode()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <runTuningMode+0xb4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d84b      	bhi.n	8001d48 <runTuningMode+0xa4>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <runTuningMode+0x14>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001cc9 	.word	0x08001cc9
 8001cbc:	08001ce9 	.word	0x08001ce9
 8001cc0:	08001d09 	.word	0x08001d09
 8001cc4:	08001d29 	.word	0x08001d29
    {
        case INITMODE:
            statusTuningMode= REDTUNING;
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <runTuningMode+0xb4>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001cce:	f7fe fcdf 	bl	8000690 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <runTuningMode+0xb8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc92 	bl	8000600 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <runTuningMode+0xb8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc99 	bl	8000618 <update7SEGBufferTraffic2>
            break;
 8001ce6:	e030      	b.n	8001d4a <runTuningMode+0xa6>
        case REDTUNING:
            statusTuningMode= YELLOWTUNING;
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <runTuningMode+0xb4>)
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001cee:	f7fe fccf 	bl	8000690 <offAllSingLEDs>
            // blinkingYELLOW();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedYellow);
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <runTuningMode+0xbc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc82 	bl	8000600 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedYellow);
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <runTuningMode+0xbc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc89 	bl	8000618 <update7SEGBufferTraffic2>
            break;
 8001d06:	e020      	b.n	8001d4a <runTuningMode+0xa6>
        case YELLOWTUNING:
            statusTuningMode= GREENTUNING;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <runTuningMode+0xb4>)
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001d0e:	f7fe fcbf 	bl	8000690 <offAllSingLEDs>
            // blinkingGREEN();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedGreen);
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <runTuningMode+0xc0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc72 	bl	8000600 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedGreen);
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <runTuningMode+0xc0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc79 	bl	8000618 <update7SEGBufferTraffic2>
            break;
 8001d26:	e010      	b.n	8001d4a <runTuningMode+0xa6>
        case GREENTUNING:
            statusTuningMode= REDTUNING;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <runTuningMode+0xb4>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 8001d2e:	f7fe fcaf 	bl	8000690 <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <runTuningMode+0xb8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc62 	bl	8000600 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <runTuningMode+0xb8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc69 	bl	8000618 <update7SEGBufferTraffic2>
            break;
 8001d46:	e000      	b.n	8001d4a <runTuningMode+0xa6>
        default:
            break;
 8001d48:	bf00      	nop
    }
    printTerminalInfoModeTraffic1();
 8001d4a:	f000 f9ab 	bl	80020a4 <printTerminalInfoModeTraffic1>
    printTerminalInfoTraffic2();
 8001d4e:	f000 f96f 	bl	8002030 <printTerminalInfoTraffic2>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200004ac 	.word	0x200004ac
 8001d5c:	20000060 	.word	0x20000060
 8001d60:	20000068 	.word	0x20000068
 8001d64:	20000064 	.word	0x20000064

08001d68 <initStatusTuningMode>:

void initStatusTuningMode()
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
    statusTuningMode= INITMODE;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <initStatusTuningMode+0x14>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200004ac 	.word	0x200004ac

08001d80 <setValueAllOfTraffic>:

void setValueAllOfTraffic()
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	tempDurationLedGreen = durationLedGreen;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <setValueAllOfTraffic+0x24>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <setValueAllOfTraffic+0x28>)
 8001d8a:	6013      	str	r3, [r2, #0]
	tempDurationLedRed = durationLedRed;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <setValueAllOfTraffic+0x2c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <setValueAllOfTraffic+0x30>)
 8001d92:	6013      	str	r3, [r2, #0]
	tempDurationLedYellow = durationLedYellow;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <setValueAllOfTraffic+0x34>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <setValueAllOfTraffic+0x38>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	20000064 	.word	0x20000064
 8001da8:	20000058 	.word	0x20000058
 8001dac:	20000060 	.word	0x20000060
 8001db0:	20000054 	.word	0x20000054
 8001db4:	20000068 	.word	0x20000068
 8001db8:	2000005c 	.word	0x2000005c

08001dbc <beginTuningMode>:

void beginTuningMode()
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <beginTuningMode+0x28>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
	buzzerOff();
 8001dc6:	f7ff fba1 	bl	800150c <buzzerOff>
	setValueAllOfTraffic();
 8001dca:	f7ff ffd9 	bl	8001d80 <setValueAllOfTraffic>
    offSingleRedGreenWalk();
 8001dce:	f7fe fca7 	bl	8000720 <offSingleRedGreenWalk>
    initStatusTuningMode();
 8001dd2:	f7ff ffc9 	bl	8001d68 <initStatusTuningMode>
    update7SEGBufferMode(3);
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f7fe fc2a 	bl	8000630 <update7SEGBufferMode>
    runTuningMode();
 8001ddc:	f7ff ff62 	bl	8001ca4 <runTuningMode>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200000c4 	.word	0x200000c4

08001de8 <modifyTuningMode>:

void modifyTuningMode()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <modifyTuningMode+0xb4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d034      	beq.n	8001e5e <modifyTuningMode+0x76>
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	dc49      	bgt.n	8001e8c <modifyTuningMode+0xa4>
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d002      	beq.n	8001e02 <modifyTuningMode+0x1a>
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d017      	beq.n	8001e30 <modifyTuningMode+0x48>
            }
            update7SEGBufferTraffic1(tempDurationLedGreen);
            update7SEGBufferTraffic2(tempDurationLedGreen);
            break;
        default:
            break;
 8001e00:	e044      	b.n	8001e8c <modifyTuningMode+0xa4>
            tempDurationLedRed++;
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <modifyTuningMode+0xb8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <modifyTuningMode+0xb8>)
 8001e0a:	6013      	str	r3, [r2, #0]
            if (tempDurationLedRed > 99)
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <modifyTuningMode+0xb8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b63      	cmp	r3, #99	; 0x63
 8001e12:	dd02      	ble.n	8001e1a <modifyTuningMode+0x32>
                tempDurationLedRed = 0;
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <modifyTuningMode+0xb8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedRed);
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <modifyTuningMode+0xb8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fbee 	bl	8000600 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedRed);
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <modifyTuningMode+0xb8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fbf5 	bl	8000618 <update7SEGBufferTraffic2>
            break;
 8001e2e:	e02e      	b.n	8001e8e <modifyTuningMode+0xa6>
            tempDurationLedYellow++;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <modifyTuningMode+0xbc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <modifyTuningMode+0xbc>)
 8001e38:	6013      	str	r3, [r2, #0]
            if (tempDurationLedYellow > 99)
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <modifyTuningMode+0xbc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b63      	cmp	r3, #99	; 0x63
 8001e40:	dd02      	ble.n	8001e48 <modifyTuningMode+0x60>
                tempDurationLedYellow = 0;
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <modifyTuningMode+0xbc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedYellow);
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <modifyTuningMode+0xbc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fbd7 	bl	8000600 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedYellow);
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <modifyTuningMode+0xbc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fbde 	bl	8000618 <update7SEGBufferTraffic2>
            break;
 8001e5c:	e017      	b.n	8001e8e <modifyTuningMode+0xa6>
            tempDurationLedGreen++;
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <modifyTuningMode+0xc0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <modifyTuningMode+0xc0>)
 8001e66:	6013      	str	r3, [r2, #0]
            if (tempDurationLedGreen > 99)
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <modifyTuningMode+0xc0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b63      	cmp	r3, #99	; 0x63
 8001e6e:	dd02      	ble.n	8001e76 <modifyTuningMode+0x8e>
                tempDurationLedGreen = 0;
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <modifyTuningMode+0xc0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedGreen);
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <modifyTuningMode+0xc0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fbc0 	bl	8000600 <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedGreen);
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <modifyTuningMode+0xc0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fbc7 	bl	8000618 <update7SEGBufferTraffic2>
            break;
 8001e8a:	e000      	b.n	8001e8e <modifyTuningMode+0xa6>
            break;
 8001e8c:	bf00      	nop
    }
    printTerminalInfoModeTraffic1();
 8001e8e:	f000 f909 	bl	80020a4 <printTerminalInfoModeTraffic1>
	printTerminalInfoTraffic2();
 8001e92:	f000 f8cd 	bl	8002030 <printTerminalInfoTraffic2>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200004ac 	.word	0x200004ac
 8001ea0:	20000054 	.word	0x20000054
 8001ea4:	2000005c 	.word	0x2000005c
 8001ea8:	20000058 	.word	0x20000058

08001eac <saveTuningMode>:

void saveTuningMode()
{
 8001eac:	b5b0      	push	{r4, r5, r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
    if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <saveTuningMode+0xc8>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <saveTuningMode+0xcc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	441a      	add	r2, r3
 8001ebc:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <saveTuningMode+0xd0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d039      	beq.n	8001f38 <saveTuningMode+0x8c>
    {
        switch (statusTuningMode)
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <saveTuningMode+0xd4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d117      	bne.n	8001efc <saveTuningMode+0x50>
        {
            case GREENTUNING:
                update7SEGBufferTraffic1(88);
 8001ecc:	2058      	movs	r0, #88	; 0x58
 8001ece:	f7fe fb97 	bl	8000600 <update7SEGBufferTraffic1>
                update7SEGBufferTraffic2(88);
 8001ed2:	2058      	movs	r0, #88	; 0x58
 8001ed4:	f7fe fba0 	bl	8000618 <update7SEGBufferTraffic2>
                update7SEGBufferMode(8);
 8001ed8:	2008      	movs	r0, #8
 8001eda:	f7fe fba9 	bl	8000630 <update7SEGBufferMode>
                onAllSingLEDs();
 8001ede:	f7fe fbe3 	bl	80006a8 <onAllSingLEDs>
                tempDurationLedGreen = durationLedGreen;
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <saveTuningMode+0xd8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <saveTuningMode+0xcc>)
 8001ee8:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <saveTuningMode+0xdc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <saveTuningMode+0xd0>)
 8001ef0:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <saveTuningMode+0xe0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <saveTuningMode+0xc8>)
 8001ef8:	6013      	str	r3, [r2, #0]
                break;
 8001efa:	e00c      	b.n	8001f16 <saveTuningMode+0x6a>
            default:
                tempDurationLedGreen = durationLedGreen;
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <saveTuningMode+0xd8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <saveTuningMode+0xcc>)
 8001f02:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <saveTuningMode+0xdc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <saveTuningMode+0xd0>)
 8001f0a:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <saveTuningMode+0xe0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <saveTuningMode+0xc8>)
 8001f12:	6013      	str	r3, [r2, #0]
                break;
 8001f14:	bf00      	nop
        }
        uint8_t str[]="!SAVE_VALUE_FAIL#\n\n";
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <saveTuningMode+0xe4>)
 8001f18:	f107 0414 	add.w	r4, r7, #20
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f22:	682b      	ldr	r3, [r5, #0]
 8001f24:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, str, sizeof(str), 1000);
 8001f26:	f107 0114 	add.w	r1, r7, #20
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	2214      	movs	r2, #20
 8001f30:	4818      	ldr	r0, [pc, #96]	; (8001f94 <saveTuningMode+0xe8>)
 8001f32:	f002 f8ff 	bl	8004134 <HAL_UART_Transmit>
        durationLedRed = tempDurationLedRed;
        durationLedYellow = tempDurationLedYellow;
        uint8_t str[]="!SAVE_VALUE_PASS#\n\n";
        HAL_UART_Transmit(&huart2, str, sizeof(str), 1000);
    }
}
 8001f36:	e019      	b.n	8001f6c <saveTuningMode+0xc0>
        durationLedGreen = tempDurationLedGreen;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <saveTuningMode+0xcc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <saveTuningMode+0xd8>)
 8001f3e:	6013      	str	r3, [r2, #0]
        durationLedRed = tempDurationLedRed;
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <saveTuningMode+0xd0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <saveTuningMode+0xdc>)
 8001f46:	6013      	str	r3, [r2, #0]
        durationLedYellow = tempDurationLedYellow;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <saveTuningMode+0xc8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <saveTuningMode+0xe0>)
 8001f4e:	6013      	str	r3, [r2, #0]
        uint8_t str[]="!SAVE_VALUE_PASS#\n\n";
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <saveTuningMode+0xec>)
 8001f52:	463c      	mov	r4, r7
 8001f54:	461d      	mov	r5, r3
 8001f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	6023      	str	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, str, sizeof(str), 1000);
 8001f5e:	4639      	mov	r1, r7
 8001f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f64:	2214      	movs	r2, #20
 8001f66:	480b      	ldr	r0, [pc, #44]	; (8001f94 <saveTuningMode+0xe8>)
 8001f68:	f002 f8e4 	bl	8004134 <HAL_UART_Transmit>
}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}
 8001f74:	2000005c 	.word	0x2000005c
 8001f78:	20000058 	.word	0x20000058
 8001f7c:	20000054 	.word	0x20000054
 8001f80:	200004ac 	.word	0x200004ac
 8001f84:	20000064 	.word	0x20000064
 8001f88:	20000060 	.word	0x20000060
 8001f8c:	20000068 	.word	0x20000068
 8001f90:	08004e04 	.word	0x08004e04
 8001f94:	200004b0 	.word	0x200004b0
 8001f98:	08004e18 	.word	0x08004e18

08001f9c <animationTuningMode>:

void animationTuningMode()
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <animationTuningMode+0x3c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d814      	bhi.n	8001fd2 <animationTuningMode+0x36>
 8001fa8:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <animationTuningMode+0x14>)
 8001faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fae:	bf00      	nop
 8001fb0:	08001fd3 	.word	0x08001fd3
 8001fb4:	08001fc1 	.word	0x08001fc1
 8001fb8:	08001fc7 	.word	0x08001fc7
 8001fbc:	08001fcd 	.word	0x08001fcd
    {
    case INITMODE:
        break;
    case REDTUNING:
        blinkingRED();
 8001fc0:	f7fe fb4e 	bl	8000660 <blinkingRED>
        break;
 8001fc4:	e006      	b.n	8001fd4 <animationTuningMode+0x38>
    case YELLOWTUNING:
        blinkingYELLOW();
 8001fc6:	f7fe fb3f 	bl	8000648 <blinkingYELLOW>
        break;
 8001fca:	e003      	b.n	8001fd4 <animationTuningMode+0x38>
    case GREENTUNING:
        blinkingGREEN();
 8001fcc:	f7fe fb54 	bl	8000678 <blinkingGREEN>
        break;
 8001fd0:	e000      	b.n	8001fd4 <animationTuningMode+0x38>
    default:
        break;
 8001fd2:	bf00      	nop
    }
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200004ac 	.word	0x200004ac

08001fdc <MX_USART2_UART_Init>:
#include "deviceDriver7Segment.h"
#include <stdlib.h>
UART_HandleTypeDef huart2;

void MX_USART2_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <MX_USART2_UART_Init+0x50>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_USART2_UART_Init+0x4c>)
 8002014:	f002 f83e 	bl	8004094 <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800201e:	f7fe fd89 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200004b0 	.word	0x200004b0
 800202c:	40004400 	.word	0x40004400

08002030 <printTerminalInfoTraffic2>:


void printTerminalInfoTraffic2()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <printTerminalInfoTraffic2+0x64>)
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002040:	6018      	str	r0, [r3, #0]
 8002042:	3304      	adds	r3, #4
 8002044:	8019      	strh	r1, [r3, #0]
 8002046:	3302      	adds	r3, #2
 8002048:	0c0a      	lsrs	r2, r1, #16
 800204a:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\n\n";
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <printTerminalInfoTraffic2+0x68>)
 800204e:	617b      	str	r3, [r7, #20]

	char valueTraffic2[20];
	itoa(led_buffer[1], valueTraffic2, 10);
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <printTerminalInfoTraffic2+0x6c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4639      	mov	r1, r7
 8002056:	220a      	movs	r2, #10
 8002058:	4618      	mov	r0, r3
 800205a:	f002 fe7b 	bl	8004d54 <itoa>

	HAL_UART_Transmit(&huart2, str01, sizeof(str01), 1000);
 800205e:	f107 0118 	add.w	r1, r7, #24
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	2207      	movs	r2, #7
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <printTerminalInfoTraffic2+0x70>)
 800206a:	f002 f863 	bl	8004134 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)valueTraffic2, 2, 1000);
 800206e:	4639      	mov	r1, r7
 8002070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002074:	2202      	movs	r2, #2
 8002076:	480a      	ldr	r0, [pc, #40]	; (80020a0 <printTerminalInfoTraffic2+0x70>)
 8002078:	f002 f85c 	bl	8004134 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)endline, sizeof(endline), 1000);
 800207c:	f107 0114 	add.w	r1, r7, #20
 8002080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002084:	2204      	movs	r2, #4
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <printTerminalInfoTraffic2+0x70>)
 8002088:	f002 f854 	bl	8004134 <HAL_UART_Transmit>
}
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	08004e2c 	.word	0x08004e2c
 8002098:	000a0a23 	.word	0x000a0a23
 800209c:	200000b8 	.word	0x200000b8
 80020a0:	200004b0 	.word	0x200004b0

080020a4 <printTerminalInfoModeTraffic1>:
void printTerminalInfoModeTraffic1()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b090      	sub	sp, #64	; 0x40
 80020a8:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 80020aa:	4a30      	ldr	r2, [pc, #192]	; (800216c <printTerminalInfoModeTraffic1+0xc8>)
 80020ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b4:	6018      	str	r0, [r3, #0]
 80020b6:	3304      	adds	r3, #4
 80020b8:	8019      	strh	r1, [r3, #0]
 80020ba:	3302      	adds	r3, #2
 80020bc:	0c0a      	lsrs	r2, r1, #16
 80020be:	701a      	strb	r2, [r3, #0]
	uint8_t str2[]= "!MODE:";
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <printTerminalInfoModeTraffic1+0xcc>)
 80020c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ca:	6018      	str	r0, [r3, #0]
 80020cc:	3304      	adds	r3, #4
 80020ce:	8019      	strh	r1, [r3, #0]
 80020d0:	3302      	adds	r3, #2
 80020d2:	0c0a      	lsrs	r2, r1, #16
 80020d4:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\n";
 80020d6:	4a27      	ldr	r2, [pc, #156]	; (8002174 <printTerminalInfoModeTraffic1+0xd0>)
 80020d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4611      	mov	r1, r2
 80020e0:	8019      	strh	r1, [r3, #0]
 80020e2:	3302      	adds	r3, #2
 80020e4:	0c12      	lsrs	r2, r2, #16
 80020e6:	701a      	strb	r2, [r3, #0]

	char valueTraffic1[20];
	itoa(led_buffer[0], valueTraffic1, 10);
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <printTerminalInfoModeTraffic1+0xd4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f107 0118 	add.w	r1, r7, #24
 80020f0:	220a      	movs	r2, #10
 80020f2:	4618      	mov	r0, r3
 80020f4:	f002 fe2e 	bl	8004d54 <itoa>

	char valueMode[20];
	itoa(led_buffer[2], valueMode, 10);
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <printTerminalInfoModeTraffic1+0xd4>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	1d39      	adds	r1, r7, #4
 80020fe:	220a      	movs	r2, #10
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fe27 	bl	8004d54 <itoa>

	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8002106:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	2207      	movs	r2, #7
 8002110:	481a      	ldr	r0, [pc, #104]	; (800217c <printTerminalInfoModeTraffic1+0xd8>)
 8002112:	f002 f80f 	bl	8004134 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)valueMode, 2, 1000);
 8002116:	1d39      	adds	r1, r7, #4
 8002118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211c:	2202      	movs	r2, #2
 800211e:	4817      	ldr	r0, [pc, #92]	; (800217c <printTerminalInfoModeTraffic1+0xd8>)
 8002120:	f002 f808 	bl	8004134 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)endline, sizeof(endline), 1000);
 8002124:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212c:	2203      	movs	r2, #3
 800212e:	4813      	ldr	r0, [pc, #76]	; (800217c <printTerminalInfoModeTraffic1+0xd8>)
 8002130:	f002 f800 	bl	8004134 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, str01, sizeof(str01), 1000);
 8002134:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213c:	2207      	movs	r2, #7
 800213e:	480f      	ldr	r0, [pc, #60]	; (800217c <printTerminalInfoModeTraffic1+0xd8>)
 8002140:	f001 fff8 	bl	8004134 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)valueTraffic1, 2, 1000);
 8002144:	f107 0118 	add.w	r1, r7, #24
 8002148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214c:	2202      	movs	r2, #2
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <printTerminalInfoModeTraffic1+0xd8>)
 8002150:	f001 fff0 	bl	8004134 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)endline, sizeof(endline), 1000);
 8002154:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215c:	2203      	movs	r2, #3
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <printTerminalInfoModeTraffic1+0xd8>)
 8002160:	f001 ffe8 	bl	8004134 <HAL_UART_Transmit>
}
 8002164:	bf00      	nop
 8002166:	3740      	adds	r7, #64	; 0x40
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	08004e2c 	.word	0x08004e2c
 8002170:	08004e34 	.word	0x08004e34
 8002174:	08004e3c 	.word	0x08004e3c
 8002178:	200000b8 	.word	0x200000b8
 800217c:	200004b0 	.word	0x200004b0

08002180 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002180:	f7ff fd8a 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480b      	ldr	r0, [pc, #44]	; (80021b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002186:	490c      	ldr	r1, [pc, #48]	; (80021b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800219c:	4c09      	ldr	r4, [pc, #36]	; (80021c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021aa:	f002 fd97 	bl	8004cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ae:	f7fe fb51 	bl	8000854 <main>
  bx lr
 80021b2:	4770      	bx	lr
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80021bc:	08004e98 	.word	0x08004e98
  ldr r2, =_sbss
 80021c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80021c4:	200004fc 	.word	0x200004fc

080021c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC1_2_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_Init+0x28>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_Init+0x28>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021dc:	2003      	movs	r0, #3
 80021de:	f000 f923 	bl	8002428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e2:	200f      	movs	r0, #15
 80021e4:	f000 f808 	bl	80021f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e8:	f7ff fc2c 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40022000 	.word	0x40022000

080021f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_InitTick+0x54>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x58>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f93b 	bl	8002492 <HAL_SYSTICK_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00e      	b.n	8002244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d80a      	bhi.n	8002242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800222c:	2200      	movs	r2, #0
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f000 f903 	bl	800243e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002238:	4a06      	ldr	r2, [pc, #24]	; (8002254 <HAL_InitTick+0x5c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000006c 	.word	0x2000006c
 8002250:	20000074 	.word	0x20000074
 8002254:	20000070 	.word	0x20000070

08002258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x1c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_IncTick+0x20>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a03      	ldr	r2, [pc, #12]	; (8002278 <HAL_IncTick+0x20>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000074 	.word	0x20000074
 8002278:	200004f8 	.word	0x200004f8

0800227c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <HAL_GetTick+0x10>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	200004f8 	.word	0x200004f8

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4906      	ldr	r1, [pc, #24]	; (8002328 <__NVIC_EnableIRQ+0x34>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	; (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f4:	d301      	bcc.n	80023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <SysTick_Config+0x40>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002402:	210f      	movs	r1, #15
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f7ff ff90 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <SysTick_Config+0x40>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SysTick_Config+0x40>)
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	e000e010 	.word	0xe000e010

08002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff2d 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002450:	f7ff ff42 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 8002454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7ff ff90 	bl	8002380 <NVIC_EncodePriority>
 8002460:	4602      	mov	r2, r0
 8002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff5f 	bl	800232c <__NVIC_SetPriority>
}
 800246e:	bf00      	nop
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff35 	bl	80022f4 <__NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffa2 	bl	80023e4 <SysTick_Config>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d008      	beq.n	80024d4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e020      	b.n	8002516 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 020e 	bic.w	r2, r2, #14
 80024e2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	2101      	movs	r1, #1
 80024fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002502:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d005      	beq.n	8002544 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2204      	movs	r2, #4
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e051      	b.n	80025e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 020e 	bic.w	r2, r2, #14
 8002552:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <HAL_DMA_Abort_IT+0xd4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d029      	beq.n	80025c2 <HAL_DMA_Abort_IT+0xa2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <HAL_DMA_Abort_IT+0xd8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <HAL_DMA_Abort_IT+0x9e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <HAL_DMA_Abort_IT+0xdc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01a      	beq.n	80025b8 <HAL_DMA_Abort_IT+0x98>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <HAL_DMA_Abort_IT+0xe0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d012      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x92>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_DMA_Abort_IT+0xe4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00a      	beq.n	80025ac <HAL_DMA_Abort_IT+0x8c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_DMA_Abort_IT+0xe8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_DMA_Abort_IT+0x86>
 80025a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a4:	e00e      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025aa:	e00b      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b0:	e008      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b6:	e005      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025bc:	e002      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025be:	2310      	movs	r3, #16
 80025c0:	e000      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025c2:	2301      	movs	r3, #1
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_DMA_Abort_IT+0xec>)
 80025c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
    } 
  }
  return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40020008 	.word	0x40020008
 80025f8:	4002001c 	.word	0x4002001c
 80025fc:	40020030 	.word	0x40020030
 8002600:	40020044 	.word	0x40020044
 8002604:	40020058 	.word	0x40020058
 8002608:	4002006c 	.word	0x4002006c
 800260c:	40020000 	.word	0x40020000

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b08b      	sub	sp, #44	; 0x2c
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002622:	e169      	b.n	80028f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002624:	2201      	movs	r2, #1
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8158 	bne.w	80028f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a9a      	ldr	r2, [pc, #616]	; (80028b0 <HAL_GPIO_Init+0x2a0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d05e      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800264c:	4a98      	ldr	r2, [pc, #608]	; (80028b0 <HAL_GPIO_Init+0x2a0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d875      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002652:	4a98      	ldr	r2, [pc, #608]	; (80028b4 <HAL_GPIO_Init+0x2a4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d058      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002658:	4a96      	ldr	r2, [pc, #600]	; (80028b4 <HAL_GPIO_Init+0x2a4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d86f      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800265e:	4a96      	ldr	r2, [pc, #600]	; (80028b8 <HAL_GPIO_Init+0x2a8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d052      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002664:	4a94      	ldr	r2, [pc, #592]	; (80028b8 <HAL_GPIO_Init+0x2a8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d869      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800266a:	4a94      	ldr	r2, [pc, #592]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04c      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002670:	4a92      	ldr	r2, [pc, #584]	; (80028bc <HAL_GPIO_Init+0x2ac>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d863      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002676:	4a92      	ldr	r2, [pc, #584]	; (80028c0 <HAL_GPIO_Init+0x2b0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d046      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800267c:	4a90      	ldr	r2, [pc, #576]	; (80028c0 <HAL_GPIO_Init+0x2b0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d85d      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002682:	2b12      	cmp	r3, #18
 8002684:	d82a      	bhi.n	80026dc <HAL_GPIO_Init+0xcc>
 8002686:	2b12      	cmp	r3, #18
 8002688:	d859      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_GPIO_Init+0x80>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	0800270b 	.word	0x0800270b
 8002694:	080026e5 	.word	0x080026e5
 8002698:	080026f7 	.word	0x080026f7
 800269c:	08002739 	.word	0x08002739
 80026a0:	0800273f 	.word	0x0800273f
 80026a4:	0800273f 	.word	0x0800273f
 80026a8:	0800273f 	.word	0x0800273f
 80026ac:	0800273f 	.word	0x0800273f
 80026b0:	0800273f 	.word	0x0800273f
 80026b4:	0800273f 	.word	0x0800273f
 80026b8:	0800273f 	.word	0x0800273f
 80026bc:	0800273f 	.word	0x0800273f
 80026c0:	0800273f 	.word	0x0800273f
 80026c4:	0800273f 	.word	0x0800273f
 80026c8:	0800273f 	.word	0x0800273f
 80026cc:	0800273f 	.word	0x0800273f
 80026d0:	0800273f 	.word	0x0800273f
 80026d4:	080026ed 	.word	0x080026ed
 80026d8:	08002701 	.word	0x08002701
 80026dc:	4a79      	ldr	r2, [pc, #484]	; (80028c4 <HAL_GPIO_Init+0x2b4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026e2:	e02c      	b.n	800273e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	623b      	str	r3, [r7, #32]
          break;
 80026ea:	e029      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	3304      	adds	r3, #4
 80026f2:	623b      	str	r3, [r7, #32]
          break;
 80026f4:	e024      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	3308      	adds	r3, #8
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e01f      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	330c      	adds	r3, #12
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e01a      	b.n	8002740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002712:	2304      	movs	r3, #4
 8002714:	623b      	str	r3, [r7, #32]
          break;
 8002716:	e013      	b.n	8002740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002720:	2308      	movs	r3, #8
 8002722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	611a      	str	r2, [r3, #16]
          break;
 800272a:	e009      	b.n	8002740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800272c:	2308      	movs	r3, #8
 800272e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	615a      	str	r2, [r3, #20]
          break;
 8002736:	e003      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
          break;
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x130>
          break;
 800273e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d801      	bhi.n	800274a <HAL_GPIO_Init+0x13a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	e001      	b.n	800274e <HAL_GPIO_Init+0x13e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2bff      	cmp	r3, #255	; 0xff
 8002754:	d802      	bhi.n	800275c <HAL_GPIO_Init+0x14c>
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	e002      	b.n	8002762 <HAL_GPIO_Init+0x152>
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3b08      	subs	r3, #8
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	210f      	movs	r1, #15
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	6a39      	ldr	r1, [r7, #32]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	431a      	orrs	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80b1 	beq.w	80028f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002790:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <HAL_GPIO_Init+0x2b8>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a4c      	ldr	r2, [pc, #304]	; (80028c8 <HAL_GPIO_Init+0x2b8>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_GPIO_Init+0x2b8>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <HAL_GPIO_Init+0x2bc>)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a40      	ldr	r2, [pc, #256]	; (80028d0 <HAL_GPIO_Init+0x2c0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_GPIO_Init+0x1ec>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3f      	ldr	r2, [pc, #252]	; (80028d4 <HAL_GPIO_Init+0x2c4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00d      	beq.n	80027f8 <HAL_GPIO_Init+0x1e8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3e      	ldr	r2, [pc, #248]	; (80028d8 <HAL_GPIO_Init+0x2c8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <HAL_GPIO_Init+0x1e4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3d      	ldr	r2, [pc, #244]	; (80028dc <HAL_GPIO_Init+0x2cc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_GPIO_Init+0x1e0>
 80027ec:	2303      	movs	r3, #3
 80027ee:	e006      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e004      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027fc:	2300      	movs	r3, #0
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	f002 0203 	and.w	r2, r2, #3
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	4093      	lsls	r3, r2
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800280e:	492f      	ldr	r1, [pc, #188]	; (80028cc <HAL_GPIO_Init+0x2bc>)
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	492c      	ldr	r1, [pc, #176]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	43db      	mvns	r3, r3
 800283e:	4928      	ldr	r1, [pc, #160]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002840:	4013      	ands	r3, r2
 8002842:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	4922      	ldr	r1, [pc, #136]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	43db      	mvns	r3, r3
 8002866:	491e      	ldr	r1, [pc, #120]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002868:	4013      	ands	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4918      	ldr	r1, [pc, #96]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002886:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	43db      	mvns	r3, r3
 800288e:	4914      	ldr	r1, [pc, #80]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002890:	4013      	ands	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d021      	beq.n	80028e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <HAL_GPIO_Init+0x2d0>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
 80028ac:	e021      	b.n	80028f2 <HAL_GPIO_Init+0x2e2>
 80028ae:	bf00      	nop
 80028b0:	10320000 	.word	0x10320000
 80028b4:	10310000 	.word	0x10310000
 80028b8:	10220000 	.word	0x10220000
 80028bc:	10210000 	.word	0x10210000
 80028c0:	10120000 	.word	0x10120000
 80028c4:	10110000 	.word	0x10110000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40010800 	.word	0x40010800
 80028d4:	40010c00 	.word	0x40010c00
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40011400 	.word	0x40011400
 80028e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_GPIO_Init+0x304>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4909      	ldr	r1, [pc, #36]	; (8002914 <HAL_GPIO_Init+0x304>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	f47f ae8e 	bne.w	8002624 <HAL_GPIO_Init+0x14>
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	372c      	adds	r7, #44	; 0x2c
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40010400 	.word	0x40010400

08002918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e001      	b.n	800293a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	807b      	strh	r3, [r7, #2]
 8002952:	4613      	mov	r3, r2
 8002954:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002956:	787b      	ldrb	r3, [r7, #1]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295c:	887a      	ldrh	r2, [r7, #2]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002962:	e003      	b.n	800296c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	041a      	lsls	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	611a      	str	r2, [r3, #16]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002988:	887a      	ldrh	r2, [r7, #2]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	041a      	lsls	r2, r3, #16
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43d9      	mvns	r1, r3
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	400b      	ands	r3, r1
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	611a      	str	r2, [r3, #16]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e272      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8087 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d00c      	beq.n	80029ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d4:	4b8f      	ldr	r3, [pc, #572]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d112      	bne.n	8002a06 <HAL_RCC_OscConfig+0x5e>
 80029e0:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d10b      	bne.n	8002a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ee:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d06c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x12c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d168      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e24c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x76>
 8002a10:	4b80      	ldr	r3, [pc, #512]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7f      	ldr	r2, [pc, #508]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	e02e      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b7b      	ldr	r3, [pc, #492]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7a      	ldr	r2, [pc, #488]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b78      	ldr	r3, [pc, #480]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a77      	ldr	r2, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e01d      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0xbc>
 8002a4a:	4b72      	ldr	r3, [pc, #456]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a71      	ldr	r2, [pc, #452]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a64:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7ff fbfa 	bl	800227c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff fbf6 	bl	800227c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e200      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0xe4>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7ff fbe6 	bl	800227c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff fbe2 	bl	800227c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1ec      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x10c>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d063      	beq.n	8002baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae2:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aee:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x18c>
 8002afa:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x176>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1c0      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4939      	ldr	r1, [pc, #228]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7ff fb9b 	bl	800227c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7ff fb97 	bl	800227c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1a1      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4927      	ldr	r1, [pc, #156]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7ff fb7a 	bl	800227c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7ff fb76 	bl	800227c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e180      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03a      	beq.n	8002c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d019      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc4:	f7ff fb5a 	bl	800227c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7ff fb56 	bl	800227c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e160      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f000 face 	bl	800318c <RCC_Delay>
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf8:	f7ff fb40 	bl	800227c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfe:	e00f      	b.n	8002c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7ff fb3c 	bl	800227c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d908      	bls.n	8002c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e146      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	42420000 	.word	0x42420000
 8002c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e9      	bne.n	8002c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a6 	beq.w	8002d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b8b      	ldr	r3, [pc, #556]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a87      	ldr	r2, [pc, #540]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	61d3      	str	r3, [r2, #28]
 8002c56:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b82      	ldr	r3, [pc, #520]	; (8002e70 <HAL_RCC_OscConfig+0x4c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <HAL_RCC_OscConfig+0x4c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <HAL_RCC_OscConfig+0x4c8>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff fafd 	bl	800227c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7ff faf9 	bl	800227c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	; 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e103      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <HAL_RCC_OscConfig+0x4c8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x312>
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	e02d      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x334>
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a69      	ldr	r2, [pc, #420]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a66      	ldr	r2, [pc, #408]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f023 0304 	bic.w	r3, r3, #4
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	e01c      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCC_OscConfig+0x356>
 8002ce4:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a60      	ldr	r2, [pc, #384]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4a5d      	ldr	r2, [pc, #372]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cfe:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a5a      	ldr	r2, [pc, #360]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a57      	ldr	r2, [pc, #348]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d015      	beq.n	8002d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff faad 	bl	800227c <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7ff faa9 	bl	800227c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0b1      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ee      	beq.n	8002d26 <HAL_RCC_OscConfig+0x37e>
 8002d48:	e014      	b.n	8002d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff fa97 	bl	800227c <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7ff fa93 	bl	800227c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e09b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ee      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8087 	beq.w	8002e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d90:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d061      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d146      	bne.n	8002e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7ff fa67 	bl	800227c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db2:	f7ff fa63 	bl	800227c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e06d      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc4:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	d108      	bne.n	8002dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dda:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	4921      	ldr	r1, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a19      	ldr	r1, [r3, #32]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	491b      	ldr	r1, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7ff fa37 	bl	800227c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7ff fa33 	bl	800227c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e03d      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46a>
 8002e30:	e035      	b.n	8002e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff fa20 	bl	800227c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7ff fa1c 	bl	800227c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e026      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x498>
 8002e5e:	e01e      	b.n	8002e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e019      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40007000 	.word	0x40007000
 8002e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_OscConfig+0x500>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000

08002eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0d0      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d910      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b67      	ldr	r3, [pc, #412]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0207 	bic.w	r2, r3, #7
 8002ed6:	4965      	ldr	r1, [pc, #404]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d040      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d115      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e073      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06b      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4936      	ldr	r1, [pc, #216]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7ff f96e 	bl	800227c <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7ff f96a 	bl	800227c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e053      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d210      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	4922      	ldr	r1, [pc, #136]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f821 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490a      	ldr	r1, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x1c8>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1cc>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1d0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f8cc 	bl	80021f8 <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40022000 	.word	0x40022000
 8003070:	40021000 	.word	0x40021000
 8003074:	08004e40 	.word	0x08004e40
 8003078:	2000006c 	.word	0x2000006c
 800307c:	20000070 	.word	0x20000070

08003080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <HAL_RCC_GetSysClockFreq+0x94>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x30>
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d003      	beq.n	80030b6 <HAL_RCC_GetSysClockFreq+0x36>
 80030ae:	e027      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_RCC_GetSysClockFreq+0x98>)
 80030b2:	613b      	str	r3, [r7, #16]
      break;
 80030b4:	e027      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	0c9b      	lsrs	r3, r3, #18
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d010      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCC_GetSysClockFreq+0x94>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0c5b      	lsrs	r3, r3, #17
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	4a11      	ldr	r2, [pc, #68]	; (8003120 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_RCC_GetSysClockFreq+0x98>)
 80030e2:	fb03 f202 	mul.w	r2, r3, r2
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e004      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	613b      	str	r3, [r7, #16]
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RCC_GetSysClockFreq+0x98>)
 8003102:	613b      	str	r3, [r7, #16]
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	693b      	ldr	r3, [r7, #16]
}
 8003108:	4618      	mov	r0, r3
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	007a1200 	.word	0x007a1200
 800311c:	08004e58 	.word	0x08004e58
 8003120:	08004e68 	.word	0x08004e68
 8003124:	003d0900 	.word	0x003d0900

08003128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <HAL_RCC_GetHCLKFreq+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	2000006c 	.word	0x2000006c

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff2 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08004e50 	.word	0x08004e50

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffde 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	08004e50 	.word	0x08004e50

0800318c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <RCC_Delay+0x34>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <RCC_Delay+0x38>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0a5b      	lsrs	r3, r3, #9
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a8:	bf00      	nop
  }
  while (Delay --);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e5a      	subs	r2, r3, #1
 80031ae:	60fa      	str	r2, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <RCC_Delay+0x1c>
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	2000006c 	.word	0x2000006c
 80031c4:	10624dd3 	.word	0x10624dd3

080031c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e041      	b.n	800325e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe fc5a 	bl	8001aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 fc30 	bl	8003a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e03a      	b.n	80032f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_TIM_Base_Start_IT+0x98>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_TIM_Base_Start_IT+0x58>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d009      	beq.n	80032c0 <HAL_TIM_Base_Start_IT+0x58>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <HAL_TIM_Base_Start_IT+0x9c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_TIM_Base_Start_IT+0x58>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <HAL_TIM_Base_Start_IT+0xa0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d111      	bne.n	80032e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d010      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	e007      	b.n	80032f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800

0800330c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e041      	b.n	80033a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f839 	bl	80033aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 fb8e 	bl	8003a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <HAL_TIM_PWM_Start+0x24>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e022      	b.n	8003426 <HAL_TIM_PWM_Start+0x6a>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d109      	bne.n	80033fa <HAL_TIM_PWM_Start+0x3e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	bf14      	ite	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	2300      	moveq	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	e015      	b.n	8003426 <HAL_TIM_PWM_Start+0x6a>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d109      	bne.n	8003414 <HAL_TIM_PWM_Start+0x58>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e008      	b.n	8003426 <HAL_TIM_PWM_Start+0x6a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e05e      	b.n	80034ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d104      	bne.n	800343e <HAL_TIM_PWM_Start+0x82>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800343c:	e013      	b.n	8003466 <HAL_TIM_PWM_Start+0xaa>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d104      	bne.n	800344e <HAL_TIM_PWM_Start+0x92>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344c:	e00b      	b.n	8003466 <HAL_TIM_PWM_Start+0xaa>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d104      	bne.n	800345e <HAL_TIM_PWM_Start+0xa2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800345c:	e003      	b.n	8003466 <HAL_TIM_PWM_Start+0xaa>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2201      	movs	r2, #1
 800346c:	6839      	ldr	r1, [r7, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fd7c 	bl	8003f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <HAL_TIM_PWM_Start+0x138>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d107      	bne.n	800348e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_TIM_PWM_Start+0x138>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_TIM_PWM_Start+0xfa>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d009      	beq.n	80034b6 <HAL_TIM_PWM_Start+0xfa>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <HAL_TIM_PWM_Start+0x13c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_TIM_PWM_Start+0xfa>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <HAL_TIM_PWM_Start+0x140>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d111      	bne.n	80034da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d010      	beq.n	80034ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d8:	e007      	b.n	80034ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800

08003500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0202 	mvn.w	r2, #2
 800352c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa76 	bl	8003a34 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa69 	bl	8003a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fa78 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0204 	mvn.w	r2, #4
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa4c 	bl	8003a34 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa3f 	bl	8003a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fa4e 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0208 	mvn.w	r2, #8
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2204      	movs	r2, #4
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa22 	bl	8003a34 <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa15 	bl	8003a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa24 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b10      	cmp	r3, #16
 8003610:	d122      	bne.n	8003658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d11b      	bne.n	8003658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0210 	mvn.w	r2, #16
 8003628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2208      	movs	r2, #8
 800362e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f9f8 	bl	8003a34 <HAL_TIM_IC_CaptureCallback>
 8003644:	e005      	b.n	8003652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f9eb 	bl	8003a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f9fa 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0201 	mvn.w	r2, #1
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd fa4e 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d107      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fce9 	bl	8004082 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9be 	bl	8003a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0220 	mvn.w	r2, #32
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fcb4 	bl	8004070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e0ae      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	f200 809f 	bhi.w	800387c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003779 	.word	0x08003779
 8003748:	0800387d 	.word	0x0800387d
 800374c:	0800387d 	.word	0x0800387d
 8003750:	0800387d 	.word	0x0800387d
 8003754:	080037b9 	.word	0x080037b9
 8003758:	0800387d 	.word	0x0800387d
 800375c:	0800387d 	.word	0x0800387d
 8003760:	0800387d 	.word	0x0800387d
 8003764:	080037fb 	.word	0x080037fb
 8003768:	0800387d 	.word	0x0800387d
 800376c:	0800387d 	.word	0x0800387d
 8003770:	0800387d 	.word	0x0800387d
 8003774:	0800383b 	.word	0x0800383b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f9d6 	bl	8003b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0208 	orr.w	r2, r2, #8
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	619a      	str	r2, [r3, #24]
      break;
 80037b6:	e064      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa1c 	bl	8003bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
      break;
 80037f8:	e043      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fa65 	bl	8003cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0208 	orr.w	r2, r2, #8
 8003814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0204 	bic.w	r2, r2, #4
 8003824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	61da      	str	r2, [r3, #28]
      break;
 8003838:	e023      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 faaf 	bl	8003da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	021a      	lsls	r2, r3, #8
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	61da      	str	r2, [r3, #28]
      break;
 800387a:	e002      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_TIM_ConfigClockSource+0x1c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e0b4      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x186>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e8:	d03e      	beq.n	8003968 <HAL_TIM_ConfigClockSource+0xd4>
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	f200 8087 	bhi.w	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	f000 8086 	beq.w	8003a06 <HAL_TIM_ConfigClockSource+0x172>
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d87f      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b70      	cmp	r3, #112	; 0x70
 8003902:	d01a      	beq.n	800393a <HAL_TIM_ConfigClockSource+0xa6>
 8003904:	2b70      	cmp	r3, #112	; 0x70
 8003906:	d87b      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b60      	cmp	r3, #96	; 0x60
 800390a:	d050      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x11a>
 800390c:	2b60      	cmp	r3, #96	; 0x60
 800390e:	d877      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b50      	cmp	r3, #80	; 0x50
 8003912:	d03c      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xfa>
 8003914:	2b50      	cmp	r3, #80	; 0x50
 8003916:	d873      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d058      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x13a>
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d86f      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d064      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003924:	2b30      	cmp	r3, #48	; 0x30
 8003926:	d86b      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d060      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d867      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05c      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	2b10      	cmp	r3, #16
 8003936:	d05a      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	e062      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6899      	ldr	r1, [r3, #8]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f000 faf0 	bl	8003f2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800395c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	609a      	str	r2, [r3, #8]
      break;
 8003966:	e04f      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6899      	ldr	r1, [r3, #8]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f000 fad9 	bl	8003f2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398a:	609a      	str	r2, [r3, #8]
      break;
 800398c:	e03c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	461a      	mov	r2, r3
 800399c:	f000 fa50 	bl	8003e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2150      	movs	r1, #80	; 0x50
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 faa7 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80039ac:	e02c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f000 fa6e 	bl	8003e9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2160      	movs	r1, #96	; 0x60
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fa97 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80039cc:	e01c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	461a      	mov	r2, r3
 80039dc:	f000 fa30 	bl	8003e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2140      	movs	r1, #64	; 0x40
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fa87 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f000 fa7e 	bl	8003efa <TIM_ITRx_SetConfig>
      break;
 80039fe:	e003      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
	...

08003a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <TIM_Base_SetConfig+0xb8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00b      	beq.n	8003a9c <TIM_Base_SetConfig+0x30>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8a:	d007      	beq.n	8003a9c <TIM_Base_SetConfig+0x30>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a26      	ldr	r2, [pc, #152]	; (8003b28 <TIM_Base_SetConfig+0xbc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_Base_SetConfig+0x30>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a25      	ldr	r2, [pc, #148]	; (8003b2c <TIM_Base_SetConfig+0xc0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d108      	bne.n	8003aae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <TIM_Base_SetConfig+0xb8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00b      	beq.n	8003ace <TIM_Base_SetConfig+0x62>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abc:	d007      	beq.n	8003ace <TIM_Base_SetConfig+0x62>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <TIM_Base_SetConfig+0xbc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <TIM_Base_SetConfig+0x62>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <TIM_Base_SetConfig+0xc0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <TIM_Base_SetConfig+0xb8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d103      	bne.n	8003b14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	615a      	str	r2, [r3, #20]
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800

08003b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f023 0201 	bic.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0303 	bic.w	r3, r3, #3
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f023 0302 	bic.w	r3, r3, #2
 8003b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <TIM_OC1_SetConfig+0xc8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d10c      	bne.n	8003ba6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0308 	bic.w	r3, r3, #8
 8003b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <TIM_OC1_SetConfig+0xc8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d111      	bne.n	8003bd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	621a      	str	r2, [r3, #32]
}
 8003bec:	bf00      	nop
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40012c00 	.word	0x40012c00

08003bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f023 0210 	bic.w	r2, r3, #16
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0320 	bic.w	r3, r3, #32
 8003c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <TIM_OC2_SetConfig+0xd0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10d      	bne.n	8003c78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <TIM_OC2_SetConfig+0xd0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d113      	bne.n	8003ca8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	621a      	str	r2, [r3, #32]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	40012c00 	.word	0x40012c00

08003cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <TIM_OC3_SetConfig+0xd0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10d      	bne.n	8003d4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <TIM_OC3_SetConfig+0xd0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d113      	bne.n	8003d7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	621a      	str	r2, [r3, #32]
}
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40012c00 	.word	0x40012c00

08003da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	031b      	lsls	r3, r3, #12
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <TIM_OC4_SetConfig+0x98>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d109      	bne.n	8003e18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00

08003e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0201 	bic.w	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 030a 	bic.w	r3, r3, #10
 8003e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f023 0210 	bic.w	r2, r3, #16
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	031b      	lsls	r3, r3, #12
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	621a      	str	r2, [r3, #32]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f043 0307 	orr.w	r3, r3, #7
 8003f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b087      	sub	sp, #28
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	021a      	lsls	r2, r3, #8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	609a      	str	r2, [r3, #8]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	2201      	movs	r2, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	401a      	ands	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e046      	b.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d009      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a12      	ldr	r2, [pc, #72]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a10      	ldr	r2, [pc, #64]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10c      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800

08004070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd fd5e 	bl	8001b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fd71 	bl	8004bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800410c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	; 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b20      	cmp	r3, #32
 8004152:	d16d      	bne.n	8004230 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_UART_Transmit+0x2c>
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e066      	b.n	8004232 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2221      	movs	r2, #33	; 0x21
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004172:	f7fe f883 	bl	800227c <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	88fa      	ldrh	r2, [r7, #6]
 8004182:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418c:	d108      	bne.n	80041a0 <HAL_UART_Transmit+0x6c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	e003      	b.n	80041a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041a8:	e02a      	b.n	8004200 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 faf9 	bl	80047ac <UART_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e036      	b.n	8004232 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	3302      	adds	r3, #2
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e007      	b.n	80041f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	3301      	adds	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1cf      	bne.n	80041aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	2140      	movs	r1, #64	; 0x40
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 fac9 	bl	80047ac <UART_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e006      	b.n	8004232 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b0ba      	sub	sp, #232	; 0xe8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800427a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_UART_IRQHandler+0x66>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fbd1 	bl	8004a42 <UART_Receive_IT>
      return;
 80042a0:	e25b      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80de 	beq.w	8004468 <HAL_UART_IRQHandler+0x22c>
 80042ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80d1 	beq.w	8004468 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_UART_IRQHandler+0xae>
 80042d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_UART_IRQHandler+0xd2>
 80042f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f043 0202 	orr.w	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00b      	beq.n	8004332 <HAL_UART_IRQHandler+0xf6>
 800431a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f043 0204 	orr.w	r2, r3, #4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d011      	beq.n	8004362 <HAL_UART_IRQHandler+0x126>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800434a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f043 0208 	orr.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 81f2 	beq.w	8004750 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_UART_IRQHandler+0x14e>
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb5c 	bl	8004a42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_UART_IRQHandler+0x17a>
 80043ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d04f      	beq.n	8004456 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa66 	bl	8004888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d041      	beq.n	800444e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800440e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1d9      	bne.n	80043ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d013      	beq.n	8004446 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	4a7e      	ldr	r2, [pc, #504]	; (800461c <HAL_UART_IRQHandler+0x3e0>)
 8004424:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe f878 	bl	8002520 <HAL_DMA_Abort_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004440:	4610      	mov	r0, r2
 8004442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	e00e      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f99c 	bl	8004784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e00a      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f998 	bl	8004784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e006      	b.n	8004464 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f994 	bl	8004784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004462:	e175      	b.n	8004750 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	bf00      	nop
    return;
 8004466:	e173      	b.n	8004750 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	2b01      	cmp	r3, #1
 800446e:	f040 814f 	bne.w	8004710 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8148 	beq.w	8004710 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8141 	beq.w	8004710 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80b6 	beq.w	8004620 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8145 	beq.w	8004754 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044d2:	429a      	cmp	r2, r3
 80044d4:	f080 813e 	bcs.w	8004754 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	f000 8088 	beq.w	80045fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004502:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004518:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800451c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004524:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1d9      	bne.n	80044ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800455c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004560:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004564:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800456e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e1      	bne.n	8004538 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3314      	adds	r3, #20
 800457a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004598:	66fa      	str	r2, [r7, #108]	; 0x6c
 800459a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800459e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e3      	bne.n	8004574 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045cc:	f023 0310 	bic.w	r3, r3, #16
 80045d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045de:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e3      	bne.n	80045ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fd ff57 	bl	80024aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460a:	b29b      	uxth	r3, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8bf 	bl	8004796 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004618:	e09c      	b.n	8004754 <HAL_UART_IRQHandler+0x518>
 800461a:	bf00      	nop
 800461c:	0800494d 	.word	0x0800494d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004628:	b29b      	uxth	r3, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 808e 	beq.w	8004758 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800463c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8089 	beq.w	8004758 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800465c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800466a:	647a      	str	r2, [r7, #68]	; 0x44
 800466c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004670:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e3      	bne.n	8004646 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	623b      	str	r3, [r7, #32]
   return(result);
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046a2:	633a      	str	r2, [r7, #48]	; 0x30
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e3      	bne.n	800467e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046e8:	61fa      	str	r2, [r7, #28]
 80046ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	69b9      	ldr	r1, [r7, #24]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	617b      	str	r3, [r7, #20]
   return(result);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e3      	bne.n	80046c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004702:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f844 	bl	8004796 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800470e:	e023      	b.n	8004758 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <HAL_UART_IRQHandler+0x4f4>
 800471c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f923 	bl	8004974 <UART_Transmit_IT>
    return;
 800472e:	e014      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <HAL_UART_IRQHandler+0x51e>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f962 	bl	8004a12 <UART_EndTransmit_IT>
    return;
 800474e:	e004      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
    return;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
      return;
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HAL_UART_IRQHandler+0x51e>
      return;
 8004758:	bf00      	nop
  }
}
 800475a:	37e8      	adds	r7, #232	; 0xe8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b090      	sub	sp, #64	; 0x40
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4613      	mov	r3, r2
 80047ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047bc:	e050      	b.n	8004860 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d04c      	beq.n	8004860 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x30>
 80047cc:	f7fd fd56 	bl	800227c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047d8:	429a      	cmp	r2, r3
 80047da:	d241      	bcs.n	8004860 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047fc:	637a      	str	r2, [r7, #52]	; 0x34
 80047fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3314      	adds	r3, #20
 8004816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	613b      	str	r3, [r7, #16]
   return(result);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	63bb      	str	r3, [r7, #56]	; 0x38
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004830:	623a      	str	r2, [r7, #32]
 8004832:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	69f9      	ldr	r1, [r7, #28]
 8004836:	6a3a      	ldr	r2, [r7, #32]
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	61bb      	str	r3, [r7, #24]
   return(result);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e5      	bne.n	8004810 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e00f      	b.n	8004880 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	429a      	cmp	r2, r3
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	429a      	cmp	r2, r3
 800487c:	d09f      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3740      	adds	r7, #64	; 0x40
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b095      	sub	sp, #84	; 0x54
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048b0:	643a      	str	r2, [r7, #64]	; 0x40
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e5      	bne.n	8004890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3314      	adds	r3, #20
 80048ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	64bb      	str	r3, [r7, #72]	; 0x48
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3314      	adds	r3, #20
 80048e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d119      	bne.n	8004934 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f023 0310 	bic.w	r3, r3, #16
 8004916:	647b      	str	r3, [r7, #68]	; 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004920:	61ba      	str	r2, [r7, #24]
 8004922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6979      	ldr	r1, [r7, #20]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	613b      	str	r3, [r7, #16]
   return(result);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004942:	bf00      	nop
 8004944:	3754      	adds	r7, #84	; 0x54
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ff0c 	bl	8004784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b21      	cmp	r3, #33	; 0x21
 8004986:	d13e      	bne.n	8004a06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004990:	d114      	bne.n	80049bc <UART_Transmit_IT+0x48>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d110      	bne.n	80049bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	1c9a      	adds	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]
 80049ba:	e008      	b.n	80049ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6211      	str	r1, [r2, #32]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4619      	mov	r1, r3
 80049dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
  }
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fe94 	bl	8004760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b08c      	sub	sp, #48	; 0x30
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b22      	cmp	r3, #34	; 0x22
 8004a54:	f040 80ae 	bne.w	8004bb4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a60:	d117      	bne.n	8004a92 <UART_Receive_IT+0x50>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d113      	bne.n	8004a92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	1c9a      	adds	r2, r3, #2
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a90:	e026      	b.n	8004ae0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa4:	d007      	beq.n	8004ab6 <UART_Receive_IT+0x74>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10a      	bne.n	8004ac4 <UART_Receive_IT+0x82>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e008      	b.n	8004ad6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4619      	mov	r1, r3
 8004aee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d15d      	bne.n	8004bb0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0220 	bic.w	r2, r2, #32
 8004b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d135      	bne.n	8004ba6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f023 0310 	bic.w	r3, r3, #16
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b60:	623a      	str	r2, [r7, #32]
 8004b62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	69f9      	ldr	r1, [r7, #28]
 8004b66:	6a3a      	ldr	r2, [r7, #32]
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e5      	bne.n	8004b40 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d10a      	bne.n	8004b98 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fdf9 	bl	8004796 <HAL_UARTEx_RxEventCallback>
 8004ba4:	e002      	b.n	8004bac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff fde3 	bl	8004772 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e002      	b.n	8004bb6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
  }
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3730      	adds	r7, #48	; 0x30
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bfa:	f023 030c 	bic.w	r3, r3, #12
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2c      	ldr	r2, [pc, #176]	; (8004cd4 <UART_SetConfig+0x114>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d103      	bne.n	8004c30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fe fa9c 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	e002      	b.n	8004c36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7fe fa84 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004c34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	441a      	add	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <UART_SetConfig+0x118>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	0119      	lsls	r1, r3, #4
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009a      	lsls	r2, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c6c:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <UART_SetConfig+0x118>)
 8004c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2064      	movs	r0, #100	; 0x64
 8004c76:	fb00 f303 	mul.w	r3, r0, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <UART_SetConfig+0x118>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c8c:	4419      	add	r1, r3
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009a      	lsls	r2, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <UART_SetConfig+0x118>)
 8004ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	2064      	movs	r0, #100	; 0x64
 8004cae:	fb00 f303 	mul.w	r3, r0, r3
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	3332      	adds	r3, #50	; 0x32
 8004cb8:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <UART_SetConfig+0x118>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	440a      	add	r2, r1
 8004cca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40013800 	.word	0x40013800
 8004cd8:	51eb851f 	.word	0x51eb851f

08004cdc <__libc_init_array>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	2600      	movs	r6, #0
 8004ce0:	4d0c      	ldr	r5, [pc, #48]	; (8004d14 <__libc_init_array+0x38>)
 8004ce2:	4c0d      	ldr	r4, [pc, #52]	; (8004d18 <__libc_init_array+0x3c>)
 8004ce4:	1b64      	subs	r4, r4, r5
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	42a6      	cmp	r6, r4
 8004cea:	d109      	bne.n	8004d00 <__libc_init_array+0x24>
 8004cec:	f000 f87e 	bl	8004dec <_init>
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	4d0a      	ldr	r5, [pc, #40]	; (8004d1c <__libc_init_array+0x40>)
 8004cf4:	4c0a      	ldr	r4, [pc, #40]	; (8004d20 <__libc_init_array+0x44>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	42a6      	cmp	r6, r4
 8004cfc:	d105      	bne.n	8004d0a <__libc_init_array+0x2e>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d04:	4798      	blx	r3
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7ee      	b.n	8004ce8 <__libc_init_array+0xc>
 8004d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0e:	4798      	blx	r3
 8004d10:	3601      	adds	r6, #1
 8004d12:	e7f2      	b.n	8004cfa <__libc_init_array+0x1e>
 8004d14:	08004e90 	.word	0x08004e90
 8004d18:	08004e90 	.word	0x08004e90
 8004d1c:	08004e90 	.word	0x08004e90
 8004d20:	08004e94 	.word	0x08004e94

08004d24 <__itoa>:
 8004d24:	1e93      	subs	r3, r2, #2
 8004d26:	2b22      	cmp	r3, #34	; 0x22
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	d904      	bls.n	8004d38 <__itoa+0x14>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	461c      	mov	r4, r3
 8004d32:	700b      	strb	r3, [r1, #0]
 8004d34:	4620      	mov	r0, r4
 8004d36:	bd10      	pop	{r4, pc}
 8004d38:	2a0a      	cmp	r2, #10
 8004d3a:	d109      	bne.n	8004d50 <__itoa+0x2c>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	da07      	bge.n	8004d50 <__itoa+0x2c>
 8004d40:	232d      	movs	r3, #45	; 0x2d
 8004d42:	700b      	strb	r3, [r1, #0]
 8004d44:	2101      	movs	r1, #1
 8004d46:	4240      	negs	r0, r0
 8004d48:	4421      	add	r1, r4
 8004d4a:	f000 f80d 	bl	8004d68 <__utoa>
 8004d4e:	e7f1      	b.n	8004d34 <__itoa+0x10>
 8004d50:	2100      	movs	r1, #0
 8004d52:	e7f9      	b.n	8004d48 <__itoa+0x24>

08004d54 <itoa>:
 8004d54:	f7ff bfe6 	b.w	8004d24 <__itoa>

08004d58 <memset>:
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4402      	add	r2, r0
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	f803 1b01 	strb.w	r1, [r3], #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <__utoa>:
 8004d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6a:	b08b      	sub	sp, #44	; 0x2c
 8004d6c:	4605      	mov	r5, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	466e      	mov	r6, sp
 8004d72:	4c1d      	ldr	r4, [pc, #116]	; (8004de8 <__utoa+0x80>)
 8004d74:	f104 0c20 	add.w	ip, r4, #32
 8004d78:	4637      	mov	r7, r6
 8004d7a:	6820      	ldr	r0, [r4, #0]
 8004d7c:	6861      	ldr	r1, [r4, #4]
 8004d7e:	3408      	adds	r4, #8
 8004d80:	c703      	stmia	r7!, {r0, r1}
 8004d82:	4564      	cmp	r4, ip
 8004d84:	463e      	mov	r6, r7
 8004d86:	d1f7      	bne.n	8004d78 <__utoa+0x10>
 8004d88:	7921      	ldrb	r1, [r4, #4]
 8004d8a:	6820      	ldr	r0, [r4, #0]
 8004d8c:	7139      	strb	r1, [r7, #4]
 8004d8e:	1e91      	subs	r1, r2, #2
 8004d90:	2922      	cmp	r1, #34	; 0x22
 8004d92:	6038      	str	r0, [r7, #0]
 8004d94:	f04f 0100 	mov.w	r1, #0
 8004d98:	d904      	bls.n	8004da4 <__utoa+0x3c>
 8004d9a:	7019      	strb	r1, [r3, #0]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4618      	mov	r0, r3
 8004da0:	b00b      	add	sp, #44	; 0x2c
 8004da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da4:	1e58      	subs	r0, r3, #1
 8004da6:	4684      	mov	ip, r0
 8004da8:	fbb5 f7f2 	udiv	r7, r5, r2
 8004dac:	fb02 5617 	mls	r6, r2, r7, r5
 8004db0:	3628      	adds	r6, #40	; 0x28
 8004db2:	446e      	add	r6, sp
 8004db4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004db8:	460c      	mov	r4, r1
 8004dba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004dbe:	462e      	mov	r6, r5
 8004dc0:	42b2      	cmp	r2, r6
 8004dc2:	463d      	mov	r5, r7
 8004dc4:	f101 0101 	add.w	r1, r1, #1
 8004dc8:	d9ee      	bls.n	8004da8 <__utoa+0x40>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	545a      	strb	r2, [r3, r1]
 8004dce:	1919      	adds	r1, r3, r4
 8004dd0:	1aa5      	subs	r5, r4, r2
 8004dd2:	42aa      	cmp	r2, r5
 8004dd4:	dae3      	bge.n	8004d9e <__utoa+0x36>
 8004dd6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004dda:	780e      	ldrb	r6, [r1, #0]
 8004ddc:	3201      	adds	r2, #1
 8004dde:	7006      	strb	r6, [r0, #0]
 8004de0:	f801 5901 	strb.w	r5, [r1], #-1
 8004de4:	e7f4      	b.n	8004dd0 <__utoa+0x68>
 8004de6:	bf00      	nop
 8004de8:	08004e6a 	.word	0x08004e6a

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr
