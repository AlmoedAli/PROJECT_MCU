
ex_RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004720  08004720  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004720  08004720  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004720  08004720  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000078  080047a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080047a0  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b2d0  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002338  00000000  00000000  0002b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  0002d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afe  00000000  00000000  0002e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182e8  00000000  00000000  0002f036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd00  00000000  00000000  0004731e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a307  00000000  00000000  0005701e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038a4  00000000  00000000  000e1328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e4bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080046a4 	.word	0x080046a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080046a4 	.word	0x080046a4

0800014c <resetAllButton>:
int timerNormalState[3]= {0, 0, 0};
int eventButtonPressed[3]= {0, 0, 0};
int eventButtonDrop[3]= {0, 0, 0};

void resetAllButton()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i=0 ; i < 3; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e011      	b.n	800017c <resetAllButton+0x30>
	{
		eventButtonDrop[i]= 0;
 8000158:	4a0d      	ldr	r2, [pc, #52]	; (8000190 <resetAllButton+0x44>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2100      	movs	r1, #0
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		eventButtonPressed[i]= 0;
 8000162:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <resetAllButton+0x48>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2100      	movs	r1, #0
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timerNormalState[i]= 0;
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <resetAllButton+0x4c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2100      	movs	r1, #0
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0 ; i < 3; i++)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b02      	cmp	r3, #2
 8000180:	ddea      	ble.n	8000158 <resetAllButton+0xc>
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200000ac 	.word	0x200000ac
 8000194:	200000a0 	.word	0x200000a0
 8000198:	20000094 	.word	0x20000094

0800019c <checkEventButton>:

int checkEventButton(int indexButton)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	switch (indexButton)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	f000 80ab 	beq.w	8000302 <checkEventButton+0x166>
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	f300 80ec 	bgt.w	800038c <checkEventButton+0x1f0>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d003      	beq.n	80001c2 <checkEventButton+0x26>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d05b      	beq.n	8000278 <checkEventButton+0xdc>
 80001c0:	e0e4      	b.n	800038c <checkEventButton+0x1f0>
	{
		case 0:
			switch (eventButtonPressed[indexButton])
 80001c2:	4a76      	ldr	r2, [pc, #472]	; (800039c <checkEventButton+0x200>)
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ca:	2b03      	cmp	r3, #3
 80001cc:	d852      	bhi.n	8000274 <checkEventButton+0xd8>
 80001ce:	a201      	add	r2, pc, #4	; (adr r2, 80001d4 <checkEventButton+0x38>)
 80001d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d4:	080001e5 	.word	0x080001e5
 80001d8:	08000209 	.word	0x08000209
 80001dc:	0800022d 	.word	0x0800022d
 80001e0:	08000251 	.word	0x08000251
			{
			case 0:
				switch (eventButtonDrop[indexButton])
 80001e4:	4a6e      	ldr	r2, [pc, #440]	; (80003a0 <checkEventButton+0x204>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <checkEventButton+0x5a>
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d004      	beq.n	80001fe <checkEventButton+0x62>
				case 1:
					resetAllButton();
					return NOBUTTON;
					break;
				default:
					break;
 80001f4:	e007      	b.n	8000206 <checkEventButton+0x6a>
					resetAllButton();
 80001f6:	f7ff ffa9 	bl	800014c <resetAllButton>
					return BUTTON1LongPress;
 80001fa:	2305      	movs	r3, #5
 80001fc:	e0ca      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 80001fe:	f7ff ffa5 	bl	800014c <resetAllButton>
					return NOBUTTON;
 8000202:	230c      	movs	r3, #12
 8000204:	e0c6      	b.n	8000394 <checkEventButton+0x1f8>
				}
				break;
 8000206:	e036      	b.n	8000276 <checkEventButton+0xda>
			case 1:
				switch (eventButtonDrop[indexButton])
 8000208:	4a65      	ldr	r2, [pc, #404]	; (80003a0 <checkEventButton+0x204>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d002      	beq.n	800021a <checkEventButton+0x7e>
 8000214:	2b01      	cmp	r3, #1
 8000216:	d004      	beq.n	8000222 <checkEventButton+0x86>
				case 1:
					resetAllButton();
					return BUTTON1SinglePress;
					break;
				default:
					break;
 8000218:	e007      	b.n	800022a <checkEventButton+0x8e>
					resetAllButton();
 800021a:	f7ff ff97 	bl	800014c <resetAllButton>
					return BUTTON1LongPress;
 800021e:	2305      	movs	r3, #5
 8000220:	e0b8      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 8000222:	f7ff ff93 	bl	800014c <resetAllButton>
					return BUTTON1SinglePress;
 8000226:	2302      	movs	r3, #2
 8000228:	e0b4      	b.n	8000394 <checkEventButton+0x1f8>
				}
				break;
 800022a:	e024      	b.n	8000276 <checkEventButton+0xda>
			case 2:
				switch (eventButtonDrop[indexButton])
 800022c:	4a5c      	ldr	r2, [pc, #368]	; (80003a0 <checkEventButton+0x204>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d002      	beq.n	800023e <checkEventButton+0xa2>
 8000238:	2b02      	cmp	r3, #2
 800023a:	d004      	beq.n	8000246 <checkEventButton+0xaa>
				case 2:
					resetAllButton();
					return BUTTON1DoublePress;
					break;
				default:
					break;
 800023c:	e007      	b.n	800024e <checkEventButton+0xb2>
					resetAllButton();
 800023e:	f7ff ff85 	bl	800014c <resetAllButton>
					return BUTTON1DoublePress;
 8000242:	2303      	movs	r3, #3
 8000244:	e0a6      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 8000246:	f7ff ff81 	bl	800014c <resetAllButton>
					return BUTTON1DoublePress;
 800024a:	2303      	movs	r3, #3
 800024c:	e0a2      	b.n	8000394 <checkEventButton+0x1f8>
				}
				break;
 800024e:	e012      	b.n	8000276 <checkEventButton+0xda>
			case 3:
				switch (eventButtonDrop[indexButton])
 8000250:	4a53      	ldr	r2, [pc, #332]	; (80003a0 <checkEventButton+0x204>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b02      	cmp	r3, #2
 800025a:	d002      	beq.n	8000262 <checkEventButton+0xc6>
 800025c:	2b03      	cmp	r3, #3
 800025e:	d004      	beq.n	800026a <checkEventButton+0xce>
				case 3:
					resetAllButton();
					return BUTTON1TriplePress;
					break;
				default:
					break;
 8000260:	e007      	b.n	8000272 <checkEventButton+0xd6>
					resetAllButton();
 8000262:	f7ff ff73 	bl	800014c <resetAllButton>
					return BUTTON1TriplePress;
 8000266:	2304      	movs	r3, #4
 8000268:	e094      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 800026a:	f7ff ff6f 	bl	800014c <resetAllButton>
					return BUTTON1TriplePress;
 800026e:	2304      	movs	r3, #4
 8000270:	e090      	b.n	8000394 <checkEventButton+0x1f8>
				}
				break;
 8000272:	e000      	b.n	8000276 <checkEventButton+0xda>
			default:
				break;
 8000274:	bf00      	nop
			}
			break;
 8000276:	e08d      	b.n	8000394 <checkEventButton+0x1f8>
		case 1:
			switch (eventButtonPressed[indexButton])
 8000278:	4a48      	ldr	r2, [pc, #288]	; (800039c <checkEventButton+0x200>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b02      	cmp	r3, #2
 8000282:	d02a      	beq.n	80002da <checkEventButton+0x13e>
 8000284:	2b02      	cmp	r3, #2
 8000286:	dc3a      	bgt.n	80002fe <checkEventButton+0x162>
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <checkEventButton+0xf6>
 800028c:	2b01      	cmp	r3, #1
 800028e:	d012      	beq.n	80002b6 <checkEventButton+0x11a>
				default:
					break;
				}
				break;
			default:
				break;
 8000290:	e035      	b.n	80002fe <checkEventButton+0x162>
				switch (eventButtonDrop[indexButton])
 8000292:	4a43      	ldr	r2, [pc, #268]	; (80003a0 <checkEventButton+0x204>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <checkEventButton+0x108>
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d004      	beq.n	80002ac <checkEventButton+0x110>
					break;
 80002a2:	e007      	b.n	80002b4 <checkEventButton+0x118>
					resetAllButton();
 80002a4:	f7ff ff52 	bl	800014c <resetAllButton>
					return BUTTON2LongPress;
 80002a8:	2308      	movs	r3, #8
 80002aa:	e073      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 80002ac:	f7ff ff4e 	bl	800014c <resetAllButton>
					return NOBUTTON;
 80002b0:	230c      	movs	r3, #12
 80002b2:	e06f      	b.n	8000394 <checkEventButton+0x1f8>
				break;
 80002b4:	e024      	b.n	8000300 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 80002b6:	4a3a      	ldr	r2, [pc, #232]	; (80003a0 <checkEventButton+0x204>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d002      	beq.n	80002c8 <checkEventButton+0x12c>
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d004      	beq.n	80002d0 <checkEventButton+0x134>
					break;
 80002c6:	e007      	b.n	80002d8 <checkEventButton+0x13c>
					resetAllButton();
 80002c8:	f7ff ff40 	bl	800014c <resetAllButton>
					return BUTTON2LongPress;
 80002cc:	2308      	movs	r3, #8
 80002ce:	e061      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 80002d0:	f7ff ff3c 	bl	800014c <resetAllButton>
					return BUTTON2SinglePress;
 80002d4:	2306      	movs	r3, #6
 80002d6:	e05d      	b.n	8000394 <checkEventButton+0x1f8>
				break;
 80002d8:	e012      	b.n	8000300 <checkEventButton+0x164>
				switch (eventButtonDrop[indexButton])
 80002da:	4a31      	ldr	r2, [pc, #196]	; (80003a0 <checkEventButton+0x204>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d002      	beq.n	80002ec <checkEventButton+0x150>
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d004      	beq.n	80002f4 <checkEventButton+0x158>
					break;
 80002ea:	e007      	b.n	80002fc <checkEventButton+0x160>
					resetAllButton();
 80002ec:	f7ff ff2e 	bl	800014c <resetAllButton>
					return BUTTON2DoublePress;
 80002f0:	2307      	movs	r3, #7
 80002f2:	e04f      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 80002f4:	f7ff ff2a 	bl	800014c <resetAllButton>
					return BUTTON2DoublePress;
 80002f8:	2307      	movs	r3, #7
 80002fa:	e04b      	b.n	8000394 <checkEventButton+0x1f8>
				break;
 80002fc:	e000      	b.n	8000300 <checkEventButton+0x164>
				break;
 80002fe:	bf00      	nop
			}
			break;
 8000300:	e048      	b.n	8000394 <checkEventButton+0x1f8>
		case 2:
			switch (eventButtonPressed[indexButton])
 8000302:	4a26      	ldr	r2, [pc, #152]	; (800039c <checkEventButton+0x200>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d02a      	beq.n	8000364 <checkEventButton+0x1c8>
 800030e:	2b02      	cmp	r3, #2
 8000310:	dc3a      	bgt.n	8000388 <checkEventButton+0x1ec>
 8000312:	2b00      	cmp	r3, #0
 8000314:	d002      	beq.n	800031c <checkEventButton+0x180>
 8000316:	2b01      	cmp	r3, #1
 8000318:	d012      	beq.n	8000340 <checkEventButton+0x1a4>
				default:
					break;
				}
				break;
			default:
				break;
 800031a:	e035      	b.n	8000388 <checkEventButton+0x1ec>
				switch (eventButtonDrop[indexButton])
 800031c:	4a20      	ldr	r2, [pc, #128]	; (80003a0 <checkEventButton+0x204>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <checkEventButton+0x192>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d004      	beq.n	8000336 <checkEventButton+0x19a>
					break;
 800032c:	e007      	b.n	800033e <checkEventButton+0x1a2>
					resetAllButton();
 800032e:	f7ff ff0d 	bl	800014c <resetAllButton>
					return BUTTON3LongPress;
 8000332:	230b      	movs	r3, #11
 8000334:	e02e      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 8000336:	f7ff ff09 	bl	800014c <resetAllButton>
					return NOBUTTON;
 800033a:	230c      	movs	r3, #12
 800033c:	e02a      	b.n	8000394 <checkEventButton+0x1f8>
				break;
 800033e:	e024      	b.n	800038a <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 8000340:	4a17      	ldr	r2, [pc, #92]	; (80003a0 <checkEventButton+0x204>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <checkEventButton+0x1b6>
 800034c:	2b01      	cmp	r3, #1
 800034e:	d004      	beq.n	800035a <checkEventButton+0x1be>
					break;
 8000350:	e007      	b.n	8000362 <checkEventButton+0x1c6>
					resetAllButton();
 8000352:	f7ff fefb 	bl	800014c <resetAllButton>
					return BUTTON3LongPress;
 8000356:	230b      	movs	r3, #11
 8000358:	e01c      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 800035a:	f7ff fef7 	bl	800014c <resetAllButton>
					return BUTTON3SinglePress;
 800035e:	2309      	movs	r3, #9
 8000360:	e018      	b.n	8000394 <checkEventButton+0x1f8>
				break;
 8000362:	e012      	b.n	800038a <checkEventButton+0x1ee>
				switch (eventButtonDrop[indexButton])
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <checkEventButton+0x204>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d002      	beq.n	8000376 <checkEventButton+0x1da>
 8000370:	2b02      	cmp	r3, #2
 8000372:	d004      	beq.n	800037e <checkEventButton+0x1e2>
					break;
 8000374:	e007      	b.n	8000386 <checkEventButton+0x1ea>
					resetAllButton();
 8000376:	f7ff fee9 	bl	800014c <resetAllButton>
					return BUTTON3DoublePress;
 800037a:	230a      	movs	r3, #10
 800037c:	e00a      	b.n	8000394 <checkEventButton+0x1f8>
					resetAllButton();
 800037e:	f7ff fee5 	bl	800014c <resetAllButton>
					return BUTTON3DoublePress;
 8000382:	230a      	movs	r3, #10
 8000384:	e006      	b.n	8000394 <checkEventButton+0x1f8>
				break;
 8000386:	e000      	b.n	800038a <checkEventButton+0x1ee>
				break;
 8000388:	bf00      	nop
			}
			break;
 800038a:	e003      	b.n	8000394 <checkEventButton+0x1f8>
		default:
			resetAllButton();
 800038c:	f7ff fede 	bl	800014c <resetAllButton>
			return NOBUTTON;
 8000390:	230c      	movs	r3, #12
 8000392:	e7ff      	b.n	8000394 <checkEventButton+0x1f8>
			break;
	}
}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200000a0 	.word	0x200000a0
 80003a0:	200000ac 	.word	0x200000ac

080003a4 <getInputButton>:

int getInputButton()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 80003aa:	2300      	movs	r3, #0
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	e0c1      	b.n	8000534 <getInputButton+0x190>
	{
		state1Button[i]= state2Button[i];
 80003b0:	4a65      	ldr	r2, [pc, #404]	; (8000548 <getInputButton+0x1a4>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b8:	4964      	ldr	r1, [pc, #400]	; (800054c <getInputButton+0x1a8>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 80003c0:	4a63      	ldr	r2, [pc, #396]	; (8000550 <getInputButton+0x1ac>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c8:	495f      	ldr	r1, [pc, #380]	; (8000548 <getInputButton+0x1a4>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80003d0:	4a60      	ldr	r2, [pc, #384]	; (8000554 <getInputButton+0x1b0>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003d8:	495f      	ldr	r1, [pc, #380]	; (8000558 <getInputButton+0x1b4>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003e0:	4619      	mov	r1, r3
 80003e2:	4610      	mov	r0, r2
 80003e4:	f002 f83e 	bl	8002464 <HAL_GPIO_ReadPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4619      	mov	r1, r3
 80003ec:	4a58      	ldr	r2, [pc, #352]	; (8000550 <getInputButton+0x1ac>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 80003f4:	4a55      	ldr	r2, [pc, #340]	; (800054c <getInputButton+0x1a8>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003fc:	4952      	ldr	r1, [pc, #328]	; (8000548 <getInputButton+0x1a4>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000404:	429a      	cmp	r2, r3
 8000406:	f040 8092 	bne.w	800052e <getInputButton+0x18a>
 800040a:	4a4f      	ldr	r2, [pc, #316]	; (8000548 <getInputButton+0x1a4>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000412:	494f      	ldr	r1, [pc, #316]	; (8000550 <getInputButton+0x1ac>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800041a:	429a      	cmp	r2, r3
 800041c:	f040 8087 	bne.w	800052e <getInputButton+0x18a>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 8000420:	4a4e      	ldr	r2, [pc, #312]	; (800055c <getInputButton+0x1b8>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000428:	4948      	ldr	r1, [pc, #288]	; (800054c <getInputButton+0x1a8>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000430:	429a      	cmp	r2, r3
 8000432:	d031      	beq.n	8000498 <getInputButton+0xf4>
			{
				switch (state0Button[i])
 8000434:	4a49      	ldr	r2, [pc, #292]	; (800055c <getInputButton+0x1b8>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d002      	beq.n	8000446 <getInputButton+0xa2>
 8000440:	2b01      	cmp	r3, #1
 8000442:	d014      	beq.n	800046e <getInputButton+0xca>
						state0Button[i]= PRESS_STATE;
						eventButtonPressed[i]+= 1;
						timerLongPress[i]= 300;
						break;
					default:
						break;
 8000444:	e073      	b.n	800052e <getInputButton+0x18a>
						state0Button[i]= NORMAL_STATE;
 8000446:	4a45      	ldr	r2, [pc, #276]	; (800055c <getInputButton+0x1b8>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2101      	movs	r1, #1
 800044c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonDrop[i]+= 1;
 8000450:	4a43      	ldr	r2, [pc, #268]	; (8000560 <getInputButton+0x1bc>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	4941      	ldr	r1, [pc, #260]	; (8000560 <getInputButton+0x1bc>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerNormalState[i]= 10;
 8000462:	4a40      	ldr	r2, [pc, #256]	; (8000564 <getInputButton+0x1c0>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	210a      	movs	r1, #10
 8000468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800046c:	e05f      	b.n	800052e <getInputButton+0x18a>
						state0Button[i]= PRESS_STATE;
 800046e:	4a3b      	ldr	r2, [pc, #236]	; (800055c <getInputButton+0x1b8>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2100      	movs	r1, #0
 8000474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						eventButtonPressed[i]+= 1;
 8000478:	4a3b      	ldr	r2, [pc, #236]	; (8000568 <getInputButton+0x1c4>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000480:	1c5a      	adds	r2, r3, #1
 8000482:	4939      	ldr	r1, [pc, #228]	; (8000568 <getInputButton+0x1c4>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						timerLongPress[i]= 300;
 800048a:	4a38      	ldr	r2, [pc, #224]	; (800056c <getInputButton+0x1c8>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8000496:	e04a      	b.n	800052e <getInputButton+0x18a>

				}
			}
			else
			{
				if (state0Button[i]== NORMAL_STATE)
 8000498:	4a30      	ldr	r2, [pc, #192]	; (800055c <getInputButton+0x1b8>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d119      	bne.n	80004d8 <getInputButton+0x134>
				{
					if (timerNormalState[i] > 0)
 80004a4:	4a2f      	ldr	r2, [pc, #188]	; (8000564 <getInputButton+0x1c0>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	dd3e      	ble.n	800052e <getInputButton+0x18a>
					{
						timerNormalState[i]--;
 80004b0:	4a2c      	ldr	r2, [pc, #176]	; (8000564 <getInputButton+0x1c0>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b8:	1e5a      	subs	r2, r3, #1
 80004ba:	492a      	ldr	r1, [pc, #168]	; (8000564 <getInputButton+0x1c0>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerNormalState[i] <= 0)
 80004c2:	4a28      	ldr	r2, [pc, #160]	; (8000564 <getInputButton+0x1c0>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	dc2f      	bgt.n	800052e <getInputButton+0x18a>
						{
							return checkEventButton(i);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff fe64 	bl	800019c <checkEventButton>
 80004d4:	4603      	mov	r3, r0
 80004d6:	e032      	b.n	800053e <getInputButton+0x19a>
						}
					}
				}
				else   // state0Button[i]== PRESS_SATE;
				{
					if (timerLongPress[i] > 0)
 80004d8:	4a24      	ldr	r2, [pc, #144]	; (800056c <getInputButton+0x1c8>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	dd24      	ble.n	800052e <getInputButton+0x18a>
					{
						timerLongPress[i]--;
 80004e4:	4a21      	ldr	r2, [pc, #132]	; (800056c <getInputButton+0x1c8>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ec:	1e5a      	subs	r2, r3, #1
 80004ee:	491f      	ldr	r1, [pc, #124]	; (800056c <getInputButton+0x1c8>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (timerLongPress[i] <= 0)
 80004f6:	4a1d      	ldr	r2, [pc, #116]	; (800056c <getInputButton+0x1c8>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	dc15      	bgt.n	800052e <getInputButton+0x18a>
						{
							if (i== 0)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d105      	bne.n	8000514 <getInputButton+0x170>
								timerLongPress[i]= 300;
 8000508:	4a18      	ldr	r2, [pc, #96]	; (800056c <getInputButton+0x1c8>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000510:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							if (i== 1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d104      	bne.n	8000524 <getInputButton+0x180>
								timerLongPress[i]= 20;
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <getInputButton+0x1c8>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2114      	movs	r1, #20
 8000520:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							return checkEventButton(i);		
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe39 	bl	800019c <checkEventButton>
 800052a:	4603      	mov	r3, r0
 800052c:	e007      	b.n	800053e <getInputButton+0x19a>
	for (int i= 0; i < 3; i++)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b02      	cmp	r3, #2
 8000538:	f77f af3a 	ble.w	80003b0 <getInputButton+0xc>
					}
				}
			}
		}
	}
	return NOBUTTON;
 800053c:	230c      	movs	r3, #12
}
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000002c 	.word	0x2000002c
 800054c:	20000020 	.word	0x20000020
 8000550:	20000038 	.word	0x20000038
 8000554:	20000000 	.word	0x20000000
 8000558:	2000000c 	.word	0x2000000c
 800055c:	20000014 	.word	0x20000014
 8000560:	200000ac 	.word	0x200000ac
 8000564:	20000094 	.word	0x20000094
 8000568:	200000a0 	.word	0x200000a0
 800056c:	20000044 	.word	0x20000044

08000570 <update7SEGBuffer>:
int durationLedGreen = 3;
int durationLedYellow = 2;

int led_buffer[3]= {0, 0, 0};
void update7SEGBuffer(int time, int signalUpdate)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	switch (signalUpdate)
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d011      	beq.n	80005a4 <update7SEGBuffer+0x34>
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2b02      	cmp	r3, #2
 8000584:	dc12      	bgt.n	80005ac <update7SEGBuffer+0x3c>
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <update7SEGBuffer+0x24>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d004      	beq.n	800059c <update7SEGBuffer+0x2c>
		break;
	case UPDATEMODE:
		led_buffer[2] = time;
		break;
	default:
		break;
 8000592:	e00b      	b.n	80005ac <update7SEGBuffer+0x3c>
		led_buffer[0] = time;
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <update7SEGBuffer+0x48>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
		break;
 800059a:	e008      	b.n	80005ae <update7SEGBuffer+0x3e>
		led_buffer[1] = time;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <update7SEGBuffer+0x48>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6053      	str	r3, [r2, #4]
		break;
 80005a2:	e004      	b.n	80005ae <update7SEGBuffer+0x3e>
		led_buffer[2] = time;
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <update7SEGBuffer+0x48>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6093      	str	r3, [r2, #8]
		break;
 80005aa:	e000      	b.n	80005ae <update7SEGBuffer+0x3e>
		break;
 80005ac:	bf00      	nop
	}
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	200000b8 	.word	0x200000b8

080005bc <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC1);
 80005c4:	2100      	movs	r1, #0
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff ffd2 	bl	8000570 <update7SEGBuffer>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATETRAFFIC2);
 80005dc:	2101      	movs	r1, #1
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ffc6 	bl	8000570 <update7SEGBuffer>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, UPDATEMODE);
 80005f4:	2102      	movs	r1, #2
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ffba 	bl	8000570 <update7SEGBuffer>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWTUNING);
 8000608:	2105      	movs	r1, #5
 800060a:	2008      	movs	r0, #8
 800060c:	f000 fe1a 	bl	8001244 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, YELLOWTUNING);
 8000610:	2105      	movs	r1, #5
 8000612:	2009      	movs	r0, #9
 8000614:	f000 fe16 	bl	8001244 <controlSingleLedTraffic>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <blinkingRED>:

void blinkingRED()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDTUNING);
 8000620:	2103      	movs	r1, #3
 8000622:	2008      	movs	r0, #8
 8000624:	f000 fe0e 	bl	8001244 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, REDTUNING);
 8000628:	2103      	movs	r1, #3
 800062a:	2009      	movs	r0, #9
 800062c:	f000 fe0a 	bl	8001244 <controlSingleLedTraffic>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <blinkingGREEN>:

void blinkingGREEN()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENTUNING);
 8000638:	2104      	movs	r1, #4
 800063a:	2008      	movs	r0, #8
 800063c:	f000 fe02 	bl	8001244 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, GREENTUNING);
 8000640:	2104      	movs	r1, #4
 8000642:	2009      	movs	r0, #9
 8000644:	f000 fdfe 	bl	8001244 <controlSingleLedTraffic>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <offAllSingLEDs>:

void offAllSingLEDs()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, OFF);
 8000650:	2106      	movs	r1, #6
 8000652:	2008      	movs	r0, #8
 8000654:	f000 fdf6 	bl	8001244 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, OFF);
 8000658:	2106      	movs	r1, #6
 800065a:	2009      	movs	r0, #9
 800065c:	f000 fdf2 	bl	8001244 <controlSingleLedTraffic>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <onAllSingLEDs>:

void onAllSingLEDs()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, ON);
 8000668:	2107      	movs	r1, #7
 800066a:	2008      	movs	r0, #8
 800066c:	f000 fdea 	bl	8001244 <controlSingleLedTraffic>
	controlSingleLedTraffic(TRAFFIC2, ON);
 8000670:	2107      	movs	r1, #7
 8000672:	2009      	movs	r0, #9
 8000674:	f000 fde6 	bl	8001244 <controlSingleLedTraffic>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <onSingleRedTraffic1>:

void onSingleRedTraffic1()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, REDNORMAL);
 8000680:	2100      	movs	r1, #0
 8000682:	2008      	movs	r0, #8
 8000684:	f000 fdde 	bl	8001244 <controlSingleLedTraffic>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <onSingleYellowTraffic1>:

void onSingleYellowTraffic1()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, YELLOWNORMAL);
 8000690:	2102      	movs	r1, #2
 8000692:	2008      	movs	r0, #8
 8000694:	f000 fdd6 	bl	8001244 <controlSingleLedTraffic>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC1, GREENNORMAL);
 80006a0:	2101      	movs	r1, #1
 80006a2:	2008      	movs	r0, #8
 80006a4:	f000 fdce 	bl	8001244 <controlSingleLedTraffic>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, REDNORMAL);
 80006b0:	2100      	movs	r1, #0
 80006b2:	2009      	movs	r0, #9
 80006b4:	f000 fdc6 	bl	8001244 <controlSingleLedTraffic>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <onSingleYellowTraffic2>:

void onSingleYellowTraffic2()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, YELLOWNORMAL);
 80006c0:	2102      	movs	r1, #2
 80006c2:	2009      	movs	r0, #9
 80006c4:	f000 fdbe 	bl	8001244 <controlSingleLedTraffic>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	controlSingleLedTraffic(TRAFFIC2, GREENNORMAL);
 80006d0:	2101      	movs	r1, #1
 80006d2:	2009      	movs	r0, #9
 80006d4:	f000 fdb6 	bl	8001244 <controlSingleLedTraffic>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <offSingleRedGreenWalk>:

void offSingleRedGreenWalk()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	controlSingleLedWalk(OFFLEDWALK);
 80006e0:	200a      	movs	r0, #10
 80006e2:	f000 feb3 	bl	800144c <controlSingleLedWalk>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}

080006ea <onGreenOffRedWalk>:
void onGreenOffRedWalk()
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONGREENOFFREDWALK);
 80006ee:	200b      	movs	r0, #11
 80006f0:	f000 feac 	bl	800144c <controlSingleLedWalk>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <onRedOffGreenWalk>:
void onRedOffGreenWalk()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	controlSingleLedWalk(ONREDOFFGREENWALK);
 80006fc:	200c      	movs	r0, #12
 80006fe:	f000 fea5 	bl	800144c <controlSingleLedWalk>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <ledWalkOperationNormalMode>:

int numberFreq;
int statusLedWalkButton3Press;

void ledWalkOperationNormalMode()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    switch (statusTraffic1)
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <ledWalkOperationNormalMode+0x5c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d01a      	beq.n	800074a <ledWalkOperationNormalMode+0x42>
 8000714:	2b03      	cmp	r3, #3
 8000716:	dc22      	bgt.n	800075e <ledWalkOperationNormalMode+0x56>
 8000718:	2b01      	cmp	r3, #1
 800071a:	d002      	beq.n	8000722 <ledWalkOperationNormalMode+0x1a>
 800071c:	2b02      	cmp	r3, #2
 800071e:	d00a      	beq.n	8000736 <ledWalkOperationNormalMode+0x2e>
			offSingleRedGreenWalk();
		else	
			onRedOffGreenWalk();
        break;
    default:
        break;
 8000720:	e01d      	b.n	800075e <ledWalkOperationNormalMode+0x56>
		if (numberFreq <= 0)
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <ledWalkOperationNormalMode+0x60>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	dc02      	bgt.n	8000730 <ledWalkOperationNormalMode+0x28>
			offSingleRedGreenWalk();
 800072a:	f7ff ffd7 	bl	80006dc <offSingleRedGreenWalk>
        break;
 800072e:	e017      	b.n	8000760 <ledWalkOperationNormalMode+0x58>
			onGreenOffRedWalk();
 8000730:	f7ff ffdb 	bl	80006ea <onGreenOffRedWalk>
        break;
 8000734:	e014      	b.n	8000760 <ledWalkOperationNormalMode+0x58>
		if (numberFreq <= 0)
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <ledWalkOperationNormalMode+0x60>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	dc02      	bgt.n	8000744 <ledWalkOperationNormalMode+0x3c>
			offSingleRedGreenWalk();
 800073e:	f7ff ffcd 	bl	80006dc <offSingleRedGreenWalk>
        break;
 8000742:	e00d      	b.n	8000760 <ledWalkOperationNormalMode+0x58>
			onRedOffGreenWalk();
 8000744:	f7ff ffd8 	bl	80006f8 <onRedOffGreenWalk>
        break;
 8000748:	e00a      	b.n	8000760 <ledWalkOperationNormalMode+0x58>
		if (numberFreq <= 0)
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <ledWalkOperationNormalMode+0x60>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	dc02      	bgt.n	8000758 <ledWalkOperationNormalMode+0x50>
			offSingleRedGreenWalk();
 8000752:	f7ff ffc3 	bl	80006dc <offSingleRedGreenWalk>
        break;
 8000756:	e003      	b.n	8000760 <ledWalkOperationNormalMode+0x58>
			onRedOffGreenWalk();
 8000758:	f7ff ffce 	bl	80006f8 <onRedOffGreenWalk>
        break;
 800075c:	e000      	b.n	8000760 <ledWalkOperationNormalMode+0x58>
        break;
 800075e:	bf00      	nop
    }
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000160 	.word	0x20000160
 8000768:	200000c4 	.word	0x200000c4

0800076c <ledWalkOperationManualMode>:

void ledWalkOperationManualMode()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	switch (statusManualMode)
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <ledWalkOperationManualMode+0x7c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3b01      	subs	r3, #1
 8000776:	2b03      	cmp	r3, #3
 8000778:	d832      	bhi.n	80007e0 <ledWalkOperationManualMode+0x74>
 800077a:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <ledWalkOperationManualMode+0x14>)
 800077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000780:	08000791 	.word	0x08000791
 8000784:	080007cd 	.word	0x080007cd
 8000788:	080007b9 	.word	0x080007b9
 800078c:	080007a5 	.word	0x080007a5
	{
	case REDGREENMANUAL:
		if (numberFreq <= 0)
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <ledWalkOperationManualMode+0x80>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	dc02      	bgt.n	800079e <ledWalkOperationManualMode+0x32>
			offSingleRedGreenWalk();
 8000798:	f7ff ffa0 	bl	80006dc <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 800079c:	e021      	b.n	80007e2 <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 800079e:	f7ff ffa4 	bl	80006ea <onGreenOffRedWalk>
		break;
 80007a2:	e01e      	b.n	80007e2 <ledWalkOperationManualMode+0x76>
	case YELLOWREDMANUAL:
		if (numberFreq <= 0)
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <ledWalkOperationManualMode+0x80>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	dc02      	bgt.n	80007b2 <ledWalkOperationManualMode+0x46>
			offSingleRedGreenWalk();
 80007ac:	f7ff ff96 	bl	80006dc <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 80007b0:	e017      	b.n	80007e2 <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 80007b2:	f7ff ffa1 	bl	80006f8 <onRedOffGreenWalk>
		break;
 80007b6:	e014      	b.n	80007e2 <ledWalkOperationManualMode+0x76>
	case GREENREDMANUAL:
		if (numberFreq <= 0)
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <ledWalkOperationManualMode+0x80>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dc02      	bgt.n	80007c6 <ledWalkOperationManualMode+0x5a>
			offSingleRedGreenWalk();
 80007c0:	f7ff ff8c 	bl	80006dc <offSingleRedGreenWalk>
		else
			onRedOffGreenWalk();
		break;
 80007c4:	e00d      	b.n	80007e2 <ledWalkOperationManualMode+0x76>
			onRedOffGreenWalk();
 80007c6:	f7ff ff97 	bl	80006f8 <onRedOffGreenWalk>
		break;
 80007ca:	e00a      	b.n	80007e2 <ledWalkOperationManualMode+0x76>
	case REDYELLOWMANUAL:
		if (numberFreq <= 0)
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <ledWalkOperationManualMode+0x80>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dc02      	bgt.n	80007da <ledWalkOperationManualMode+0x6e>
			offSingleRedGreenWalk();
 80007d4:	f7ff ff82 	bl	80006dc <offSingleRedGreenWalk>
		else
			onGreenOffRedWalk();
		break;
 80007d8:	e003      	b.n	80007e2 <ledWalkOperationManualMode+0x76>
			onGreenOffRedWalk();
 80007da:	f7ff ff86 	bl	80006ea <onGreenOffRedWalk>
		break;
 80007de:	e000      	b.n	80007e2 <ledWalkOperationManualMode+0x76>
	default:
		break;
 80007e0:	bf00      	nop
	}
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000015c 	.word	0x2000015c
 80007ec:	200000c4 	.word	0x200000c4

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f001 fa92 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f8dc 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f000 f9d8 	bl	8000bb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000800:	f000 f914 	bl	8000a2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000804:	f000 f95e 	bl	8000ac4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000808:	f001 f972 	bl	8001af0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800080c:	4863      	ldr	r0, [pc, #396]	; (800099c <main+0x1ac>)
 800080e:	f002 fadb 	bl	8002dc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000812:	2104      	movs	r1, #4
 8000814:	4862      	ldr	r0, [pc, #392]	; (80009a0 <main+0x1b0>)
 8000816:	f002 fb81 	bl	8002f1c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fea4 	bl	8001568 <setTimer1>
  setTimer2(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f000 feb5 	bl	8001590 <setTimer2>
  setTimer3(50);
 8000826:	2032      	movs	r0, #50	; 0x32
 8000828:	f000 fec6 	bl	80015b8 <setTimer3>
	while (1)
	{
		if (flag1== 1) // flag for getInputButton
 800082c:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <main+0x1b4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	f040 8093 	bne.w	800095c <main+0x16c>
		{
			setTimer1(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f000 fe96 	bl	8001568 <setTimer1>
			switch (getInputButton())
 800083c:	f7ff fdb2 	bl	80003a4 <getInputButton>
 8000840:	4603      	mov	r3, r0
 8000842:	3b02      	subs	r3, #2
 8000844:	2b08      	cmp	r3, #8
 8000846:	f200 8088 	bhi.w	800095a <main+0x16a>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <main+0x60>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000875 	.word	0x08000875
 8000854:	08000881 	.word	0x08000881
 8000858:	0800088d 	.word	0x0800088d
 800085c:	08000899 	.word	0x08000899
 8000860:	080008c3 	.word	0x080008c3
 8000864:	080008ef 	.word	0x080008ef
 8000868:	0800090b 	.word	0x0800090b
 800086c:	08000927 	.word	0x08000927
 8000870:	0800094b 	.word	0x0800094b
			{
				case BUTTON1SinglePress:
					modeStatus= NORMALMODE;
 8000874:	4b4c      	ldr	r3, [pc, #304]	; (80009a8 <main+0x1b8>)
 8000876:	2206      	movs	r2, #6
 8000878:	601a      	str	r2, [r3, #0]
					beginNormalMode();
 800087a:	f000 fcb7 	bl	80011ec <beginNormalMode>
					break;
 800087e:	e06d      	b.n	800095c <main+0x16c>
				case BUTTON1DoublePress:
					modeStatus= MANUALMODE;
 8000880:	4b49      	ldr	r3, [pc, #292]	; (80009a8 <main+0x1b8>)
 8000882:	2207      	movs	r2, #7
 8000884:	601a      	str	r2, [r3, #0]
					beginManualMode();
 8000886:	f000 fac7 	bl	8000e18 <beginManualMode>
					break;
 800088a:	e067      	b.n	800095c <main+0x16c>
				case BUTTON1TriplePress:
					modeStatus= TUNINGMODE;
 800088c:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <main+0x1b8>)
 800088e:	2208      	movs	r2, #8
 8000890:	601a      	str	r2, [r3, #0]
					beginTuningMode();
 8000892:	f001 f845 	bl	8001920 <beginTuningMode>
					break;
 8000896:	e061      	b.n	800095c <main+0x16c>
				case BUTTON1LongPress:
					switch (modeStatus)
 8000898:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <main+0x1b8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b08      	cmp	r3, #8
 800089e:	d008      	beq.n	80008b2 <main+0xc2>
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	dc0c      	bgt.n	80008be <main+0xce>
 80008a4:	2b05      	cmp	r3, #5
 80008a6:	d007      	beq.n	80008b8 <main+0xc8>
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	d108      	bne.n	80008be <main+0xce>
					{
						case MANUALMODE:
							runManualModeFunction();
 80008ac:	f000 fa08 	bl	8000cc0 <runManualModeFunction>
							break;
 80008b0:	e006      	b.n	80008c0 <main+0xd0>
						case TUNINGMODE:
							runTuningMode();
 80008b2:	f000 ffc5 	bl	8001840 <runTuningMode>
							break;
 80008b6:	e003      	b.n	80008c0 <main+0xd0>
						case INITMODES:
							offAllSingLEDs();
 80008b8:	f7ff fec8 	bl	800064c <offAllSingLEDs>
							break;
 80008bc:	e000      	b.n	80008c0 <main+0xd0>
						default:
							break;
 80008be:	bf00      	nop
					}
					break;
 80008c0:	e04c      	b.n	800095c <main+0x16c>
				case BUTTON2SinglePress:
					switch (modeStatus)
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <main+0x1b8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d00c      	beq.n	80008e4 <main+0xf4>
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	dc0d      	bgt.n	80008ea <main+0xfa>
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d002      	beq.n	80008d8 <main+0xe8>
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	d003      	beq.n	80008de <main+0xee>
							break;
						case TUNINGMODE:
							modifyTuningMode();
							break;
						default:
							break;
 80008d6:	e008      	b.n	80008ea <main+0xfa>
							beginNormalMode();
 80008d8:	f000 fc88 	bl	80011ec <beginNormalMode>
							break;
 80008dc:	e006      	b.n	80008ec <main+0xfc>
							runManualModeFunction();
 80008de:	f000 f9ef 	bl	8000cc0 <runManualModeFunction>
							break;
 80008e2:	e003      	b.n	80008ec <main+0xfc>
							modifyTuningMode();
 80008e4:	f001 f82e 	bl	8001944 <modifyTuningMode>
							break;
 80008e8:	e000      	b.n	80008ec <main+0xfc>
							break;
 80008ea:	bf00      	nop
					}
					break;
 80008ec:	e036      	b.n	800095c <main+0x16c>
				case BUTTON2DoublePress:
					switch (modeStatus)
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <main+0x1b8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b05      	cmp	r3, #5
 80008f4:	d004      	beq.n	8000900 <main+0x110>
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d105      	bne.n	8000906 <main+0x116>
					{
						case TUNINGMODE:
							saveTuningMode();
 80008fa:	f001 f887 	bl	8001a0c <saveTuningMode>
							break;
 80008fe:	e003      	b.n	8000908 <main+0x118>
						case INITMODES:
							offAllSingLEDs();
 8000900:	f7ff fea4 	bl	800064c <offAllSingLEDs>
							break;
 8000904:	e000      	b.n	8000908 <main+0x118>
						default:
							break;
 8000906:	bf00      	nop
					}
					break;
 8000908:	e028      	b.n	800095c <main+0x16c>
				case BUTTON2LongPress:
					switch (modeStatus)
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <main+0x1b8>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b05      	cmp	r3, #5
 8000910:	d004      	beq.n	800091c <main+0x12c>
 8000912:	2b08      	cmp	r3, #8
 8000914:	d105      	bne.n	8000922 <main+0x132>
					{
						case TUNINGMODE:
							modifyTuningMode();
 8000916:	f001 f815 	bl	8001944 <modifyTuningMode>
							break;
 800091a:	e003      	b.n	8000924 <main+0x134>
						case INITMODES:
							offAllSingLEDs();
 800091c:	f7ff fe96 	bl	800064c <offAllSingLEDs>
							break;
 8000920:	e000      	b.n	8000924 <main+0x134>
						default:
							break;
 8000922:	bf00      	nop
					}
					break;
 8000924:	e01a      	b.n	800095c <main+0x16c>
				case BUTTON3SinglePress:
					switch (modeStatus)
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <main+0x1b8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b06      	cmp	r3, #6
 800092c:	d002      	beq.n	8000934 <main+0x144>
 800092e:	2b07      	cmp	r3, #7
 8000930:	d005      	beq.n	800093e <main+0x14e>
						case MANUALMODE:
							beginWalkManualMode();
							ledWalkOperationManualMode();
							break;
						default:
							break;
 8000932:	e009      	b.n	8000948 <main+0x158>
							beginWalkNormalMode();
 8000934:	f000 fc72 	bl	800121c <beginWalkNormalMode>
							ledWalkOperationNormalMode();
 8000938:	f7ff fee6 	bl	8000708 <ledWalkOperationNormalMode>
							break;
 800093c:	e004      	b.n	8000948 <main+0x158>
							beginWalkManualMode();
 800093e:	f000 fa7b 	bl	8000e38 <beginWalkManualMode>
							ledWalkOperationManualMode();
 8000942:	f7ff ff13 	bl	800076c <ledWalkOperationManualMode>
							break;
 8000946:	bf00      	nop

					}
					break;
 8000948:	e008      	b.n	800095c <main+0x16c>
				case BUTTON3DoublePress:
          modeStatus= INITMODES;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <main+0x1b8>)
 800094c:	2205      	movs	r2, #5
 800094e:	601a      	str	r2, [r3, #0]
					offAllSingLEDs();
 8000950:	f7ff fe7c 	bl	800064c <offAllSingLEDs>
					offSingleRedGreenWalk();
 8000954:	f7ff fec2 	bl	80006dc <offSingleRedGreenWalk>
					break;
 8000958:	e000      	b.n	800095c <main+0x16c>
				default:
					break;
 800095a:	bf00      	nop
			}
		}
		if (flag2 == 1) // flag for normalMode
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <main+0x1bc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10a      	bne.n	800097a <main+0x18a>
		{
			setTimer2(100);
 8000964:	2064      	movs	r0, #100	; 0x64
 8000966:	f000 fe13 	bl	8001590 <setTimer2>
			if (modeStatus == NORMALMODE)
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <main+0x1b8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b06      	cmp	r3, #6
 8000970:	d103      	bne.n	800097a <main+0x18a>
			{
				runNormalMode();
 8000972:	f000 fa85 	bl	8000e80 <runNormalMode>
				ledWalkOperationNormalMode();
 8000976:	f7ff fec7 	bl	8000708 <ledWalkOperationNormalMode>
			}
		}
		if (flag3 == 1) // flag for animationTuningMode
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <main+0x1c0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	f47f af54 	bne.w	800082c <main+0x3c>
		{
			setTimer3(50);
 8000984:	2032      	movs	r0, #50	; 0x32
 8000986:	f000 fe17 	bl	80015b8 <setTimer3>
			if (modeStatus== TUNINGMODE)
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <main+0x1b8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b08      	cmp	r3, #8
 8000990:	f47f af4c 	bne.w	800082c <main+0x3c>
			{
				animationTuningMode();
 8000994:	f001 f88c 	bl	8001ab0 <animationTuningMode>
		if (flag1== 1) // flag for getInputButton
 8000998:	e748      	b.n	800082c <main+0x3c>
 800099a:	bf00      	nop
 800099c:	200000cc 	.word	0x200000cc
 80009a0:	20000114 	.word	0x20000114
 80009a4:	20000184 	.word	0x20000184
 80009a8:	20000068 	.word	0x20000068
 80009ac:	2000018c 	.word	0x2000018c
 80009b0:	20000194 	.word	0x20000194

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b090      	sub	sp, #64	; 0x40
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	2228      	movs	r2, #40	; 0x28
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 fe42 	bl	800464c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009da:	2301      	movs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009de:	2310      	movs	r3, #16
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fd82 	bl	80024f4 <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009f6:	f000 f951 	bl	8000c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fff0 	bl	80029f8 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a1e:	f000 f93d 	bl	8000c9c <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3740      	adds	r7, #64	; 0x40
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000a52:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000a60:	2209      	movs	r2, #9
 8000a62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a70:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000a72:	f002 f959 	bl	8002d28 <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a7c:	f000 f90e 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000a8e:	f002 fcad 	bl	80033ec <HAL_TIM_ConfigClockSource>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a98:	f000 f900 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_TIM2_Init+0x94>)
 8000aaa:	f003 f82b 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 f8f2 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000cc 	.word	0x200000cc

08000ac4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af4:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000af6:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <MX_TIM3_Init+0xe8>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000afc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b0a:	2209      	movs	r2, #9
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b1a:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b1c:	f002 f904 	bl	8002d28 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b26:	f000 f8b9 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b38:	f002 fc58 	bl	80033ec <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b42:	f000 f8ab 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b48:	f002 f990 	bl	8002e6c <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b52:	f000 f8a3 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b66:	f002 ffcd 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b70:	f000 f894 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	; 0x60
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b8c:	f002 fb70 	bl	8003270 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b96:	f000 f881 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <MX_TIM3_Init+0xe4>)
 8000b9c:	f000 fd8a 	bl	80016b4 <HAL_TIM_MspPostInit>

}
 8000ba0:	bf00      	nop
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000114 	.word	0x20000114
 8000bac:	40000400 	.word	0x40000400

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_GPIO_Init+0xc8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, YELLOW1_Pin|GREEN1_Pin|RED2_Pin|GREEN2_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	210f      	movs	r1, #15
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <MX_GPIO_Init+0xcc>)
 8000c12:	f001 fc3e 	bl	8002492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|WALKGREEN_Pin|WALKRED_Pin|YELLOW2_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	21a9      	movs	r1, #169	; 0xa9
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000c1c:	f001 fc39 	bl	8002492 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YELLOW1_Pin GREEN1_Pin RED2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = YELLOW1_Pin|GREEN1_Pin|RED2_Pin|GREEN2_Pin;
 8000c20:	230f      	movs	r3, #15
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4811      	ldr	r0, [pc, #68]	; (8000c7c <MX_GPIO_Init+0xcc>)
 8000c38:	f001 fa90 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8000c3c:	2313      	movs	r3, #19
 8000c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_GPIO_Init+0xd4>)
 8000c50:	f001 fa84 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin WALKGREEN_Pin WALKRED_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|WALKGREEN_Pin|WALKRED_Pin|YELLOW2_Pin;
 8000c54:	23a9      	movs	r3, #169	; 0xa9
 8000c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000c6c:	f001 fa76 	bl	800215c <HAL_GPIO_Init>

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	40010c00 	.word	0x40010c00
 8000c84:	40010800 	.word	0x40010800

08000c88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	runTimer();
 8000c90:	f000 fc14 	bl	80014bc <runTimer>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <initStatusManualMode>:
#include "ledWalk.h"

int statusManualMode= INITMANUAL;

void initStatusManualMode()
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	statusManualMode= INITMANUAL;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <initStatusManualMode+0x14>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000015c 	.word	0x2000015c

08000cc0 <runManualModeFunction>:
void runManualModeFunction()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	switch (statusManualMode) 
 8000cc4:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <runManualModeFunction+0x14c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	f200 809b 	bhi.w	8000e04 <runManualModeFunction+0x144>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <runManualModeFunction+0x14>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000ce9 	.word	0x08000ce9
 8000cd8:	08000d03 	.word	0x08000d03
 8000cdc:	08000d3f 	.word	0x08000d3f
 8000ce0:	08000d81 	.word	0x08000d81
 8000ce4:	08000dc3 	.word	0x08000dc3
	{
		case INITMANUAL:
			statusManualMode= REDGREENMANUAL;
 8000ce8:	4b48      	ldr	r3, [pc, #288]	; (8000e0c <runManualModeFunction+0x14c>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
			update7SEGBufferMode(2);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff fc7c 	bl	80005ec <update7SEGBufferMode>
			offAllSingLEDs();
 8000cf4:	f7ff fcaa 	bl	800064c <offAllSingLEDs>
			onSingleRedTraffic1();
 8000cf8:	f7ff fcc0 	bl	800067c <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8000cfc:	f7ff fce6 	bl	80006cc <onSingleGreenTraffic2>
			break;
 8000d00:	e081      	b.n	8000e06 <runManualModeFunction+0x146>
		case REDGREENMANUAL:
			statusManualMode= REDYELLOWMANUAL;
 8000d02:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <runManualModeFunction+0x14c>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000d08:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <runManualModeFunction+0x14c>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <runManualModeFunction+0x150>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d10b      	bne.n	8000d2c <runManualModeFunction+0x6c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000d14:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <runManualModeFunction+0x154>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dd03      	ble.n	8000d24 <runManualModeFunction+0x64>
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <runManualModeFunction+0x154>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e001      	b.n	8000d28 <runManualModeFunction+0x68>
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <runManualModeFunction+0x154>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a3a      	ldr	r2, [pc, #232]	; (8000e14 <runManualModeFunction+0x154>)
 8000d2a:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000d2c:	f7ff fd1e 	bl	800076c <ledWalkOperationManualMode>
			offAllSingLEDs();
 8000d30:	f7ff fc8c 	bl	800064c <offAllSingLEDs>
			onSingleRedTraffic1();
 8000d34:	f7ff fca2 	bl	800067c <onSingleRedTraffic1>
			onSingleYellowTraffic2();
 8000d38:	f7ff fcc0 	bl	80006bc <onSingleYellowTraffic2>
			break;
 8000d3c:	e063      	b.n	8000e06 <runManualModeFunction+0x146>
		case REDYELLOWMANUAL:
			statusManualMode= GREENREDMANUAL;
 8000d3e:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <runManualModeFunction+0x14c>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <runManualModeFunction+0x14c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <runManualModeFunction+0x150>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d10b      	bne.n	8000d68 <runManualModeFunction+0xa8>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <runManualModeFunction+0x154>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	dd03      	ble.n	8000d60 <runManualModeFunction+0xa0>
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <runManualModeFunction+0x154>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	e001      	b.n	8000d64 <runManualModeFunction+0xa4>
 8000d60:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <runManualModeFunction+0x154>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2b      	ldr	r2, [pc, #172]	; (8000e14 <runManualModeFunction+0x154>)
 8000d66:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000d68:	f7ff fd00 	bl	800076c <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f7ff fc3d 	bl	80005ec <update7SEGBufferMode>
			offAllSingLEDs();
 8000d72:	f7ff fc6b 	bl	800064c <offAllSingLEDs>
			onSingleGreenTraffic1();
 8000d76:	f7ff fc91 	bl	800069c <onSingleGreenTraffic1>
			onSingleRedTraffic2();
 8000d7a:	f7ff fc97 	bl	80006ac <onSingleRedTraffic2>
			break;
 8000d7e:	e042      	b.n	8000e06 <runManualModeFunction+0x146>
		case GREENREDMANUAL:
			statusManualMode= YELLOWREDMANUAL;
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <runManualModeFunction+0x14c>)
 8000d82:	2204      	movs	r2, #4
 8000d84:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <runManualModeFunction+0x14c>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <runManualModeFunction+0x150>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d10b      	bne.n	8000daa <runManualModeFunction+0xea>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <runManualModeFunction+0x154>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	dd03      	ble.n	8000da2 <runManualModeFunction+0xe2>
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <runManualModeFunction+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	e001      	b.n	8000da6 <runManualModeFunction+0xe6>
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <runManualModeFunction+0x154>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <runManualModeFunction+0x154>)
 8000da8:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000daa:	f7ff fcdf 	bl	800076c <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff fc1c 	bl	80005ec <update7SEGBufferMode>
			offAllSingLEDs();
 8000db4:	f7ff fc4a 	bl	800064c <offAllSingLEDs>
			onSingleYellowTraffic1();
 8000db8:	f7ff fc68 	bl	800068c <onSingleYellowTraffic1>
			onSingleRedTraffic2();
 8000dbc:	f7ff fc76 	bl	80006ac <onSingleRedTraffic2>
			break;
 8000dc0:	e021      	b.n	8000e06 <runManualModeFunction+0x146>
		case YELLOWREDMANUAL:
			statusManualMode= REDGREENMANUAL;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <runManualModeFunction+0x14c>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
			if (statusManualMode== statusLedWalkButton3Press)
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <runManualModeFunction+0x14c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <runManualModeFunction+0x150>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d10b      	bne.n	8000dec <runManualModeFunction+0x12c>
				numberFreq= (numberFreq > 0)? numberFreq-1 :numberFreq;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <runManualModeFunction+0x154>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dd03      	ble.n	8000de4 <runManualModeFunction+0x124>
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <runManualModeFunction+0x154>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e001      	b.n	8000de8 <runManualModeFunction+0x128>
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <runManualModeFunction+0x154>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <runManualModeFunction+0x154>)
 8000dea:	6013      	str	r3, [r2, #0]
			ledWalkOperationManualMode();
 8000dec:	f7ff fcbe 	bl	800076c <ledWalkOperationManualMode>
			update7SEGBufferMode(2);
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff fbfb 	bl	80005ec <update7SEGBufferMode>
			offAllSingLEDs();
 8000df6:	f7ff fc29 	bl	800064c <offAllSingLEDs>
			onSingleRedTraffic1();
 8000dfa:	f7ff fc3f 	bl	800067c <onSingleRedTraffic1>
			onSingleGreenTraffic2();
 8000dfe:	f7ff fc65 	bl	80006cc <onSingleGreenTraffic2>
			break;
 8000e02:	e000      	b.n	8000e06 <runManualModeFunction+0x146>
		default:
			break;
 8000e04:	bf00      	nop
	}
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000015c 	.word	0x2000015c
 8000e10:	200000c8 	.word	0x200000c8
 8000e14:	200000c4 	.word	0x200000c4

08000e18 <beginManualMode>:

void beginManualMode()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <beginManualMode+0x1c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
	offSingleRedGreenWalk();
 8000e22:	f7ff fc5b 	bl	80006dc <offSingleRedGreenWalk>
	initStatusManualMode();
 8000e26:	f7ff ff3f 	bl	8000ca8 <initStatusManualMode>
	runManualModeFunction();
 8000e2a:	f7ff ff49 	bl	8000cc0 <runManualModeFunction>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000c4 	.word	0x200000c4

08000e38 <beginWalkManualMode>:

void beginWalkManualMode()
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	numberFreq= 3;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <beginWalkManualMode+0x1c>)
 8000e3e:	2203      	movs	r2, #3
 8000e40:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusManualMode;
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <beginWalkManualMode+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <beginWalkManualMode+0x24>)
 8000e48:	6013      	str	r3, [r2, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200000c4 	.word	0x200000c4
 8000e58:	2000015c 	.word	0x2000015c
 8000e5c:	200000c8 	.word	0x200000c8

08000e60 <initStatusNormalMode>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void initStatusNormalMode()
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	statusTraffic1 = INITNORMAL;
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <initStatusNormalMode+0x18>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	statusTraffic2 = INITNORMAL;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <initStatusNormalMode+0x1c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20000160 	.word	0x20000160
 8000e7c:	20000164 	.word	0x20000164

08000e80 <runNormalMode>:
void runNormalMode()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 8000e84:	4b9a      	ldr	r3, [pc, #616]	; (80010f0 <runNormalMode+0x270>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	f200 80df 	bhi.w	800104c <runNormalMode+0x1cc>
 8000e8e:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <runNormalMode+0x14>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000ecb 	.word	0x08000ecb
 8000e9c:	08000f4d 	.word	0x08000f4d
 8000ea0:	08000fcd 	.word	0x08000fcd
	{
	case INITNORMAL:
		counterLedRed1 = durationLedRed;
 8000ea4:	4b93      	ldr	r3, [pc, #588]	; (80010f4 <runNormalMode+0x274>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a93      	ldr	r2, [pc, #588]	; (80010f8 <runNormalMode+0x278>)
 8000eaa:	6013      	str	r3, [r2, #0]
		statusTraffic1 = REDNORMAL;
 8000eac:	4b90      	ldr	r3, [pc, #576]	; (80010f0 <runNormalMode+0x270>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 8000eb2:	f7ff fbe3 	bl	800067c <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 8000eb6:	4b90      	ldr	r3, [pc, #576]	; (80010f8 <runNormalMode+0x278>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fb7e 	bl	80005bc <update7SEGBufferTraffic1>
		printTerminalInfoMode();
 8000ec0:	f000 fe40 	bl	8001b44 <printTerminalInfoMode>
		printTerminalInfoModeTraffic1();
 8000ec4:	f000 fec2 	bl	8001c4c <printTerminalInfoModeTraffic1>
		break;
 8000ec8:	e0c7      	b.n	800105a <runNormalMode+0x1da>
	case REDNORMAL:
		if (counterLedRed1 > 0)
 8000eca:	4b8b      	ldr	r3, [pc, #556]	; (80010f8 <runNormalMode+0x278>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f340 80be 	ble.w	8001050 <runNormalMode+0x1d0>
		{
			counterLedRed1--;
 8000ed4:	4b88      	ldr	r3, [pc, #544]	; (80010f8 <runNormalMode+0x278>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	4a87      	ldr	r2, [pc, #540]	; (80010f8 <runNormalMode+0x278>)
 8000edc:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 8000ede:	4b86      	ldr	r3, [pc, #536]	; (80010f8 <runNormalMode+0x278>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	dc26      	bgt.n	8000f34 <runNormalMode+0xb4>
			{
				counterLedGreen1 = durationLedGreen;
 8000ee6:	4b85      	ldr	r3, [pc, #532]	; (80010fc <runNormalMode+0x27c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a85      	ldr	r2, [pc, #532]	; (8001100 <runNormalMode+0x280>)
 8000eec:	6013      	str	r3, [r2, #0]
				statusTraffic1 = GREENNORMAL;
 8000eee:	4b80      	ldr	r3, [pc, #512]	; (80010f0 <runNormalMode+0x270>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8000ef4:	4b83      	ldr	r3, [pc, #524]	; (8001104 <runNormalMode+0x284>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <runNormalMode+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d10b      	bne.n	8000f18 <runNormalMode+0x98>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8000f00:	4b81      	ldr	r3, [pc, #516]	; (8001108 <runNormalMode+0x288>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd03      	ble.n	8000f10 <runNormalMode+0x90>
 8000f08:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <runNormalMode+0x288>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e001      	b.n	8000f14 <runNormalMode+0x94>
 8000f10:	4b7d      	ldr	r3, [pc, #500]	; (8001108 <runNormalMode+0x288>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a7c      	ldr	r2, [pc, #496]	; (8001108 <runNormalMode+0x288>)
 8000f16:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8000f18:	f7ff fbf6 	bl	8000708 <ledWalkOperationNormalMode>
				onSingleGreenTraffic1();
 8000f1c:	f7ff fbbe 	bl	800069c <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8000f20:	4b77      	ldr	r3, [pc, #476]	; (8001100 <runNormalMode+0x280>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fb49 	bl	80005bc <update7SEGBufferTraffic1>
				printTerminalInfoMode();
 8000f2a:	f000 fe0b 	bl	8001b44 <printTerminalInfoMode>
				printTerminalInfoModeTraffic1();
 8000f2e:	f000 fe8d 	bl	8001c4c <printTerminalInfoModeTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
				printTerminalInfoMode();
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 8000f32:	e08d      	b.n	8001050 <runNormalMode+0x1d0>
				onSingleRedTraffic1();
 8000f34:	f7ff fba2 	bl	800067c <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8000f38:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <runNormalMode+0x278>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fb3d 	bl	80005bc <update7SEGBufferTraffic1>
				printTerminalInfoMode();
 8000f42:	f000 fdff 	bl	8001b44 <printTerminalInfoMode>
				printTerminalInfoModeTraffic1();
 8000f46:	f000 fe81 	bl	8001c4c <printTerminalInfoModeTraffic1>
		break;
 8000f4a:	e081      	b.n	8001050 <runNormalMode+0x1d0>
	case GREENNORMAL:
		if (counterLedGreen1 > 0)
 8000f4c:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <runNormalMode+0x280>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd7f      	ble.n	8001054 <runNormalMode+0x1d4>
		{
			counterLedGreen1--;
 8000f54:	4b6a      	ldr	r3, [pc, #424]	; (8001100 <runNormalMode+0x280>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a69      	ldr	r2, [pc, #420]	; (8001100 <runNormalMode+0x280>)
 8000f5c:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 8000f5e:	4b68      	ldr	r3, [pc, #416]	; (8001100 <runNormalMode+0x280>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	dc26      	bgt.n	8000fb4 <runNormalMode+0x134>
			{
				counterLedYellow1 = durationLedYellow;
 8000f66:	4b69      	ldr	r3, [pc, #420]	; (800110c <runNormalMode+0x28c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a69      	ldr	r2, [pc, #420]	; (8001110 <runNormalMode+0x290>)
 8000f6c:	6013      	str	r3, [r2, #0]
				statusTraffic1 = YELLOWNORMAL;
 8000f6e:	4b60      	ldr	r3, [pc, #384]	; (80010f0 <runNormalMode+0x270>)
 8000f70:	2203      	movs	r2, #3
 8000f72:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8000f74:	4b63      	ldr	r3, [pc, #396]	; (8001104 <runNormalMode+0x284>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b5d      	ldr	r3, [pc, #372]	; (80010f0 <runNormalMode+0x270>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d10b      	bne.n	8000f98 <runNormalMode+0x118>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8000f80:	4b61      	ldr	r3, [pc, #388]	; (8001108 <runNormalMode+0x288>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	dd03      	ble.n	8000f90 <runNormalMode+0x110>
 8000f88:	4b5f      	ldr	r3, [pc, #380]	; (8001108 <runNormalMode+0x288>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e001      	b.n	8000f94 <runNormalMode+0x114>
 8000f90:	4b5d      	ldr	r3, [pc, #372]	; (8001108 <runNormalMode+0x288>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a5c      	ldr	r2, [pc, #368]	; (8001108 <runNormalMode+0x288>)
 8000f96:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8000f98:	f7ff fbb6 	bl	8000708 <ledWalkOperationNormalMode>
				onSingleYellowTraffic1();
 8000f9c:	f7ff fb76 	bl	800068c <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8000fa0:	4b5b      	ldr	r3, [pc, #364]	; (8001110 <runNormalMode+0x290>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fb09 	bl	80005bc <update7SEGBufferTraffic1>
				printTerminalInfoMode();
 8000faa:	f000 fdcb 	bl	8001b44 <printTerminalInfoMode>
				printTerminalInfoModeTraffic1();
 8000fae:	f000 fe4d 	bl	8001c4c <printTerminalInfoModeTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
				printTerminalInfoMode();
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 8000fb2:	e04f      	b.n	8001054 <runNormalMode+0x1d4>
				onSingleGreenTraffic1();
 8000fb4:	f7ff fb72 	bl	800069c <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8000fb8:	4b51      	ldr	r3, [pc, #324]	; (8001100 <runNormalMode+0x280>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fafd 	bl	80005bc <update7SEGBufferTraffic1>
				printTerminalInfoMode();
 8000fc2:	f000 fdbf 	bl	8001b44 <printTerminalInfoMode>
				printTerminalInfoModeTraffic1();
 8000fc6:	f000 fe41 	bl	8001c4c <printTerminalInfoModeTraffic1>
		break;
 8000fca:	e043      	b.n	8001054 <runNormalMode+0x1d4>
	case YELLOWNORMAL:
		if (counterLedYellow1 > 0)
 8000fcc:	4b50      	ldr	r3, [pc, #320]	; (8001110 <runNormalMode+0x290>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	dd41      	ble.n	8001058 <runNormalMode+0x1d8>
		{
			counterLedYellow1--;
 8000fd4:	4b4e      	ldr	r3, [pc, #312]	; (8001110 <runNormalMode+0x290>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4a4d      	ldr	r2, [pc, #308]	; (8001110 <runNormalMode+0x290>)
 8000fdc:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <runNormalMode+0x290>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	dc26      	bgt.n	8001034 <runNormalMode+0x1b4>
			{
				counterLedRed1 = durationLedRed;
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <runNormalMode+0x274>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a43      	ldr	r2, [pc, #268]	; (80010f8 <runNormalMode+0x278>)
 8000fec:	6013      	str	r3, [r2, #0]
				statusTraffic1 = REDNORMAL;
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <runNormalMode+0x270>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
				if (statusLedWalkButton3Press== statusTraffic1)
 8000ff4:	4b43      	ldr	r3, [pc, #268]	; (8001104 <runNormalMode+0x284>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <runNormalMode+0x270>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d10b      	bne.n	8001018 <runNormalMode+0x198>
					numberFreq= (numberFreq > 0)? numberFreq- 1: numberFreq;
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <runNormalMode+0x288>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dd03      	ble.n	8001010 <runNormalMode+0x190>
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <runNormalMode+0x288>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	e001      	b.n	8001014 <runNormalMode+0x194>
 8001010:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <runNormalMode+0x288>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a3c      	ldr	r2, [pc, #240]	; (8001108 <runNormalMode+0x288>)
 8001016:	6013      	str	r3, [r2, #0]
				ledWalkOperationNormalMode();
 8001018:	f7ff fb76 	bl	8000708 <ledWalkOperationNormalMode>
				onSingleRedTraffic1();
 800101c:	f7ff fb2e 	bl	800067c <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <runNormalMode+0x278>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fac9 	bl	80005bc <update7SEGBufferTraffic1>
				printTerminalInfoMode();
 800102a:	f000 fd8b 	bl	8001b44 <printTerminalInfoMode>
				printTerminalInfoModeTraffic1();
 800102e:	f000 fe0d 	bl	8001c4c <printTerminalInfoModeTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
				printTerminalInfoMode();
				printTerminalInfoModeTraffic1();
			}
		}
		break;
 8001032:	e011      	b.n	8001058 <runNormalMode+0x1d8>
				onSingleYellowTraffic1();
 8001034:	f7ff fb2a 	bl	800068c <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <runNormalMode+0x290>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fabd 	bl	80005bc <update7SEGBufferTraffic1>
				printTerminalInfoMode();
 8001042:	f000 fd7f 	bl	8001b44 <printTerminalInfoMode>
				printTerminalInfoModeTraffic1();
 8001046:	f000 fe01 	bl	8001c4c <printTerminalInfoModeTraffic1>
		break;
 800104a:	e005      	b.n	8001058 <runNormalMode+0x1d8>
	default:
		break;
 800104c:	bf00      	nop
 800104e:	e004      	b.n	800105a <runNormalMode+0x1da>
		break;
 8001050:	bf00      	nop
 8001052:	e002      	b.n	800105a <runNormalMode+0x1da>
		break;
 8001054:	bf00      	nop
 8001056:	e000      	b.n	800105a <runNormalMode+0x1da>
		break;
 8001058:	bf00      	nop
	}
	switch (statusTraffic2)
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <runNormalMode+0x294>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b03      	cmp	r3, #3
 8001060:	f200 80ae 	bhi.w	80011c0 <runNormalMode+0x340>
 8001064:	a201      	add	r2, pc, #4	; (adr r2, 800106c <runNormalMode+0x1ec>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	0800107d 	.word	0x0800107d
 8001070:	08001171 	.word	0x08001171
 8001074:	0800109f 	.word	0x0800109f
 8001078:	08001121 	.word	0x08001121
	{
	case INITNORMAL:
		statusTraffic2 = GREENNORMAL;
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <runNormalMode+0x294>)
 800107e:	2202      	movs	r2, #2
 8001080:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <runNormalMode+0x27c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a24      	ldr	r2, [pc, #144]	; (8001118 <runNormalMode+0x298>)
 8001088:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 800108a:	f7ff fb1f 	bl	80006cc <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <runNormalMode+0x298>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa9e 	bl	80005d4 <update7SEGBufferTraffic2>
		printTerminalInfoTraffic2();
 8001098:	f000 fd96 	bl	8001bc8 <printTerminalInfoTraffic2>
		break;
 800109c:	e097      	b.n	80011ce <runNormalMode+0x34e>
	case GREENNORMAL:
		if (counterLedGreen2 > 0)
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <runNormalMode+0x298>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f340 808e 	ble.w	80011c4 <runNormalMode+0x344>
		{
			counterLedGreen2--;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <runNormalMode+0x298>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <runNormalMode+0x298>)
 80010b0:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <runNormalMode+0x298>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	dc10      	bgt.n	80010dc <runNormalMode+0x25c>
			{
				counterLedYellow2 = durationLedYellow;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <runNormalMode+0x28c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <runNormalMode+0x29c>)
 80010c0:	6013      	str	r3, [r2, #0]
				statusTraffic2 = YELLOWNORMAL;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <runNormalMode+0x294>)
 80010c4:	2203      	movs	r2, #3
 80010c6:	601a      	str	r2, [r3, #0]
				onSingleYellowTraffic2();
 80010c8:	f7ff faf8 	bl	80006bc <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <runNormalMode+0x29c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa7f 	bl	80005d4 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80010d6:	f000 fd77 	bl	8001bc8 <printTerminalInfoTraffic2>
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 80010da:	e073      	b.n	80011c4 <runNormalMode+0x344>
				onSingleGreenTraffic2();
 80010dc:	f7ff faf6 	bl	80006cc <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <runNormalMode+0x298>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa75 	bl	80005d4 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80010ea:	f000 fd6d 	bl	8001bc8 <printTerminalInfoTraffic2>
		break;
 80010ee:	e069      	b.n	80011c4 <runNormalMode+0x344>
 80010f0:	20000160 	.word	0x20000160
 80010f4:	2000005c 	.word	0x2000005c
 80010f8:	20000168 	.word	0x20000168
 80010fc:	20000060 	.word	0x20000060
 8001100:	20000170 	.word	0x20000170
 8001104:	200000c8 	.word	0x200000c8
 8001108:	200000c4 	.word	0x200000c4
 800110c:	20000064 	.word	0x20000064
 8001110:	20000178 	.word	0x20000178
 8001114:	20000164 	.word	0x20000164
 8001118:	20000174 	.word	0x20000174
 800111c:	2000017c 	.word	0x2000017c
	case YELLOWNORMAL:
		if (counterLedYellow2 > 0)
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <runNormalMode+0x354>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	dd4f      	ble.n	80011c8 <runNormalMode+0x348>
		{
			counterLedYellow2--;
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <runNormalMode+0x354>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <runNormalMode+0x354>)
 8001130:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 8001132:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <runNormalMode+0x354>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dc10      	bgt.n	800115c <runNormalMode+0x2dc>
			{
				counterLedRed2 = durationLedRed;
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <runNormalMode+0x358>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a27      	ldr	r2, [pc, #156]	; (80011dc <runNormalMode+0x35c>)
 8001140:	6013      	str	r3, [r2, #0]
				statusTraffic2 = REDNORMAL;
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <runNormalMode+0x360>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 8001148:	f7ff fab0 	bl	80006ac <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <runNormalMode+0x35c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa3f 	bl	80005d4 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 8001156:	f000 fd37 	bl	8001bc8 <printTerminalInfoTraffic2>
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 800115a:	e035      	b.n	80011c8 <runNormalMode+0x348>
				onSingleYellowTraffic2();
 800115c:	f7ff faae 	bl	80006bc <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <runNormalMode+0x354>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fa35 	bl	80005d4 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 800116a:	f000 fd2d 	bl	8001bc8 <printTerminalInfoTraffic2>
		break;
 800116e:	e02b      	b.n	80011c8 <runNormalMode+0x348>
	case REDNORMAL:
		if (counterLedRed2 > 0)
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <runNormalMode+0x35c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	dd29      	ble.n	80011cc <runNormalMode+0x34c>
		{
			counterLedRed2--;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <runNormalMode+0x35c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <runNormalMode+0x35c>)
 8001180:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <runNormalMode+0x35c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dc10      	bgt.n	80011ac <runNormalMode+0x32c>
			{
				counterLedGreen2 = durationLedGreen;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <runNormalMode+0x364>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <runNormalMode+0x368>)
 8001190:	6013      	str	r3, [r2, #0]
				statusTraffic2 = GREENNORMAL;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <runNormalMode+0x360>)
 8001194:	2202      	movs	r2, #2
 8001196:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 8001198:	f7ff fa98 	bl	80006cc <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <runNormalMode+0x368>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fa17 	bl	80005d4 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80011a6:	f000 fd0f 	bl	8001bc8 <printTerminalInfoTraffic2>
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
				printTerminalInfoTraffic2();
			}
		}
		break;
 80011aa:	e00f      	b.n	80011cc <runNormalMode+0x34c>
				onSingleRedTraffic2();
 80011ac:	f7ff fa7e 	bl	80006ac <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <runNormalMode+0x35c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fa0d 	bl	80005d4 <update7SEGBufferTraffic2>
				printTerminalInfoTraffic2();
 80011ba:	f000 fd05 	bl	8001bc8 <printTerminalInfoTraffic2>
		break;
 80011be:	e005      	b.n	80011cc <runNormalMode+0x34c>
	default:
		break;
 80011c0:	bf00      	nop
 80011c2:	e004      	b.n	80011ce <runNormalMode+0x34e>
		break;
 80011c4:	bf00      	nop
 80011c6:	e002      	b.n	80011ce <runNormalMode+0x34e>
		break;
 80011c8:	bf00      	nop
 80011ca:	e000      	b.n	80011ce <runNormalMode+0x34e>
		break;
 80011cc:	bf00      	nop
	}
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000017c 	.word	0x2000017c
 80011d8:	2000005c 	.word	0x2000005c
 80011dc:	2000016c 	.word	0x2000016c
 80011e0:	20000164 	.word	0x20000164
 80011e4:	20000060 	.word	0x20000060
 80011e8:	20000174 	.word	0x20000174

080011ec <beginNormalMode>:

void beginNormalMode()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	numberFreq= 0;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <beginNormalMode+0x2c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	offSingleRedGreenWalk();
 80011f6:	f7ff fa71 	bl	80006dc <offSingleRedGreenWalk>
	offAllSingLEDs();
 80011fa:	f7ff fa27 	bl	800064c <offAllSingLEDs>
	update7SEGBufferMode(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff f9f4 	bl	80005ec <update7SEGBufferMode>
	initStatusNormalMode();
 8001204:	f7ff fe2c 	bl	8000e60 <initStatusNormalMode>
	runNormalMode();
 8001208:	f7ff fe3a 	bl	8000e80 <runNormalMode>
	setTimer2(100);
 800120c:	2064      	movs	r0, #100	; 0x64
 800120e:	f000 f9bf 	bl	8001590 <setTimer2>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000c4 	.word	0x200000c4

0800121c <beginWalkNormalMode>:

void beginWalkNormalMode()
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	numberFreq= 3;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <beginWalkNormalMode+0x1c>)
 8001222:	2203      	movs	r2, #3
 8001224:	601a      	str	r2, [r3, #0]
	statusLedWalkButton3Press= statusTraffic1;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <beginWalkNormalMode+0x20>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <beginWalkNormalMode+0x24>)
 800122c:	6013      	str	r3, [r2, #0]
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200000c4 	.word	0x200000c4
 800123c:	20000160 	.word	0x20000160
 8001240:	200000c8 	.word	0x200000c8

08001244 <controlSingleLedTraffic>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLedTraffic(int orderTraffic, int statusLed)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d003      	beq.n	800125c <controlSingleLedTraffic+0x18>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b09      	cmp	r3, #9
 8001258:	d077      	beq.n	800134a <controlSingleLedTraffic+0x106>
		default:
			break;
		}
		break;
	default:
		break;
 800125a:	e0ee      	b.n	800143a <controlSingleLedTraffic+0x1f6>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b07      	cmp	r3, #7
 8001260:	d871      	bhi.n	8001346 <controlSingleLedTraffic+0x102>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <controlSingleLedTraffic+0x24>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	08001289 	.word	0x08001289
 800126c:	080012a9 	.word	0x080012a9
 8001270:	080012c9 	.word	0x080012c9
 8001274:	080012e9 	.word	0x080012e9
 8001278:	080012fd 	.word	0x080012fd
 800127c:	080012f3 	.word	0x080012f3
 8001280:	08001307 	.word	0x08001307
 8001284:	08001327 	.word	0x08001327
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2101      	movs	r1, #1
 800128c:	486d      	ldr	r0, [pc, #436]	; (8001444 <controlSingleLedTraffic+0x200>)
 800128e:	f001 f900 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2101      	movs	r1, #1
 8001296:	486c      	ldr	r0, [pc, #432]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001298:	f001 f8fb 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2102      	movs	r1, #2
 80012a0:	4869      	ldr	r0, [pc, #420]	; (8001448 <controlSingleLedTraffic+0x204>)
 80012a2:	f001 f8f6 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 80012a6:	e04f      	b.n	8001348 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2101      	movs	r1, #1
 80012ac:	4865      	ldr	r0, [pc, #404]	; (8001444 <controlSingleLedTraffic+0x200>)
 80012ae:	f001 f8f0 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	4864      	ldr	r0, [pc, #400]	; (8001448 <controlSingleLedTraffic+0x204>)
 80012b8:	f001 f8eb 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	4861      	ldr	r0, [pc, #388]	; (8001448 <controlSingleLedTraffic+0x204>)
 80012c2:	f001 f8e6 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 80012c6:	e03f      	b.n	8001348 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2101      	movs	r1, #1
 80012cc:	485d      	ldr	r0, [pc, #372]	; (8001444 <controlSingleLedTraffic+0x200>)
 80012ce:	f001 f8e0 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2101      	movs	r1, #1
 80012d6:	485c      	ldr	r0, [pc, #368]	; (8001448 <controlSingleLedTraffic+0x204>)
 80012d8:	f001 f8db 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2102      	movs	r1, #2
 80012e0:	4859      	ldr	r0, [pc, #356]	; (8001448 <controlSingleLedTraffic+0x204>)
 80012e2:	f001 f8d6 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 80012e6:	e02f      	b.n	8001348 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80012e8:	2101      	movs	r1, #1
 80012ea:	4856      	ldr	r0, [pc, #344]	; (8001444 <controlSingleLedTraffic+0x200>)
 80012ec:	f001 f8e9 	bl	80024c2 <HAL_GPIO_TogglePin>
			break;
 80012f0:	e02a      	b.n	8001348 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80012f2:	2101      	movs	r1, #1
 80012f4:	4854      	ldr	r0, [pc, #336]	; (8001448 <controlSingleLedTraffic+0x204>)
 80012f6:	f001 f8e4 	bl	80024c2 <HAL_GPIO_TogglePin>
			break;
 80012fa:	e025      	b.n	8001348 <controlSingleLedTraffic+0x104>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80012fc:	2102      	movs	r1, #2
 80012fe:	4852      	ldr	r0, [pc, #328]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001300:	f001 f8df 	bl	80024c2 <HAL_GPIO_TogglePin>
			break;
 8001304:	e020      	b.n	8001348 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2101      	movs	r1, #1
 800130a:	484e      	ldr	r0, [pc, #312]	; (8001444 <controlSingleLedTraffic+0x200>)
 800130c:	f001 f8c1 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2101      	movs	r1, #1
 8001314:	484c      	ldr	r0, [pc, #304]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001316:	f001 f8bc 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	484a      	ldr	r0, [pc, #296]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001320:	f001 f8b7 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 8001324:	e010      	b.n	8001348 <controlSingleLedTraffic+0x104>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001326:	2201      	movs	r2, #1
 8001328:	2101      	movs	r1, #1
 800132a:	4846      	ldr	r0, [pc, #280]	; (8001444 <controlSingleLedTraffic+0x200>)
 800132c:	f001 f8b1 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2101      	movs	r1, #1
 8001334:	4844      	ldr	r0, [pc, #272]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001336:	f001 f8ac 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2102      	movs	r1, #2
 800133e:	4842      	ldr	r0, [pc, #264]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001340:	f001 f8a7 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 8001344:	e000      	b.n	8001348 <controlSingleLedTraffic+0x104>
			break;
 8001346:	bf00      	nop
		break;
 8001348:	e077      	b.n	800143a <controlSingleLedTraffic+0x1f6>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d872      	bhi.n	8001436 <controlSingleLedTraffic+0x1f2>
 8001350:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <controlSingleLedTraffic+0x114>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	08001379 	.word	0x08001379
 800135c:	08001399 	.word	0x08001399
 8001360:	080013b9 	.word	0x080013b9
 8001364:	080013d9 	.word	0x080013d9
 8001368:	080013ed 	.word	0x080013ed
 800136c:	080013e3 	.word	0x080013e3
 8001370:	080013f7 	.word	0x080013f7
 8001374:	08001417 	.word	0x08001417
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001378:	2201      	movs	r2, #1
 800137a:	2104      	movs	r1, #4
 800137c:	4832      	ldr	r0, [pc, #200]	; (8001448 <controlSingleLedTraffic+0x204>)
 800137e:	f001 f888 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	482f      	ldr	r0, [pc, #188]	; (8001444 <controlSingleLedTraffic+0x200>)
 8001388:	f001 f883 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2108      	movs	r1, #8
 8001390:	482d      	ldr	r0, [pc, #180]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001392:	f001 f87e 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 8001396:	e04f      	b.n	8001438 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2104      	movs	r1, #4
 800139c:	482a      	ldr	r0, [pc, #168]	; (8001448 <controlSingleLedTraffic+0x204>)
 800139e:	f001 f878 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4827      	ldr	r0, [pc, #156]	; (8001444 <controlSingleLedTraffic+0x200>)
 80013a8:	f001 f873 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2108      	movs	r1, #8
 80013b0:	4825      	ldr	r0, [pc, #148]	; (8001448 <controlSingleLedTraffic+0x204>)
 80013b2:	f001 f86e 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 80013b6:	e03f      	b.n	8001438 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2104      	movs	r1, #4
 80013bc:	4822      	ldr	r0, [pc, #136]	; (8001448 <controlSingleLedTraffic+0x204>)
 80013be:	f001 f868 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	481f      	ldr	r0, [pc, #124]	; (8001444 <controlSingleLedTraffic+0x200>)
 80013c8:	f001 f863 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2108      	movs	r1, #8
 80013d0:	481d      	ldr	r0, [pc, #116]	; (8001448 <controlSingleLedTraffic+0x204>)
 80013d2:	f001 f85e 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 80013d6:	e02f      	b.n	8001438 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80013d8:	2104      	movs	r1, #4
 80013da:	481b      	ldr	r0, [pc, #108]	; (8001448 <controlSingleLedTraffic+0x204>)
 80013dc:	f001 f871 	bl	80024c2 <HAL_GPIO_TogglePin>
			break;
 80013e0:	e02a      	b.n	8001438 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	4817      	ldr	r0, [pc, #92]	; (8001444 <controlSingleLedTraffic+0x200>)
 80013e6:	f001 f86c 	bl	80024c2 <HAL_GPIO_TogglePin>
			break;
 80013ea:	e025      	b.n	8001438 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80013ec:	2108      	movs	r1, #8
 80013ee:	4816      	ldr	r0, [pc, #88]	; (8001448 <controlSingleLedTraffic+0x204>)
 80013f0:	f001 f867 	bl	80024c2 <HAL_GPIO_TogglePin>
			break;
 80013f4:	e020      	b.n	8001438 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2104      	movs	r1, #4
 80013fa:	4813      	ldr	r0, [pc, #76]	; (8001448 <controlSingleLedTraffic+0x204>)
 80013fc:	f001 f849 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	480f      	ldr	r0, [pc, #60]	; (8001444 <controlSingleLedTraffic+0x200>)
 8001406:	f001 f844 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2108      	movs	r1, #8
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001410:	f001 f83f 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 8001414:	e010      	b.n	8001438 <controlSingleLedTraffic+0x1f4>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2104      	movs	r1, #4
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <controlSingleLedTraffic+0x204>)
 800141c:	f001 f839 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001420:	2201      	movs	r2, #1
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <controlSingleLedTraffic+0x200>)
 8001426:	f001 f834 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2108      	movs	r1, #8
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <controlSingleLedTraffic+0x204>)
 8001430:	f001 f82f 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 8001434:	e000      	b.n	8001438 <controlSingleLedTraffic+0x1f4>
			break;
 8001436:	bf00      	nop
		break;
 8001438:	bf00      	nop
	}
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40011000 	.word	0x40011000

0800144c <controlSingleLedWalk>:

void controlSingleLedWalk(int statusLed)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	switch (statusLed)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d01e      	beq.n	8001498 <controlSingleLedWalk+0x4c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	dc26      	bgt.n	80014ae <controlSingleLedWalk+0x62>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d00d      	beq.n	8001482 <controlSingleLedWalk+0x36>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0b      	cmp	r3, #11
 800146a:	d120      	bne.n	80014ae <controlSingleLedWalk+0x62>
	{
		case ONGREENOFFREDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2108      	movs	r1, #8
 8001470:	4811      	ldr	r0, [pc, #68]	; (80014b8 <controlSingleLedWalk+0x6c>)
 8001472:	f001 f80e 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	480f      	ldr	r0, [pc, #60]	; (80014b8 <controlSingleLedWalk+0x6c>)
 800147c:	f001 f809 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 8001480:	e016      	b.n	80014b0 <controlSingleLedWalk+0x64>
		case OFFLEDWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2108      	movs	r1, #8
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <controlSingleLedWalk+0x6c>)
 8001488:	f001 f803 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2120      	movs	r1, #32
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <controlSingleLedWalk+0x6c>)
 8001492:	f000 fffe 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 8001496:	e00b      	b.n	80014b0 <controlSingleLedWalk+0x64>
		case ONREDOFFGREENWALK:
			HAL_GPIO_WritePin(WALKGREEN_GPIO_Port, WALKGREEN_Pin, RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2108      	movs	r1, #8
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <controlSingleLedWalk+0x6c>)
 800149e:	f000 fff8 	bl	8002492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WALKRED_GPIO_Port, WALKRED_Pin, SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2120      	movs	r1, #32
 80014a6:	4804      	ldr	r0, [pc, #16]	; (80014b8 <controlSingleLedWalk+0x6c>)
 80014a8:	f000 fff3 	bl	8002492 <HAL_GPIO_WritePin>
			break;
 80014ac:	e000      	b.n	80014b0 <controlSingleLedWalk+0x64>
		default:
			break;
 80014ae:	bf00      	nop
	}
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010c00 	.word	0x40010c00

080014bc <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <runTimer+0x8c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dd0b      	ble.n	80014e0 <runTimer+0x24>
	{
		counter1--;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <runTimer+0x8c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <runTimer+0x8c>)
 80014d0:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <runTimer+0x8c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dc02      	bgt.n	80014e0 <runTimer+0x24>
		{
			flag1 = 1;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <runTimer+0x90>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <runTimer+0x94>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	dd0b      	ble.n	8001500 <runTimer+0x44>
	{
		counter2--;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <runTimer+0x94>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <runTimer+0x94>)
 80014f0:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <runTimer+0x94>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dc02      	bgt.n	8001500 <runTimer+0x44>
		{
			flag2 = 1;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <runTimer+0x98>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <runTimer+0x9c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	dd0b      	ble.n	8001520 <runTimer+0x64>
	{
		counter3--;
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <runTimer+0x9c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3b01      	subs	r3, #1
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <runTimer+0x9c>)
 8001510:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <runTimer+0x9c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	dc02      	bgt.n	8001520 <runTimer+0x64>
		{
			flag3 = 1;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <runTimer+0xa0>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <runTimer+0xa4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	dd0b      	ble.n	8001540 <runTimer+0x84>
	{
		counter4--;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <runTimer+0xa4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3b01      	subs	r3, #1
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <runTimer+0xa4>)
 8001530:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <runTimer+0xa4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	dc02      	bgt.n	8001540 <runTimer+0x84>
		{
			flag4 = 1;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <runTimer+0xa8>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000180 	.word	0x20000180
 800154c:	20000184 	.word	0x20000184
 8001550:	20000188 	.word	0x20000188
 8001554:	2000018c 	.word	0x2000018c
 8001558:	20000190 	.word	0x20000190
 800155c:	20000194 	.word	0x20000194
 8001560:	20000198 	.word	0x20000198
 8001564:	2000019c 	.word	0x2000019c

08001568 <setTimer1>:

void setTimer1(int duration)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	counter1 = duration;
 8001570:	4a05      	ldr	r2, [pc, #20]	; (8001588 <setTimer1+0x20>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <setTimer1+0x24>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000180 	.word	0x20000180
 800158c:	20000184 	.word	0x20000184

08001590 <setTimer2>:

void setTimer2(int duration)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	counter2 = duration;
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <setTimer2+0x20>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
	flag2 = 0;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <setTimer2+0x24>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000188 	.word	0x20000188
 80015b4:	2000018c 	.word	0x2000018c

080015b8 <setTimer3>:

void setTimer3(int duration)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	counter3 = duration;
 80015c0:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <setTimer3+0x20>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
	flag3 = 0;
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <setTimer3+0x24>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000190 	.word	0x20000190
 80015dc:	20000194 	.word	0x20000194

080015e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_MspInit+0x5c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_MspInit+0x5c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_MspInit+0x5c>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x5c>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x5c>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x5c>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_MspInit+0x60>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_MspInit+0x60>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001654:	d114      	bne.n	8001680 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_TIM_Base_MspInit+0x68>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_TIM_Base_MspInit+0x68>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_TIM_Base_MspInit+0x68>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201c      	movs	r0, #28
 8001674:	f000 fc8b 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001678:	201c      	movs	r0, #28
 800167a:	f000 fca4 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800167e:	e010      	b.n	80016a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10b      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_TIM_Base_MspInit+0x68>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_TIM_Base_MspInit+0x68>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_TIM_Base_MspInit+0x68>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40000400 	.word	0x40000400

080016b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_TIM_MspPostInit+0x58>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d117      	bne.n	8001704 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_TIM_MspPostInit+0x5c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <HAL_TIM_MspPostInit+0x5c>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_TIM_MspPostInit+0x5c>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_TIM_MspPostInit+0x60>)
 8001700:	f000 fd2c 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3720      	adds	r7, #32
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40000400 	.word	0x40000400
 8001710:	40021000 	.word	0x40021000
 8001714:	40010800 	.word	0x40010800

08001718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_UART_MspInit+0x98>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d137      	bne.n	80017a8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_UART_MspInit+0x9c>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_UART_MspInit+0x9c>)
 800173e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001742:	61d3      	str	r3, [r2, #28]
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_UART_MspInit+0x9c>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_UART_MspInit+0x9c>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_UART_MspInit+0x9c>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_UART_MspInit+0x9c>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001768:	2304      	movs	r3, #4
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	480f      	ldr	r0, [pc, #60]	; (80017b8 <HAL_UART_MspInit+0xa0>)
 800177c:	f000 fcee 	bl	800215c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001780:	2308      	movs	r3, #8
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	4809      	ldr	r0, [pc, #36]	; (80017b8 <HAL_UART_MspInit+0xa0>)
 8001794:	f000 fce2 	bl	800215c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2026      	movs	r0, #38	; 0x26
 800179e:	f000 fbf6 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017a2:	2026      	movs	r0, #38	; 0x26
 80017a4:	f000 fc0f 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40004400 	.word	0x40004400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010800 	.word	0x40010800

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001802:	f000 fad1 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM2_IRQHandler+0x10>)
 8001812:	f001 fc25 	bl	8003060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200000cc 	.word	0x200000cc

08001820 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <USART2_IRQHandler+0x10>)
 8001826:	f002 fabd 	bl	8003da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200001a4 	.word	0x200001a4

08001834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <runTuningMode>:
#define GREENTUNING 3

int statusTuningMode= INITMODE;

void runTuningMode()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001844:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <runTuningMode+0xb8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d84b      	bhi.n	80018e4 <runTuningMode+0xa4>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <runTuningMode+0x14>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001865 	.word	0x08001865
 8001858:	08001885 	.word	0x08001885
 800185c:	080018a5 	.word	0x080018a5
 8001860:	080018c5 	.word	0x080018c5
    {
        case INITMODE:
            statusTuningMode= REDTUNING;
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <runTuningMode+0xb8>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 800186a:	f7fe feef 	bl	800064c <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <runTuningMode+0xbc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fea2 	bl	80005bc <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 8001878:	4b20      	ldr	r3, [pc, #128]	; (80018fc <runTuningMode+0xbc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fea9 	bl	80005d4 <update7SEGBufferTraffic2>
            break;
 8001882:	e030      	b.n	80018e6 <runTuningMode+0xa6>
        case REDTUNING:
            statusTuningMode= YELLOWTUNING;
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <runTuningMode+0xb8>)
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 800188a:	f7fe fedf 	bl	800064c <offAllSingLEDs>
            // blinkingYELLOW();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedYellow);
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <runTuningMode+0xc0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe92 	bl	80005bc <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedYellow);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <runTuningMode+0xc0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe99 	bl	80005d4 <update7SEGBufferTraffic2>
            break;
 80018a2:	e020      	b.n	80018e6 <runTuningMode+0xa6>
        case YELLOWTUNING:
            statusTuningMode= GREENTUNING;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <runTuningMode+0xb8>)
 80018a6:	2203      	movs	r2, #3
 80018a8:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 80018aa:	f7fe fecf 	bl	800064c <offAllSingLEDs>
            // blinkingGREEN();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedGreen);
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <runTuningMode+0xc4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe82 	bl	80005bc <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedGreen);
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <runTuningMode+0xc4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe89 	bl	80005d4 <update7SEGBufferTraffic2>
            break;
 80018c2:	e010      	b.n	80018e6 <runTuningMode+0xa6>
        case GREENTUNING:
            statusTuningMode= REDTUNING;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <runTuningMode+0xb8>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
            offAllSingLEDs();
 80018ca:	f7fe febf 	bl	800064c <offAllSingLEDs>
            // blinkingRED();
            // setTimer3(50);
            update7SEGBufferTraffic1(durationLedRed);
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <runTuningMode+0xbc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe72 	bl	80005bc <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(durationLedRed);
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <runTuningMode+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe79 	bl	80005d4 <update7SEGBufferTraffic2>
            break;
 80018e2:	e000      	b.n	80018e6 <runTuningMode+0xa6>
        default:
            break;
 80018e4:	bf00      	nop
    }
    printTerminalInfoMode();
 80018e6:	f000 f92d 	bl	8001b44 <printTerminalInfoMode>
    printTerminalInfoModeTraffic1();
 80018ea:	f000 f9af 	bl	8001c4c <printTerminalInfoModeTraffic1>
    printTerminalInfoTraffic2();
 80018ee:	f000 f96b 	bl	8001bc8 <printTerminalInfoTraffic2>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200001a0 	.word	0x200001a0
 80018fc:	2000005c 	.word	0x2000005c
 8001900:	20000064 	.word	0x20000064
 8001904:	20000060 	.word	0x20000060

08001908 <initStatusTuningMode>:

void initStatusTuningMode()
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
    statusTuningMode= INITMODE;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <initStatusTuningMode+0x14>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200001a0 	.word	0x200001a0

08001920 <beginTuningMode>:

void beginTuningMode()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	numberFreq= 0;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <beginTuningMode+0x20>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    offSingleRedGreenWalk();
 800192a:	f7fe fed7 	bl	80006dc <offSingleRedGreenWalk>
    initStatusTuningMode();
 800192e:	f7ff ffeb 	bl	8001908 <initStatusTuningMode>
    update7SEGBufferMode(3);
 8001932:	2003      	movs	r0, #3
 8001934:	f7fe fe5a 	bl	80005ec <update7SEGBufferMode>
    runTuningMode();
 8001938:	f7ff ff82 	bl	8001840 <runTuningMode>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000c4 	.word	0x200000c4

08001944 <modifyTuningMode>:

void modifyTuningMode()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <modifyTuningMode+0xb8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d034      	beq.n	80019ba <modifyTuningMode+0x76>
 8001950:	2b03      	cmp	r3, #3
 8001952:	dc49      	bgt.n	80019e8 <modifyTuningMode+0xa4>
 8001954:	2b01      	cmp	r3, #1
 8001956:	d002      	beq.n	800195e <modifyTuningMode+0x1a>
 8001958:	2b02      	cmp	r3, #2
 800195a:	d017      	beq.n	800198c <modifyTuningMode+0x48>
            }
            update7SEGBufferTraffic1(tempDurationLedGreen);
            update7SEGBufferTraffic2(tempDurationLedGreen);
            break;
        default:
            break;
 800195c:	e044      	b.n	80019e8 <modifyTuningMode+0xa4>
            tempDurationLedRed++;
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <modifyTuningMode+0xbc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <modifyTuningMode+0xbc>)
 8001966:	6013      	str	r3, [r2, #0]
            if (tempDurationLedRed > 99)
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <modifyTuningMode+0xbc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b63      	cmp	r3, #99	; 0x63
 800196e:	dd02      	ble.n	8001976 <modifyTuningMode+0x32>
                tempDurationLedRed = 0;
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <modifyTuningMode+0xbc>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedRed);
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <modifyTuningMode+0xbc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fe1e 	bl	80005bc <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedRed);
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <modifyTuningMode+0xbc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe25 	bl	80005d4 <update7SEGBufferTraffic2>
            break;
 800198a:	e02e      	b.n	80019ea <modifyTuningMode+0xa6>
            tempDurationLedYellow++;
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <modifyTuningMode+0xc0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <modifyTuningMode+0xc0>)
 8001994:	6013      	str	r3, [r2, #0]
            if (tempDurationLedYellow > 99)
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <modifyTuningMode+0xc0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b63      	cmp	r3, #99	; 0x63
 800199c:	dd02      	ble.n	80019a4 <modifyTuningMode+0x60>
                tempDurationLedYellow = 0;
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <modifyTuningMode+0xc0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedYellow);
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <modifyTuningMode+0xc0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fe07 	bl	80005bc <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedYellow);
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <modifyTuningMode+0xc0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fe0e 	bl	80005d4 <update7SEGBufferTraffic2>
            break;
 80019b8:	e017      	b.n	80019ea <modifyTuningMode+0xa6>
            tempDurationLedGreen++;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <modifyTuningMode+0xc4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <modifyTuningMode+0xc4>)
 80019c2:	6013      	str	r3, [r2, #0]
            if (tempDurationLedGreen > 99)
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <modifyTuningMode+0xc4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b63      	cmp	r3, #99	; 0x63
 80019ca:	dd02      	ble.n	80019d2 <modifyTuningMode+0x8e>
                tempDurationLedGreen = 0;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <modifyTuningMode+0xc4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
            update7SEGBufferTraffic1(tempDurationLedGreen);
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <modifyTuningMode+0xc4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdf0 	bl	80005bc <update7SEGBufferTraffic1>
            update7SEGBufferTraffic2(tempDurationLedGreen);
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <modifyTuningMode+0xc4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdf7 	bl	80005d4 <update7SEGBufferTraffic2>
            break;
 80019e6:	e000      	b.n	80019ea <modifyTuningMode+0xa6>
            break;
 80019e8:	bf00      	nop
    }
    printTerminalInfoMode();
 80019ea:	f000 f8ab 	bl	8001b44 <printTerminalInfoMode>
	printTerminalInfoModeTraffic1();
 80019ee:	f000 f92d 	bl	8001c4c <printTerminalInfoModeTraffic1>
	printTerminalInfoTraffic2();
 80019f2:	f000 f8e9 	bl	8001bc8 <printTerminalInfoTraffic2>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001a0 	.word	0x200001a0
 8001a00:	20000050 	.word	0x20000050
 8001a04:	20000058 	.word	0x20000058
 8001a08:	20000054 	.word	0x20000054

08001a0c <saveTuningMode>:

void saveTuningMode()
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <saveTuningMode+0x88>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <saveTuningMode+0x8c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	441a      	add	r2, r3
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <saveTuningMode+0x90>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d028      	beq.n	8001a74 <saveTuningMode+0x68>
    {
        switch (statusTuningMode)
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <saveTuningMode+0x94>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d117      	bne.n	8001a5a <saveTuningMode+0x4e>
        {
            case GREENTUNING:
                update7SEGBufferTraffic1(88);
 8001a2a:	2058      	movs	r0, #88	; 0x58
 8001a2c:	f7fe fdc6 	bl	80005bc <update7SEGBufferTraffic1>
                update7SEGBufferTraffic2(88);
 8001a30:	2058      	movs	r0, #88	; 0x58
 8001a32:	f7fe fdcf 	bl	80005d4 <update7SEGBufferTraffic2>
                update7SEGBufferMode(8);
 8001a36:	2008      	movs	r0, #8
 8001a38:	f7fe fdd8 	bl	80005ec <update7SEGBufferMode>
                onAllSingLEDs();
 8001a3c:	f7fe fe12 	bl	8000664 <onAllSingLEDs>
                tempDurationLedGreen = durationLedGreen;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <saveTuningMode+0x98>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <saveTuningMode+0x8c>)
 8001a46:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <saveTuningMode+0x9c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <saveTuningMode+0x90>)
 8001a4e:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <saveTuningMode+0xa0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <saveTuningMode+0x88>)
 8001a56:	6013      	str	r3, [r2, #0]
                break;
 8001a58:	e019      	b.n	8001a8e <saveTuningMode+0x82>
            default:
                tempDurationLedGreen = durationLedGreen;
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <saveTuningMode+0x98>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <saveTuningMode+0x8c>)
 8001a60:	6013      	str	r3, [r2, #0]
                tempDurationLedRed = durationLedRed;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <saveTuningMode+0x9c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <saveTuningMode+0x90>)
 8001a68:	6013      	str	r3, [r2, #0]
                tempDurationLedYellow = durationLedYellow;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <saveTuningMode+0xa0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <saveTuningMode+0x88>)
 8001a70:	6013      	str	r3, [r2, #0]
                break;
 8001a72:	e00c      	b.n	8001a8e <saveTuningMode+0x82>
        }
    }
    else
    {
        durationLedGreen = tempDurationLedGreen;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <saveTuningMode+0x8c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <saveTuningMode+0x98>)
 8001a7a:	6013      	str	r3, [r2, #0]
        durationLedRed = tempDurationLedRed;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <saveTuningMode+0x90>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <saveTuningMode+0x9c>)
 8001a82:	6013      	str	r3, [r2, #0]
        durationLedYellow = tempDurationLedYellow;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <saveTuningMode+0x88>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <saveTuningMode+0xa0>)
 8001a8a:	6013      	str	r3, [r2, #0]
    }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000058 	.word	0x20000058
 8001a98:	20000054 	.word	0x20000054
 8001a9c:	20000050 	.word	0x20000050
 8001aa0:	200001a0 	.word	0x200001a0
 8001aa4:	20000060 	.word	0x20000060
 8001aa8:	2000005c 	.word	0x2000005c
 8001aac:	20000064 	.word	0x20000064

08001ab0 <animationTuningMode>:

void animationTuningMode()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
    switch (statusTuningMode)
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <animationTuningMode+0x3c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d814      	bhi.n	8001ae6 <animationTuningMode+0x36>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <animationTuningMode+0x14>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ae7 	.word	0x08001ae7
 8001ac8:	08001ad5 	.word	0x08001ad5
 8001acc:	08001adb 	.word	0x08001adb
 8001ad0:	08001ae1 	.word	0x08001ae1
    {
    case INITMODE:
        break;
    case REDTUNING:
        blinkingRED();
 8001ad4:	f7fe fda2 	bl	800061c <blinkingRED>
        break;
 8001ad8:	e006      	b.n	8001ae8 <animationTuningMode+0x38>
    case YELLOWTUNING:
        blinkingYELLOW();
 8001ada:	f7fe fd93 	bl	8000604 <blinkingYELLOW>
        break;
 8001ade:	e003      	b.n	8001ae8 <animationTuningMode+0x38>
    case GREENTUNING:
        blinkingGREEN();
 8001ae0:	f7fe fda8 	bl	8000634 <blinkingGREEN>
        break;
 8001ae4:	e000      	b.n	8001ae8 <animationTuningMode+0x38>
    default:
        break;
 8001ae6:	bf00      	nop
    }
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200001a0 	.word	0x200001a0

08001af0 <MX_USART2_UART_Init>:
#include <stdlib.h>

UART_HandleTypeDef huart2;

void MX_USART2_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <MX_USART2_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b28:	f002 f85c 	bl	8003be4 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f7ff f8b3 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200001a4 	.word	0x200001a4
 8001b40:	40004400 	.word	0x40004400

08001b44 <printTerminalInfoMode>:
void printTerminalInfoMode() {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
	uint8_t str2[]= "!MODE:";
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <printTerminalInfoMode+0x74>)
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b54:	6018      	str	r0, [r3, #0]
 8001b56:	3304      	adds	r3, #4
 8001b58:	8019      	strh	r1, [r3, #0]
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	0c0a      	lsrs	r2, r1, #16
 8001b5e:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\n";
 8001b60:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <printTerminalInfoMode+0x78>)
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	8019      	strh	r1, [r3, #0]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	0c12      	lsrs	r2, r2, #16
 8001b70:	701a      	strb	r2, [r3, #0]

	char valueMode[8];
	itoa(led_buffer[2], (char*)valueMode, 10);
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <printTerminalInfoMode+0x7c>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	1d39      	adds	r1, r7, #4
 8001b78:	220a      	movs	r2, #10
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fd22 	bl	80045c4 <itoa>
//	itoa(1, valueMode, 10);
//	valueMode[strlen(valueMode)] = '\0';

	HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8001b80:	f107 0110 	add.w	r1, r7, #16
 8001b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b88:	2207      	movs	r2, #7
 8001b8a:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <printTerminalInfoMode+0x80>)
 8001b8c:	f002 f877 	bl	8003c7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)valueMode, 2, 1000);
 8001b90:	1d39      	adds	r1, r7, #4
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	2202      	movs	r2, #2
 8001b98:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <printTerminalInfoMode+0x80>)
 8001b9a:	f002 f870 	bl	8003c7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)endline, sizeof(endline), 1000);
 8001b9e:	f107 010c 	add.w	r1, r7, #12
 8001ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <printTerminalInfoMode+0x80>)
 8001baa:	f002 f868 	bl	8003c7e <HAL_UART_Transmit>

}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	080046bc 	.word	0x080046bc
 8001bbc:	080046c4 	.word	0x080046c4
 8001bc0:	200000b8 	.word	0x200000b8
 8001bc4:	200001a4 	.word	0x200001a4

08001bc8 <printTerminalInfoTraffic2>:

void printTerminalInfoTraffic2()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 8001bce:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <printTerminalInfoTraffic2+0x74>)
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd8:	6018      	str	r0, [r3, #0]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	8019      	strh	r1, [r3, #0]
 8001bde:	3302      	adds	r3, #2
 8001be0:	0c0a      	lsrs	r2, r1, #16
 8001be2:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\n";
 8001be4:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <printTerminalInfoTraffic2+0x78>)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	4611      	mov	r1, r2
 8001bee:	8019      	strh	r1, [r3, #0]
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	0c12      	lsrs	r2, r2, #16
 8001bf4:	701a      	strb	r2, [r3, #0]

	char valueTraffic2[8];
	itoa(led_buffer[1], (char*)valueTraffic2, 10);
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <printTerminalInfoTraffic2+0x7c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	1d39      	adds	r1, r7, #4
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fce0 	bl	80045c4 <itoa>
//	valueTraffic2[strlen(valueTraffic2)] = '\0';

	HAL_UART_Transmit(&huart2, str01, sizeof(str01), 1000);
 8001c04:	f107 0110 	add.w	r1, r7, #16
 8001c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <printTerminalInfoTraffic2+0x80>)
 8001c10:	f002 f835 	bl	8003c7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)valueTraffic2, 2, 1000);
 8001c14:	1d39      	adds	r1, r7, #4
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	480a      	ldr	r0, [pc, #40]	; (8001c48 <printTerminalInfoTraffic2+0x80>)
 8001c1e:	f002 f82e 	bl	8003c7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)endline, sizeof(endline), 1000);
 8001c22:	f107 010c 	add.w	r1, r7, #12
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	4806      	ldr	r0, [pc, #24]	; (8001c48 <printTerminalInfoTraffic2+0x80>)
 8001c2e:	f002 f826 	bl	8003c7e <HAL_UART_Transmit>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	080046c8 	.word	0x080046c8
 8001c40:	080046c4 	.word	0x080046c4
 8001c44:	200000b8 	.word	0x200000b8
 8001c48:	200001a4 	.word	0x200001a4

08001c4c <printTerminalInfoModeTraffic1>:
void printTerminalInfoModeTraffic1()
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
	uint8_t str01[]="!7SEG:";
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <printTerminalInfoModeTraffic1+0x74>)
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c5c:	6018      	str	r0, [r3, #0]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	8019      	strh	r1, [r3, #0]
 8001c62:	3302      	adds	r3, #2
 8001c64:	0c0a      	lsrs	r2, r1, #16
 8001c66:	701a      	strb	r2, [r3, #0]
	uint8_t endline[] = "#\n";
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <printTerminalInfoModeTraffic1+0x78>)
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	4611      	mov	r1, r2
 8001c72:	8019      	strh	r1, [r3, #0]
 8001c74:	3302      	adds	r3, #2
 8001c76:	0c12      	lsrs	r2, r2, #16
 8001c78:	701a      	strb	r2, [r3, #0]


	char valueTraffic1[8];

	itoa(led_buffer[0], (char*)valueTraffic1, 10);
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <printTerminalInfoModeTraffic1+0x7c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	1d39      	adds	r1, r7, #4
 8001c80:	220a      	movs	r2, #10
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fc9e 	bl	80045c4 <itoa>
//	itoa(0, valueTraffic1, 10);
//	valueTraffic1[strlen(valueTraffic1)] = '\0';


	HAL_UART_Transmit(&huart2, str01, sizeof(str01), 1000);
 8001c88:	f107 0110 	add.w	r1, r7, #16
 8001c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c90:	2207      	movs	r2, #7
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <printTerminalInfoModeTraffic1+0x80>)
 8001c94:	f001 fff3 	bl	8003c7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)valueTraffic1, 2, 1000);
 8001c98:	1d39      	adds	r1, r7, #4
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	480a      	ldr	r0, [pc, #40]	; (8001ccc <printTerminalInfoModeTraffic1+0x80>)
 8001ca2:	f001 ffec 	bl	8003c7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*)endline, sizeof(endline), 1000);
 8001ca6:	f107 010c 	add.w	r1, r7, #12
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	2203      	movs	r2, #3
 8001cb0:	4806      	ldr	r0, [pc, #24]	; (8001ccc <printTerminalInfoModeTraffic1+0x80>)
 8001cb2:	f001 ffe4 	bl	8003c7e <HAL_UART_Transmit>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	080046c8 	.word	0x080046c8
 8001cc4:	080046c4 	.word	0x080046c4
 8001cc8:	200000b8 	.word	0x200000b8
 8001ccc:	200001a4 	.word	0x200001a4

08001cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd2:	490d      	ldr	r1, [pc, #52]	; (8001d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	; (8001d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cf6:	f7ff fd9d 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f002 fcaf 	bl	800465c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfe:	f7fe fd77 	bl	80007f0 <main>
  bx lr
 8001d02:	4770      	bx	lr
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d0c:	08004728 	.word	0x08004728
  ldr r2, =_sbss
 8001d10:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d14:	200001ec 	.word	0x200001ec

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f923 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fc52 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f93b 	bl	8001fe2 <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f903 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2000006c 	.word	0x2000006c
 8001da0:	20000074 	.word	0x20000074
 8001da4:	20000070 	.word	0x20000070

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000074 	.word	0x20000074
 8001dc8:	200001e8 	.word	0x200001e8

08001dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	200001e8 	.word	0x200001e8

08001de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db0b      	blt.n	8001e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	4906      	ldr	r1, [pc, #24]	; (8001e78 <__NVIC_EnableIRQ+0x34>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff90 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff2d 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff42 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff90 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff5f 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff35 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffa2 	bl	8001f34 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800200c:	2b02      	cmp	r3, #2
 800200e:	d008      	beq.n	8002022 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2204      	movs	r2, #4
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e020      	b.n	8002064 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 020e 	bic.w	r2, r2, #14
 8002030:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f202 	lsl.w	r2, r1, r2
 8002050:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
	...

08002070 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002082:	2b02      	cmp	r3, #2
 8002084:	d005      	beq.n	8002092 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	e051      	b.n	8002136 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 020e 	bic.w	r2, r2, #14
 80020a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a22      	ldr	r2, [pc, #136]	; (8002140 <HAL_DMA_Abort_IT+0xd0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d029      	beq.n	8002110 <HAL_DMA_Abort_IT+0xa0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <HAL_DMA_Abort_IT+0xd4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d022      	beq.n	800210c <HAL_DMA_Abort_IT+0x9c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_DMA_Abort_IT+0xd8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01a      	beq.n	8002106 <HAL_DMA_Abort_IT+0x96>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_DMA_Abort_IT+0xdc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d012      	beq.n	8002100 <HAL_DMA_Abort_IT+0x90>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_DMA_Abort_IT+0xe0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00a      	beq.n	80020fa <HAL_DMA_Abort_IT+0x8a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <HAL_DMA_Abort_IT+0xe4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d102      	bne.n	80020f4 <HAL_DMA_Abort_IT+0x84>
 80020ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020f2:	e00e      	b.n	8002112 <HAL_DMA_Abort_IT+0xa2>
 80020f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020f8:	e00b      	b.n	8002112 <HAL_DMA_Abort_IT+0xa2>
 80020fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fe:	e008      	b.n	8002112 <HAL_DMA_Abort_IT+0xa2>
 8002100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002104:	e005      	b.n	8002112 <HAL_DMA_Abort_IT+0xa2>
 8002106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210a:	e002      	b.n	8002112 <HAL_DMA_Abort_IT+0xa2>
 800210c:	2310      	movs	r3, #16
 800210e:	e000      	b.n	8002112 <HAL_DMA_Abort_IT+0xa2>
 8002110:	2301      	movs	r3, #1
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_DMA_Abort_IT+0xe8>)
 8002114:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
    } 
  }
  return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40020008 	.word	0x40020008
 8002144:	4002001c 	.word	0x4002001c
 8002148:	40020030 	.word	0x40020030
 800214c:	40020044 	.word	0x40020044
 8002150:	40020058 	.word	0x40020058
 8002154:	4002006c 	.word	0x4002006c
 8002158:	40020000 	.word	0x40020000

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b08b      	sub	sp, #44	; 0x2c
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216e:	e169      	b.n	8002444 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002170:	2201      	movs	r2, #1
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	429a      	cmp	r2, r3
 800218a:	f040 8158 	bne.w	800243e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a9a      	ldr	r2, [pc, #616]	; (80023fc <HAL_GPIO_Init+0x2a0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d05e      	beq.n	8002256 <HAL_GPIO_Init+0xfa>
 8002198:	4a98      	ldr	r2, [pc, #608]	; (80023fc <HAL_GPIO_Init+0x2a0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d875      	bhi.n	800228a <HAL_GPIO_Init+0x12e>
 800219e:	4a98      	ldr	r2, [pc, #608]	; (8002400 <HAL_GPIO_Init+0x2a4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d058      	beq.n	8002256 <HAL_GPIO_Init+0xfa>
 80021a4:	4a96      	ldr	r2, [pc, #600]	; (8002400 <HAL_GPIO_Init+0x2a4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d86f      	bhi.n	800228a <HAL_GPIO_Init+0x12e>
 80021aa:	4a96      	ldr	r2, [pc, #600]	; (8002404 <HAL_GPIO_Init+0x2a8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d052      	beq.n	8002256 <HAL_GPIO_Init+0xfa>
 80021b0:	4a94      	ldr	r2, [pc, #592]	; (8002404 <HAL_GPIO_Init+0x2a8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d869      	bhi.n	800228a <HAL_GPIO_Init+0x12e>
 80021b6:	4a94      	ldr	r2, [pc, #592]	; (8002408 <HAL_GPIO_Init+0x2ac>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d04c      	beq.n	8002256 <HAL_GPIO_Init+0xfa>
 80021bc:	4a92      	ldr	r2, [pc, #584]	; (8002408 <HAL_GPIO_Init+0x2ac>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d863      	bhi.n	800228a <HAL_GPIO_Init+0x12e>
 80021c2:	4a92      	ldr	r2, [pc, #584]	; (800240c <HAL_GPIO_Init+0x2b0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d046      	beq.n	8002256 <HAL_GPIO_Init+0xfa>
 80021c8:	4a90      	ldr	r2, [pc, #576]	; (800240c <HAL_GPIO_Init+0x2b0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d85d      	bhi.n	800228a <HAL_GPIO_Init+0x12e>
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d82a      	bhi.n	8002228 <HAL_GPIO_Init+0xcc>
 80021d2:	2b12      	cmp	r3, #18
 80021d4:	d859      	bhi.n	800228a <HAL_GPIO_Init+0x12e>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <HAL_GPIO_Init+0x80>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	08002257 	.word	0x08002257
 80021e0:	08002231 	.word	0x08002231
 80021e4:	08002243 	.word	0x08002243
 80021e8:	08002285 	.word	0x08002285
 80021ec:	0800228b 	.word	0x0800228b
 80021f0:	0800228b 	.word	0x0800228b
 80021f4:	0800228b 	.word	0x0800228b
 80021f8:	0800228b 	.word	0x0800228b
 80021fc:	0800228b 	.word	0x0800228b
 8002200:	0800228b 	.word	0x0800228b
 8002204:	0800228b 	.word	0x0800228b
 8002208:	0800228b 	.word	0x0800228b
 800220c:	0800228b 	.word	0x0800228b
 8002210:	0800228b 	.word	0x0800228b
 8002214:	0800228b 	.word	0x0800228b
 8002218:	0800228b 	.word	0x0800228b
 800221c:	0800228b 	.word	0x0800228b
 8002220:	08002239 	.word	0x08002239
 8002224:	0800224d 	.word	0x0800224d
 8002228:	4a79      	ldr	r2, [pc, #484]	; (8002410 <HAL_GPIO_Init+0x2b4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800222e:	e02c      	b.n	800228a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e029      	b.n	800228c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	3304      	adds	r3, #4
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e024      	b.n	800228c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	3308      	adds	r3, #8
 8002248:	623b      	str	r3, [r7, #32]
          break;
 800224a:	e01f      	b.n	800228c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	330c      	adds	r3, #12
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e01a      	b.n	800228c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800225e:	2304      	movs	r3, #4
 8002260:	623b      	str	r3, [r7, #32]
          break;
 8002262:	e013      	b.n	800228c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800226c:	2308      	movs	r3, #8
 800226e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	611a      	str	r2, [r3, #16]
          break;
 8002276:	e009      	b.n	800228c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002278:	2308      	movs	r3, #8
 800227a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	615a      	str	r2, [r3, #20]
          break;
 8002282:	e003      	b.n	800228c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
          break;
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x130>
          break;
 800228a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2bff      	cmp	r3, #255	; 0xff
 8002290:	d801      	bhi.n	8002296 <HAL_GPIO_Init+0x13a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	e001      	b.n	800229a <HAL_GPIO_Init+0x13e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3304      	adds	r3, #4
 800229a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	d802      	bhi.n	80022a8 <HAL_GPIO_Init+0x14c>
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	e002      	b.n	80022ae <HAL_GPIO_Init+0x152>
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	3b08      	subs	r3, #8
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	210f      	movs	r1, #15
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	6a39      	ldr	r1, [r7, #32]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	431a      	orrs	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80b1 	beq.w	800243e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022dc:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <HAL_GPIO_Init+0x2b8>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a4c      	ldr	r2, [pc, #304]	; (8002414 <HAL_GPIO_Init+0x2b8>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <HAL_GPIO_Init+0x2b8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022f4:	4a48      	ldr	r2, [pc, #288]	; (8002418 <HAL_GPIO_Init+0x2bc>)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002300:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a40      	ldr	r2, [pc, #256]	; (800241c <HAL_GPIO_Init+0x2c0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_GPIO_Init+0x1ec>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3f      	ldr	r2, [pc, #252]	; (8002420 <HAL_GPIO_Init+0x2c4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00d      	beq.n	8002344 <HAL_GPIO_Init+0x1e8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a3e      	ldr	r2, [pc, #248]	; (8002424 <HAL_GPIO_Init+0x2c8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <HAL_GPIO_Init+0x1e4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a3d      	ldr	r2, [pc, #244]	; (8002428 <HAL_GPIO_Init+0x2cc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_GPIO_Init+0x1e0>
 8002338:	2303      	movs	r3, #3
 800233a:	e006      	b.n	800234a <HAL_GPIO_Init+0x1ee>
 800233c:	2304      	movs	r3, #4
 800233e:	e004      	b.n	800234a <HAL_GPIO_Init+0x1ee>
 8002340:	2302      	movs	r3, #2
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0x1ee>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_GPIO_Init+0x1ee>
 8002348:	2300      	movs	r3, #0
 800234a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234c:	f002 0203 	and.w	r2, r2, #3
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	4093      	lsls	r3, r2
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800235a:	492f      	ldr	r1, [pc, #188]	; (8002418 <HAL_GPIO_Init+0x2bc>)
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002374:	4b2d      	ldr	r3, [pc, #180]	; (800242c <HAL_GPIO_Init+0x2d0>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	492c      	ldr	r1, [pc, #176]	; (800242c <HAL_GPIO_Init+0x2d0>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_GPIO_Init+0x2d0>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	43db      	mvns	r3, r3
 800238a:	4928      	ldr	r1, [pc, #160]	; (800242c <HAL_GPIO_Init+0x2d0>)
 800238c:	4013      	ands	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_GPIO_Init+0x2d0>)
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4922      	ldr	r1, [pc, #136]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	491e      	ldr	r1, [pc, #120]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4918      	ldr	r1, [pc, #96]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	4914      	ldr	r1, [pc, #80]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d021      	beq.n	8002430 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	490e      	ldr	r1, [pc, #56]	; (800242c <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
 80023f8:	e021      	b.n	800243e <HAL_GPIO_Init+0x2e2>
 80023fa:	bf00      	nop
 80023fc:	10320000 	.word	0x10320000
 8002400:	10310000 	.word	0x10310000
 8002404:	10220000 	.word	0x10220000
 8002408:	10210000 	.word	0x10210000
 800240c:	10120000 	.word	0x10120000
 8002410:	10110000 	.word	0x10110000
 8002414:	40021000 	.word	0x40021000
 8002418:	40010000 	.word	0x40010000
 800241c:	40010800 	.word	0x40010800
 8002420:	40010c00 	.word	0x40010c00
 8002424:	40011000 	.word	0x40011000
 8002428:	40011400 	.word	0x40011400
 800242c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_GPIO_Init+0x304>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	43db      	mvns	r3, r3
 8002438:	4909      	ldr	r1, [pc, #36]	; (8002460 <HAL_GPIO_Init+0x304>)
 800243a:	4013      	ands	r3, r2
 800243c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	3301      	adds	r3, #1
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	f47f ae8e 	bne.w	8002170 <HAL_GPIO_Init+0x14>
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	372c      	adds	r7, #44	; 0x2c
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40010400 	.word	0x40010400

08002464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e001      	b.n	8002486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]
 800249e:	4613      	mov	r3, r2
 80024a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024a2:	787b      	ldrb	r3, [r7, #1]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024ae:	e003      	b.n	80024b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	041a      	lsls	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	611a      	str	r2, [r3, #16]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b085      	sub	sp, #20
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	041a      	lsls	r2, r3, #16
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43d9      	mvns	r1, r3
 80024e0:	887b      	ldrh	r3, [r7, #2]
 80024e2:	400b      	ands	r3, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e272      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002514:	4b92      	ldr	r3, [pc, #584]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b04      	cmp	r3, #4
 800251e:	d00c      	beq.n	800253a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002520:	4b8f      	ldr	r3, [pc, #572]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d112      	bne.n	8002552 <HAL_RCC_OscConfig+0x5e>
 800252c:	4b8c      	ldr	r3, [pc, #560]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d10b      	bne.n	8002552 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253a:	4b89      	ldr	r3, [pc, #548]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d06c      	beq.n	8002620 <HAL_RCC_OscConfig+0x12c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d168      	bne.n	8002620 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e24c      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x76>
 800255c:	4b80      	ldr	r3, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7f      	ldr	r2, [pc, #508]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e02e      	b.n	80025c8 <HAL_RCC_OscConfig+0xd4>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x98>
 8002572:	4b7b      	ldr	r3, [pc, #492]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a7a      	ldr	r2, [pc, #488]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b78      	ldr	r3, [pc, #480]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a77      	ldr	r2, [pc, #476]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e01d      	b.n	80025c8 <HAL_RCC_OscConfig+0xd4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0xbc>
 8002596:	4b72      	ldr	r3, [pc, #456]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a71      	ldr	r2, [pc, #452]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b6f      	ldr	r3, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6e      	ldr	r2, [pc, #440]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0xd4>
 80025b0:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6a      	ldr	r2, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a67      	ldr	r2, [pc, #412]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fbfc 	bl	8001dcc <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff fbf8 	bl	8001dcc <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e200      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0xe4>
 80025f6:	e014      	b.n	8002622 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff fbe8 	bl	8001dcc <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff fbe4 	bl	8001dcc <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1ec      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x10c>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d063      	beq.n	80026f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262e:	4b4c      	ldr	r3, [pc, #304]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800263a:	4b49      	ldr	r3, [pc, #292]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b08      	cmp	r3, #8
 8002644:	d11c      	bne.n	8002680 <HAL_RCC_OscConfig+0x18c>
 8002646:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d116      	bne.n	8002680 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	4b43      	ldr	r3, [pc, #268]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x176>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1c0      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4939      	ldr	r1, [pc, #228]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	e03a      	b.n	80026f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002688:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7ff fb9d 	bl	8001dcc <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002696:	f7ff fb99 	bl	8001dcc <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e1a1      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b4:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4927      	ldr	r1, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
 80026c8:	e015      	b.n	80026f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fb7c 	bl	8001dcc <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d8:	f7ff fb78 	bl	8001dcc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e180      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03a      	beq.n	8002778 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d019      	beq.n	800273e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_RCC_OscConfig+0x274>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7ff fb5c 	bl	8001dcc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002718:	f7ff fb58 	bl	8001dcc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e160      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_RCC_OscConfig+0x26c>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002736:	2001      	movs	r0, #1
 8002738:	f000 fad8 	bl	8002cec <RCC_Delay>
 800273c:	e01c      	b.n	8002778 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_RCC_OscConfig+0x274>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7ff fb42 	bl	8001dcc <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274a:	e00f      	b.n	800276c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff fb3e 	bl	8001dcc <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d908      	bls.n	800276c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e146      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	42420000 	.word	0x42420000
 8002768:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e9      	bne.n	800274c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a6 	beq.w	80028d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b8b      	ldr	r3, [pc, #556]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10d      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b88      	ldr	r3, [pc, #544]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a87      	ldr	r2, [pc, #540]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]
 80027a2:	4b85      	ldr	r3, [pc, #532]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b82      	ldr	r3, [pc, #520]	; (80029bc <HAL_RCC_OscConfig+0x4c8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027be:	4b7f      	ldr	r3, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x4c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a7e      	ldr	r2, [pc, #504]	; (80029bc <HAL_RCC_OscConfig+0x4c8>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7ff faff 	bl	8001dcc <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7ff fafb 	bl	8001dcc <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	; 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e103      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	4b75      	ldr	r3, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x4c8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x312>
 80027f8:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4a6e      	ldr	r2, [pc, #440]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6213      	str	r3, [r2, #32]
 8002804:	e02d      	b.n	8002862 <HAL_RCC_OscConfig+0x36e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x334>
 800280e:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a69      	ldr	r2, [pc, #420]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a66      	ldr	r2, [pc, #408]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	6213      	str	r3, [r2, #32]
 8002826:	e01c      	b.n	8002862 <HAL_RCC_OscConfig+0x36e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b05      	cmp	r3, #5
 800282e:	d10c      	bne.n	800284a <HAL_RCC_OscConfig+0x356>
 8002830:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a60      	ldr	r2, [pc, #384]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4a5d      	ldr	r2, [pc, #372]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6213      	str	r3, [r2, #32]
 8002848:	e00b      	b.n	8002862 <HAL_RCC_OscConfig+0x36e>
 800284a:	4b5b      	ldr	r3, [pc, #364]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a5a      	ldr	r2, [pc, #360]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6213      	str	r3, [r2, #32]
 8002856:	4b58      	ldr	r3, [pc, #352]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a57      	ldr	r2, [pc, #348]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	f023 0304 	bic.w	r3, r3, #4
 8002860:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d015      	beq.n	8002896 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7ff faaf 	bl	8001dcc <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7ff faab 	bl	8001dcc <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0b1      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ee      	beq.n	8002872 <HAL_RCC_OscConfig+0x37e>
 8002894:	e014      	b.n	80028c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002896:	f7ff fa99 	bl	8001dcc <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7ff fa95 	bl	8001dcc <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e09b      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b4:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ee      	bne.n	800289e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4a3b      	ldr	r2, [pc, #236]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8087 	beq.w	80029ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d061      	beq.n	80029ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d146      	bne.n	800297e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f0:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <HAL_RCC_OscConfig+0x4cc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7ff fa69 	bl	8001dcc <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7ff fa65 	bl	8001dcc <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e06d      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d108      	bne.n	8002938 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	4921      	ldr	r1, [pc, #132]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a19      	ldr	r1, [r3, #32]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	430b      	orrs	r3, r1
 800294a:	491b      	ldr	r1, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x4cc>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7ff fa39 	bl	8001dcc <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7ff fa35 	bl	8001dcc <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e03d      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x46a>
 800297c:	e035      	b.n	80029ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_RCC_OscConfig+0x4cc>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7ff fa22 	bl	8001dcc <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298c:	f7ff fa1e 	bl	8001dcc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e026      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x498>
 80029aa:	e01e      	b.n	80029ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e019      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40007000 	.word	0x40007000
 80029c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_OscConfig+0x500>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000

080029f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0d0      	b.n	8002bae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d910      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b67      	ldr	r3, [pc, #412]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 0207 	bic.w	r2, r3, #7
 8002a22:	4965      	ldr	r1, [pc, #404]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b8      	b.n	8002bae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	494d      	ldr	r1, [pc, #308]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d040      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e07f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e073      	b.n	8002bae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06b      	b.n	8002bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4936      	ldr	r1, [pc, #216]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae8:	f7ff f970 	bl	8001dcc <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7ff f96c 	bl	8001dcc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e053      	b.n	8002bae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d210      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0207 	bic.w	r2, r3, #7
 8002b2e:	4922      	ldr	r1, [pc, #136]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e032      	b.n	8002bae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4916      	ldr	r1, [pc, #88]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	490e      	ldr	r1, [pc, #56]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b86:	f000 f821 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	5ccb      	ldrb	r3, [r1, r3]
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f8ce 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	080046e0 	.word	0x080046e0
 8002bc4:	2000006c 	.word	0x2000006c
 8002bc8:	20000070 	.word	0x20000070

08002bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b490      	push	{r4, r7}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bd2:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bd4:	1d3c      	adds	r4, r7, #4
 8002bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bdc:	f240 2301 	movw	r3, #513	; 0x201
 8002be0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bf6:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x40>
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x46>
 8002c0a:	e02b      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c0e:	623b      	str	r3, [r7, #32]
      break;
 8002c10:	e02b      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	0c9b      	lsrs	r3, r3, #18
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3328      	adds	r3, #40	; 0x28
 8002c1c:	443b      	add	r3, r7
 8002c1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d012      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	0c5b      	lsrs	r3, r3, #17
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	3328      	adds	r3, #40	; 0x28
 8002c3a:	443b      	add	r3, r7
 8002c3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c46:	fb03 f202 	mul.w	r2, r3, r2
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	e004      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	623b      	str	r3, [r7, #32]
      break;
 8002c62:	e002      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c66:	623b      	str	r3, [r7, #32]
      break;
 8002c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3728      	adds	r7, #40	; 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc90      	pop	{r4, r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	080046d0 	.word	0x080046d0
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	007a1200 	.word	0x007a1200
 8002c84:	003d0900 	.word	0x003d0900

08002c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b02      	ldr	r3, [pc, #8]	; (8002c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	2000006c 	.word	0x2000006c

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca0:	f7ff fff2 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	080046f0 	.word	0x080046f0

08002cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc8:	f7ff ffde 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0adb      	lsrs	r3, r3, #11
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4903      	ldr	r1, [pc, #12]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	080046f0 	.word	0x080046f0

08002cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <RCC_Delay+0x34>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <RCC_Delay+0x38>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0a5b      	lsrs	r3, r3, #9
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d08:	bf00      	nop
  }
  while (Delay --);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	60fa      	str	r2, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <RCC_Delay+0x1c>
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	2000006c 	.word	0x2000006c
 8002d24:	10624dd3 	.word	0x10624dd3

08002d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e041      	b.n	8002dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe fc78 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f000 fc28 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d001      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e03a      	b.n	8002e56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_TIM_Base_Start_IT+0x98>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00e      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x58>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0a:	d009      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x58>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x58>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d111      	bne.n	8002e44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d010      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e42:	e007      	b.n	8002e54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800

08002e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e041      	b.n	8002f02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f839 	bl	8002f0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fb86 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_TIM_PWM_Start+0x24>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e022      	b.n	8002f86 <HAL_TIM_PWM_Start+0x6a>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d109      	bne.n	8002f5a <HAL_TIM_PWM_Start+0x3e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e015      	b.n	8002f86 <HAL_TIM_PWM_Start+0x6a>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start+0x58>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e008      	b.n	8002f86 <HAL_TIM_PWM_Start+0x6a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e05e      	b.n	800304c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d104      	bne.n	8002f9e <HAL_TIM_PWM_Start+0x82>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f9c:	e013      	b.n	8002fc6 <HAL_TIM_PWM_Start+0xaa>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d104      	bne.n	8002fae <HAL_TIM_PWM_Start+0x92>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fac:	e00b      	b.n	8002fc6 <HAL_TIM_PWM_Start+0xaa>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d104      	bne.n	8002fbe <HAL_TIM_PWM_Start+0xa2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fbc:	e003      	b.n	8002fc6 <HAL_TIM_PWM_Start+0xaa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fd74 	bl	8003abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <HAL_TIM_PWM_Start+0x138>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d107      	bne.n	8002fee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a18      	ldr	r2, [pc, #96]	; (8003054 <HAL_TIM_PWM_Start+0x138>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_TIM_PWM_Start+0xfa>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003000:	d009      	beq.n	8003016 <HAL_TIM_PWM_Start+0xfa>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a14      	ldr	r2, [pc, #80]	; (8003058 <HAL_TIM_PWM_Start+0x13c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_TIM_PWM_Start+0xfa>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_TIM_PWM_Start+0x140>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d111      	bne.n	800303a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d010      	beq.n	800304a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	e007      	b.n	800304a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800

08003060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0202 	mvn.w	r2, #2
 800308c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa6f 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa62 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fa71 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0204 	mvn.w	r2, #4
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa45 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa38 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fa47 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b08      	cmp	r3, #8
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0208 	mvn.w	r2, #8
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa1b 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fa0e 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fa1d 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b10      	cmp	r3, #16
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b10      	cmp	r3, #16
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0210 	mvn.w	r2, #16
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2208      	movs	r2, #8
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9f1 	bl	8003586 <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f9e4 	bl	8003574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f9f3 	bl	8003598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10e      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0201 	mvn.w	r2, #1
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fd52 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d10e      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fce1 	bl	8003bd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d10e      	bne.n	800323c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d107      	bne.n	800323c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f9b7 	bl	80035aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b20      	cmp	r3, #32
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b20      	cmp	r3, #32
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0220 	mvn.w	r2, #32
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fcac 	bl	8003bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003286:	2302      	movs	r3, #2
 8003288:	e0ac      	b.n	80033e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	f200 809f 	bhi.w	80033d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	080033d9 	.word	0x080033d9
 80032a8:	080033d9 	.word	0x080033d9
 80032ac:	080033d9 	.word	0x080033d9
 80032b0:	08003315 	.word	0x08003315
 80032b4:	080033d9 	.word	0x080033d9
 80032b8:	080033d9 	.word	0x080033d9
 80032bc:	080033d9 	.word	0x080033d9
 80032c0:	08003357 	.word	0x08003357
 80032c4:	080033d9 	.word	0x080033d9
 80032c8:	080033d9 	.word	0x080033d9
 80032cc:	080033d9 	.word	0x080033d9
 80032d0:	08003397 	.word	0x08003397
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f9d0 	bl	8003680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0208 	orr.w	r2, r2, #8
 80032ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0204 	bic.w	r2, r2, #4
 80032fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6999      	ldr	r1, [r3, #24]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	619a      	str	r2, [r3, #24]
      break;
 8003312:	e062      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fa16 	bl	800374c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6999      	ldr	r1, [r3, #24]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	021a      	lsls	r2, r3, #8
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	619a      	str	r2, [r3, #24]
      break;
 8003354:	e041      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fa5f 	bl	8003820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0208 	orr.w	r2, r2, #8
 8003370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0204 	bic.w	r2, r2, #4
 8003380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69d9      	ldr	r1, [r3, #28]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	61da      	str	r2, [r3, #28]
      break;
 8003394:	e021      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	4618      	mov	r0, r3
 800339e:	f000 faa9 	bl	80038f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69d9      	ldr	r1, [r3, #28]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	021a      	lsls	r2, r3, #8
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	61da      	str	r2, [r3, #28]
      break;
 80033d6:	e000      	b.n	80033da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80033d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_TIM_ConfigClockSource+0x18>
 8003400:	2302      	movs	r3, #2
 8003402:	e0b3      	b.n	800356c <HAL_TIM_ConfigClockSource+0x180>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800342a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343c:	d03e      	beq.n	80034bc <HAL_TIM_ConfigClockSource+0xd0>
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	f200 8087 	bhi.w	8003554 <HAL_TIM_ConfigClockSource+0x168>
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	f000 8085 	beq.w	8003558 <HAL_TIM_ConfigClockSource+0x16c>
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	d87f      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x168>
 8003454:	2b70      	cmp	r3, #112	; 0x70
 8003456:	d01a      	beq.n	800348e <HAL_TIM_ConfigClockSource+0xa2>
 8003458:	2b70      	cmp	r3, #112	; 0x70
 800345a:	d87b      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x168>
 800345c:	2b60      	cmp	r3, #96	; 0x60
 800345e:	d050      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x116>
 8003460:	2b60      	cmp	r3, #96	; 0x60
 8003462:	d877      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x168>
 8003464:	2b50      	cmp	r3, #80	; 0x50
 8003466:	d03c      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0xf6>
 8003468:	2b50      	cmp	r3, #80	; 0x50
 800346a:	d873      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x168>
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d058      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x136>
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d86f      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x168>
 8003474:	2b30      	cmp	r3, #48	; 0x30
 8003476:	d064      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x156>
 8003478:	2b30      	cmp	r3, #48	; 0x30
 800347a:	d86b      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x168>
 800347c:	2b20      	cmp	r3, #32
 800347e:	d060      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x156>
 8003480:	2b20      	cmp	r3, #32
 8003482:	d867      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x168>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05c      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x156>
 8003488:	2b10      	cmp	r3, #16
 800348a:	d05a      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800348c:	e062      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f000 faee 	bl	8003a7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	609a      	str	r2, [r3, #8]
      break;
 80034ba:	e04e      	b.n	800355a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6899      	ldr	r1, [r3, #8]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f000 fad7 	bl	8003a7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034de:	609a      	str	r2, [r3, #8]
      break;
 80034e0:	e03b      	b.n	800355a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f000 fa4e 	bl	8003990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2150      	movs	r1, #80	; 0x50
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 faa5 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003500:	e02b      	b.n	800355a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	461a      	mov	r2, r3
 8003510:	f000 fa6c 	bl	80039ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2160      	movs	r1, #96	; 0x60
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa95 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003520:	e01b      	b.n	800355a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	461a      	mov	r2, r3
 8003530:	f000 fa2e 	bl	8003990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2140      	movs	r1, #64	; 0x40
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fa85 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003540:	e00b      	b.n	800355a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f000 fa7c 	bl	8003a4a <TIM_ITRx_SetConfig>
        break;
 8003552:	e002      	b.n	800355a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003554:	bf00      	nop
 8003556:	e000      	b.n	800355a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003558:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a29      	ldr	r2, [pc, #164]	; (8003674 <TIM_Base_SetConfig+0xb8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <TIM_Base_SetConfig+0x30>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0x30>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a26      	ldr	r2, [pc, #152]	; (8003678 <TIM_Base_SetConfig+0xbc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0x30>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a25      	ldr	r2, [pc, #148]	; (800367c <TIM_Base_SetConfig+0xc0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d108      	bne.n	80035fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <TIM_Base_SetConfig+0xb8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00b      	beq.n	800361e <TIM_Base_SetConfig+0x62>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360c:	d007      	beq.n	800361e <TIM_Base_SetConfig+0x62>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <TIM_Base_SetConfig+0xbc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_Base_SetConfig+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a18      	ldr	r2, [pc, #96]	; (800367c <TIM_Base_SetConfig+0xc0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <TIM_Base_SetConfig+0xb8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d103      	bne.n	8003664 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	615a      	str	r2, [r3, #20]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	40012c00 	.word	0x40012c00
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800

08003680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f023 0201 	bic.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 0302 	bic.w	r3, r3, #2
 80036c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <TIM_OC1_SetConfig+0xc8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d10c      	bne.n	80036f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0308 	bic.w	r3, r3, #8
 80036e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a13      	ldr	r2, [pc, #76]	; (8003748 <TIM_OC1_SetConfig+0xc8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d111      	bne.n	8003722 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800370c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40012c00 	.word	0x40012c00

0800374c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f023 0210 	bic.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0320 	bic.w	r3, r3, #32
 8003796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a1d      	ldr	r2, [pc, #116]	; (800381c <TIM_OC2_SetConfig+0xd0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d10d      	bne.n	80037c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a14      	ldr	r2, [pc, #80]	; (800381c <TIM_OC2_SetConfig+0xd0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d113      	bne.n	80037f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00

08003820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <TIM_OC3_SetConfig+0xd0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d10d      	bne.n	800389a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <TIM_OC3_SetConfig+0xd0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d113      	bne.n	80038ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40012c00 	.word	0x40012c00

080038f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800393e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	031b      	lsls	r3, r3, #12
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a0f      	ldr	r2, [pc, #60]	; (800398c <TIM_OC4_SetConfig+0x98>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d109      	bne.n	8003968 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800395a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	019b      	lsls	r3, r3, #6
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	40012c00 	.word	0x40012c00

08003990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 030a 	bic.w	r3, r3, #10
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f023 0210 	bic.w	r2, r3, #16
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	031b      	lsls	r3, r3, #12
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f043 0307 	orr.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	609a      	str	r2, [r3, #8]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	021a      	lsls	r2, r3, #8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2201      	movs	r2, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1a      	ldr	r2, [r3, #32]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	fa01 f303 	lsl.w	r3, r1, r3
 8003af4:	431a      	orrs	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e046      	b.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d009      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10c      	bne.n	8003b98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800

08003bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e03f      	b.n	8003c76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fd84 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fc25 	bl	8004478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08a      	sub	sp, #40	; 0x28
 8003c82:	af02      	add	r7, sp, #8
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d17c      	bne.n	8003d98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_UART_Transmit+0x2c>
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e075      	b.n	8003d9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_UART_Transmit+0x3e>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e06e      	b.n	8003d9a <HAL_UART_Transmit+0x11c>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2221      	movs	r2, #33	; 0x21
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cd2:	f7fe f87b 	bl	8001dcc <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	d108      	bne.n	8003d00 <HAL_UART_Transmit+0x82>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e003      	b.n	8003d08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d10:	e02a      	b.n	8003d68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fa11 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e036      	b.n	8003d9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	3302      	adds	r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e007      	b.n	8003d5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	3301      	adds	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1cf      	bne.n	8003d12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2140      	movs	r1, #64	; 0x40
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f9e1 	bl	8004144 <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e006      	b.n	8003d9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	; 0x28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_UART_IRQHandler+0x52>
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa99 	bl	8004326 <UART_Receive_IT>
      return;
 8003df4:	e17b      	b.n	80040ee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80b1 	beq.w	8003f60 <HAL_UART_IRQHandler+0x1bc>
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_UART_IRQHandler+0x70>
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a6 	beq.w	8003f60 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_UART_IRQHandler+0x90>
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_UART_IRQHandler+0xb0>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0202 	orr.w	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_UART_IRQHandler+0xd0>
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00f      	beq.n	8003e9e <HAL_UART_IRQHandler+0xfa>
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_UART_IRQHandler+0xee>
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f043 0208 	orr.w	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 811e 	beq.w	80040e4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x11e>
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fa32 	bl	8004326 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <HAL_UART_IRQHandler+0x146>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d031      	beq.n	8003f4e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f974 	bl	80041d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d023      	beq.n	8003f46 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d013      	beq.n	8003f3e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	4a76      	ldr	r2, [pc, #472]	; (80040f4 <HAL_UART_IRQHandler+0x350>)
 8003f1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe f8a4 	bl	8002070 <HAL_DMA_Abort_IT>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	e00e      	b.n	8003f5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8ec 	bl	800411c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	e00a      	b.n	8003f5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8e8 	bl	800411c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	e006      	b.n	8003f5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f8e4 	bl	800411c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f5a:	e0c3      	b.n	80040e4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	bf00      	nop
    return;
 8003f5e:	e0c1      	b.n	80040e4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	f040 80a1 	bne.w	80040ac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 809b 	beq.w	80040ac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8095 	beq.w	80040ac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04e      	beq.n	8004044 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003fb0:	8a3b      	ldrh	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8098 	beq.w	80040e8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fbc:	8a3a      	ldrh	r2, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	f080 8092 	bcs.w	80040e8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8a3a      	ldrh	r2, [r7, #16]
 8003fc8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d02b      	beq.n	800402c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004002:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0210 	bic.w	r2, r2, #16
 8004020:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd ffe7 	bl	8001ffa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004034:	b29b      	uxth	r3, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	b29b      	uxth	r3, r3
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f876 	bl	800412e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004042:	e051      	b.n	80040e8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800404c:	b29b      	uxth	r3, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d047      	beq.n	80040ec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800405c:	8a7b      	ldrh	r3, [r7, #18]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d044      	beq.n	80040ec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004070:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0210 	bic.w	r2, r2, #16
 800409e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040a0:	8a7b      	ldrh	r3, [r7, #18]
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f842 	bl	800412e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040aa:	e01f      	b.n	80040ec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_UART_IRQHandler+0x324>
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f8c9 	bl	8004258 <UART_Transmit_IT>
    return;
 80040c6:	e012      	b.n	80040ee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <HAL_UART_IRQHandler+0x34a>
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f90a 	bl	80042f6 <UART_EndTransmit_IT>
    return;
 80040e2:	e004      	b.n	80040ee <HAL_UART_IRQHandler+0x34a>
    return;
 80040e4:	bf00      	nop
 80040e6:	e002      	b.n	80040ee <HAL_UART_IRQHandler+0x34a>
      return;
 80040e8:	bf00      	nop
 80040ea:	e000      	b.n	80040ee <HAL_UART_IRQHandler+0x34a>
      return;
 80040ec:	bf00      	nop
  }
}
 80040ee:	3728      	adds	r7, #40	; 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	08004231 	.word	0x08004231

080040f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004154:	e02c      	b.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d028      	beq.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x30>
 8004164:	f7fd fe32 	bl	8001dcc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d21d      	bcs.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004182:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e00f      	b.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4013      	ands	r3, r2
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	429a      	cmp	r2, r3
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d0c3      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0210 	bic.w	r2, r2, #16
 8004216:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff ff66 	bl	800411c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b21      	cmp	r3, #33	; 0x21
 800426a:	d13e      	bne.n	80042ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d114      	bne.n	80042a0 <UART_Transmit_IT+0x48>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d110      	bne.n	80042a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004292:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	1c9a      	adds	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	621a      	str	r2, [r3, #32]
 800429e:	e008      	b.n	80042b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	1c59      	adds	r1, r3, #1
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6211      	str	r1, [r2, #32]
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4619      	mov	r1, r3
 80042c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff feee 	bl	80040f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b22      	cmp	r3, #34	; 0x22
 8004338:	f040 8099 	bne.w	800446e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d117      	bne.n	8004376 <UART_Receive_IT+0x50>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d113      	bne.n	8004376 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004364:	b29a      	uxth	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	1c9a      	adds	r2, r3, #2
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
 8004374:	e026      	b.n	80043c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004388:	d007      	beq.n	800439a <UART_Receive_IT+0x74>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <UART_Receive_IT+0x82>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e008      	b.n	80043ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4619      	mov	r1, r3
 80043d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d148      	bne.n	800446a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0220 	bic.w	r2, r2, #32
 80043e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	2b01      	cmp	r3, #1
 8004416:	d123      	bne.n	8004460 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0210 	bic.w	r2, r2, #16
 800442c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b10      	cmp	r3, #16
 800443a:	d10a      	bne.n	8004452 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fe68 	bl	800412e <HAL_UARTEx_RxEventCallback>
 800445e:	e002      	b.n	8004466 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fe52 	bl	800410a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e002      	b.n	8004470 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044b2:	f023 030c 	bic.w	r3, r3, #12
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	430b      	orrs	r3, r1
 80044be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <UART_SetConfig+0x114>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d103      	bne.n	80044e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044e0:	f7fe fbf0 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	e002      	b.n	80044ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7fe fbd8 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 80044ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	4a22      	ldr	r2, [pc, #136]	; (8004590 <UART_SetConfig+0x118>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	0119      	lsls	r1, r3, #4
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009a      	lsls	r2, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fbb2 f2f3 	udiv	r2, r2, r3
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <UART_SetConfig+0x118>)
 8004526:	fba3 0302 	umull	r0, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2064      	movs	r0, #100	; 0x64
 800452e:	fb00 f303 	mul.w	r3, r0, r3
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <UART_SetConfig+0x118>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004544:	4419      	add	r1, r3
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	009a      	lsls	r2, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	fbb2 f2f3 	udiv	r2, r2, r3
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <UART_SetConfig+0x118>)
 800455e:	fba3 0302 	umull	r0, r3, r3, r2
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2064      	movs	r0, #100	; 0x64
 8004566:	fb00 f303 	mul.w	r3, r0, r3
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	3332      	adds	r3, #50	; 0x32
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <UART_SetConfig+0x118>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	440a      	add	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40013800 	.word	0x40013800
 8004590:	51eb851f 	.word	0x51eb851f

08004594 <__itoa>:
 8004594:	1e93      	subs	r3, r2, #2
 8004596:	2b22      	cmp	r3, #34	; 0x22
 8004598:	b510      	push	{r4, lr}
 800459a:	460c      	mov	r4, r1
 800459c:	d904      	bls.n	80045a8 <__itoa+0x14>
 800459e:	2300      	movs	r3, #0
 80045a0:	461c      	mov	r4, r3
 80045a2:	700b      	strb	r3, [r1, #0]
 80045a4:	4620      	mov	r0, r4
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	2a0a      	cmp	r2, #10
 80045aa:	d109      	bne.n	80045c0 <__itoa+0x2c>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	da07      	bge.n	80045c0 <__itoa+0x2c>
 80045b0:	232d      	movs	r3, #45	; 0x2d
 80045b2:	700b      	strb	r3, [r1, #0]
 80045b4:	2101      	movs	r1, #1
 80045b6:	4240      	negs	r0, r0
 80045b8:	4421      	add	r1, r4
 80045ba:	f000 f805 	bl	80045c8 <__utoa>
 80045be:	e7f1      	b.n	80045a4 <__itoa+0x10>
 80045c0:	2100      	movs	r1, #0
 80045c2:	e7f9      	b.n	80045b8 <__itoa+0x24>

080045c4 <itoa>:
 80045c4:	f7ff bfe6 	b.w	8004594 <__itoa>

080045c8 <__utoa>:
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	b08b      	sub	sp, #44	; 0x2c
 80045cc:	4605      	mov	r5, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	466e      	mov	r6, sp
 80045d2:	4c1d      	ldr	r4, [pc, #116]	; (8004648 <__utoa+0x80>)
 80045d4:	f104 0c20 	add.w	ip, r4, #32
 80045d8:	4637      	mov	r7, r6
 80045da:	6820      	ldr	r0, [r4, #0]
 80045dc:	6861      	ldr	r1, [r4, #4]
 80045de:	3408      	adds	r4, #8
 80045e0:	c703      	stmia	r7!, {r0, r1}
 80045e2:	4564      	cmp	r4, ip
 80045e4:	463e      	mov	r6, r7
 80045e6:	d1f7      	bne.n	80045d8 <__utoa+0x10>
 80045e8:	7921      	ldrb	r1, [r4, #4]
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	7139      	strb	r1, [r7, #4]
 80045ee:	1e91      	subs	r1, r2, #2
 80045f0:	2922      	cmp	r1, #34	; 0x22
 80045f2:	6038      	str	r0, [r7, #0]
 80045f4:	f04f 0100 	mov.w	r1, #0
 80045f8:	d904      	bls.n	8004604 <__utoa+0x3c>
 80045fa:	7019      	strb	r1, [r3, #0]
 80045fc:	460b      	mov	r3, r1
 80045fe:	4618      	mov	r0, r3
 8004600:	b00b      	add	sp, #44	; 0x2c
 8004602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004604:	1e58      	subs	r0, r3, #1
 8004606:	4684      	mov	ip, r0
 8004608:	fbb5 f7f2 	udiv	r7, r5, r2
 800460c:	fb02 5617 	mls	r6, r2, r7, r5
 8004610:	3628      	adds	r6, #40	; 0x28
 8004612:	446e      	add	r6, sp
 8004614:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004618:	460c      	mov	r4, r1
 800461a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800461e:	462e      	mov	r6, r5
 8004620:	42b2      	cmp	r2, r6
 8004622:	463d      	mov	r5, r7
 8004624:	f101 0101 	add.w	r1, r1, #1
 8004628:	d9ee      	bls.n	8004608 <__utoa+0x40>
 800462a:	2200      	movs	r2, #0
 800462c:	545a      	strb	r2, [r3, r1]
 800462e:	1919      	adds	r1, r3, r4
 8004630:	1aa5      	subs	r5, r4, r2
 8004632:	42aa      	cmp	r2, r5
 8004634:	dae3      	bge.n	80045fe <__utoa+0x36>
 8004636:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800463a:	780e      	ldrb	r6, [r1, #0]
 800463c:	3201      	adds	r2, #1
 800463e:	7006      	strb	r6, [r0, #0]
 8004640:	f801 5901 	strb.w	r5, [r1], #-1
 8004644:	e7f4      	b.n	8004630 <__utoa+0x68>
 8004646:	bf00      	nop
 8004648:	080046f8 	.word	0x080046f8

0800464c <memset>:
 800464c:	4603      	mov	r3, r0
 800464e:	4402      	add	r2, r0
 8004650:	4293      	cmp	r3, r2
 8004652:	d100      	bne.n	8004656 <memset+0xa>
 8004654:	4770      	bx	lr
 8004656:	f803 1b01 	strb.w	r1, [r3], #1
 800465a:	e7f9      	b.n	8004650 <memset+0x4>

0800465c <__libc_init_array>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	2600      	movs	r6, #0
 8004660:	4d0c      	ldr	r5, [pc, #48]	; (8004694 <__libc_init_array+0x38>)
 8004662:	4c0d      	ldr	r4, [pc, #52]	; (8004698 <__libc_init_array+0x3c>)
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	42a6      	cmp	r6, r4
 800466a:	d109      	bne.n	8004680 <__libc_init_array+0x24>
 800466c:	f000 f81a 	bl	80046a4 <_init>
 8004670:	2600      	movs	r6, #0
 8004672:	4d0a      	ldr	r5, [pc, #40]	; (800469c <__libc_init_array+0x40>)
 8004674:	4c0a      	ldr	r4, [pc, #40]	; (80046a0 <__libc_init_array+0x44>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	42a6      	cmp	r6, r4
 800467c:	d105      	bne.n	800468a <__libc_init_array+0x2e>
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	f855 3b04 	ldr.w	r3, [r5], #4
 8004684:	4798      	blx	r3
 8004686:	3601      	adds	r6, #1
 8004688:	e7ee      	b.n	8004668 <__libc_init_array+0xc>
 800468a:	f855 3b04 	ldr.w	r3, [r5], #4
 800468e:	4798      	blx	r3
 8004690:	3601      	adds	r6, #1
 8004692:	e7f2      	b.n	800467a <__libc_init_array+0x1e>
 8004694:	08004720 	.word	0x08004720
 8004698:	08004720 	.word	0x08004720
 800469c:	08004720 	.word	0x08004720
 80046a0:	08004724 	.word	0x08004724

080046a4 <_init>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr

080046b0 <_fini>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr
